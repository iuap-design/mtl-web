(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('mini-store'), require('axios'), require('tinper-bee'), require('react-dom'), require('indexof'), require('ref-tree/lib/theme-red.less')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react', 'mini-store', 'axios', 'tinper-bee', 'react-dom', 'indexof', 'ref-tree/lib/theme-red.less'], factory) :
	(global = global || self, factory(global.RefMdd = {}, global.React, global.miniStore, global.axios, global.TinperBee, global.ReactDOM, global.indexof));
}(this, function (exports, React, miniStore, axios, tinperBee, ReactDOM, indexof) { 'use strict';

	var React__default = 'default' in React ? React['default'] : React;
	var miniStore__default = 'default' in miniStore ? miniStore['default'] : miniStore;
	axios = axios && axios.hasOwnProperty('default') ? axios['default'] : axios;
	var ReactDOM__default = 'default' in ReactDOM ? ReactDOM['default'] : ReactDOM;
	indexof = indexof && indexof.hasOwnProperty('default') ? indexof['default'] : indexof;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
	}

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var commonjsHelpers = /*#__PURE__*/Object.freeze({
		commonjsGlobal: commonjsGlobal,
		commonjsRequire: commonjsRequire,
		unwrapExports: unwrapExports,
		createCommonjsModule: createCommonjsModule,
		getCjsExportFromNamespace: getCjsExportFromNamespace
	});

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	  module.exports
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var regenerator = runtime_1;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    Promise.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new Promise(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	var asyncToGenerator = _asyncToGenerator;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var inheritsLoose = _inheritsLoose;

	function getMeta(url) {
	  return axios({
	    timeout: 8000,
	    method: 'get',
	    url: url,
	    params: {
	      r: Math.random()
	    }
	  });
	}

	var refValParse = function refValParse(value, valueField, displayField) {
	  var _ref;

	  if (!value) return _ref = {}, _ref[displayField] = '', _ref[valueField] = '', _ref;

	  try {
	    var valueMap = JSON.parse(value);

	    if (!valueMap.hasOwnProperty(displayField) || !valueMap.hasOwnProperty(valueField)) {
	      var _ref2;

	      return _ref2 = {}, _ref2[displayField] = '', _ref2[valueField] = '', _ref2;
	    } else {
	      return JSON.parse(value);
	    }
	  } catch (e) {
	    var _ref3;

	    return _ref3 = {}, _ref3[displayField] = '', _ref3[valueField] = '', _ref3;
	  }
	};
	/**
	 * 根据refEntity生成请求数据的参数
	 * @param {string} type 
	 * @param {object} refEntity 
	 */

	function getQueryParam(type, refEntity, viewApplication) {
	  var rsParam = {};
	  rsParam.dataType = type;
	  rsParam.refCode = refEntity.refType; // rsParam.key =  viewApplication.cCardKey;

	  rsParam.billnum = refEntity.cBillnum;
	  return rsParam;
	}

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized;

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.5' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document$1 = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document$1) && _isObject(document$1.createElement);
	var _domCreate = function (it) {
	  return is ? document$1.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && _has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? _ctx(out, _global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	var toString = {}.toString;

	var _cof = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return _iobject(_defined(it));
	};

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var _library = true;

	var _shared = createCommonjsModule(function (module) {
	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: _core.version,
	  mode: 'pure',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var shared = _shared('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	var arrayIndexOf = _arrayIncludes(false);
	var IE_PROTO = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (_has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var f$1 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$1
	};

	var f$2 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$2
	};

	// 7.1.13 ToObject(argument)

	var _toObject = function (it) {
	  return Object(_defined(it));
	};

	// 19.1.2.1 Object.assign(target, source, ...)





	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || _fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = _toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = _objectGops.f;
	  var isEnum = _objectPie.f;
	  while (aLen > index) {
	    var S = _iobject(arguments[index++]);
	    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;

	// 19.1.3.1 Object.assign(target, source)


	_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

	var assign = _core.Object.assign;

	var assign$1 = createCommonjsModule(function (module) {
	module.exports = { "default": assign, __esModule: true };
	});

	unwrapExports(assign$1);

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$3 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
		f: f$3
	};

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */


	var check = function (O, proto) {
	  _anObject(O);
	  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	var _setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

	// 19.1.3.19 Object.setPrototypeOf(O, proto)

	_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

	var setPrototypeOf = _core.Object.setPrototypeOf;

	var setPrototypeOf$1 = createCommonjsModule(function (module) {
	module.exports = { "default": setPrototypeOf, __esModule: true };
	});

	unwrapExports(setPrototypeOf$1);

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var document$2 = _global.document;
	var _html = document$2 && document$2.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$1 = _sharedKey('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	_export(_export.S, 'Object', { create: _objectCreate });

	var $Object = _core.Object;
	var create = function create(P, D) {
	  return $Object.create(P, D);
	};

	var create$1 = createCommonjsModule(function (module) {
	module.exports = { "default": create, __esModule: true };
	});

	unwrapExports(create$1);

	// most Object methods by ES6 should accept primitives



	var _objectSap = function (KEY, exec) {
	  var fn = (_core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
	};

	// 19.1.2.14 Object.keys(O)



	_objectSap('keys', function () {
	  return function keys(it) {
	    return _objectKeys(_toObject(it));
	  };
	});

	var keys = _core.Object.keys;

	var keys$1 = createCommonjsModule(function (module) {
	module.exports = { "default": keys, __esModule: true };
	});

	unwrapExports(keys$1);

	//

	var shallowequal = function shallowEqual(objA, objB, compare, compareContext) {
	  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	  if (ret !== void 0) {
	    return !!ret;
	  }

	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

	  // Test for A's keys different from B.
	  for (var idx = 0; idx < keysA.length; idx++) {
	    var key = keysA[idx];

	    if (!bHasOwnProperty(key)) {
	      return false;
	    }

	    var valueA = objA[key];
	    var valueB = objB[key];

	    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

	    if (ret === false || (ret === void 0 && valueA !== valueB)) {
	      return false;
	    }
	  }

	  return true;
	};



	var refcoreerror = /*#__PURE__*/Object.freeze({
		default: undefined
	});

	getCjsExportFromNamespace(refcoreerror);

	var RefCoreError_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var RefCoreError = function RefCoreError(props) {
	  var language = props.language,
	      show = props.show;

	  var nodata = "没有查询到数据";
	  switch (language) {
	    case "zh_CN":
	      nodata = '没有查询到数据';

	      break;
	    case "en_US":
	      nodata = 'No query to data';
	      break;
	    case "zh_TW":
	      nodata = '沒有査詢到數據';
	      break;
	    case "fr_FR":
	      nodata = 'Pas de données';
	      break;
	    case "de_DE":
	      nodata = 'Keine abfrage zu Daten';
	      break;
	    case "ja_JP":
	      nodata = 'データが検索されていません';
	      break;
	    default:
	      nodata = '没有查询到数据';
	  }
	  return _react2["default"].createElement(
	    'div',
	    { className: show ? 'ref-core-error' : 'ref-core-error-hide' },
	    nodata
	  );
	};
	exports["default"] = RefCoreError;
	module.exports = exports['default'];
	});

	unwrapExports(RefCoreError_1);

	var reactIs_production_min = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports,"__esModule",{value:!0});
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):
	60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;
	exports.Fragment=e;exports.Lazy=r;exports.Memo=q;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||t(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return t(a)===k};
	exports.isContextProvider=function(a){return t(a)===h};exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return t(a)===n};exports.isFragment=function(a){return t(a)===e};exports.isLazy=function(a){return t(a)===r};exports.isMemo=function(a){return t(a)===q};exports.isPortal=function(a){return t(a)===d};exports.isProfiler=function(a){return t(a)===g};exports.isStrictMode=function(a){return t(a)===f};
	exports.isSuspense=function(a){return t(a)===p};
	});

	unwrapExports(reactIs_production_min);
	var reactIs_production_min_1 = reactIs_production_min.typeOf;
	var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
	var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
	var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
	var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
	var reactIs_production_min_6 = reactIs_production_min.Element;
	var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
	var reactIs_production_min_8 = reactIs_production_min.Fragment;
	var reactIs_production_min_9 = reactIs_production_min.Lazy;
	var reactIs_production_min_10 = reactIs_production_min.Memo;
	var reactIs_production_min_11 = reactIs_production_min.Portal;
	var reactIs_production_min_12 = reactIs_production_min.Profiler;
	var reactIs_production_min_13 = reactIs_production_min.StrictMode;
	var reactIs_production_min_14 = reactIs_production_min.Suspense;
	var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
	var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
	var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
	var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
	var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
	var reactIs_production_min_20 = reactIs_production_min.isElement;
	var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
	var reactIs_production_min_22 = reactIs_production_min.isFragment;
	var reactIs_production_min_23 = reactIs_production_min.isLazy;
	var reactIs_production_min_24 = reactIs_production_min.isMemo;
	var reactIs_production_min_25 = reactIs_production_min.isPortal;
	var reactIs_production_min_26 = reactIs_production_min.isProfiler;
	var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
	var reactIs_production_min_28 = reactIs_production_min.isSuspense;

	var reactIs_development = createCommonjsModule(function (module, exports) {



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' ||
	  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;
	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;
	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;
	              default:
	                return $$typeof;
	            }
	        }
	      case REACT_LAZY_TYPE:
	      case REACT_MEMO_TYPE:
	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	}

	// AsyncMode is deprecated along with isAsyncMode
	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;

	var hasWarnedAboutDeprecatedIsAsyncMode = false;

	// AsyncMode should be deprecated
	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true;
	      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }
	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.typeOf = typeOf;
	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isValidElementType = isValidElementType;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	  })();
	}
	});

	unwrapExports(reactIs_development);
	var reactIs_development_1 = reactIs_development.typeOf;
	var reactIs_development_2 = reactIs_development.AsyncMode;
	var reactIs_development_3 = reactIs_development.ConcurrentMode;
	var reactIs_development_4 = reactIs_development.ContextConsumer;
	var reactIs_development_5 = reactIs_development.ContextProvider;
	var reactIs_development_6 = reactIs_development.Element;
	var reactIs_development_7 = reactIs_development.ForwardRef;
	var reactIs_development_8 = reactIs_development.Fragment;
	var reactIs_development_9 = reactIs_development.Lazy;
	var reactIs_development_10 = reactIs_development.Memo;
	var reactIs_development_11 = reactIs_development.Portal;
	var reactIs_development_12 = reactIs_development.Profiler;
	var reactIs_development_13 = reactIs_development.StrictMode;
	var reactIs_development_14 = reactIs_development.Suspense;
	var reactIs_development_15 = reactIs_development.isValidElementType;
	var reactIs_development_16 = reactIs_development.isAsyncMode;
	var reactIs_development_17 = reactIs_development.isConcurrentMode;
	var reactIs_development_18 = reactIs_development.isContextConsumer;
	var reactIs_development_19 = reactIs_development.isContextProvider;
	var reactIs_development_20 = reactIs_development.isElement;
	var reactIs_development_21 = reactIs_development.isForwardRef;
	var reactIs_development_22 = reactIs_development.isFragment;
	var reactIs_development_23 = reactIs_development.isLazy;
	var reactIs_development_24 = reactIs_development.isMemo;
	var reactIs_development_25 = reactIs_development.isPortal;
	var reactIs_development_26 = reactIs_development.isProfiler;
	var reactIs_development_27 = reactIs_development.isStrictMode;
	var reactIs_development_28 = reactIs_development.isSuspense;

	var reactIs = createCommonjsModule(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = reactIs_production_min;
	} else {
	  module.exports = reactIs_development;
	}
	});
	var reactIs_1 = reactIs.isValidElementType;

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty$1.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes;

	var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning$1 = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning$1(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!reactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning$1(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has$1(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning$1(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1;
	  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	var factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret_1) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = reactIs;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = factoryWithThrowingShims();
	}
	});

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	var Button_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    /**
	     * @title 尺寸
	     */
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'xg', 'lg']),
	    /**
	     * @title 样式
	     */
	    style: _propTypes2["default"].object,
	    /**
	     * @title 形状
	     */
	    shape: _propTypes2["default"].oneOf(['block', 'round', 'border', 'squared', 'floating', 'pillRight', 'pillLeft', 'icon']),

	    bordered: _propTypes2["default"].bool,
	    /**
	    * @title 类型
	    */
	    colors: _propTypes2["default"].oneOf(['primary', 'secondary', 'accent', 'success', 'info', 'warning', 'danger', 'dark', 'light', 'default']),
	    /**
	     * @title 是否禁用
	     * @veIgnore
	     */
	    disabled: _propTypes2["default"].bool,
	    /**
	     * @title 类名
	     * @veIgnore
	     */
	    className: _propTypes2["default"].string,

	    /**
	     * @title <button> 的 type
	     * @veIgnore
	     */
	    htmlType: _propTypes2["default"].oneOf(['submit', 'button', 'reset']),
	    isSubmit: _propTypes2["default"].bool //是否作为form的提交按钮
	};

	var defaultProps = {
	    disabled: false,
	    htmlType: 'button',
	    clsPrefix: 'u-button',
	    bordered: false,
	    isSubmit: false
	};

	var sizeMap = {
	    sm: 'sm',
	    md: 'md',
	    xg: 'xg',
	    lg: 'lg'
	},
	    colorsMap = {
	    primary: 'primary',
	    secondary: 'secondary',
	    accent: 'accent',
	    success: 'success',
	    info: 'info',
	    warning: 'warning',
	    danger: 'danger',
	    dark: 'dark',
	    light: 'light'
	},
	    shapeMap = {
	    block: 'block',
	    round: 'round',
	    border: 'border',
	    squared: 'squared',
	    floating: 'floating',
	    pillRight: 'pill-right',
	    pillLeft: 'pill-left',
	    icon: 'icon'
	};

	var Button = function (_Component) {
	    _inherits(Button, _Component);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }

	    Button.prototype.render = function render() {
	        var _props = this.props,
	            colors = _props.colors,
	            shape = _props.shape,
	            disabled = _props.disabled,
	            className = _props.className,
	            size = _props.size,
	            bordered = _props.bordered,
	            children = _props.children,
	            htmlType = _props.htmlType,
	            clsPrefix = _props.clsPrefix,
	            isSubmit = _props.isSubmit,
	            others = _objectWithoutProperties(_props, ['colors', 'shape', 'disabled', 'className', 'size', 'bordered', 'children', 'htmlType', 'clsPrefix', 'isSubmit']);

	        var clsObj = {};
	        if (className) {
	            clsObj[className] = true;
	        }
	        if (sizeMap[size]) {
	            clsObj[clsPrefix + '-' + sizeMap[size]] = true;
	        }

	        if (shapeMap[shape]) {
	            clsObj[clsPrefix + '-' + shapeMap[shape]] = true;
	        }
	        if (colorsMap[colors]) {
	            clsObj[clsPrefix + '-' + colorsMap[colors]] = true;
	        }
	        if (bordered) {
	            clsObj[clsPrefix + '-border'] = bordered;
	        }
	        var classes = (0, _classnames2["default"])(clsPrefix, clsObj);
	        return _react2["default"].createElement(
	            'button',
	            _extends({
	                type: htmlType,
	                className: classes,
	                disabled: disabled
	            }, others),
	            this.props.children
	        );
	    };

	    return Button;
	}(React__default.Component);

	Button.propTypes = propTypes$1;
	Button.defaultProps = defaultProps;

	exports["default"] = Button;
	module.exports = exports['default'];
	});

	unwrapExports(Button_1);

	var build = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Button2 = _interopRequireDefault(Button_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Button2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build);



	var Button = /*#__PURE__*/Object.freeze({
		default: undefined
	});



	var refcorebutton = /*#__PURE__*/Object.freeze({
		default: undefined
	});

	getCjsExportFromNamespace(Button);

	getCjsExportFromNamespace(refcorebutton);

	var RefCoreButton_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _beeButton2 = _interopRequireDefault(build);





	var _propTypes2 = _interopRequireDefault(propTypes);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// const propTypes = {
	//   buttons: PropTypes.object,
	//   ishasemptyBtn: PropTypes.bool,
	//   language: PropTypes.string,
	// }

	// const defaultProps = {
	//   buttons: {
	//     okText: "确认",
	//     cancelText: "取消",
	//     clearText: "清空已选",
	//   },
	//   ishasemptyBtn: true,
	//   language: 'zh_CN'
	// }

	// import {Button} from 'tinper-bee';
	function RefCoreButton(props) {
		var buttons = props.buttons,
		    language = props.language,
		    onClickBtn = props.onClickBtn,
		    _props$emptyBut = props.emptyBut,
		    emptyBut = _props$emptyBut === undefined ? true : _props$emptyBut;

		var saveButton = '';
		var cancelButton = '';
		var clearButton = '';

		switch (language) {
			case "en_US":
				saveButton = 'Ok';
				cancelButton = 'Cancel';
				clearButton = 'Empty';
				break;
			case "zh_TW":
				saveButton = '確認';
				cancelButton = "取消";
				clearButton = '清空已選';
				break;
			case "fr_FR":
				saveButton = 'Confirmation';
				cancelButton = 'Annuler';
				clearButton = 'Videz';
				break;
			case "de_DE":
				saveButton = 'Bestätigt';
				cancelButton = 'Abgesagt';
				clearButton = 'Leer';
				break;
			case "ja_JP":
				saveButton = '確認する';
				cancelButton = '取り消す';
				clearButton = '空を清める';
				break;
			case "zh_CN":
			default:
				saveButton = "确认";
				cancelButton = "取消";
				clearButton = '清空已选';
		}
		if (buttons) {
			saveButton = buttons.okText || "确认";
			cancelButton = buttons.cancelText || "取消";
			clearButton = buttons.clearText || '清空已选';
		}
		return _react2["default"].createElement(
			'div',
			{ className: 'ref-core-button' },
			emptyBut ? _react2["default"].createElement(
				_beeButton2["default"],
				{ className: 'ref-core-button-empty', shape: 'border', onClick: function onClick() {
						return onClickBtn('clear');
					} },
				clearButton
			) : '',
			_react2["default"].createElement(
				_beeButton2["default"],
				{ shape: 'border', onClick: function onClick() {
						return onClickBtn('cancel');
					} },
				cancelButton
			),
			_react2["default"].createElement(
				_beeButton2["default"],
				{ colors: 'primary', onClick: function onClick() {
						return onClickBtn('save');
					} },
				saveButton
			)
		);
	}
	exports["default"] = RefCoreButton;
	module.exports = exports['default'];
	});

	unwrapExports(RefCoreButton_1);

	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

	var $Object$1 = _core.Object;
	var defineProperty = function defineProperty(it, key, desc) {
	  return $Object$1.defineProperty(it, key, desc);
	};

	var defineProperty$1 = createCommonjsModule(function (module) {
	module.exports = { "default": defineProperty, __esModule: true };
	});

	unwrapExports(defineProperty$1);

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

	var $getOwnPropertyDescriptor = _objectGopd.f;

	_objectSap('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(_toIobject(it), key);
	  };
	});

	var $Object$2 = _core.Object;
	var getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  return $Object$2.getOwnPropertyDescriptor(it, key);
	};

	var getOwnPropertyDescriptor$1 = createCommonjsModule(function (module) {
	module.exports = { "default": getOwnPropertyDescriptor, __esModule: true };
	});

	unwrapExports(getOwnPropertyDescriptor$1);

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
		f: f$4
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

	var gOPN = _objectGopn.f;
	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
	};

	var _objectGopnExt = {
		f: f$5
	};

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	_objectSap('getOwnPropertyNames', function () {
	  return _objectGopnExt.f;
	});

	var $Object$3 = _core.Object;
	var getOwnPropertyNames = function getOwnPropertyNames(it) {
	  return $Object$3.getOwnPropertyNames(it);
	};

	var getOwnPropertyNames$1 = createCommonjsModule(function (module) {
	module.exports = { "default": getOwnPropertyNames, __esModule: true };
	});

	unwrapExports(getOwnPropertyNames$1);



	var refcoretab = /*#__PURE__*/Object.freeze({
		default: undefined
	});

	getCjsExportFromNamespace(refcoretab);

	var RefCoreTab_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _defineProperty2 = _interopRequireDefault(defineProperty$1);



	var _getOwnPropertyDescriptor2 = _interopRequireDefault(getOwnPropertyDescriptor$1);



	var _getOwnPropertyNames2 = _interopRequireDefault(getOwnPropertyNames$1);



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = (0, _getOwnPropertyNames2["default"])(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = (0, _getOwnPropertyDescriptor2["default"])(defaults, key); if (value && value.configurable && obj[key] === undefined) { (0, _defineProperty2["default"])(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    show: _propTypes2["default"].bool,
	    onSelectTabItem: _propTypes2["default"].func,
	    selectedData: _propTypes2["default"].array,
	    selecteing: _propTypes2["default"].bool
	};

	var defaultProps = {
	    show: true,
	    onSelectTabItem: function onSelectTabItem() {},
	    selectedData: [],
	    selecteing: true
	};

	var RefCoreTab = function (_Component) {
	    _inherits(RefCoreTab, _Component);

	    function RefCoreTab(props) {
	        _classCallCheck(this, RefCoreTab);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this.onSelectTabItem = function () {
	            var _this$props = _this.props,
	                onSelectTabItem = _this$props.onSelectTabItem,
	                selectedData = _this$props.selectedData,
	                selecteing = _this$props.selecteing;

	            onSelectTabItem(selectedData, selecteing ? 'selected' : 'selecting');
	        };

	        _this.Alreadychosen = '';
	        _this.Hidechosen = '';

	        var language = props.language;

	        switch (language) {
	            case "zh_CN":
	                _this.Alreadychosen = '已选';
	                _this.Hidechosen = "收起已选";
	                break;
	            case "en_US":
	                _this.Alreadychosen = 'chosen';
	                _this.Hidechosen = "Hide";
	                break;
	            case "zh_TW":
	                _this.Alreadychosen = '已選';
	                _this.Hidechosen = "收起已選";
	                break;
	            case "fr_FR":
	                _this.Alreadychosen = 'Choisissez';
	                _this.Hidechosen = "Cacher";
	                break;
	            case "de_DE":
	                _this.Alreadychosen = 'Gewählt Hat';
	                _this.Hidechosen = "Versteckt";
	                break;
	            case "ja_JP":
	                _this.Alreadychosen = '選択した';
	                _this.Hidechosen = "隠して";
	                break;
	            default:
	                _this.Alreadychosen = '已选';
	                _this.Hidechosen = "收起已选";
	        }
	        return _this;
	    }

	    RefCoreTab.prototype.render = function render() {
	        var _props = this.props,
	            className = _props.className,
	            selectedData = _props.selectedData,
	            show = _props.show,
	            selecteing = _props.selecteing;

	        return _react2["default"].createElement(
	            'div',
	            { className: 'ref-tabs-panel ' + (show ? '' : 'ref-tabs-hide') + ' ' + className },
	            this.props.children,
	            _react2["default"].createElement(
	                'a',
	                { className: 'selectedItemSum',
	                    onClick: this.onSelectTabItem },
	                !selecteing ? this.Hidechosen : this.Alreadychosen + ('\uFF1A' + selectedData.length)
	            )
	        );
	    };

	    return RefCoreTab;
	}(React__default.Component);

	RefCoreTab.propTypes = propTypes$1;
	RefCoreTab.defaultProps = defaultProps;
	exports["default"] = RefCoreTab;
	module.exports = exports['default'];
	});

	unwrapExports(RefCoreTab_1);

	var Icon_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
		type: _propTypes2["default"].string

	};
	/**
	 *  badge 默认显示内容1
	 */
	var defaultProps = {
		clsPrefix: 'uf'
	};

	var Icon = function (_Component) {
		_inherits(Icon, _Component);

		function Icon(props) {
			_classCallCheck(this, Icon);

			return _possibleConstructorReturn(this, _Component.call(this, props));
		}

		Icon.prototype.render = function render() {
			var _props = this.props,
			    type = _props.type,
			    className = _props.className,
			    clsPrefix = _props.clsPrefix,
			    others = _objectWithoutProperties(_props, ['type', 'className', 'clsPrefix']);

			var classNames = (0, _classnames2["default"])(clsPrefix, type);

			return _react2["default"].createElement('i', _extends({}, others, { className: (0, _classnames2["default"])(classNames, className) }));
		};

		return Icon;
	}(React__default.Component);

	Icon.defaultProps = defaultProps;
	Icon.propTypes = propTypes$1;

	exports["default"] = Icon;
	module.exports = exports['default'];
	});

	unwrapExports(Icon_1);

	var build$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Icon2 = _interopRequireDefault(Icon_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Icon2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$1);

	var FormControl_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),
	    type: _propTypes2["default"].string,
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'lg']),
	    onSearch: _propTypes2["default"].func,
	    onChange: _propTypes2["default"].func,
	    onBlur: _propTypes2["default"].func,
	    showClose: _propTypes2["default"].bool,
	    focusSelect: _propTypes2["default"].bool
	};

	var defaultProps = {
	    componentClass: 'input',
	    clsPrefix: 'u-form-control',
	    type: 'text',
	    size: 'md'
	};

	var FormControl = function (_React$Component) {
	    _inherits(FormControl, _React$Component);

	    function FormControl(props) {
	        _classCallCheck(this, FormControl);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.handleSearchChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                value: value,
	                showSearch: value == null || value === ""
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.handleChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                showClose: true
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.clearValue = function () {
	            var onChange = _this.props.onChange;

	            _this.setState({
	                showSearch: true,
	                value: "",
	                showClose: false
	            });
	            if (onChange) {
	                onChange("");
	            }
	            _this.input.focus();
	        };

	        _this.handleKeyDown = function (e) {
	            var _this$props = _this.props,
	                onSearch = _this$props.onSearch,
	                type = _this$props.type,
	                onKeyDown = _this$props.onKeyDown;

	            if (e.keyCode === 13 && type === "search") {
	                if (onSearch) {
	                    onSearch(_this.input.value);
	                }
	            }
	            onKeyDown && onKeyDown(e);
	        };

	        _this.handleSearch = function (e) {
	            var onSearch = _this.props.onSearch;

	            if (onSearch) onSearch(_this.input.value);
	        };

	        _this.handleBlur = function (e) {
	            var value = _this.state.value;
	            var onBlur = _this.props.onBlur;


	            if (onBlur) {
	                onBlur(value, e);
	            }
	        };

	        _this.handleFocus = function (e) {
	            var value = _this.state.value;
	            var onFocus = _this.props.onFocus;

	            if (_this.props.focusSelect) {
	                _this.input.select();
	            }
	            if (onFocus) {
	                onFocus(value, e);
	            }
	        };

	        _this.renderInput = function () {
	            var _this$props2 = _this.props,
	                Component = _this$props2.componentClass,
	                type = _this$props2.type,
	                className = _this$props2.className,
	                size = _this$props2.size,
	                clsPrefix = _this$props2.clsPrefix,
	                value = _this$props2.value,
	                onChange = _this$props2.onChange,
	                onSearch = _this$props2.onSearch,
	                onBlur = _this$props2.onBlur,
	                showClose = _this$props2.showClose,
	                focusSelect = _this$props2.focusSelect,
	                others = _objectWithoutProperties(_this$props2, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur', 'showClose', 'focusSelect']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }

	            var classNames = void 0;
	            if (type !== 'file') {
	                classNames = (0, _classnames2["default"])(clsPrefix, classes);
	            }

	            return showClose ? _react2["default"].createElement(
	                'div',
	                { className: (0, _classnames2["default"])(clsPrefix + '-close', clsPrefix + '-affix-wrapper', className) },
	                _react2["default"].createElement(Component, _extends({}, others, {
	                    type: type,
	                    ref: function ref(el) {
	                        return _this.input = el;
	                    },
	                    value: value,
	                    onChange: _this.handleChange,
	                    onBlur: _this.handleBlur,
	                    onFocus: _this.handleFocus,
	                    className: (0, _classnames2["default"])(className, classNames)
	                })),
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-suffix' },
	                    _this.state.showClose ? _react2["default"].createElement(_beeIcon2["default"], { onClick: _this.clearValue, type: 'uf-close-c' }) : ''
	                )
	            ) : _react2["default"].createElement(Component, _extends({}, others, {
	                type: type,
	                ref: function ref(el) {
	                    return _this.input = el;
	                },
	                value: value,
	                onChange: _this.handleChange,
	                onBlur: _this.handleBlur,
	                onFocus: _this.handleFocus,
	                className: (0, _classnames2["default"])(className, classNames)
	            }));
	        };

	        _this.renderSearch = function () {
	            var _this$props3 = _this.props,
	                Component = _this$props3.componentClass,
	                type = _this$props3.type,
	                className = _this$props3.className,
	                size = _this$props3.size,
	                clsPrefix = _this$props3.clsPrefix,
	                value = _this$props3.value,
	                onChange = _this$props3.onChange,
	                onSearch = _this$props3.onSearch,
	                onBlur = _this$props3.onBlur,
	                others = _objectWithoutProperties(_this$props3, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }
	            classes[clsPrefix + '-search'] = true;

	            if (type === "search") {
	                return _react2["default"].createElement(
	                    'div',
	                    { className: (0, _classnames2["default"])(clsPrefix + '-search', clsPrefix + '-affix-wrapper', className) },
	                    _react2["default"].createElement(Component, _extends({}, others, {
	                        type: type,
	                        ref: function ref(el) {
	                            return _this.input = el;
	                        },
	                        onChange: _this.handleSearchChange,
	                        value: value,
	                        onKeyDown: _this.handleKeyDown,
	                        onBlur: _this.handleBlur,
	                        onFocus: _this.handleFocus,
	                        className: (0, _classnames2["default"])(className, clsPrefix, classes)
	                    })),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + '-suffix' },
	                        _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-search', onClick: _this.handleSearch })
	                    )
	                );
	            }
	        };

	        _this.state = {
	            showSearch: !props.value,
	            value: props.value == null ? "" : props.value,
	            showClose: false
	        };
	        _this.input = {};
	        return _this;
	    }

	    FormControl.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProp) {
	        if (nextProp.value !== this.state.value) {
	            this.setState({ value: nextProp.value });
	        }
	    };

	    FormControl.prototype.render = function render() {

	        if (this.props.type === "search") {
	            return this.renderSearch();
	        }

	        return this.renderInput();
	    };

	    return FormControl;
	}(_react2["default"].Component);

	FormControl.propTypes = propTypes$1;
	FormControl.defaultProps = defaultProps;

	exports["default"] = FormControl;
	module.exports = exports['default'];
	});

	unwrapExports(FormControl_1);

	var build$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _FormControl2 = _interopRequireDefault(FormControl_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _FormControl2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$2);

	var InputGroupAddon_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-input-group-addon'
	};

	var InputGroupAddon = function (_React$Component) {
	  _inherits(InputGroupAddon, _React$Component);

	  function InputGroupAddon() {
	    _classCallCheck(this, InputGroupAddon);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  InputGroupAddon.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['className', 'clsPrefix']);

	    return _react2["default"].createElement('span', _extends({}, others, {
	      className: (0, _classnames2["default"])(className, clsPrefix)
	    }));
	  };

	  return InputGroupAddon;
	}(_react2["default"].Component);

	InputGroupAddon.defaultProps = defaultProps;
	exports["default"] = InputGroupAddon;
	module.exports = exports['default'];
	});

	unwrapExports(InputGroupAddon_1);

	var build$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _InputGroupAddon2 = _interopRequireDefault(InputGroupAddon_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _InputGroupAddon2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$3);

	var InputGroupButton_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-input-group-btn'
	};

	var InputGroupButton = function (_React$Component) {
	  _inherits(InputGroupButton, _React$Component);

	  function InputGroupButton() {
	    _classCallCheck(this, InputGroupButton);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  InputGroupButton.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['className', 'clsPrefix']);

	    return _react2["default"].createElement('span', _extends({}, others, {
	      className: (0, _classnames2["default"])(className, clsPrefix)
	    }));
	  };

	  return InputGroupButton;
	}(_react2["default"].Component);

	InputGroupButton.defaultProps = defaultProps;
	exports["default"] = InputGroupButton;
	module.exports = exports['default'];
	});

	unwrapExports(InputGroupButton_1);

	var InputGroup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _beeInputGroupAddon2 = _interopRequireDefault(build$3);



	var _InputGroupButton2 = _interopRequireDefault(InputGroupButton_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-input-group',
	  simple: false
	};

	var InputGroup = function (_React$Component) {
	  _inherits(InputGroup, _React$Component);

	  function InputGroup() {
	    _classCallCheck(this, InputGroup);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  InputGroup.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        simple = _props.simple,
	        others = _objectWithoutProperties(_props, ['className', 'clsPrefix', 'simple']);

	    return _react2["default"].createElement('span', _extends({}, others, {
	      className: (0, _classnames2["default"])(className, clsPrefix, simple && 'simple')
	    }));
	  };

	  return InputGroup;
	}(_react2["default"].Component);

	/**
	  * 将InputGroupAddon与InputGroupButton组件作为InputGroup的附属组件
	  */


	InputGroup.Addon = _beeInputGroupAddon2["default"];
	InputGroup.Button = _InputGroupButton2["default"];
	InputGroup.defaultProps = defaultProps;
	exports["default"] = InputGroup;
	module.exports = exports['default'];
	});

	unwrapExports(InputGroup_1);

	var build$4 = InputGroup_1;



	var FormControl = /*#__PURE__*/Object.freeze({
		default: undefined
	});



	var InputGroup = /*#__PURE__*/Object.freeze({
		default: undefined
	});



	var refcoresearch = /*#__PURE__*/Object.freeze({
		default: undefined
	});

	getCjsExportFromNamespace(FormControl);

	getCjsExportFromNamespace(InputGroup);

	getCjsExportFromNamespace(refcoresearch);

	var RefCoreSearch_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _defineProperty2 = _interopRequireDefault(defineProperty$1);



	var _getOwnPropertyDescriptor2 = _interopRequireDefault(getOwnPropertyDescriptor$1);



	var _getOwnPropertyNames2 = _interopRequireDefault(getOwnPropertyNames$1);



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);



	var _react2 = _interopRequireDefault(React__default);



	var _beeFormControl2 = _interopRequireDefault(build$2);



	var _beeInputGroup2 = _interopRequireDefault(build$4);







	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = (0, _getOwnPropertyNames2["default"])(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = (0, _getOwnPropertyDescriptor2["default"])(defaults, key); if (value && value.configurable && obj[key] === undefined) { (0, _defineProperty2["default"])(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : _defaults(subClass, superClass); }
	// import {FormControl,InputGroup} from 'tinper-bee';


	var RefCoreSearch = function (_Component) {
		_inherits(RefCoreSearch, _Component);

		function RefCoreSearch(props) {
			_classCallCheck(this, RefCoreSearch);

			var _this = _possibleConstructorReturn(this, _Component.call(this, props));

			_this.onChange = function (value) {
				_this.setState({ value: value });
				if (_this.props.onChange) {
					_this.props.onChange(value);
				}
			};

			_this.onClear = function () {
				_this.setState({ value: '' });
			};

			_this.keypress = function (e) {
				if (e.which !== 13) return;
				_this.onSearch(_this.state.value);
			};

			_this.onSearch = function () {
				if (_this.props.onSearch) {
					_this.props.onSearch(_this.state.value);
				}
			};

			_this.state = {
				value: props.value || ""
			};
			return _this;
		}

		RefCoreSearch.prototype.render = function render() {
			var _props = this.props,
			    _props$language = _props.language,
			    language = _props$language === undefined ? '' : _props$language,
			    _props$placeholder = _props.placeholder,
			    placeholder = _props$placeholder === undefined ? '' : _props$placeholder,
			    _props$className = _props.className,
			    className = _props$className === undefined ? '' : _props$className,
			    _props$show = _props.show,
			    show = _props$show === undefined ? true : _props$show;

			if (!placeholder) {
				switch (language) {
					case "en_US":
						placeholder = 'Search';
						break;
					case "fr_FR":
						placeholder = 'Recherche';
						break;
					case "de_DE":
						placeholder = 'Suche';
						break;
					case "ja_JP":
						placeholder = '検索';
						break;
					case "zh_TW":
					case "zh_CN":
					default:
						placeholder = '搜索';
				}
			}

			return _react2["default"].createElement(
				_beeInputGroup2["default"],
				{ simple: true,
					className: 'ref-core-search ' + className + ' ' + (show ? '' : 'ref-core-search-hide')
				},
				_react2["default"].createElement(_beeFormControl2["default"], {
					className: 'ref-core-search-input',
					value: this.state.value,
					onChange: this.onChange,
					onKeyPress: this.keypress,
					placeholder: placeholder,
					type: 'text'
				}),
				_react2["default"].createElement(
					_beeInputGroup2["default"].Button,
					{ shape: 'border', onClick: this.onSearch.bind(this) },
					_react2["default"].createElement(
						'span',
						{ className: 'uf uf-search' },
						' '
					)
				)
			);
		};

		return RefCoreSearch;
	}(React__default.Component);

	exports["default"] = RefCoreSearch;
	module.exports = exports['default'];
	});

	unwrapExports(RefCoreSearch_1);

	var locale = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.paginationLocale = paginationLocale;
	/**这里是国际化 */

	function paginationLocale(lang) {
	  switch (lang.toLocaleLowerCase()) {
	    case "zh_cn":
	      return {
	        'lang': 'zh-cn',
	        'total': '共',
	        'items': '条',
	        'show': '显示',
	        'goto': '跳至',
	        'page': '页',
	        'ok': '确认'
	      };
	      break;
	    case "en_us":
	      return {
	        'lang': 'en',
	        'total': 'Total',
	        'items': 'Items',
	        'show': 'page',
	        'goto': 'goto',
	        'page': '',
	        'ok': 'ok'
	      };
	      break;
	    case "zh_tw":
	      return {
	        'total': '共',
	        'items': '條',
	        'show': '顯示',
	        'goto': '跳至',
	        'ok': '確認'
	      };
	      break;
	    default:
	      return {
	        'lang': 'zh-cn',
	        'total': '共',
	        'items': '条',
	        'show': '显示',
	        'goto': '跳至',
	        'page': '页',
	        'ok': '确认'
	      };
	  }
	}
	});

	unwrapExports(locale);
	var locale_1 = locale.paginationLocale;

	var Checkbox_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {

	    colors: _propTypes2["default"].oneOf(['', 'dark', 'success', 'info', 'warning', 'danger', 'primary']),

	    disabled: _propTypes2["default"].bool,

	    inverse: _propTypes2["default"].bool

	};

	var defaultProps = {
	    disabled: false,
	    inverse: false,
	    colors: 'primary',
	    clsPrefix: 'u-checkbox',
	    defaultChecked: false,
	    onClick: function onClick() {}
	};

	var Checkbox = function (_React$Component) {
	    _inherits(Checkbox, _React$Component);

	    function Checkbox(props) {
	        _classCallCheck(this, Checkbox);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _initialiseProps.call(_this);

	        _this.state = {
	            checked: 'checked' in props ? props.checked : props.defaultChecked
	        };
	        _this.doubleClickFlag = null;
	        return _this;
	    }

	    Checkbox.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if ('checked' in nextProps) {
	            this.setState({
	                checked: nextProps.checked
	            });
	        }
	    };

	    Checkbox.prototype.render = function render() {
	        var _props = this.props,
	            disabled = _props.disabled,
	            inverse = _props.inverse,
	            colors = _props.colors,
	            size = _props.size,
	            className = _props.className,
	            indeterminate = _props.indeterminate,
	            onClick = _props.onClick,
	            children = _props.children,
	            checked = _props.checked,
	            clsPrefix = _props.clsPrefix,
	            onDoubleClick = _props.onDoubleClick,
	            onChange = _props.onChange,
	            others = _objectWithoutProperties(_props, ['disabled', 'inverse', 'colors', 'size', 'className', 'indeterminate', 'onClick', 'children', 'checked', 'clsPrefix', 'onDoubleClick', 'onChange']);

	        var input = _react2["default"].createElement('input', _extends({}, others, {
	            type: 'checkbox',
	            disabled: this.props.disabled
	        }));

	        var classes = {
	            'is-checked': this.state.checked,
	            disabled: disabled
	        };

	        if (inverse) {
	            classes[clsPrefix + '-inverse'] = true;
	        }

	        if (colors) {
	            classes[clsPrefix + '-' + colors] = true;
	        }

	        if (size) {
	            classes[clsPrefix + '-' + size] = true;
	        }

	        if (!checked && indeterminate) {
	            classes[clsPrefix + '-indeterminate'] = true;
	        }

	        var classNames = (0, _classnames2["default"])(clsPrefix, classes);

	        return _react2["default"].createElement(
	            'label',
	            {
	                className: (0, _classnames2["default"])(classNames, className),
	                onDoubleClick: this.handledbClick,
	                onClick: this.changeState },
	            input,
	            _react2["default"].createElement(
	                'label',
	                { className: clsPrefix + '-label' },
	                children
	            )
	        );
	    };

	    return Checkbox;
	}(_react2["default"].Component);

	var _initialiseProps = function _initialiseProps() {
	    var _this2 = this;

	    this.changeState = function (e) {
	        var props = _this2.props;
	        var checked = _this2.state.checked;

	        clearTimeout(_this2.doubleClickFlag);
	        if (props.onClick instanceof Function) {
	            props.onClick(e);
	        }
	        if (props.onDoubleClick instanceof Function) {
	            _this2.doubleClickFlag = setTimeout(function () {
	                //do function在此处写单击事件要执行的代码
	                _this2.change(props, checked);
	            }, 300);
	        } else {
	            _this2.change(props, checked);
	        }
	        e.stopPropagation();
	        e.preventDefault();
	        //执行延时
	    };

	    this.change = function (props, checked) {
	        if (props.disabled) {
	            return;
	        }
	        if (!('checked' in props)) {
	            _this2.setState({
	                checked: !checked
	            });
	        }

	        if (props.onChange instanceof Function) {
	            props.onChange(!checked);
	        }
	    };

	    this.handledbClick = function (e) {
	        var onDoubleClick = _this2.props.onDoubleClick;

	        clearTimeout(_this2.doubleClickFlag);
	        onDoubleClick && onDoubleClick(_this2.state.checked, e);
	    };
	};

	Checkbox.propTypes = propTypes$1;
	Checkbox.defaultProps = defaultProps;

	exports["default"] = Checkbox;
	module.exports = exports['default'];
	});

	unwrapExports(Checkbox_1);

	var lodash_isequal = createCommonjsModule(function (module, exports) {
	/**
	 * Lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    asyncTag = '[object AsyncFunction]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    nullTag = '[object Null]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    proxyTag = '[object Proxy]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    undefinedTag = '[object Undefined]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice,
	    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = isEqual;
	});

	var CheckboxGroup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Checkbox2 = _interopRequireDefault(Checkbox_1);



	var _lodash2 = _interopRequireDefault(lodash_isequal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    clsPrefix: _propTypes2["default"].string,
	    value: _propTypes2["default"].array,
	    onChange: _propTypes2["default"].func,
	    disabled: _propTypes2["default"].bool
	};

	var defaultProps = {
	    clsPrefix: 'u-checkbox-group',
	    value: [],
	    onChange: function onChange() {},
	    disabled: false
	};

	var CheckboxGroup = function (_React$Component) {
	    _inherits(CheckboxGroup, _React$Component);

	    function CheckboxGroup(props) {
	        _classCallCheck(this, CheckboxGroup);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.changeHandle = function (v) {
	            var values = _this.state.values;
	            if (values.indexOf(v) != -1) {
	                values.splice(values.indexOf(v), 1);
	            } else {
	                values.push(v);
	            }
	            _this.setState({
	                values: values
	            });
	            _this.props.onChange(values);
	        };

	        _this.state = {
	            values: props.value
	        };
	        return _this;
	    }

	    CheckboxGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!(0, _lodash2["default"])(nextProps.value, this.state.values)) {
	            this.setState({
	                values: nextProps.value
	            });
	        }
	    };

	    CheckboxGroup.prototype.render = function render() {
	        var _this2 = this;

	        var _props = this.props,
	            clsPrefix = _props.clsPrefix,
	            className = _props.className,
	            disabled = _props.disabled;

	        var classes = clsPrefix;
	        if (className) classes += ' ' + className;
	        return _react2["default"].createElement(
	            'div',
	            { className: classes },
	            _react2["default"].Children.map(this.props.children, function (child) {
	                return _react2["default"].cloneElement(child, {
	                    onChange: function onChange() {
	                        _this2.changeHandle(child.props.value);
	                    },
	                    checked: _this2.state.values.indexOf(child.props.value) != -1,
	                    disabled: disabled
	                });
	            })
	        );
	    };

	    return CheckboxGroup;
	}(_react2["default"].Component);

	CheckboxGroup.propTypes = propTypes$1;
	CheckboxGroup.defaultProps = defaultProps;

	exports["default"] = CheckboxGroup;
	module.exports = exports['default'];
	});

	unwrapExports(CheckboxGroup_1);

	var build$5 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Checkbox2 = _interopRequireDefault(Checkbox_1);



	var _CheckboxGroup2 = _interopRequireDefault(CheckboxGroup_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_Checkbox2["default"].CheckboxGroup = _CheckboxGroup2["default"];
	exports["default"] = _Checkbox2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$5);

	var inDOM = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	module.exports = exports['default'];
	});

	unwrapExports(inDOM);

	var on_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _inDOM2 = _interopRequireDefault(inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var on = function on() {};
	if (_inDOM2.default) {
	  on = function () {

	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, handler);
	    };
	  }();
	}

	exports.default = on;
	module.exports = exports['default'];
	});

	unwrapExports(on_1);

	var off_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _inDOM2 = _interopRequireDefault(inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var off = function off() {};
	if (_inDOM2.default) {
	  off = function () {
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  }();
	}

	exports.default = off;
	module.exports = exports['default'];
	});

	unwrapExports(off_1);

	var contains = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _inDOM2 = _interopRequireDefault(inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  var root = _inDOM2.default && document.documentElement;

	  return root && root.contains ? function (context, node) {
	    return context.contains(node);
	  } : root && root.compareDocumentPosition ? function (context, node) {
	    return context === node || !!(context.compareDocumentPosition(node) & 16);
	  } : function (context, node) {
	    if (node) do {
	      if (node === context) return true;
	    } while (node = node.parentNode);

	    return false;
	  };
	}();

	module.exports = exports['default'];
	});

	unwrapExports(contains);

	var querySelectorAll = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = qsa;
	// Zepto.js
	// (c) 2010-2015 Thomas Fuchs
	// Zepto.js may be freely distributed under the MIT license.
	var simpleSelectorRE = /^[\w-]*$/;
	var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);

	function qsa(element, selector) {
	  var maybeID = selector[0] === '#',
	      maybeClass = selector[0] === '.',
	      nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
	      isSimple = simpleSelectorRE.test(nameOnly),
	      found;

	  if (isSimple) {
	    if (maybeID) {
	      element = element.getElementById ? element : document;
	      return (found = element.getElementById(nameOnly)) ? [found] : [];
	    }

	    if (element.getElementsByClassName && maybeClass) return toArray(element.getElementsByClassName(nameOnly));

	    return toArray(element.getElementsByTagName(selector));
	  }

	  return toArray(element.querySelectorAll(selector));
	}
	module.exports = exports['default'];
	});

	unwrapExports(querySelectorAll);

	var filter = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = filterEvents;



	var _contains2 = _interopRequireDefault(contains);



	var _querySelectorAll2 = _interopRequireDefault(querySelectorAll);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function filterEvents(selector, handler) {
	  return function filterHandler(e) {
	    var top = e.currentTarget,
	        target = e.target,
	        matches = (0, _querySelectorAll2.default)(top, selector);

	    if (matches.some(function (match) {
	      return (0, _contains2.default)(match, target);
	    })) handler.call(this, e);
	  };
	}
	module.exports = exports['default'];
	});

	unwrapExports(filter);

	var listen_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _inDOM2 = _interopRequireDefault(inDOM);



	var _on2 = _interopRequireDefault(on_1);



	var _off2 = _interopRequireDefault(off_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var listen = function listen() {};

	if (_inDOM2.default) {
	  listen = function listen(node, eventName, handler, capture) {
	    (0, _on2.default)(node, eventName, handler, capture);
	    return function () {
	      (0, _off2.default)(node, eventName, handler, capture);
	    };
	  };
	}

	exports.default = listen;
	module.exports = exports['default'];
	});

	unwrapExports(listen_1);

	var events = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.listen = exports.filter = exports.off = exports.on = undefined;



	var _on2 = _interopRequireDefault(on_1);



	var _off2 = _interopRequireDefault(off_1);



	var _filter2 = _interopRequireDefault(filter);



	var _listen2 = _interopRequireDefault(listen_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.on = _on2.default;
	exports.off = _off2.default;
	exports.filter = _filter2.default;
	exports.listen = _listen2.default;
	exports.default = { on: _on2.default, off: _off2.default, filter: _filter2.default, listen: _listen2.default };
	});

	unwrapExports(events);
	var events_1 = events.listen;
	var events_2 = events.filter;
	var events_3 = events.off;
	var events_4 = events.on;

	var ownerDocument_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ownerDocument;
	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}
	module.exports = exports["default"];
	});

	unwrapExports(ownerDocument_1);

	var scrollbarSize = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (recalc) {
	  if (!size || recalc) {
	    if (_inDOM2.default) {
	      var scrollDiv = document.createElement('div');

	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';

	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }

	  return size;
	};



	var _inDOM2 = _interopRequireDefault(inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var size = void 0;

	module.exports = exports['default'];
	});

	unwrapExports(scrollbarSize);

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__ = process.env.NODE_ENV !== 'production';

	var warning = function() {};

	if (__DEV__) {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	var warning_1 = warning;

	var createChainableTypeChecker_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = createChainableTypeChecker;
	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	// Mostly taken from ReactPropTypes.

	/* This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required ' + location + ' `' + propFullNameSafe + '` was not specified ' + ('in `' + componentNameSafe + '`.'));
	      }

	      return null;
	    }

	    for (var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
	      args[_key - 6] = arguments[_key];
	    }

	    return validate.apply(undefined, [props, propName, componentNameSafe, location, propFullNameSafe].concat(args));
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}
	});

	unwrapExports(createChainableTypeChecker_1);

	var all_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = all;



	var _createChainableTypeChecker2 = _interopRequireDefault(createChainableTypeChecker_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function all() {
	  for (var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++) {
	    validators[_key] = arguments[_key];
	  }

	  function allPropTypes() {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    var error = null;

	    validators.forEach(function (validator) {
	      if (error != null) {
	        return;
	      }

	      var result = validator.apply(undefined, args);
	      if (result != null) {
	        error = result;
	      }
	    });

	    return error;
	  }

	  return (0, _createChainableTypeChecker2.default)(allPropTypes);
	} /**
	   * This source code is quoted from rc-util.
	   * homepage: https://github.com/react-component/util
	   */
	});

	unwrapExports(all_1);

	var componentOrElement = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                               */




	var _react2 = _interopRequireDefault(React__default);



	var _createChainableTypeChecker2 = _interopRequireDefault(createChainableTypeChecker_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function validate(props, propName, componentName, location, propFullName) {
	  var propValue = props[propName];
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);

	  if (_react2.default.isValidElement(propValue)) {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of type ReactElement ' + ('supplied to `' + componentName + '`, expected a ReactComponent or a ') + 'DOMElement. You can usually obtain a ReactComponent or DOMElement ' + 'from a ReactElement by attaching a ref to it.');
	  }

	  if ((propType !== 'object' || typeof propValue.render !== 'function') && propValue.nodeType !== 1) {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected a ReactComponent or a ') + 'DOMElement.');
	  }

	  return null;
	}

	exports.default = (0, _createChainableTypeChecker2.default)(validate);
	});

	unwrapExports(componentOrElement);

	var deprecated_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = deprecated;



	var _warning2 = _interopRequireDefault(warning_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var warned = {}; /**
	                  * This source code is quoted from rc-util.
	                  * homepage: https://github.com/react-component/util
	                  */
	function deprecated(validator, reason) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    if (props[propName] != null) {
	      var messageKey = componentName + '.' + propName;

	      (0, _warning2.default)(warned[messageKey], 'The ' + location + ' `' + propFullNameSafe + '` of ' + ('`' + componentNameSafe + '` is deprecated. ' + reason + '.'));

	      warned[messageKey] = true;
	    }

	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }

	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}

	/* eslint-disable no-underscore-dangle */
	function _resetWarned() {
	  warned = {};
	}

	deprecated._resetWarned = _resetWarned;
	/* eslint-enable no-underscore-dangle */
	});

	unwrapExports(deprecated_1);

	var elementType_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                               */




	var _react2 = _interopRequireDefault(React__default);



	var _createChainableTypeChecker2 = _interopRequireDefault(createChainableTypeChecker_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function elementType(props, propName, componentName, location, propFullName) {
	  var propValue = props[propName];
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);

	  if (_react2.default.isValidElement(propValue)) {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of type ReactElement ' + ('supplied to `' + componentName + '`, expected an element type (a string ') + 'or a ReactClass).');
	  }

	  if (propType !== 'function' && propType !== 'string') {
	    return new Error('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected an element type (a string ') + 'or a ReactClass).');
	  }

	  return null;
	}

	exports.default = (0, _createChainableTypeChecker2.default)(elementType);
	});

	unwrapExports(elementType_1);

	var isRequiredForA11y_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = isRequiredForA11y;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function isRequiredForA11y(validator) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;

	    if (props[propName] == null) {
	      return new Error('The ' + location + ' `' + propFullNameSafe + '` is required to make ' + ('`' + componentNameSafe + '` accessible for users of assistive ') + 'technologies such as screen readers.');
	    }

	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }

	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}
	});

	unwrapExports(isRequiredForA11y_1);

	var splitComponent = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = splitComponentProps;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function _objectEntries(obj) {
	  var entries = [];
	  var keys = Object.keys(obj);

	  for (var k = 0; k < keys.length; ++k) {
	    entries.push([keys[k], obj[keys[k]]]);
	  }return entries;
	}

	/**
	 * 分割要传入父元素和子元素的props
	 * @param  {[object]} props     传入的属性
	 * @param  {[reactElement]} Component 组件
	 * @return {[array]}           返回数组，第一个元素为父元素props对象，第二个子元素props对象
	 */
	function splitComponentProps(props, Component) {
	  var componentPropTypes = Component.propTypes;

	  var parentProps = {};
	  var childProps = {};

	  _objectEntries(props).forEach(function (_ref) {
	    var propName = _ref[0],
	        propValue = _ref[1];

	    if (componentPropTypes[propName]) {
	      parentProps[propName] = propValue;
	    } else {
	      childProps[propName] = propValue;
	    }
	  });

	  return [parentProps, childProps];
	}
	});

	unwrapExports(splitComponent);

	var createChainedFunction_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (f) {
	    return f != null;
	  }).reduce(function (acc, f) {
	    if (typeof f !== 'function') {
	      throw new Error('Invalid Argument Type, must only provide functions, undefined, or null.');
	    }

	    if (acc === null) {
	      return f;
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      f.apply(this, args);
	    };
	  }, null);
	}
	exports.default = createChainedFunction;
	});

	unwrapExports(createChainedFunction_1);

	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */

	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */

	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};

	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode.isTextModifyingKeyEvent = function isTextModifyingKeyEvent(e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	  // Function keys don't generate text
	  keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	    return false;
	  }

	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode.ALT:
	    case KeyCode.CAPS_LOCK:
	    case KeyCode.CONTEXT_MENU:
	    case KeyCode.CTRL:
	    case KeyCode.DOWN:
	    case KeyCode.END:
	    case KeyCode.ESC:
	    case KeyCode.HOME:
	    case KeyCode.INSERT:
	    case KeyCode.LEFT:
	    case KeyCode.MAC_FF_META:
	    case KeyCode.META:
	    case KeyCode.NUMLOCK:
	    case KeyCode.NUM_CENTER:
	    case KeyCode.PAGE_DOWN:
	    case KeyCode.PAGE_UP:
	    case KeyCode.PAUSE:
	    case KeyCode.PRINT_SCREEN:
	    case KeyCode.RIGHT:
	    case KeyCode.SHIFT:
	    case KeyCode.UP:
	    case KeyCode.WIN_KEY:
	    case KeyCode.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};

	/*
	 whether character is entered.
	 */
	KeyCode.isCharacterKey = function isCharacterKey(keyCode) {
	  if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
	    return true;
	  }

	  if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
	    return true;
	  }

	  if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
	    return true;
	  }

	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }

	  switch (keyCode) {
	    case KeyCode.SPACE:
	    case KeyCode.QUESTION_MARK:
	    case KeyCode.NUM_PLUS:
	    case KeyCode.NUM_MINUS:
	    case KeyCode.NUM_PERIOD:
	    case KeyCode.NUM_DIVISION:
	    case KeyCode.SEMICOLON:
	    case KeyCode.DASH:
	    case KeyCode.EQUALS:
	    case KeyCode.COMMA:
	    case KeyCode.PERIOD:
	    case KeyCode.SLASH:
	    case KeyCode.APOSTROPHE:
	    case KeyCode.SINGLE_QUOTE:
	    case KeyCode.OPEN_SQUARE_BRACKET:
	    case KeyCode.BACKSLASH:
	    case KeyCode.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};

	var keyCode = KeyCode;

	var contains_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = contains;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function contains(root, n) {
	  var node = n;
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }

	  return false;
	}
	});

	unwrapExports(contains_1);

	var EventBaseObject_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function returnFalse() {
	  return false;
	}

	function returnTrue() {
	  return true;
	}

	function EventBaseObject() {
	  this.timeStamp = Date.now();
	  this.target = undefined;
	  this.currentTarget = undefined;
	}

	EventBaseObject.prototype = {
	  isEventObject: 1,

	  constructor: EventBaseObject,

	  isDefaultPrevented: returnFalse,

	  isPropagationStopped: returnFalse,

	  isImmediatePropagationStopped: returnFalse,

	  preventDefault: function preventDefault() {
	    this.isDefaultPrevented = returnTrue;
	  },

	  stopPropagation: function stopPropagation() {
	    this.isPropagationStopped = returnTrue;
	  },

	  stopImmediatePropagation: function stopImmediatePropagation() {
	    this.isImmediatePropagationStopped = returnTrue;
	    // fixed 1.2
	    // call stopPropagation implicitly
	    this.stopPropagation();
	  },

	  halt: function halt(immediate) {
	    if (immediate) {
	      this.stopImmediatePropagation();
	    } else {
	      this.stopPropagation();
	    }
	    this.preventDefault();
	  }
	};

	exports["default"] = EventBaseObject;
	module.exports = exports["default"];
	});

	unwrapExports(EventBaseObject_1);

	var EventObject = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }



	var _EventBaseObject2 = _interopRequireDefault(EventBaseObject_1);



	var _objectAssign2 = _interopRequireDefault(objectAssign);

	var TRUE = true;
	var FALSE = false;
	var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];

	function isNullOrUndefined(w) {
	  return w === null || w === undefined;
	}

	var eventNormalizers = [{
	  reg: /^key/,
	  props: ['char', 'charCode', 'key', 'keyCode', 'which'],
	  fix: function fix(event, nativeEvent) {
	    if (isNullOrUndefined(event.which)) {
	      event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
	    }

	    // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
	    if (event.metaKey === undefined) {
	      event.metaKey = event.ctrlKey;
	    }
	  }
	}, {
	  reg: /^touch/,
	  props: ['touches', 'changedTouches', 'targetTouches']
	}, {
	  reg: /^hashchange$/,
	  props: ['newURL', 'oldURL']
	}, {
	  reg: /^gesturechange$/i,
	  props: ['rotation', 'scale']
	}, {
	  reg: /^(mousewheel|DOMMouseScroll)$/,
	  props: [],
	  fix: function fix(event, nativeEvent) {
	    var deltaX = undefined;
	    var deltaY = undefined;
	    var delta = undefined;
	    var wheelDelta = nativeEvent.wheelDelta;
	    var axis = nativeEvent.axis;
	    var wheelDeltaY = nativeEvent.wheelDeltaY;
	    var wheelDeltaX = nativeEvent.wheelDeltaX;
	    var detail = nativeEvent.detail;

	    // ie/webkit
	    if (wheelDelta) {
	      delta = wheelDelta / 120;
	    }

	    // gecko
	    if (detail) {
	      // press control e.detail == 1 else e.detail == 3
	      delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
	    }

	    // Gecko
	    if (axis !== undefined) {
	      if (axis === event.HORIZONTAL_AXIS) {
	        deltaY = 0;
	        deltaX = 0 - delta;
	      } else if (axis === event.VERTICAL_AXIS) {
	        deltaX = 0;
	        deltaY = delta;
	      }
	    }

	    // Webkit
	    if (wheelDeltaY !== undefined) {
	      deltaY = wheelDeltaY / 120;
	    }
	    if (wheelDeltaX !== undefined) {
	      deltaX = -1 * wheelDeltaX / 120;
	    }

	    // 默认 deltaY (ie)
	    if (!deltaX && !deltaY) {
	      deltaY = delta;
	    }

	    if (deltaX !== undefined) {
	      /**
	       * deltaX of mousewheel event
	       * @property deltaX
	       * @member Event.DomEvent.Object
	       */
	      event.deltaX = deltaX;
	    }

	    if (deltaY !== undefined) {
	      /**
	       * deltaY of mousewheel event
	       * @property deltaY
	       * @member Event.DomEvent.Object
	       */
	      event.deltaY = deltaY;
	    }

	    if (delta !== undefined) {
	      /**
	       * delta of mousewheel event
	       * @property delta
	       * @member Event.DomEvent.Object
	       */
	      event.delta = delta;
	    }
	  }
	}, {
	  reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
	  props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
	  fix: function fix(event, nativeEvent) {
	    var eventDoc = undefined;
	    var doc = undefined;
	    var body = undefined;
	    var target = event.target;
	    var button = nativeEvent.button;

	    // Calculate pageX/Y if missing and clientX/Y available
	    if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
	      eventDoc = target.ownerDocument || document;
	      doc = eventDoc.documentElement;
	      body = eventDoc.body;
	      event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }

	    // which for click: 1 === left; 2 === middle; 3 === right
	    // do not use button
	    if (!event.which && button !== undefined) {
	      if (button & 1) {
	        event.which = 1;
	      } else if (button & 2) {
	        event.which = 3;
	      } else if (button & 4) {
	        event.which = 2;
	      } else {
	        event.which = 0;
	      }
	    }

	    // add relatedTarget, if necessary
	    if (!event.relatedTarget && event.fromElement) {
	      event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
	    }

	    return event;
	  }
	}];

	function retTrue() {
	  return TRUE;
	}

	function retFalse() {
	  return FALSE;
	}

	function DomEventObject(nativeEvent) {
	  var type = nativeEvent.type;

	  var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';

	  _EventBaseObject2['default'].call(this);

	  this.nativeEvent = nativeEvent;

	  // in case dom event has been mark as default prevented by lower dom node
	  var isDefaultPrevented = retFalse;
	  if ('defaultPrevented' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
	  } else if ('getPreventDefault' in nativeEvent) {
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
	    isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
	  } else if ('returnValue' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
	  }

	  this.isDefaultPrevented = isDefaultPrevented;

	  var fixFns = [];
	  var fixFn = undefined;
	  var l = undefined;
	  var prop = undefined;
	  var props = commonProps.concat();

	  eventNormalizers.forEach(function (normalizer) {
	    if (type.match(normalizer.reg)) {
	      props = props.concat(normalizer.props);
	      if (normalizer.fix) {
	        fixFns.push(normalizer.fix);
	      }
	    }
	  });

	  l = props.length;

	  // clone properties of the original event object
	  while (l) {
	    prop = props[--l];
	    this[prop] = nativeEvent[prop];
	  }

	  // fix target property, if necessary
	  if (!this.target && isNative) {
	    this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
	  }

	  // check if target is a text node (safari)
	  if (this.target && this.target.nodeType === 3) {
	    this.target = this.target.parentNode;
	  }

	  l = fixFns.length;

	  while (l) {
	    fixFn = fixFns[--l];
	    fixFn(this, nativeEvent);
	  }

	  this.timeStamp = nativeEvent.timeStamp || Date.now();
	}

	var EventBaseObjectProto = _EventBaseObject2['default'].prototype;

	(0, _objectAssign2['default'])(DomEventObject.prototype, EventBaseObjectProto, {
	  constructor: DomEventObject,

	  preventDefault: function preventDefault() {
	    var e = this.nativeEvent;

	    // if preventDefault exists run it on the original event
	    if (e.preventDefault) {
	      e.preventDefault();
	    } else {
	      // otherwise set the returnValue property of the original event to FALSE (IE)
	      e.returnValue = FALSE;
	    }

	    EventBaseObjectProto.preventDefault.call(this);
	  },

	  stopPropagation: function stopPropagation() {
	    var e = this.nativeEvent;

	    // if stopPropagation exists run it on the original event
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    } else {
	      // otherwise set the cancelBubble property of the original event to TRUE (IE)
	      e.cancelBubble = TRUE;
	    }

	    EventBaseObjectProto.stopPropagation.call(this);
	  }
	});

	exports['default'] = DomEventObject;
	module.exports = exports['default'];
	});

	unwrapExports(EventObject);

	var lib = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = addEventListener;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }



	var _EventObject2 = _interopRequireDefault(EventObject);

	function addEventListener(target, eventType, callback, option) {
	  function wrapCallback(e) {
	    var ne = new _EventObject2['default'](e);
	    callback.call(target, ne);
	  }

	  if (target.addEventListener) {
	    var _ret = (function () {
	      var useCapture = false;
	      if (typeof option === 'object') {
	        useCapture = option.capture || false;
	      } else if (typeof option === 'boolean') {
	        useCapture = option;
	      }

	      target.addEventListener(eventType, wrapCallback, option || false);

	      return {
	        v: {
	          remove: function remove() {
	            target.removeEventListener(eventType, wrapCallback, useCapture);
	          }
	        }
	      };
	    })();

	    if (typeof _ret === 'object') return _ret.v;
	  } else if (target.attachEvent) {
	    target.attachEvent('on' + eventType, wrapCallback);
	    return {
	      remove: function remove() {
	        target.detachEvent('on' + eventType, wrapCallback);
	      }
	    };
	  }
	}

	module.exports = exports['default'];
	});

	var addDOMEventListener = unwrapExports(lib);

	var addEventListener = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = addEventListenerWrap;



	var _addDomEventListener2 = _interopRequireDefault(lib);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	function addEventListenerWrap(target, eventType, cb) {
	  /* eslint camelcase: 2 */
	  var callback = _reactDom2.default.unstable_batchedUpdates ? function run(e) {
	    _reactDom2.default.unstable_batchedUpdates(cb, e);
	  } : cb;
	  return (0, _addDomEventListener2.default)(target, eventType, callback);
	}
	});

	unwrapExports(addEventListener);

	var Event = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	/**
	 * This source code is quoted from rc-util.
	 * homepage: https://github.com/react-component/util
	 */
	var EVENT_NAME_MAP = {
	  transitionend: {
	    transition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'mozTransitionEnd',
	    OTransition: 'oTransitionEnd',
	    msTransition: 'MSTransitionEnd'
	  },

	  animationend: {
	    animation: 'animationend',
	    WebkitAnimation: 'webkitAnimationEnd',
	    MozAnimation: 'mozAnimationEnd',
	    OAnimation: 'oAnimationEnd',
	    msAnimation: 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
	      var baseEvents = EVENT_NAME_MAP[baseEventName];
	      for (var styleName in baseEvents) {
	        if (styleName in style) {
	          endEvents.push(baseEvents[styleName]);
	          break;
	        }
	      }
	    }
	  }
	}

	if (typeof window !== 'undefined' && typeof document !== 'undefined') {
	  detectEvents();
	}

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var TransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },


	  endEvents: endEvents,

	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	exports.default = TransitionEvents;
	});

	unwrapExports(Event);

	var componentIndexof = function(arr, obj){
	  if (arr.indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

	/**
	 * Module dependencies.
	 */

	try {
	  var index = indexof;
	} catch (err) {
	  var index = componentIndexof;
	}

	/**
	 * Whitespace regexp.
	 */

	var re = /\s+/;

	/**
	 * toString reference.
	 */

	var toString$2 = Object.prototype.toString;

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	var componentClasses = function(el){
	  return new ClassList(el);
	};

	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */

	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.add = function(name){
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (!~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.remove = function(name){
	  if ('[object RegExp]' == toString$2.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList.prototype.removeMatching = function(re){
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.toggle = function(name, force){
	  // classList
	  if (this.list) {
	    if ("undefined" !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }

	  // fallback
	  if ("undefined" !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList.prototype.array = function(){
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.has =
	ClassList.prototype.contains = function(name){
	  return this.list
	    ? this.list.contains(name)
	    : !! ~index(this.array(), name);
	};

	var cssAnimation_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                               */




	var _Event2 = _interopRequireDefault(Event);



	var _componentClasses2 = _interopRequireDefault(componentClasses);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var isCssAnimationSupported = _Event2.default.endEvents.length !== 0;


	var capitalPrefixes = ['Webkit', 'Moz', 'O',
	// ms is special .... !
	'ms'];
	var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

	function getStyleProperty(node, name) {
	  var style = window.getComputedStyle(node);

	  var ret = '';
	  for (var i = 0; i < prefixes.length; i++) {
	    ret = style.getPropertyValue(prefixes[i] + name);
	    if (ret) {
	      break;
	    }
	  }
	  return ret;
	}

	function fixBrowserByTimeout(node) {
	  if (isCssAnimationSupported) {
	    var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
	    var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
	    var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
	    var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
	    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
	    // sometimes, browser bug
	    node.rcEndAnimTimeout = setTimeout(function () {
	      node.rcEndAnimTimeout = null;
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }, time * 1000 + 200);
	  }
	}

	function clearBrowserBugTimeout(node) {
	  if (node.rcEndAnimTimeout) {
	    clearTimeout(node.rcEndAnimTimeout);
	    node.rcEndAnimTimeout = null;
	  }
	}

	var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
	  var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
	  var className = nameIsObj ? transitionName.name : transitionName;
	  var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
	  var end = endCallback;
	  var start = void 0;
	  var active = void 0;
	  var nodeClasses = (0, _componentClasses2.default)(node);

	  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
	    end = endCallback.end;
	    start = endCallback.start;
	    active = endCallback.active;
	  }

	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    nodeClasses.remove(className);
	    nodeClasses.remove(activeClassName);

	    _Event2.default.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional end is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (end) {
	      end();
	    }
	  };

	  _Event2.default.addEndEventListener(node, node.rcEndListener);

	  if (start) {
	    start();
	  }
	  nodeClasses.add(className);

	  node.rcAnimTimeout = setTimeout(function () {
	    node.rcAnimTimeout = null;
	    nodeClasses.add(activeClassName);
	    if (active) {
	      setTimeout(active, 0);
	    }
	    fixBrowserByTimeout(node);
	    // 30ms for firefox
	  }, 30);

	  return {
	    stop: function stop() {
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }
	  };
	};

	cssAnimation.style = function (node, style, callback) {
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    _Event2.default.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional callback is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (callback) {
	      callback();
	    }
	  };

	  _Event2.default.addEndEventListener(node, node.rcEndListener);

	  node.rcAnimTimeout = setTimeout(function () {
	    for (var s in style) {
	      if (style.hasOwnProperty(s)) {
	        node.style[s] = style[s];
	      }
	    }
	    node.rcAnimTimeout = null;
	    fixBrowserByTimeout(node);
	  }, 0);
	};

	cssAnimation.setTransition = function (node, p, value) {
	  var property = p;
	  var v = value;
	  if (value === undefined) {
	    v = property;
	    property = '';
	  }
	  property = property || '';
	  capitalPrefixes.forEach(function (prefix) {
	    node.style[prefix + 'Transition' + property] = v;
	  });
	};

	cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

	exports.default = cssAnimation;
	});

	unwrapExports(cssAnimation_1);

	var toArray_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = toArray;



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function toArray(children) {
	  var ret = [];
	  _react2.default.Children.forEach(children, function (c) {
	    ret.push(c);
	  });
	  return ret;
	} /**
	   * This source code is quoted from rc-util.
	   * homepage: https://github.com/react-component/util
	   */
	});

	unwrapExports(toArray_1);

	var vendorPrefix = void 0;

	var jsCssMap = {
	  Webkit: '-webkit-',
	  Moz: '-moz-',
	  // IE did it wrong again ...
	  ms: '-ms-',
	  O: '-o-'
	};

	function getVendorPrefix() {
	  if (vendorPrefix !== undefined) {
	    return vendorPrefix;
	  }
	  vendorPrefix = '';
	  var style = document.createElement('p').style;
	  var testProp = 'Transform';
	  for (var key in jsCssMap) {
	    if (key + testProp in style) {
	      vendorPrefix = key;
	    }
	  }
	  return vendorPrefix;
	}

	function getTransitionName() {
	  return getVendorPrefix() ? getVendorPrefix() + 'TransitionProperty' : 'transitionProperty';
	}

	function getTransformName() {
	  return getVendorPrefix() ? getVendorPrefix() + 'Transform' : 'transform';
	}

	function setTransitionProperty(node, value) {
	  var name = getTransitionName();
	  if (name) {
	    node.style[name] = value;
	    if (name !== 'transitionProperty') {
	      node.style.transitionProperty = value;
	    }
	  }
	}

	function setTransform(node, value) {
	  var name = getTransformName();
	  if (name) {
	    node.style[name] = value;
	    if (name !== 'transform') {
	      node.style.transform = value;
	    }
	  }
	}

	function getTransitionProperty(node) {
	  return node.style.transitionProperty || node.style[getTransitionName()];
	}

	function getTransformXY(node) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
	  if (transform && transform !== 'none') {
	    var matrix = transform.replace(/[^0-9\-.,]/g, '').split(',');
	    return { x: parseFloat(matrix[12] || matrix[4], 0), y: parseFloat(matrix[13] || matrix[5], 0) };
	  }
	  return {
	    x: 0,
	    y: 0
	  };
	}

	var matrix2d = /matrix\((.*)\)/;
	var matrix3d = /matrix3d\((.*)\)/;

	function setTransformXY(node, xy) {
	  var style = window.getComputedStyle(node, null);
	  var transform = style.getPropertyValue('transform') || style.getPropertyValue(getTransformName());
	  if (transform && transform !== 'none') {
	    var arr = void 0;
	    var match2d = transform.match(matrix2d);
	    if (match2d) {
	      match2d = match2d[1];
	      arr = match2d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[4] = xy.x;
	      arr[5] = xy.y;
	      setTransform(node, 'matrix(' + arr.join(',') + ')');
	    } else {
	      var match3d = transform.match(matrix3d)[1];
	      arr = match3d.split(',').map(function (item) {
	        return parseFloat(item, 10);
	      });
	      arr[12] = xy.x;
	      arr[13] = xy.y;
	      setTransform(node, 'matrix3d(' + arr.join(',') + ')');
	    }
	  } else {
	    setTransform(node, 'translateX(' + xy.x + 'px) translateY(' + xy.y + 'px) translateZ(0)');
	  }
	}

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	var getComputedStyleX = void 0;

	// https://stackoverflow.com/a/3485654/3040605
	function forceRelayout(elem) {
	  var originalStyle = elem.style.display;
	  elem.style.display = 'none';
	  elem.offsetHeight; // eslint-disable-line
	  elem.style.display = originalStyle;
	}

	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value = value + 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	function getClientPosition(elem) {
	  var box = void 0;
	  var x = void 0;
	  var y = void 0;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj !== null && obj !== undefined && obj == obj.window;
	}

	function getDocument(node) {
	  if (isWindow(node)) {
	    return node.document;
	  }
	  if (node.nodeType === 9) {
	    return node;
	  }
	  return node.ownerDocument;
	}

	function _getComputedStyle(elem, name, cs) {
	  var computedStyle = cs;
	  var val = '';
	  var d = getDocument(elem);
	  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function getOffsetDirection(dir, option) {
	  if (dir === 'left') {
	    return option.useCssRight ? 'right' : dir;
	  }
	  return option.useCssBottom ? 'bottom' : dir;
	}

	function oppositeOffsetDirection(dir) {
	  if (dir === 'left') {
	    return 'right';
	  } else if (dir === 'right') {
	    return 'left';
	  } else if (dir === 'top') {
	    return 'bottom';
	  } else if (dir === 'bottom') {
	    return 'top';
	  }
	}

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setLeftTop(elem, offset, option) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }
	  var presetH = -999;
	  var presetV = -999;
	  var horizontalProperty = getOffsetDirection('left', option);
	  var verticalProperty = getOffsetDirection('top', option);
	  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
	  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

	  if (horizontalProperty !== 'left') {
	    presetH = 999;
	  }

	  if (verticalProperty !== 'top') {
	    presetV = 999;
	  }
	  var originalTransition = '';
	  var originalOffset = getOffset(elem);
	  if ('left' in offset || 'top' in offset) {
	    originalTransition = getTransitionProperty(elem) || '';
	    setTransitionProperty(elem, 'none');
	  }
	  if ('left' in offset) {
	    elem.style[oppositeHorizontalProperty] = '';
	    elem.style[horizontalProperty] = presetH + 'px';
	  }
	  if ('top' in offset) {
	    elem.style[oppositeVerticalProperty] = '';
	    elem.style[verticalProperty] = presetV + 'px';
	  }
	  // force relayout
	  forceRelayout(elem);
	  var old = getOffset(elem);
	  var originalStyle = {};
	  for (var key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      var dir = getOffsetDirection(key, option);
	      var preset = key === 'left' ? presetH : presetV;
	      var off = originalOffset[key] - old[key];
	      if (dir === key) {
	        originalStyle[dir] = preset + off;
	      } else {
	        originalStyle[dir] = preset - off;
	      }
	    }
	  }
	  css(elem, originalStyle);
	  // force relayout
	  forceRelayout(elem);
	  if ('left' in offset || 'top' in offset) {
	    setTransitionProperty(elem, originalTransition);
	  }
	  var ret = {};
	  for (var _key in offset) {
	    if (offset.hasOwnProperty(_key)) {
	      var _dir = getOffsetDirection(_key, option);
	      var _off = offset[_key] - originalOffset[_key];
	      if (_key === _dir) {
	        ret[_dir] = originalStyle[_dir] + _off;
	      } else {
	        ret[_dir] = originalStyle[_dir] - _off;
	      }
	    }
	  }
	  css(elem, ret);
	}

	function setTransform$1(elem, offset) {
	  var originalOffset = getOffset(elem);
	  var originalXY = getTransformXY(elem);
	  var resultXY = { x: originalXY.x, y: originalXY.y };
	  if ('left' in offset) {
	    resultXY.x = originalXY.x + offset.left - originalOffset.left;
	  }
	  if ('top' in offset) {
	    resultXY.y = originalXY.y + offset.top - originalOffset.top;
	  }
	  setTransformXY(elem, resultXY);
	}

	function setOffset(elem, offset, option) {
	  if (option.ignoreShake) {
	    var oriOffset = getOffset(elem);

	    var oLeft = oriOffset.left.toFixed(0);
	    var oTop = oriOffset.top.toFixed(0);
	    var tLeft = offset.left.toFixed(0);
	    var tTop = offset.top.toFixed(0);

	    if (oLeft === tLeft && oTop === tTop) {
	      return;
	    }
	  }

	  if (option.useCssRight || option.useCssBottom) {
	    setLeftTop(elem, offset, option);
	  } else if (option.useCssTransform && getTransformName() in document.body.style) {
	    setTransform$1(elem, offset, option);
	  } else {
	    setLeftTop(elem, offset, option);
	  }
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = void 0;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = void 0;
	  var j = void 0;
	  var i = void 0;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = void 0;
	        if (prop === 'border') {
	          cssProp = '' + prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, ex) {
	  var extra = ex;
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.getBoundingClientRect().width : elem.getBoundingClientRect().height;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  } else if (borderBoxValueOrIsBorderBox) {
	    if (extra === BORDER_INDEX) {
	      return val;
	    }
	    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle));
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay() {
	  for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  var val = void 0;
	  var elem = args[0];
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, v) {
	    var val = v;
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	function mix(to, from) {
	  for (var i in from) {
	    if (from.hasOwnProperty(i)) {
	      to[i] = from[i];
	    }
	  }
	  return to;
	}

	var utils = {
	  getWindow: function getWindow(node) {
	    if (node && node.document && node.setTimeout) {
	      return node;
	    }
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },

	  getDocument: getDocument,
	  offset: function offset(el, value, option) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value, option || {});
	    } else {
	      return getOffset(el);
	    }
	  },

	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var i = void 0;
	    var ret = {};
	    for (i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },

	  mix: mix,
	  getWindowScrollLeft: function getWindowScrollLeft(w) {
	    return getScrollLeft(w);
	  },
	  getWindowScrollTop: function getWindowScrollTop(w) {
	    return getScrollTop(w);
	  },
	  merge: function merge() {
	    var ret = {};

	    for (var _len2 = arguments.length, args = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    for (var i = 0; i < args.length; i++) {
	      utils.mix(ret, args[i]);
	    }
	    return ret;
	  },

	  viewportWidth: 0,
	  viewportHeight: 0
	};

	mix(utils, domUtils);

	/**
	 * 得到会导致元素显示不全的祖先元素
	 */

	function getOffsetParent(element) {
	  if (utils.isWindow(element) || element.nodeType === 9) {
	    return null;
	  }
	  // ie 这个也不是完全可行
	  /*
	   <div style="width: 50px;height: 100px;overflow: hidden">
	   <div style="width: 50px;height: 100px;position: relative;" id="d6">
	   元素 6 高 100px 宽 50px<br/>
	   </div>
	   </div>
	   */
	  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
	  //  In other browsers it only includes elements with position absolute, relative or
	  // fixed, not elements with overflow set to auto or scroll.
	  //        if (UA.ie && ieMode < 8) {
	  //            return element.offsetParent;
	  //        }
	  // 统一的 offsetParent 方法
	  var doc = utils.getDocument(element);
	  var body = doc.body;
	  var parent = void 0;
	  var positionStyle = utils.css(element, 'position');
	  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

	  if (!skipStatic) {
	    return element.nodeName.toLowerCase() === 'html' ? null : element.parentNode;
	  }

	  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
	    positionStyle = utils.css(parent, 'position');
	    if (positionStyle !== 'static') {
	      return parent;
	    }
	  }
	  return null;
	}

	function isAncestorFixed(element) {
	  if (utils.isWindow(element) || element.nodeType === 9) {
	    return false;
	  }

	  var doc = utils.getDocument(element);
	  var body = doc.body;
	  var parent = null;
	  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
	    var positionStyle = utils.css(parent, 'position');
	    if (positionStyle === 'fixed') {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * 获得元素的显示部分的区域
	 */
	function getVisibleRectForElement(element) {
	  var visibleRect = {
	    left: 0,
	    right: Infinity,
	    top: 0,
	    bottom: Infinity
	  };
	  var el = getOffsetParent(element);
	  var doc = utils.getDocument(element);
	  var win = doc.defaultView || doc.parentWindow;
	  var body = doc.body;
	  var documentElement = doc.documentElement;

	  // Determine the size of the visible rect by climbing the dom accounting for
	  // all scrollable containers.
	  while (el) {
	    // clientWidth is zero for inline block elements in ie.
	    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) &&
	    // body may have overflow set on it, yet we still get the entire
	    // viewport. In some browsers, el.offsetParent may be
	    // document.documentElement, so check for that too.
	    el !== body && el !== documentElement && utils.css(el, 'overflow') !== 'visible') {
	      var pos = utils.offset(el);
	      // add border
	      pos.left += el.clientLeft;
	      pos.top += el.clientTop;
	      visibleRect.top = Math.max(visibleRect.top, pos.top);
	      visibleRect.right = Math.min(visibleRect.right,
	      // consider area without scrollBar
	      pos.left + el.clientWidth);
	      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
	      visibleRect.left = Math.max(visibleRect.left, pos.left);
	    } else if (el === body || el === documentElement) {
	      break;
	    }
	    el = getOffsetParent(el);
	  }

	  // Set element position to fixed
	  // make sure absolute element itself don't affect it's visible area
	  // https://github.com/ant-design/ant-design/issues/7601
	  var originalPosition = null;
	  if (!utils.isWindow(element) && element.nodeType !== 9) {
	    originalPosition = element.style.position;
	    var position = utils.css(element, 'position');
	    if (position === 'absolute') {
	      element.style.position = 'fixed';
	    }
	  }

	  var scrollX = utils.getWindowScrollLeft(win);
	  var scrollY = utils.getWindowScrollTop(win);
	  var viewportWidth = utils.viewportWidth(win);
	  var viewportHeight = utils.viewportHeight(win);
	  var documentWidth = documentElement.scrollWidth;
	  var documentHeight = documentElement.scrollHeight;

	  // scrollXXX on html is sync with body which means overflow: hidden on body gets wrong scrollXXX.
	  // We should cut this ourself.
	  var bodyStyle = window.getComputedStyle(body);
	  if (bodyStyle.overflowX === 'hidden') {
	    documentWidth = win.innerWidth;
	  }
	  if (bodyStyle.overflowY === 'hidden') {
	    documentHeight = win.innerHeight;
	  }

	  // Reset element position after calculate the visible area
	  if (element.style) {
	    element.style.position = originalPosition;
	  }

	  if (isAncestorFixed(element)) {
	    // Clip by viewport's size.
	    visibleRect.left = Math.max(visibleRect.left, scrollX);
	    visibleRect.top = Math.max(visibleRect.top, scrollY);
	    visibleRect.right = Math.min(visibleRect.right, scrollX + viewportWidth);
	    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + viewportHeight);
	  } else {
	    // Clip by document's size.
	    var maxVisibleWidth = Math.max(documentWidth, scrollX + viewportWidth);
	    visibleRect.right = Math.min(visibleRect.right, maxVisibleWidth);

	    var maxVisibleHeight = Math.max(documentHeight, scrollY + viewportHeight);
	    visibleRect.bottom = Math.min(visibleRect.bottom, maxVisibleHeight);
	  }

	  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
	}

	function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
	  var pos = utils.clone(elFuturePos);
	  var size = {
	    width: elRegion.width,
	    height: elRegion.height
	  };

	  if (overflow.adjustX && pos.left < visibleRect.left) {
	    pos.left = visibleRect.left;
	  }

	  // Left edge inside and right edge outside viewport, try to resize it.
	  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
	    size.width -= pos.left + size.width - visibleRect.right;
	  }

	  // Right edge outside viewport, try to move it.
	  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
	    // 保证左边界和可视区域左边界对齐
	    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
	  }

	  // Top edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top < visibleRect.top) {
	    pos.top = visibleRect.top;
	  }

	  // Top edge inside and bottom edge outside viewport, try to resize it.
	  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
	    size.height -= pos.top + size.height - visibleRect.bottom;
	  }

	  // Bottom edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
	    // 保证上边界和可视区域上边界对齐
	    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
	  }

	  return utils.mix(pos, size);
	}

	function getRegion(node) {
	  var offset = void 0;
	  var w = void 0;
	  var h = void 0;
	  if (!utils.isWindow(node) && node.nodeType !== 9) {
	    offset = utils.offset(node);
	    w = utils.outerWidth(node);
	    h = utils.outerHeight(node);
	  } else {
	    var win = utils.getWindow(node);
	    offset = {
	      left: utils.getWindowScrollLeft(win),
	      top: utils.getWindowScrollTop(win)
	    };
	    w = utils.viewportWidth(win);
	    h = utils.viewportHeight(win);
	  }
	  offset.width = w;
	  offset.height = h;
	  return offset;
	}

	/**
	 * 获取 node 上的 align 对齐点 相对于页面的坐标
	 */

	function getAlignOffset(region, align) {
	  var V = align.charAt(0);
	  var H = align.charAt(1);
	  var w = region.width;
	  var h = region.height;

	  var x = region.left;
	  var y = region.top;

	  if (V === 'c') {
	    y += h / 2;
	  } else if (V === 'b') {
	    y += h;
	  }

	  if (H === 'c') {
	    x += w / 2;
	  } else if (H === 'r') {
	    x += w;
	  }

	  return {
	    left: x,
	    top: y
	  };
	}

	function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
	  var p1 = getAlignOffset(refNodeRegion, points[1]);
	  var p2 = getAlignOffset(elRegion, points[0]);
	  var diff = [p2.left - p1.left, p2.top - p1.top];

	  return {
	    left: elRegion.left - diff[0] + offset[0] - targetOffset[0],
	    top: elRegion.top - diff[1] + offset[1] - targetOffset[1]
	  };
	}

	/**
	 * align dom node flexibly
	 * @author yiminghe@gmail.com
	 */

	// http://yiminghe.iteye.com/blog/1124720

	function isFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
	}

	function isFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
	}

	function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
	}

	function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
	}

	function flip(points, reg, map) {
	  var ret = [];
	  utils.each(points, function (p) {
	    ret.push(p.replace(reg, function (m) {
	      return map[m];
	    }));
	  });
	  return ret;
	}

	function flipOffset(offset, index) {
	  offset[index] = -offset[index];
	  return offset;
	}

	function convertOffset(str, offsetLen) {
	  var n = void 0;
	  if (/%$/.test(str)) {
	    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
	  } else {
	    n = parseInt(str, 10);
	  }
	  return n || 0;
	}

	function normalizeOffset(offset, el) {
	  offset[0] = convertOffset(offset[0], el.width);
	  offset[1] = convertOffset(offset[1], el.height);
	}

	/**
	 * @param el
	 * @param tgtRegion 参照节点所占的区域: { left, top, width, height }
	 * @param align
	 */
	function doAlign(el, tgtRegion, align, isTgtRegionVisible) {
	  var points = align.points;
	  var offset = align.offset || [0, 0];
	  var targetOffset = align.targetOffset || [0, 0];
	  var overflow = align.overflow;
	  var source = align.source || el;
	  offset = [].concat(offset);
	  targetOffset = [].concat(targetOffset);
	  overflow = overflow || {};
	  var newOverflowCfg = {};
	  var fail = 0;
	  // 当前节点可以被放置的显示区域
	  var visibleRect = getVisibleRectForElement(source);
	  // 当前节点所占的区域, left/top/width/height
	  var elRegion = getRegion(source);
	  // 将 offset 转换成数值，支持百分比
	  normalizeOffset(offset, elRegion);
	  normalizeOffset(targetOffset, tgtRegion);
	  // 当前节点将要被放置的位置
	  var elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
	  // 当前节点将要所处的区域
	  var newElRegion = utils.merge(elRegion, elFuturePos);

	  // 如果可视区域不能完全放置当前节点时允许调整
	  if (visibleRect && (overflow.adjustX || overflow.adjustY) && isTgtRegionVisible) {
	    if (overflow.adjustX) {
	      // 如果横向不能放下
	      if (isFailX(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var newPoints = flip(points, /[lr]/ig, {
	          l: 'r',
	          r: 'l'
	        });
	        // 偏移量也反下
	        var newOffset = flipOffset(offset, 0);
	        var newTargetOffset = flipOffset(targetOffset, 0);
	        var newElFuturePos = getElFuturePos(elRegion, tgtRegion, newPoints, newOffset, newTargetOffset);

	        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }

	    if (overflow.adjustY) {
	      // 如果纵向不能放下
	      if (isFailY(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var _newPoints = flip(points, /[tb]/ig, {
	          t: 'b',
	          b: 't'
	        });
	        // 偏移量也反下
	        var _newOffset = flipOffset(offset, 1);
	        var _newTargetOffset = flipOffset(targetOffset, 1);
	        var _newElFuturePos = getElFuturePos(elRegion, tgtRegion, _newPoints, _newOffset, _newTargetOffset);

	        if (!isCompleteFailY(_newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = _newPoints;
	          offset = _newOffset;
	          targetOffset = _newTargetOffset;
	        }
	      }
	    }

	    // 如果失败，重新计算当前节点将要被放置的位置
	    if (fail) {
	      elFuturePos = getElFuturePos(elRegion, tgtRegion, points, offset, targetOffset);
	      utils.mix(newElRegion, elFuturePos);
	    }
	    var isStillFailX = isFailX(elFuturePos, elRegion, visibleRect);
	    var isStillFailY = isFailY(elFuturePos, elRegion, visibleRect);
	    // 检查反下后的位置是否可以放下了，如果仍然放不下：
	    // 1. 复原修改过的定位参数
	    if (isStillFailX || isStillFailY) {
	      points = align.points;
	      offset = align.offset || [0, 0];
	      targetOffset = align.targetOffset || [0, 0];
	    }
	    // 2. 只有指定了可以调整当前方向才调整
	    newOverflowCfg.adjustX = overflow.adjustX && isStillFailX;
	    newOverflowCfg.adjustY = overflow.adjustY && isStillFailY;

	    // 确实要调整，甚至可能会调整高度宽度
	    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
	      newElRegion = adjustForViewport(elFuturePos, elRegion, visibleRect, newOverflowCfg);
	    }
	  }

	  // need judge to in case set fixed with in css on height auto element
	  if (newElRegion.width !== elRegion.width) {
	    utils.css(source, 'width', utils.width(source) + newElRegion.width - elRegion.width);
	  }

	  if (newElRegion.height !== elRegion.height) {
	    utils.css(source, 'height', utils.height(source) + newElRegion.height - elRegion.height);
	  }

	  // https://github.com/kissyteam/kissy/issues/190
	  // 相对于屏幕位置没变，而 left/top 变了
	  // 例如 <div 'relative'><el absolute></div>
	  utils.offset(source, {
	    left: newElRegion.left,
	    top: newElRegion.top
	  }, {
	    useCssRight: align.useCssRight,
	    useCssBottom: align.useCssBottom,
	    useCssTransform: align.useCssTransform,
	    ignoreShake: align.ignoreShake
	  });

	  return {
	    points: points,
	    offset: offset,
	    targetOffset: targetOffset,
	    overflow: newOverflowCfg
	  };
	}
	/**
	 *  2012-04-26 yiminghe@gmail.com
	 *   - 优化智能对齐算法
	 *   - 慎用 resizeXX
	 *
	 *  2011-07-13 yiminghe@gmail.com note:
	 *   - 增加智能对齐，以及大小调整选项
	 **/

	function isOutOfVisibleRect(target) {
	  var visibleRect = getVisibleRectForElement(target);
	  var targetRegion = getRegion(target);

	  return !visibleRect || targetRegion.left + targetRegion.width <= visibleRect.left || targetRegion.top + targetRegion.height <= visibleRect.top || targetRegion.left >= visibleRect.right || targetRegion.top >= visibleRect.bottom;
	}

	function alignElement(el, refNode, align) {
	  var target = align.target || refNode;
	  var refNodeRegion = getRegion(target);

	  var isTargetNotOutOfVisible = !isOutOfVisibleRect(target);

	  return doAlign(el, refNodeRegion, align, isTargetNotOutOfVisible);
	}

	alignElement.__getOffsetParent = getOffsetParent;

	alignElement.__getVisibleRectForElement = getVisibleRectForElement;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	/**
	 * `tgtPoint`: { pageX, pageY } or { clientX, clientY }.
	 * If client position provided, will internal convert to page position.
	 */

	function alignPoint(el, tgtPoint, align) {
	  var pageX = void 0;
	  var pageY = void 0;

	  var doc = utils.getDocument(el);
	  var win = doc.defaultView || doc.parentWindow;

	  var scrollX = utils.getWindowScrollLeft(win);
	  var scrollY = utils.getWindowScrollTop(win);
	  var viewportWidth = utils.viewportWidth(win);
	  var viewportHeight = utils.viewportHeight(win);

	  if ('pageX' in tgtPoint) {
	    pageX = tgtPoint.pageX;
	  } else {
	    pageX = scrollX + tgtPoint.clientX;
	  }

	  if ('pageY' in tgtPoint) {
	    pageY = tgtPoint.pageY;
	  } else {
	    pageY = scrollY + tgtPoint.clientY;
	  }

	  var tgtRegion = {
	    left: pageX,
	    top: pageY,
	    width: 0,
	    height: 0
	  };

	  var pointInView = pageX >= 0 && pageX <= scrollX + viewportWidth && pageY >= 0 && pageY <= scrollY + viewportHeight;

	  // Provide default target point
	  var points = [align.points[0], 'cc'];

	  return doAlign(el, tgtRegion, _extends({}, align, { points: points }), pointInView);
	}

	var Align_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _domAlign2 = _interopRequireDefault(alignElement);



	var _addEventListener2 = _interopRequireDefault(addEventListener);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is quoted from rc-util.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * homepage: https://github.com/react-component/util
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	//import isWindow from './isWindow';

	function isWindow(obj) {
	  /* eslint no-eq-null: 0 */
	  /* eslint eqeqeq: 0 */
	  return obj != null && obj == obj.window;
	}

	function buffer(fn, ms) {
	  var timer = void 0;

	  function clear() {
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	  }

	  function bufferFn() {
	    clear();
	    timer = setTimeout(fn, ms);
	  }

	  bufferFn.clear = clear;

	  return bufferFn;
	}

	var propTypes$1 = {
	  childrenProps: _propTypes2.default.object,
	  align: _propTypes2.default.object.isRequired,
	  target: _propTypes2.default.func,
	  onAlign: _propTypes2.default.func,
	  monitorBufferTime: _propTypes2.default.number,
	  monitorWindowResize: _propTypes2.default.bool,
	  disabled: _propTypes2.default.bool,
	  children: _propTypes2.default.any
	};

	var defaultProps = {
	  target: function target() {
	    return window;
	  },
	  onAlign: function onAlign() {},

	  monitorBufferTime: 50,
	  monitorWindowResize: false,
	  disabled: false
	};

	var Align = function (_React$Component) {
	  _inherits(Align, _React$Component);

	  function Align(props) {
	    _classCallCheck(this, Align);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    return _this;
	  }

	  Align.prototype.componentDidMount = function componentDidMount() {
	    var props = this.props;
	    // if parent ref not attached .... use document.getElementById
	    this.forceAlign();
	    if (!props.disabled && props.monitorWindowResize) {
	      this.startMonitorWindowResize();
	    }
	  };

	  Align.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var reAlign = false;
	    var props = this.props;

	    if (!props.disabled) {
	      if (prevProps.disabled || prevProps.align !== props.align) {
	        reAlign = true;
	      } else {
	        var lastTarget = prevProps.target();
	        var currentTarget = props.target();
	        if (isWindow(lastTarget) && isWindow(currentTarget)) {
	          reAlign = false;
	        } else if (lastTarget !== currentTarget) {
	          reAlign = true;
	        }
	      }
	    }

	    if (reAlign) {
	      this.forceAlign();
	    }

	    if (props.monitorWindowResize && !props.disabled) {
	      this.startMonitorWindowResize();
	    } else {
	      this.stopMonitorWindowResize();
	    }
	  };

	  Align.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.stopMonitorWindowResize();
	  };

	  Align.prototype.render = function render() {
	    var _props = this.props,
	        childrenProps = _props.childrenProps,
	        children = _props.children;

	    var child = _react2.default.Children.only(children);
	    if (childrenProps) {
	      var newProps = {};
	      for (var prop in childrenProps) {
	        if (childrenProps.hasOwnProperty(prop)) {
	          newProps[prop] = this.props[childrenProps[prop]];
	        }
	      }
	      return _react2.default.cloneElement(child, newProps);
	    }
	    return child;
	  };

	  return Align;
	}(_react2.default.Component);

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.startMonitorWindowResize = function () {
	    if (!_this2.resizeHandler) {
	      _this2.bufferMonitor = buffer(_this2.forceAlign, _this2.props.monitorBufferTime);
	      _this2.resizeHandler = (0, _addEventListener2.default)(window, 'resize', _this2.bufferMonitor);
	    }
	  };

	  this.stopMonitorWindowResize = function () {
	    if (_this2.resizeHandler) {
	      _this2.bufferMonitor.clear();
	      _this2.resizeHandler.remove();
	      _this2.resizeHandler = null;
	    }
	  };

	  this.forceAlign = function () {
	    var props = _this2.props;
	    if (!props.disabled) {
	      var source = _reactDom2.default.findDOMNode(_this2);
	      props.onAlign(source, (0, _domAlign2.default)(source, props.target(), props.align));
	    }
	  };
	};

	Align.defaultProps = defaultProps;
	Align.propTypes = propTypes$1;

	exports.default = Align;
	});

	unwrapExports(Align_1);

	var lib$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.Align = exports.toArray = exports.cssAnimation = exports.addEventListener = exports.contains = exports.KeyCode = exports.createChainedFunction = exports.splitComponent = exports.isRequiredForA11y = exports.elementType = exports.deprecated = exports.componentOrElement = exports.all = undefined;



	var _all3 = _interopRequireDefault(all_1);



	var _componentOrElement3 = _interopRequireDefault(componentOrElement);



	var _deprecated3 = _interopRequireDefault(deprecated_1);



	var _elementType3 = _interopRequireDefault(elementType_1);



	var _isRequiredForA11y3 = _interopRequireDefault(isRequiredForA11y_1);



	var _splitComponent3 = _interopRequireDefault(splitComponent);



	var _createChainedFunction3 = _interopRequireDefault(createChainedFunction_1);



	var _keyCode2 = _interopRequireDefault(keyCode);



	var _contains3 = _interopRequireDefault(contains_1);



	var _addEventListener3 = _interopRequireDefault(addEventListener);



	var _cssAnimation3 = _interopRequireDefault(cssAnimation_1);



	var _toArray3 = _interopRequireDefault(toArray_1);



	var _Align3 = _interopRequireDefault(Align_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.all = _all3.default;
	exports.componentOrElement = _componentOrElement3.default;
	exports.deprecated = _deprecated3.default;
	exports.elementType = _elementType3.default;
	exports.isRequiredForA11y = _isRequiredForA11y3.default;
	exports.splitComponent = _splitComponent3.default;
	exports.createChainedFunction = _createChainedFunction3.default;
	exports.KeyCode = _keyCode2.default;
	exports.contains = _contains3.default;
	exports.addEventListener = _addEventListener3.default;
	exports.cssAnimation = _cssAnimation3.default;
	exports.toArray = _toArray3.default;
	//export getContainerRenderMixin from './getContainerRenderMixin';

	exports.Align = _Align3.default;
	});

	unwrapExports(lib$1);
	var lib_1 = lib$1.Align;
	var lib_2 = lib$1.toArray;
	var lib_3 = lib$1.cssAnimation;
	var lib_4 = lib$1.addEventListener;
	var lib_5 = lib$1.contains;
	var lib_6 = lib$1.KeyCode;
	var lib_7 = lib$1.createChainedFunction;
	var lib_8 = lib$1.splitComponent;
	var lib_9 = lib$1.isRequiredForA11y;
	var lib_10 = lib$1.elementType;
	var lib_11 = lib$1.deprecated;
	var lib_12 = lib$1.componentOrElement;
	var lib_13 = lib$1.all;

	var ownerDocument_1$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = ownerDocument;

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	module.exports = exports["default"];
	});

	unwrapExports(ownerDocument_1$1);

	var ownerDocument = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (componentOrElement) {
	  return (0, _ownerDocument2["default"])(_reactDom2["default"].findDOMNode(componentOrElement));
	};



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	module.exports = exports['default'];
	});

	unwrapExports(ownerDocument);

	var getContainer_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = getContainer;



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	/**
	 * 获取容器组件
	 * @param  {[type]} container        [description]
	 * @param  {[type]} defaultContainer [description]
	 * @return {[type]}                  [description]
	 */
	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _reactDom2["default"].findDOMNode(container) || defaultContainer;
	}
	module.exports = exports['default'];
	});

	unwrapExports(getContainer_1);

	var Portal_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument);



	var _getContainer2 = _interopRequireDefault(getContainer_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var isReact16 = _reactDom2["default"].createPortal !== undefined;
	var createPortal = isReact16 ? _reactDom2["default"].createPortal : _reactDom2["default"].unstable_renderSubtreeIntoContainer;

	var propTypes$1 = {
	  /**
	   * 存放子组件的容器
	   */
	  container: _propTypes2["default"].oneOfType([lib$1.componentOrElement, _propTypes2["default"].func])
	};

	var defaultProps = {};

	/**
	 * Portal组件是将子组件渲染
	 */

	var Portal = function (_Component) {
	  _inherits(Portal, _Component);

	  function Portal(props) {
	    _classCallCheck(this, Portal);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.getMountNode = _this.getMountNode.bind(_this);
	    _this.getOverlayDOMNode = _this.getOverlayDOMNode.bind(_this);
	    _this.mountOverlayTarget = _this.mountOverlayTarget.bind(_this);
	    _this.unmountOverlayTarget = _this.unmountOverlayTarget.bind(_this);
	    _this.renderOverlay = _this.renderOverlay.bind(_this);
	    _this.unrenderOverlay = _this.unrenderOverlay.bind(_this);

	    _this.overlayTarget = isReact16 ? document.createElement('div') : null;
	    return _this;
	  }

	  Portal.prototype.componentDidMount = function componentDidMount() {
	    if (isReact16) {
	      this.portalContainerNode = (0, _getContainer2["default"])(this.props.container, (0, _ownerDocument2["default"])(this).body);
	      this.portalContainerNode.appendChild(this.overlayTarget);
	    } else {
	      this.renderOverlay();
	    }

	    this.mounted = true;
	  };

	  Portal.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (isReact16) {
	      var overlay = !this.props.children ? null : _react2["default"].Children.only(this.props.children);
	      if (overlay === null) {
	        this.unrenderOverlay();
	        this.unmountOverlayTarget();
	      }
	    } else {
	      this.renderOverlay();
	    }
	  };
	  //this._overlayTarget为当前的要添加的子组件， this._portalContainerNode要添加组件的容器元素


	  Portal.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.overlayTarget && nextProps.container !== this.props.container) {
	      this.portalContainerNode.removeChild(this.overlayTarget);
	      this.portalContainerNode = (0, _getContainer2["default"])(nextProps.container, (0, _ownerDocument2["default"])(this).body);
	      this.portalContainerNode.appendChild(this.overlayTarget);
	    }
	  };

	  Portal.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unrenderOverlay();
	    this.unmountOverlayTarget();

	    this.mounted = false;
	  };

	  Portal.prototype.getMountNode = function getMountNode() {
	    return this.overlayTarget;
	  };

	  Portal.prototype.getOverlayDOMNode = function getOverlayDOMNode() {
	    if (!this.mounted) {
	      throw new Error('getOverlayDOMNode(): A component must be mounted to have a DOM node.');
	    }

	    if (this.overlayInstance) {
	      return _reactDom2["default"].findDOMNode(this.overlayInstance);
	    }

	    return null;
	  };

	  /**
	   * 如果要添加的子组件不存在，就将div添加到要添加容器的DOM中；
	   */

	  Portal.prototype.mountOverlayTarget = function mountOverlayTarget() {
	    if (!this.overlayTarget) {
	      this.overlayTarget = document.createElement('div');
	      this.portalContainerNode = (0, _getContainer2["default"])(this.props.container, (0, _ownerDocument2["default"])(this).body);
	      this.portalContainerNode.appendChild(this.overlayTarget);
	    }
	  };
	  /**
	   * 将要添加的子元素从容器中移除，并把变量置为null
	   */


	  Portal.prototype.unmountOverlayTarget = function unmountOverlayTarget() {
	    if (this.overlayTarget) {
	      this.portalContainerNode.removeChild(this.overlayTarget);
	      this.overlayTarget = null;
	    }
	    this.portalContainerNode = null;
	  };
	  /**
	   * 手动渲染_overlayTarget
	   */


	  Portal.prototype.renderOverlay = function renderOverlay() {

	    var overlay = !this.props.children ? null : _react2["default"].Children.only(this.props.children);

	    // Save reference for future access.
	    if (overlay !== null) {
	      this.mountOverlayTarget();
	      this.overlayInstance = _reactDom2["default"].unstable_renderSubtreeIntoContainer(this, overlay, this.overlayTarget);
	    } else {
	      // Unrender if the component is null for transitions to null
	      this.unrenderOverlay();
	      this.unmountOverlayTarget();
	    }
	  };
	  /**
	   * 销毁_overlayTarget组件。并把_overlayInstance置为null
	   */


	  Portal.prototype.unrenderOverlay = function unrenderOverlay() {
	    if (this.overlayTarget) {
	      !isReact16 && _reactDom2["default"].unmountComponentAtNode(this.overlayTarget);
	      this.overlayInstance = null;
	    }
	  };

	  Portal.prototype.render = function render() {
	    if (!isReact16) {
	      return null;
	    }

	    var overlay = !this.props.children ? null : _react2["default"].Children.only(this.props.children);

	    return _reactDom2["default"].createPortal(overlay, this.overlayTarget);
	  };

	  return Portal;
	}(React__default.Component);

	Portal.propTypes = propTypes$1;
	Portal.defaultProps = defaultProps;

	exports["default"] = Portal;
	module.exports = exports['default'];
	});

	unwrapExports(Portal_1);

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	});

	unwrapExports(interopRequireDefault);

	var camelize_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = camelize;
	var rHyphen = /-(.)/g;

	function camelize(string) {
	  return string.replace(rHyphen, function (_, chr) {
	    return chr.toUpperCase();
	  });
	}

	module.exports = exports["default"];
	});

	unwrapExports(camelize_1);

	var camelizeStyle = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = camelizeStyleName;

	var _camelize = interopRequireDefault(camelize_1);

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
	 */
	var msPattern = /^-ms-/;

	function camelizeStyleName(string) {
	  return (0, _camelize.default)(string.replace(msPattern, 'ms-'));
	}

	module.exports = exports["default"];
	});

	unwrapExports(camelizeStyle);

	var hyphenate_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = hyphenate;
	var rUpper = /([A-Z])/g;

	function hyphenate(string) {
	  return string.replace(rUpper, '-$1').toLowerCase();
	}

	module.exports = exports["default"];
	});

	unwrapExports(hyphenate_1);

	var hyphenateStyle = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = hyphenateStyleName;

	var _hyphenate = interopRequireDefault(hyphenate_1);

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
	 */
	var msPattern = /^ms-/;

	function hyphenateStyleName(string) {
	  return (0, _hyphenate.default)(string).replace(msPattern, '-ms-');
	}

	module.exports = exports["default"];
	});

	unwrapExports(hyphenateStyle);

	var getComputedStyle = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = _getComputedStyle;

	var _camelizeStyle = interopRequireDefault(camelizeStyle);

	var rposition = /^(top|right|bottom|left)$/;
	var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

	function _getComputedStyle(node) {
	  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
	  var doc = node.ownerDocument;
	  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : {
	    //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
	    getPropertyValue: function getPropertyValue(prop) {
	      var style = node.style;
	      prop = (0, _camelizeStyle.default)(prop);
	      if (prop == 'float') prop = 'styleFloat';
	      var current = node.currentStyle[prop] || null;
	      if (current == null && style && style[prop]) current = style[prop];

	      if (rnumnonpx.test(current) && !rposition.test(prop)) {
	        // Remember the original values
	        var left = style.left;
	        var runStyle = node.runtimeStyle;
	        var rsLeft = runStyle && runStyle.left; // Put in the new values to get a computed value out

	        if (rsLeft) runStyle.left = node.currentStyle.left;
	        style.left = prop === 'fontSize' ? '1em' : current;
	        current = style.pixelLeft + 'px'; // Revert the changed values

	        style.left = left;
	        if (rsLeft) runStyle.left = rsLeft;
	      }

	      return current;
	    }
	  };
	}

	module.exports = exports["default"];
	});

	unwrapExports(getComputedStyle);

	var removeStyle_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = removeStyle;

	function removeStyle(node, key) {
	  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
	}

	module.exports = exports["default"];
	});

	unwrapExports(removeStyle_1);

	var inDOM$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = void 0;

	var _default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(inDOM$1);

	var properties = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = void 0;

	var _inDOM = interopRequireDefault(inDOM$1);

	var transform = 'transform';
	exports.transform = transform;
	var prefix, transitionEnd, animationEnd;
	exports.animationEnd = animationEnd;
	exports.transitionEnd = transitionEnd;
	var transitionProperty, transitionDuration, transitionTiming, transitionDelay;
	exports.transitionDelay = transitionDelay;
	exports.transitionTiming = transitionTiming;
	exports.transitionDuration = transitionDuration;
	exports.transitionProperty = transitionProperty;
	var animationName, animationDuration, animationTiming, animationDelay;
	exports.animationDelay = animationDelay;
	exports.animationTiming = animationTiming;
	exports.animationDuration = animationDuration;
	exports.animationName = animationName;

	if (_inDOM.default) {
	  var _getTransitionPropert = getTransitionProperties();

	  prefix = _getTransitionPropert.prefix;
	  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
	  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;
	  exports.transform = transform = prefix + "-" + transform;
	  exports.transitionProperty = transitionProperty = prefix + "-transition-property";
	  exports.transitionDuration = transitionDuration = prefix + "-transition-duration";
	  exports.transitionDelay = transitionDelay = prefix + "-transition-delay";
	  exports.transitionTiming = transitionTiming = prefix + "-transition-timing-function";
	  exports.animationName = animationName = prefix + "-animation-name";
	  exports.animationDuration = animationDuration = prefix + "-animation-duration";
	  exports.animationTiming = animationTiming = prefix + "-animation-delay";
	  exports.animationDelay = animationDelay = prefix + "-animation-timing-function";
	}

	var _default = {
	  transform: transform,
	  end: transitionEnd,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};
	exports.default = _default;

	function getTransitionProperties() {
	  var style = document.createElement('div').style;
	  var vendorMap = {
	    O: function O(e) {
	      return "o" + e.toLowerCase();
	    },
	    Moz: function Moz(e) {
	      return e.toLowerCase();
	    },
	    Webkit: function Webkit(e) {
	      return "webkit" + e;
	    },
	    ms: function ms(e) {
	      return "MS" + e;
	    }
	  };
	  var vendors = Object.keys(vendorMap);
	  var transitionEnd, animationEnd;
	  var prefix = '';

	  for (var i = 0; i < vendors.length; i++) {
	    var vendor = vendors[i];

	    if (vendor + "TransitionProperty" in style) {
	      prefix = "-" + vendor.toLowerCase();
	      transitionEnd = vendorMap[vendor]('TransitionEnd');
	      animationEnd = vendorMap[vendor]('AnimationEnd');
	      break;
	    }
	  }

	  if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';
	  if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';
	  style = null;
	  return {
	    animationEnd: animationEnd,
	    transitionEnd: transitionEnd,
	    prefix: prefix
	  };
	}
	});

	unwrapExports(properties);
	var properties_1 = properties.animationEnd;
	var properties_2 = properties.animationDelay;
	var properties_3 = properties.animationTiming;
	var properties_4 = properties.animationDuration;
	var properties_5 = properties.animationName;
	var properties_6 = properties.transitionEnd;
	var properties_7 = properties.transitionDuration;
	var properties_8 = properties.transitionDelay;
	var properties_9 = properties.transitionTiming;
	var properties_10 = properties.transitionProperty;
	var properties_11 = properties.transform;

	var isTransform_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = isTransform;
	var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;

	function isTransform(property) {
	  return !!(property && supportedTransforms.test(property));
	}

	module.exports = exports["default"];
	});

	unwrapExports(isTransform_1);

	var style_1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = style;

	var _camelizeStyle = interopRequireDefault(camelizeStyle);

	var _hyphenateStyle = interopRequireDefault(hyphenateStyle);

	var _getComputedStyle2 = interopRequireDefault(getComputedStyle);

	var _removeStyle = interopRequireDefault(removeStyle_1);



	var _isTransform = interopRequireDefault(isTransform_1);

	function style(node, property, value) {
	  var css = '';
	  var transforms = '';
	  var props = property;

	  if (typeof property === 'string') {
	    if (value === undefined) {
	      return node.style[(0, _camelizeStyle.default)(property)] || (0, _getComputedStyle2.default)(node).getPropertyValue((0, _hyphenateStyle.default)(property));
	    } else {
	      (props = {})[property] = value;
	    }
	  }

	  Object.keys(props).forEach(function (key) {
	    var value = props[key];

	    if (!value && value !== 0) {
	      (0, _removeStyle.default)(node, (0, _hyphenateStyle.default)(key));
	    } else if ((0, _isTransform.default)(key)) {
	      transforms += key + "(" + value + ") ";
	    } else {
	      css += (0, _hyphenateStyle.default)(key) + ": " + value + ";";
	    }
	  });

	  if (transforms) {
	    css += properties.transform + ": " + transforms + ";";
	  }

	  node.style.cssText += ';' + css;
	}

	module.exports = exports["default"];
	});

	unwrapExports(style_1);

	var hasClass_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = hasClass;

	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	module.exports = exports["default"];
	});

	unwrapExports(hasClass_1);

	var addClass_1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = addClass;

	var _hasClass = interopRequireDefault(hasClass_1);

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
	}

	module.exports = exports["default"];
	});

	unwrapExports(addClass_1);

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}

	var removeClass = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	};

	var _class = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = void 0;

	var _addClass = interopRequireDefault(addClass_1);

	exports.addClass = _addClass.default;

	var _removeClass = interopRequireDefault(removeClass);

	exports.removeClass = _removeClass.default;

	var _hasClass = interopRequireDefault(hasClass_1);

	exports.hasClass = _hasClass.default;
	var _default = {
	  addClass: _addClass.default,
	  removeClass: _removeClass.default,
	  hasClass: _hasClass.default
	};
	exports.default = _default;
	});

	unwrapExports(_class);
	var _class_1 = _class.addClass;
	var _class_2 = _class.removeClass;
	var _class_3 = _class.hasClass;

	var scrollbarSize_1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = scrollbarSize;

	var _inDOM = interopRequireDefault(inDOM$1);

	var size;

	function scrollbarSize(recalc) {
	  if (!size && size !== 0 || recalc) {
	    if (_inDOM.default) {
	      var scrollDiv = document.createElement('div');
	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';
	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }

	  return size;
	}

	module.exports = exports["default"];
	});

	unwrapExports(scrollbarSize_1);

	var isWindow$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = getWindow;

	function getWindow(node) {
	  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
	}

	module.exports = exports["default"];
	});

	unwrapExports(isWindow$1);

	var isOverflowing_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = isOverflowing;



	var _isWindow2 = _interopRequireDefault(isWindow$1);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function isBody(node) {
	  return node && node.tagName.toLowerCase() === 'body';
	}

	function bodyIsOverflowing(node) {
	  var doc = (0, _ownerDocument2["default"])(node);
	  var win = (0, _isWindow2["default"])(doc);
	  var fullWidth = win.innerWidth;

	  // Support: ie8, no innerWidth
	  if (!fullWidth) {
	    var documentElementRect = doc.documentElement.getBoundingClientRect();
	    fullWidth = documentElementRect.right - Math.abs(documentElementRect.left);
	  }

	  return doc.body.clientWidth < fullWidth;
	}

	function isOverflowing(container) {
	  var win = (0, _isWindow2["default"])(container);

	  return win || isBody(container) ? bodyIsOverflowing(container) : container.scrollHeight > container.clientHeight;
	}
	module.exports = exports['default'];
	});

	unwrapExports(isOverflowing_1);

	var manageAriaHidden = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ariaHidden = ariaHidden;
	exports.hideSiblings = hideSiblings;
	exports.showSiblings = showSiblings;

	var BLACKLIST = ['template', 'script', 'style'];

	var isHidable = function isHidable(_ref) {
	  var nodeType = _ref.nodeType,
	      tagName = _ref.tagName;
	  return nodeType === 1 && BLACKLIST.indexOf(tagName.toLowerCase()) === -1;
	};

	var siblings = function siblings(container, mount, cb) {
	  mount = [].concat(mount);

	  [].forEach.call(container.children, function (node) {
	    if (mount.indexOf(node) === -1 && isHidable(node)) {
	      cb(node);
	    }
	  });
	};

	function ariaHidden(show, node) {
	  if (!node) {
	    return;
	  }
	  if (show) {
	    node.setAttribute('aria-hidden', 'true');
	  } else {
	    node.removeAttribute('aria-hidden');
	  }
	}

	function hideSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(true, node);
	  });
	}

	function showSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(false, node);
	  });
	}
	});

	unwrapExports(manageAriaHidden);
	var manageAriaHidden_1 = manageAriaHidden.ariaHidden;
	var manageAriaHidden_2 = manageAriaHidden.hideSiblings;
	var manageAriaHidden_3 = manageAriaHidden.showSiblings;

	var ModalManager_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _style2 = _interopRequireDefault(style_1);



	var _class2 = _interopRequireDefault(_class);



	var _scrollbarSize2 = _interopRequireDefault(scrollbarSize_1);



	var _isOverflowing2 = _interopRequireDefault(isOverflowing_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function findIndexOf(arr, cb) {
	  var idx = -1;
	  arr.some(function (d, i) {
	    if (cb(d, i)) {
	      idx = i;
	      return true;
	    }
	  });
	  return idx;
	}

	//查找容器
	function findContainer(data, modal) {
	  return findIndexOf(data, function (d) {
	    return d.modals.indexOf(modal) !== -1;
	  });
	}

	//设置容器style
	function setContainerStyle(state, container) {
	  var style = { overflow: 'hidden' };

	  state.style = {
	    overflow: container.style.overflow,
	    paddingRight: container.style.paddingRight
	  };

	  if (state.overflowing) {
	    //设置内边距，和添加滚动条宽度
	    style.paddingRight = parseInt((0, _style2["default"])(container, 'paddingRight') || 0, 10) + (0, _scrollbarSize2["default"])() + 'px';
	  }

	  (0, _style2["default"])(container, style);
	}
	//移除容器style
	function removeContainerStyle(_ref, container) {
	  var style = _ref.style;


	  Object.keys(style).forEach(function (key) {
	    return container.style[key] = style[key];
	  });
	}
	/**
	 * 容器的正确状态管理和那些容器中的模态。
	 */

	var ModalManager = function () {
	  function ModalManager() {
	    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref2$hideSiblingNode = _ref2.hideSiblingNodes,
	        hideSiblingNodes = _ref2$hideSiblingNode === undefined ? true : _ref2$hideSiblingNode,
	        _ref2$handleContainer = _ref2.handleContainerOverflow,
	        handleContainerOverflow = _ref2$handleContainer === undefined ? true : _ref2$handleContainer;

	    _classCallCheck(this, ModalManager);

	    this.hideSiblingNodes = hideSiblingNodes;
	    this.handleContainerOverflow = handleContainerOverflow;
	    this.modals = [];
	    this.containers = [];
	    this.data = [];
	  }

	  ModalManager.prototype.add = function add(modal, container, className) {
	    var modalIdx = this.modals.indexOf(modal);
	    var containerIdx = this.containers.indexOf(container);

	    if (modalIdx !== -1) {
	      return modalIdx;
	    }

	    modalIdx = this.modals.length;
	    this.modals.push(modal);

	    if (this.hideSiblingNodes) {
	      (0, manageAriaHidden.hideSiblings)(container, modal.mountNode);
	    }

	    if (containerIdx !== -1) {
	      this.data[containerIdx].modals.push(modal);
	      return modalIdx;
	    }

	    var data = {
	      modals: [modal],
	      //right now only the first modal of a container will have its classes applied
	      classes: className ? className.split(/\s+/) : [],

	      overflowing: (0, _isOverflowing2["default"])(container)
	    };

	    if (this.handleContainerOverflow) {
	      setContainerStyle(data, container);
	    }

	    data.classes.forEach(_class2["default"].addClass.bind(null, container));

	    this.containers.push(container);
	    this.data.push(data);

	    return modalIdx;
	  };

	  ModalManager.prototype.remove = function remove(modal) {
	    var modalIdx = this.modals.indexOf(modal);

	    if (modalIdx === -1) {
	      return;
	    }

	    var containerIdx = findContainer(this.data, modal);
	    var data = this.data[containerIdx];
	    var container = this.containers[containerIdx];

	    data.modals.splice(data.modals.indexOf(modal), 1);

	    this.modals.splice(modalIdx, 1);

	    // if that was the last modal in a container,
	    // clean up the container
	    if (data.modals.length === 0) {
	      data.classes.forEach(_class2["default"].removeClass.bind(null, container));

	      if (this.handleContainerOverflow) {
	        removeContainerStyle(data, container);
	      }

	      if (this.hideSiblingNodes) {
	        (0, manageAriaHidden.showSiblings)(container, modal.mountNode);
	      }
	      this.containers.splice(containerIdx, 1);
	      this.data.splice(containerIdx, 1);
	    } else if (this.hideSiblingNodes) {
	      //otherwise make sure the next top modal is visible to a SR
	      (0, manageAriaHidden.ariaHidden)(false, data.modals[data.modals.length - 1].mountNode);
	    }
	  };

	  ModalManager.prototype.isTopModal = function isTopModal(modal) {
	    return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
	  };

	  return ModalManager;
	}();

	exports["default"] = ModalManager;
	module.exports = exports['default'];
	});

	unwrapExports(ModalManager_1);

	var on_1$1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = void 0;

	var _inDOM = interopRequireDefault(inDOM$1);

	var on = function on() {};

	if (_inDOM.default) {
	  on = function () {
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.addEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.attachEvent('on' + eventName, function (e) {
	        e = e || window.event;
	        e.target = e.target || e.srcElement;
	        e.currentTarget = node;
	        handler.call(node, e);
	      });
	    };
	  }();
	}

	var _default = on;
	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(on_1$1);

	var off_1$1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = void 0;

	var _inDOM = interopRequireDefault(inDOM$1);

	var off = function off() {};

	if (_inDOM.default) {
	  off = function () {
	    if (document.addEventListener) return function (node, eventName, handler, capture) {
	      return node.removeEventListener(eventName, handler, capture || false);
	    };else if (document.attachEvent) return function (node, eventName, handler) {
	      return node.detachEvent('on' + eventName, handler);
	    };
	  }();
	}

	var _default = off;
	exports.default = _default;
	module.exports = exports["default"];
	});

	unwrapExports(off_1$1);

	var addEventListener$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports["default"] = function (node, event, handler, capture) {
	  (0, _on2["default"])(node, event, handler, capture);

	  return {
	    remove: function remove() {
	      (0, _off2["default"])(node, event, handler, capture);
	    }
	  };
	};



	var _on2 = _interopRequireDefault(on_1$1);



	var _off2 = _interopRequireDefault(off_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	module.exports = exports['default'];
	});

	unwrapExports(addEventListener$1);

	var addFocusListener_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = addFocusListener;
	/**
	 * Firefox doesn't have a focusin event so using capture is easiest way to get bubbling
	 * IE8 can't do addEventListener, but does have onfocusin, so we use that in ie8
	 *
	 * We only allow one Listener at a time to avoid stack overflows
	 */
	function addFocusListener(handler) {
	  var useFocusin = !document.addEventListener;
	  var remove = void 0;

	  if (useFocusin) {
	    document.attachEvent('onfocusin', handler);
	    remove = function remove() {
	      return document.detachEvent('onfocusin', handler);
	    };
	  } else {
	    document.addEventListener('focus', handler, true);
	    remove = function remove() {
	      return document.removeEventListener('focus', handler, true);
	    };
	  }

	  return { remove: remove };
	}
	module.exports = exports['default'];
	});

	unwrapExports(addFocusListener_1);

	var activeElement_1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = activeElement;

	var _ownerDocument = interopRequireDefault(ownerDocument_1$1);

	function activeElement(doc) {
	  if (doc === void 0) {
	    doc = (0, _ownerDocument.default)();
	  }

	  try {
	    return doc.activeElement;
	  } catch (e) {
	    /* ie throws if no active element */
	  }
	}

	module.exports = exports["default"];
	});

	unwrapExports(activeElement_1);

	var contains$1 = createCommonjsModule(function (module, exports) {



	exports.__esModule = true;
	exports.default = void 0;

	var _inDOM = interopRequireDefault(inDOM$1);

	var _default = function () {
	  // HTML DOM and SVG DOM may have different support levels,
	  // so we need to check on context instead of a document root element.
	  return _inDOM.default ? function (context, node) {
	    if (context.contains) {
	      return context.contains(node);
	    } else if (context.compareDocumentPosition) {
	      return context === node || !!(context.compareDocumentPosition(node) & 16);
	    } else {
	      return fallback(context, node);
	    }
	  } : fallback;
	}();

	exports.default = _default;

	function fallback(context, node) {
	  if (node) do {
	    if (node === context) return true;
	  } while (node = node.parentNode);
	  return false;
	}

	module.exports = exports["default"];
	});

	unwrapExports(contains$1);

	var Modal = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /*eslint-disable react/prop-types */




	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _warning2 = _interopRequireDefault(warning_1);





	var _Portal2 = _interopRequireDefault(Portal_1);



	var _ModalManager2 = _interopRequireDefault(ModalManager_1);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument);



	var _addEventListener2 = _interopRequireDefault(addEventListener$1);



	var _addFocusListener2 = _interopRequireDefault(addFocusListener_1);



	var _inDOM2 = _interopRequireDefault(inDOM$1);



	var _activeElement2 = _interopRequireDefault(activeElement_1);



	var _contains2 = _interopRequireDefault(contains$1);



	var _getContainer2 = _interopRequireDefault(getContainer_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var modalManager = new _ModalManager2["default"]();

	/**
	 * 模态框
	 */

	var propTypes$1 = _extends({}, _Portal2["default"].propTypes, {

	  /**
	   * 是否显示
	   */
	  show: _propTypes2["default"].bool,

	  /**
	   * 容器
	   */
	  container: _propTypes2["default"].oneOfType([lib$1.componentOrElement, _propTypes2["default"].func]),

	  /**
	   * 当模态框打开时的钩子函数
	   */
	  onShow: _propTypes2["default"].func,

	  /**
	   * 当show参数为false时触发的模态框关闭时的钩子函数
	   */
	  onHide: _propTypes2["default"].func,

	  /**
	   * 是否包含背景
	   */
	  backdrop: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].oneOf(['static'])]),

	  /**
	   *返回背景组件的函数
	   */
	  renderBackdrop: _propTypes2["default"].func,

	  /**
	   * 设置esc键特殊钩子函数
	   */
	  onEscapeKeyUp: _propTypes2["default"].func,

	  /**
	   * 当点击背景时触发的函数
	   */
	  onBackdropClick: _propTypes2["default"].func,

	  /**
	   * 背景的style
	   */
	  backdropStyle: _propTypes2["default"].object,

	  /**
	   * 背景的class
	   */
	  backdropClassName: _propTypes2["default"].string,

	  /**
	   *容器的class
	   */
	  containerClassName: _propTypes2["default"].string,

	  /**
	   * 按esc键是否关闭模态框
	   */
	  keyboard: _propTypes2["default"].bool,

	  /**
	   * 动画组件
	   */
	  transition: lib$1.elementType,

	  /**
	   * 设置动画超时时间
	   */
	  dialogTransitionTimeout: _propTypes2["default"].number,

	  /**
	   * 设置背景动画超时时间
	   */
	  backdropTransitionTimeout: _propTypes2["default"].number,

	  /**
	   * 是否自动设置焦点
	   */
	  autoFocus: _propTypes2["default"].bool,

	  /**
	   * 防止焦点离开模态框
	   */
	  enforceFocus: _propTypes2["default"].bool,

	  /**
	   * 模态框进入时的钩子函数
	   */
	  onEnter: _propTypes2["default"].func,

	  /**
	   * 模态框开始进入时的钩子函数
	   */
	  onEntering: _propTypes2["default"].func,

	  /**
	   * 模态框进入后的钩子函数
	   */
	  onEntered: _propTypes2["default"].func,

	  /**
	   * 模态框退出时的钩子函数
	   */
	  onExit: _propTypes2["default"].func,

	  /**
	   * 模态框开始退出时的钩子函数
	   */
	  onExiting: _propTypes2["default"].func,

	  /**
	   * 模态框推出后的钩子函数
	   */
	  onExited: _propTypes2["default"].func,

	  /**
	   *管理model状态的实例
	   */
	  manager: _propTypes2["default"].object.isRequired
	});

	var defaultProps = {
	  show: false,
	  backdrop: true,
	  keyboard: true,
	  autoFocus: true,
	  enforceFocus: true,
	  onHide: function onHide() {},
	  manager: modalManager,
	  renderBackdrop: function renderBackdrop(props) {
	    return _react2["default"].createElement('div', props);
	  }
	};

	var BaseModal = function (_Component) {
	  _inherits(BaseModal, _Component);

	  function BaseModal(props, content) {
	    _classCallCheck(this, BaseModal);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.state = {
	      exited: !_this.props.show
	    };

	    _this.onShow = _this.onShow.bind(_this);
	    _this.onHide = _this.onHide.bind(_this);
	    _this.setMountNode = _this.setMountNode.bind(_this);
	    _this.handleHidden = _this.handleHidden.bind(_this);
	    _this.handleBackdropClick = _this.handleBackdropClick.bind(_this);
	    _this.handleDocumentKeyUp = _this.handleDocumentKeyUp.bind(_this);
	    _this.checkForFocus = _this.checkForFocus.bind(_this);
	    _this.focus = _this.focus.bind(_this);
	    _this.restoreLastFocus = _this.restoreLastFocus.bind(_this);
	    _this.enforceFocus = _this.enforceFocus.bind(_this);
	    _this.getDialogElement = _this.getDialogElement.bind(_this);
	    _this.isTopModal = _this.isTopModal.bind(_this);
	    _this.renderBackdrop = _this.renderBackdrop.bind(_this);
	    return _this;
	  }

	  BaseModal.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.show) {
	      this.setState({ exited: false });
	    } else if (!nextProps.transition) {
	      // Otherwise let handleHidden take care of marking exited.
	      this.setState({ exited: true });
	    }
	  };

	  BaseModal.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {
	    if (!this.props.show && nextProps.show) {
	      this.checkForFocus();
	    }
	  };

	  BaseModal.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.show) {
	      this.onShow();
	    }
	    this.mounted = true;
	  };

	  BaseModal.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var transition = this.props.transition;


	    if (prevProps.show && !this.props.show && !transition) {
	      // Otherwise handleHidden will call this.
	      this.onHide();
	    } else if (!prevProps.show && this.props.show) {
	      this.onShow();
	    }
	  };

	  BaseModal.prototype.componentWillUnmount = function componentWillUnmount() {
	    var _props = this.props,
	        show = _props.show,
	        transition = _props.transition;


	    if (show || transition && !this.state.exited) {
	      this.onHide();
	    }

	    this.mounted = false;
	  };

	  BaseModal.prototype.onShow = function onShow() {
	    var doc = (0, _ownerDocument2["default"])(this);
	    var container = (0, _getContainer2["default"])(this.props.container, doc.body);

	    this.props.manager.add(this, container, this.props.containerClassName);

	    this._onDocumentKeyupListener = (0, _addEventListener2["default"])(doc, 'keyup', this.handleDocumentKeyUp);

	    this._onFocusinListener = (0, _addFocusListener2["default"])(this.enforceFocus);

	    this.focus();

	    if (this.props.onShow) {
	      this.props.onShow();
	    }
	  };

	  BaseModal.prototype.onHide = function onHide() {
	    this.props.manager.remove(this);

	    this._onDocumentKeyupListener.remove();

	    this._onFocusinListener.remove();

	    this.restoreLastFocus();
	  };

	  BaseModal.prototype.setMountNode = function setMountNode(ref) {
	    this.mountNode = ref ? ref.getMountNode() : ref;
	  };

	  BaseModal.prototype.handleHidden = function handleHidden() {
	    this.setState({ exited: true });
	    this.onHide();

	    if (this.props.onExited) {
	      var _props2;

	      (_props2 = this.props).onExited.apply(_props2, arguments);
	    }
	  };

	  BaseModal.prototype.handleBackdropClick = function handleBackdropClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }

	    if (this.props.onBackdropClick) {
	      this.props.onBackdropClick(e);
	    }

	    if (this.props.backdrop === true) {
	      this.props.onHide();
	    }
	  };

	  BaseModal.prototype.handleDocumentKeyUp = function handleDocumentKeyUp(e) {
	    if (this.props.keyboard && e.keyCode === 27 && this.isTopModal()) {
	      if (this.props.onEscapeKeyUp) {
	        this.props.onEscapeKeyUp(e);
	      }
	      this.props.onHide();
	    }
	  };

	  BaseModal.prototype.checkForFocus = function checkForFocus() {
	    if (_inDOM2["default"]) {
	      this.lastFocus = (0, _activeElement2["default"])();
	    }
	  };

	  BaseModal.prototype.focus = function focus() {
	    var autoFocus = this.props.autoFocus;
	    var modalContent = this.getDialogElement();
	    var current = (0, _activeElement2["default"])((0, _ownerDocument2["default"])(this));
	    var focusInModal = current && (0, _contains2["default"])(modalContent, current);

	    if (modalContent && autoFocus && !focusInModal) {
	      this.lastFocus = current;

	      if (!modalContent.hasAttribute('tabIndex')) {
	        modalContent.setAttribute('tabIndex', -1);
	        (0, _warning2["default"])(false, 'The modal content node does not accept focus. ' + 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".');
	      }

	      modalContent.focus();
	    }
	  };

	  BaseModal.prototype.restoreLastFocus = function restoreLastFocus() {
	    // Support: <=IE11 doesn't support `focus()` on svg elements (RB: #917)
	    if (this.lastFocus && this.lastFocus.focus) {
	      this.lastFocus.focus();
	      this.lastFocus = null;
	    }
	  };

	  BaseModal.prototype.enforceFocus = function enforceFocus() {
	    var enforceFocus = this.props.enforceFocus;


	    if (!enforceFocus || !this.mounted || !this.isTopModal()) {
	      return;
	    }

	    var active = (0, _activeElement2["default"])((0, _ownerDocument2["default"])(this));
	    var modal = this.getDialogElement();

	    if (modal && modal !== active && !(0, _contains2["default"])(modal, active)) {
	      modal.focus();
	    }
	  };

	  //instead of a ref, which might conflict with one the parent applied.


	  BaseModal.prototype.getDialogElement = function getDialogElement() {
	    var node = this.modal;
	    return node && node.lastChild;
	  };

	  BaseModal.prototype.isTopModal = function isTopModal() {
	    return this.props.manager.isTopModal(this);
	  };

	  BaseModal.prototype.renderBackdrop = function renderBackdrop() {
	    var _this2 = this;

	    var _props3 = this.props,
	        backdropStyle = _props3.backdropStyle,
	        backdropClassName = _props3.backdropClassName,
	        renderBackdrop = _props3.renderBackdrop,
	        Transition = _props3.transition,
	        backdropTransitionTimeout = _props3.backdropTransitionTimeout;


	    var backdropRef = function backdropRef(ref) {
	      return _this2.backdrop = ref;
	    };

	    var backdrop = _react2["default"].createElement('div', {
	      ref: backdropRef,
	      style: this.props.backdropStyle,
	      className: this.props.backdropClassName,
	      onClick: this.handleBackdropClick
	    });

	    if (Transition) {
	      backdrop = _react2["default"].createElement(
	        Transition,
	        { transitionAppear: true,
	          'in': this.props.show,
	          timeout: backdropTransitionTimeout
	        },
	        renderBackdrop({
	          ref: backdropRef,
	          style: backdropStyle,
	          className: backdropClassName,
	          onClick: this.handleBackdropClick
	        })
	      );
	    }

	    return backdrop;
	  };

	  BaseModal.prototype.render = function render() {
	    var _this3 = this;

	    var _props4 = this.props,
	        show = _props4.show,
	        container = _props4.container,
	        children = _props4.children,
	        Transition = _props4.transition,
	        backdrop = _props4.backdrop,
	        dialogTransitionTimeout = _props4.dialogTransitionTimeout,
	        className = _props4.className,
	        style = _props4.style,
	        onExit = _props4.onExit,
	        onExiting = _props4.onExiting,
	        onEnter = _props4.onEnter,
	        onEntering = _props4.onEntering,
	        onEntered = _props4.onEntered;


	    var dialog = _react2["default"].Children.only(children);

	    var mountModal = show || Transition && !this.state.exited;
	    if (!mountModal) {
	      return null;
	    }

	    var _dialog$props = dialog.props,
	        role = _dialog$props.role,
	        tabIndex = _dialog$props.tabIndex;


	    if (role === undefined || tabIndex === undefined) {
	      dialog = (0, React__default.cloneElement)(dialog, {
	        role: role === undefined ? 'document' : role,
	        tabIndex: tabIndex == null ? '-1' : tabIndex
	      });
	    }

	    if (Transition) {
	      dialog = _react2["default"].createElement(
	        Transition,
	        {
	          transitionAppear: true,
	          unmountOnExit: true,
	          'in': show,
	          timeout: dialogTransitionTimeout,
	          onExit: onExit,
	          onExiting: onExiting,
	          onExited: this.handleHidden,
	          onEnter: onEnter,
	          onEntering: onEntering,
	          onEntered: onEntered
	        },
	        dialog
	      );
	    }

	    return _react2["default"].createElement(
	      _Portal2["default"],
	      {
	        ref: this.setMountNode,
	        container: container
	      },
	      _react2["default"].createElement(
	        'div',
	        {
	          ref: function ref(el) {
	            _this3.modal = el;
	          },
	          role: role || 'dialog',
	          style: style,
	          className: className
	        },
	        backdrop && this.renderBackdrop(),
	        dialog
	      )
	    );
	  };

	  return BaseModal;
	}(React__default.Component);

	BaseModal.Manager = _ModalManager2["default"];

	BaseModal.propTypes = propTypes$1;
	BaseModal.defaultProps = defaultProps;

	exports["default"] = BaseModal;
	module.exports = exports['default'];
	});

	unwrapExports(Modal);

	var Transition_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _properties2 = _interopRequireDefault(properties);



	var _on2 = _interopRequireDefault(on_1$1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var transitionEndEvent = _properties2["default"].end;

	//设置状态码
	var UNMOUNTED = exports.UNMOUNTED = 0;
	var EXITED = exports.EXITED = 1;
	var ENTERING = exports.ENTERING = 2;
	var ENTERED = exports.ENTERED = 3;
	var EXITING = exports.EXITING = 4;

	var propTypes$1 = {
	  /**
	   * 是否触发动画
	   */
	  "in": _propTypes2["default"].bool,

	  /**
	   * 不显示的时候是否移除组件
	   */
	  unmountOnExit: _propTypes2["default"].bool,

	  /**
	   * 如果设置为默认显示，挂载时显示动画
	   */
	  transitionAppear: _propTypes2["default"].bool,

	  /**
	   * 设置超时时间，防止出现问题，可设置为>=动画时间
	   */
	  timeout: _propTypes2["default"].number,

	  /**
	   * 退出组件时添加的class
	   */
	  exitedClassName: _propTypes2["default"].string,
	  /**
	   * 退出组件中添加的class
	   */
	  exitingClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画后添加的class
	   */
	  enteredClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画时添加的class
	   */
	  enteringClassName: _propTypes2["default"].string,

	  /**
	   * 进入动画开始时的钩子函数
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * 进入动画中的钩子函数
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * 进入动画后的钩子函数
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * 退出动画开始时的钩子函数
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * 退出动画中的钩子函数
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * 退出动画后的钩子函数
	   */
	  onExited: _propTypes2["default"].func
	};

	function noop() {}

	var defaultProps = {
	  "in": false,
	  unmountOnExit: false,
	  transitionAppear: false,
	  timeout: 5000,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};

	/**
	 * 动画组件
	 */

	var Transition = function (_Component) {
	  _inherits(Transition, _Component);

	  function Transition(props, context) {
	    _classCallCheck(this, Transition);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    var initialStatus = void 0;
	    if (props["in"]) {
	      // 在componentdidmount时开始执行动画
	      initialStatus = props.transitionAppear ? EXITED : ENTERED;
	    } else {
	      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
	    }
	    _this.state = { status: initialStatus };

	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.transitionAppear && this.props["in"]) {
	      this.performEnter(this.props);
	    }
	  };

	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps["in"] && this.props.unmountOnExit) {
	      if (this.state.status === UNMOUNTED) {
	        // 在componentDidUpdate执行动画.
	        this.setState({ status: EXITED });
	      }
	    } else {
	      this._needsUpdate = true;
	    }
	  };

	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    var status = this.state.status;

	    if (this.props.unmountOnExit && status === EXITED) {
	      // 当使用unmountOnExit时，exited为exiting和unmont的过渡状态
	      if (this.props["in"]) {
	        this.performEnter(this.props);
	      } else {
	        this.setState({ status: UNMOUNTED });
	      }

	      return;
	    }

	    // 确保只响应prop变化
	    if (this._needsUpdate) {
	      this._needsUpdate = false;

	      if (this.props["in"]) {
	        if (status === EXITING) {
	          this.performEnter(this.props);
	        } else if (status === EXITED) {
	          this.performEnter(this.props);
	        }
	        // 其他，当我们已经输入或输出
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          this.performExit(this.props);
	        }
	        // 我们已经输入或输出完成
	      }
	    }
	  };

	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  Transition.prototype.performEnter = function performEnter(props) {
	    var _this2 = this;

	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);

	    // 这里接收新props
	    props.onEnter(node);

	    this.safeSetState({ status: ENTERING }, function () {
	      _this2.props.onEntering(node);

	      _this2.onTransitionEnd(node, function () {
	        _this2.safeSetState({ status: ENTERED }, function () {
	          _this2.props.onEntered(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.performExit = function performExit(props) {
	    var _this3 = this;

	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);

	    props.onExit(node);

	    this.safeSetState({ status: EXITING }, function () {
	      _this3.props.onExiting(node);

	      _this3.onTransitionEnd(node, function () {
	        _this3.safeSetState({ status: EXITED }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    // 确保在组件销毁后挂起的setState被消除
	    this.setState(nextState, this.setNextCallback(callback));
	  };

	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;

	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
	    this.setNextCallback(handler);

	    if (node) {
	      if (transitionEndEvent == undefined) {
	        this.nextCallback();
	      } else {
	        (0, _on2["default"])(node, transitionEndEvent, this.nextCallback);
	      }
	      setTimeout(this.nextCallback, this.props.timeout);
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };

	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        childProps = _objectWithoutProperties(_props, ['children', 'className']);

	    Object.keys(Transition.propTypes).forEach(function (key) {
	      return delete childProps[key];
	    });

	    var transitionClassName = void 0;
	    if (status === EXITED) {
	      transitionClassName = this.props.exitedClassName;
	    } else if (status === ENTERING) {
	      transitionClassName = this.props.enteringClassName;
	    } else if (status === ENTERED) {
	      transitionClassName = this.props.enteredClassName;
	    } else if (status === EXITING) {
	      transitionClassName = this.props.exitingClassName;
	    }

	    var child = _react2["default"].Children.only(children);
	    return _react2["default"].cloneElement(child, _extends({}, childProps, {
	      className: (0, _classnames2["default"])(child.props.className, className, transitionClassName)
	    }));
	  };

	  return Transition;
	}(React__default.Component);

	Transition.propTypes = propTypes$1;

	Transition.defaultProps = defaultProps;

	exports["default"] = Transition;
	});

	unwrapExports(Transition_1);
	var Transition_2 = Transition_1.EXITING;
	var Transition_3 = Transition_1.ENTERED;
	var Transition_4 = Transition_1.ENTERING;
	var Transition_5 = Transition_1.EXITED;
	var Transition_6 = Transition_1.UNMOUNTED;

	var capitalize_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = capitalize;
	function capitalize(string) {
	  return "" + string.charAt(0).toUpperCase() + string.slice(1);
	}
	module.exports = exports["default"];
	});

	unwrapExports(capitalize_1);

	var Collapse_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _style2 = _interopRequireDefault(style_1);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Transition2 = _interopRequireDefault(Transition_1);



	var _capitalize2 = _interopRequireDefault(capitalize_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var MARGINS = {
	  height: ['marginTop', 'marginBottom'],
	  width: ['marginLeft', 'marginRight']
	};

	// reading a dimension prop will cause the browser to recalculate,
	// which will let our animations work
	function triggerBrowserReflow(node) {
	  node.offsetHeight; // eslint-disable-line no-unused-expressions
	}

	function getDimensionValue(dimension, elem) {
	  var value = elem['offset' + (0, _capitalize2["default"])(dimension)];
	  var margins = MARGINS[dimension];

	  return value + parseInt((0, _style2["default"])(elem, margins[0]), 10) + parseInt((0, _style2["default"])(elem, margins[1]), 10);
	}

	var propTypes$1 = {
	  /**
	   * Show the component; triggers the expand or collapse animation
	   */
	  "in": _propTypes2["default"].bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is collapsed
	   */
	  unmountOnExit: _propTypes2["default"].bool,

	  /**
	   * Run the expand animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _propTypes2["default"].bool,

	  /**
	   * Duration of the collapse animation in milliseconds, to ensure that
	   * finishing callbacks are fired even if the original browser transition end
	   * events are canceled
	   */
	  timeout: _propTypes2["default"].number,

	  /**
	   * Callback fired before the component expands
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to expand
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has expanded
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * Callback fired before the component collapses
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to collapse
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has collapsed
	   */
	  onExited: _propTypes2["default"].func,

	  /**
	   * The dimension used when collapsing, or a function that returns the
	   * dimension
	   *
	   * _Note: Bootstrap only partially supports 'width'!
	   * You will need to supply your own CSS animation for the `.width` CSS class._
	   */
	  dimension: _propTypes2["default"].oneOfType([_propTypes2["default"].oneOf(['height', 'width']), _propTypes2["default"].func]),

	  /**
	   * Function that returns the height or width of the animating DOM node
	   *
	   * Allows for providing some custom logic for how much the Collapse component
	   * should animate in its specified dimension. Called with the current
	   * dimension prop value and the DOM node.
	   */
	  getDimensionValue: _propTypes2["default"].func,

	  /**
	   * ARIA role of collapsible element
	   */
	  role: _propTypes2["default"].string
	};

	var defaultProps = {
	  "in": false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false,

	  dimension: 'height',
	  getDimensionValue: getDimensionValue
	};

	var Collapse = function (_React$Component) {
	  _inherits(Collapse, _React$Component);

	  function Collapse(props, context) {
	    _classCallCheck(this, Collapse);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.handleEnter = _this.handleEnter.bind(_this);
	    _this.handleEntering = _this.handleEntering.bind(_this);
	    _this.handleEntered = _this.handleEntered.bind(_this);
	    _this.handleExit = _this.handleExit.bind(_this);
	    _this.handleExiting = _this.handleExiting.bind(_this);
	    return _this;
	  }

	  /* -- Expanding -- */


	  Collapse.prototype.handleEnter = function handleEnter(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype.handleEntering = function handleEntering(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
	  };

	  Collapse.prototype.handleEntered = function handleEntered(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = null;
	  };

	  /* -- Collapsing -- */


	  Collapse.prototype.handleExit = function handleExit(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
	    triggerBrowserReflow(elem);
	  };

	  Collapse.prototype.handleExiting = function handleExiting(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype._dimension = function _dimension() {
	    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
	  };

	  // for testing


	  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
	    return elem['scroll' + (0, _capitalize2["default"])(dimension)] + 'px';
	  };

	  Collapse.prototype.render = function render() {
	    var _props = this.props,
	        onEnter = _props.onEnter,
	        onEntering = _props.onEntering,
	        onEntered = _props.onEntered,
	        onExit = _props.onExit,
	        onExiting = _props.onExiting,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'className']);

	    delete props.dimension;
	    delete props.getDimensionValue;

	    var handleEnter = (0, lib$1.createChainedFunction)(this.handleEnter, onEnter);
	    var handleEntering = (0, lib$1.createChainedFunction)(this.handleEntering, onEntering);
	    var handleEntered = (0, lib$1.createChainedFunction)(this.handleEntered, onEntered);
	    var handleExit = (0, lib$1.createChainedFunction)(this.handleExit, onExit);
	    var handleExiting = (0, lib$1.createChainedFunction)(this.handleExiting, onExiting);

	    var classes = {
	      width: this._dimension() === 'width'
	    };

	    return _react2["default"].createElement(_Transition2["default"], _extends({}, props, {
	      'aria-expanded': props.role ? props["in"] : null,
	      className: (0, _classnames2["default"])(className, classes),
	      exitedClassName: 'collapse',
	      exitingClassName: 'collapsing',
	      enteredClassName: 'collapse in',
	      enteringClassName: 'collapsing',
	      onEnter: handleEnter,
	      onEntering: handleEntering,
	      onEntered: handleEntered,
	      onExit: handleExit,
	      onExiting: handleExiting
	    }));
	  };

	  return Collapse;
	}(_react2["default"].Component);

	Collapse.propTypes = propTypes$1;
	Collapse.defaultProps = defaultProps;

	exports["default"] = Collapse;
	module.exports = exports['default'];
	});

	unwrapExports(Collapse_1);

	var Fade_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Transition2 = _interopRequireDefault(Transition_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  /**
	   * Show the component; triggers the fade in or fade out animation
	   */
	  "in": _propTypes2["default"].bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is faded out
	   */
	  unmountOnExit: _propTypes2["default"].bool,

	  /**
	   * Run the fade in animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _propTypes2["default"].bool,

	  /**
	   * Duration of the fade animation in milliseconds, to ensure that finishing
	   * callbacks are fired even if the original browser transition end events are
	   * canceled
	   */
	  timeout: _propTypes2["default"].number,

	  /**
	   * Callback fired before the component fades in
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade in
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * Callback fired after the has component faded in
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * Callback fired before the component fades out
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade out
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has faded out
	   */
	  onExited: _propTypes2["default"].func
	};

	var defaultProps = {
	  "in": false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false
	};

	var Fade = function (_React$Component) {
	  _inherits(Fade, _React$Component);

	  function Fade() {
	    _classCallCheck(this, Fade);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Fade.prototype.render = function render() {
	    return _react2["default"].createElement(_Transition2["default"], _extends({}, this.props, {
	      className: (0, _classnames2["default"])(this.props.className, 'fade'),
	      enteredClassName: 'in',
	      enteringClassName: 'in'
	    }));
	  };

	  return Fade;
	}(_react2["default"].Component);

	Fade.propTypes = propTypes$1;
	Fade.defaultProps = defaultProps;

	exports["default"] = Fade;
	module.exports = exports['default'];
	});

	unwrapExports(Fade_1);

	var build$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Fade = exports.Collapse = exports.Transition = undefined;



	var _Transition3 = _interopRequireDefault(Transition_1);



	var _Collapse3 = _interopRequireDefault(Collapse_1);



	var _Fade3 = _interopRequireDefault(Fade_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Transition = _Transition3["default"];
	exports.Collapse = _Collapse3["default"];
	exports.Fade = _Fade3["default"];
	});

	unwrapExports(build$6);
	var build_1 = build$6.Fade;
	var build_2 = build$6.Collapse;
	var build_3 = build$6.Transition;

	var ModalBody_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes = {
	  componentClass: lib$1.elementType
	};

	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-modal-body'
	};

	var ModalBody = function (_React$Component) {
	  _inherits(ModalBody, _React$Component);

	  function ModalBody() {
	    _classCallCheck(this, ModalBody);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  ModalBody.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['componentClass', 'clsPrefix', 'className']);

	    var classes = {};
	    classes['' + clsPrefix] = true;

	    return _react2["default"].createElement(Component, _extends({}, props, {
	      className: (0, _classnames2["default"])(className, classes)
	    }));
	  };

	  return ModalBody;
	}(_react2["default"].Component);

	ModalBody.propTypes = propTypes;
	ModalBody.defaultProps = defaultProps;

	exports["default"] = ModalBody;
	module.exports = exports['default'];
	});

	unwrapExports(ModalBody_1);

	var assign$2 = assign;

	function _extends$1() {
	  _extends$1 = assign$2 || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$1.apply(this, arguments);
	}

	var isProduction = process.env.NODE_ENV === 'production';
	var prefix = 'Invariant failed';
	function invariant(condition, message) {
	  if (condition) {
	    return;
	  }

	  if (isProduction) {
	    throw new Error(prefix);
	  } else {
	    throw new Error(prefix + ": " + (message || ''));
	  }
	}

	var getRect = function getRect(_ref) {
	  var top = _ref.top,
	      right = _ref.right,
	      bottom = _ref.bottom,
	      left = _ref.left;
	  var width = right - left;
	  var height = bottom - top;
	  var rect = {
	    top: top,
	    right: right,
	    bottom: bottom,
	    left: left,
	    width: width,
	    height: height,
	    x: left,
	    y: top,
	    center: {
	      x: (right + left) / 2,
	      y: (bottom + top) / 2
	    }
	  };
	  return rect;
	};
	var expand = function expand(target, expandBy) {
	  return {
	    top: target.top - expandBy.top,
	    left: target.left - expandBy.left,
	    bottom: target.bottom + expandBy.bottom,
	    right: target.right + expandBy.right
	  };
	};
	var shrink = function shrink(target, shrinkBy) {
	  return {
	    top: target.top + shrinkBy.top,
	    left: target.left + shrinkBy.left,
	    bottom: target.bottom - shrinkBy.bottom,
	    right: target.right - shrinkBy.right
	  };
	};

	var shift = function shift(target, shiftBy) {
	  return {
	    top: target.top + shiftBy.y,
	    left: target.left + shiftBy.x,
	    bottom: target.bottom + shiftBy.y,
	    right: target.right + shiftBy.x
	  };
	};

	var noSpacing = {
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0
	};
	var createBox = function createBox(_ref2) {
	  var borderBox = _ref2.borderBox,
	      _ref2$margin = _ref2.margin,
	      margin = _ref2$margin === void 0 ? noSpacing : _ref2$margin,
	      _ref2$border = _ref2.border,
	      border = _ref2$border === void 0 ? noSpacing : _ref2$border,
	      _ref2$padding = _ref2.padding,
	      padding = _ref2$padding === void 0 ? noSpacing : _ref2$padding;
	  var marginBox = getRect(expand(borderBox, margin));
	  var paddingBox = getRect(shrink(borderBox, border));
	  var contentBox = getRect(shrink(paddingBox, padding));
	  return {
	    marginBox: marginBox,
	    borderBox: getRect(borderBox),
	    paddingBox: paddingBox,
	    contentBox: contentBox,
	    margin: margin,
	    border: border,
	    padding: padding
	  };
	};

	var parse = function parse(raw) {
	  var value = raw.slice(0, -2);
	  var suffix = raw.slice(-2);
	  !(suffix === 'px') ? process.env.NODE_ENV !== "production" ? invariant(false, "Expected value to be a pixel value.\n      Expected form: 10px\n      Actual value: " + raw + "\n    ") : invariant(false) : void 0;
	  var result = Number(value);
	  !!isNaN(result) ? process.env.NODE_ENV !== "production" ? invariant(false, "Could not parse value [raw: " + raw + ", without suffix: " + value + "]") : invariant(false) : void 0;
	  return result;
	};

	var getWindowScroll = function getWindowScroll() {
	  return {
	    x: window.pageXOffset,
	    y: window.pageYOffset
	  };
	};

	var offset = function offset(original, change) {
	  var borderBox = original.borderBox,
	      border = original.border,
	      margin = original.margin,
	      padding = original.padding;
	  var shifted = shift(borderBox, change);
	  return createBox({
	    borderBox: shifted,
	    border: border,
	    margin: margin,
	    padding: padding
	  });
	};
	var withScroll = function withScroll(original, scroll) {
	  if (scroll === void 0) {
	    scroll = getWindowScroll();
	  }

	  return offset(original, scroll);
	};
	var calculateBox = function calculateBox(borderBox, styles) {
	  var margin = {
	    top: parse(styles.marginTop),
	    right: parse(styles.marginRight),
	    bottom: parse(styles.marginBottom),
	    left: parse(styles.marginLeft)
	  };
	  var padding = {
	    top: parse(styles.paddingTop),
	    right: parse(styles.paddingRight),
	    bottom: parse(styles.paddingBottom),
	    left: parse(styles.paddingLeft)
	  };
	  var border = {
	    top: parse(styles.borderTopWidth),
	    right: parse(styles.borderRightWidth),
	    bottom: parse(styles.borderBottomWidth),
	    left: parse(styles.borderLeftWidth)
	  };
	  return createBox({
	    borderBox: borderBox,
	    margin: margin,
	    padding: padding,
	    border: border
	  });
	};
	var getBox = function getBox(el) {
	  var borderBox = el.getBoundingClientRect();
	  var styles = window.getComputedStyle(el);
	  return calculateBox(borderBox, styles);
	};

	var keys$2 = keys;

	var simpleIsEqual = function simpleIsEqual(a, b) {
	  return a === b;
	};

	function index$1 (resultFn, isEqual) {
	  if (isEqual === void 0) {
	    isEqual = simpleIsEqual;
	  }

	  var lastThis;
	  var lastArgs = [];
	  var lastResult;
	  var calledOnce = false;

	  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
	    return isEqual(newArg, lastArgs[index]);
	  };

	  var result = function result() {
	    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {
	      newArgs[_key] = arguments[_key];
	    }

	    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
	      return lastResult;
	    }

	    lastResult = resultFn.apply(this, newArgs);
	    calledOnce = true;
	    lastThis = this;
	    lastArgs = newArgs;
	    return lastResult;
	  };

	  return result;
	}

	function symbolObservablePonyfill(root) {
		var result;
		var Symbol = root.Symbol;

		if (typeof Symbol === 'function') {
			if (Symbol.observable) {
				result = Symbol.observable;
			} else {
				result = Symbol('observable');
				Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	}

	/* global window */

	var root;

	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (typeof module !== 'undefined') {
	  root = module;
	} else {
	  root = Function('return this')();
	}

	var result = symbolObservablePonyfill(root);

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var randomString = function randomString() {
	  return Math.random().toString(36).substring(7).split('').join('.');
	};

	var ActionTypes = {
	  INIT: "@@redux/INIT" + randomString(),
	  REPLACE: "@@redux/REPLACE" + randomString(),
	  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
	    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
	  }
	};

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = obj;

	  while (Object.getPrototypeOf(proto) !== null) {
	    proto = Object.getPrototypeOf(proto);
	  }

	  return Object.getPrototypeOf(obj) === proto;
	}

	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */

	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
	    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function');
	  }

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */


	  function getState() {
	    if (isDispatching) {
	      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
	    }

	    return currentState;
	  }
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */


	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected the listener to be a function.');
	    }

	    if (isDispatching) {
	      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
	    }

	    var isSubscribed = true;
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      if (isDispatching) {
	        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
	      }

	      isSubscribed = false;
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */


	  function dispatch(action) {
	    if (!isPlainObject(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;

	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */


	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({
	      type: ActionTypes.REPLACE
	    });
	  }
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */


	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object' || observer === null) {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return {
	          unsubscribe: unsubscribe
	        };
	      }
	    }, _ref[result] = function () {
	      return this;
	    }, _ref;
	  } // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.


	  dispatch({
	    type: ActionTypes.INIT
	  });
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[result] = observable, _ref2;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning$1(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	  } catch (e) {} // eslint-disable-line no-empty

	}

	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(this, arguments));
	  };
	}
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */


	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];

	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }

	  return boundActionCreators;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);

	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }

	    ownKeys.forEach(function (key) {
	      _defineProperty(target, key, source[key]);
	    });
	  }

	  return target;
	}

	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	function compose() {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(void 0, arguments));
	    };
	  });
	}

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */

	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function () {
	      var store = createStore.apply(void 0, arguments);

	      var _dispatch = function dispatch() {
	        throw new Error("Dispatching while constructing your middleware is not allowed. " + "Other middleware would not be applied to this dispatch.");
	      };

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch() {
	          return _dispatch.apply(void 0, arguments);
	        }
	      };
	      var chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = compose.apply(void 0, chain)(store.dispatch);
	      return _objectSpread({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

	/*
	 * This is a dummy function to check if the function name has been altered by minification.
	 * If the function has been minified and NODE_ENV !== 'production', warn the user.
	 */

	function isCrushed() {}

	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  warning$1('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
	}

	var index$2 = (function (fn) {
	  var lastArgs = [];
	  var frameId = null;

	  var wrapperFn = function wrapperFn() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    lastArgs = args;

	    if (frameId) {
	      return;
	    }

	    frameId = requestAnimationFrame(function () {
	      frameId = null;
	      fn.apply(undefined, lastArgs);
	    });
	  };

	  wrapperFn.cancel = function () {
	    if (!frameId) {
	      return;
	    }

	    cancelAnimationFrame(frameId);
	    frameId = null;
	  };

	  var resultFn = wrapperFn;

	  return resultFn;
	});

	var create$2 = create;

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = create$2(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _inheritsLoose$2(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var subscriptionShape = propTypes.shape({
	  trySubscribe: propTypes.func.isRequired,
	  tryUnsubscribe: propTypes.func.isRequired,
	  notifyNestedSubs: propTypes.func.isRequired,
	  isSubscribed: propTypes.func.isRequired
	});
	var storeShape = propTypes.shape({
	  subscribe: propTypes.func.isRequired,
	  dispatch: propTypes.func.isRequired,
	  getState: propTypes.func.isRequired
	});

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning$2(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */


	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */

	}

	var didWarnAboutReceivingStore = false;

	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }

	  didWarnAboutReceivingStore = true;
	  warning$2('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reduxjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}

	function createProvider(storeKey) {
	  var _Provider$childContex;

	  if (storeKey === void 0) {
	    storeKey = 'store';
	  }

	  var subscriptionKey = storeKey + "Subscription";

	  var Provider =
	  /*#__PURE__*/
	  function (_Component) {
	    _inheritsLoose$2(Provider, _Component);

	    var _proto = Provider.prototype;

	    _proto.getChildContext = function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
	    };

	    function Provider(props, context) {
	      var _this;

	      _this = _Component.call(this, props, context) || this;
	      _this[storeKey] = props.store;
	      return _this;
	    }

	    _proto.render = function render() {
	      return React.Children.only(this.props.children);
	    };

	    return Provider;
	  }(React.Component);

	  if (process.env.NODE_ENV !== 'production') {
	    Provider.prototype.componentWillReceiveProps = function (nextProps) {
	      if (this[storeKey] !== nextProps.store) {
	        warnAboutReceivingStore();
	      }
	    };
	  }

	  Provider.propTypes = {
	    store: storeShape.isRequired,
	    children: propTypes.element.isRequired
	  };
	  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = storeShape.isRequired, _Provider$childContex[subscriptionKey] = subscriptionShape, _Provider$childContex);
	  return Provider;
	}
	createProvider();

	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _extends$2() {
	  _extends$2 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$2.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextType: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromError: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};

	var FORWARD_REF_STATICS = {
	    '$$typeof': true,
	    render: true,
	    defaultProps: true,
	    displayName: true,
	    propTypes: true
	};

	var MEMO_STATICS = {
	    '$$typeof': true,
	    compare: true,
	    defaultProps: true,
	    displayName: true,
	    propTypes: true,
	    type: true
	};

	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;

	function getStatics(component) {
	    if (reactIs.isMemo(component)) {
	        return MEMO_STATICS;
	    }
	    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty$2 = Object.defineProperty;
	var getOwnPropertyNames$2 = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;

	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') {
	        // don't hoist over string (html) components

	        if (objectPrototype) {
	            var inheritedComponent = getPrototypeOf(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames$2(sourceComponent);

	        if (getOwnPropertySymbols$1) {
	            keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
	        }

	        var targetStatics = getStatics(targetComponent);
	        var sourceStatics = getStatics(sourceComponent);

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	                var descriptor = getOwnPropertyDescriptor$2(sourceComponent, key);
	                try {
	                    // Avoid failures from read-only properties
	                    defineProperty$2(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var NODE_ENV = process.env.NODE_ENV;

	var invariant$1 = function(condition, format, a, b, c, d, e, f) {
	  if (NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	var invariant_1 = invariant$1;

	// encapsulates the subscription logic for connecting a component to the redux store, as
	// well as nesting subscriptions of descendant components, so that we can ensure the
	// ancestor components re-render before descendants
	var CLEARED = null;
	var nullListeners = {
	  notify: function notify() {}
	};

	function createListenerCollection() {
	  // the current/next pattern is copied from redux's createStore code.
	  // TODO: refactor+expose that code to be reusable here?
	  var current = [];
	  var next = [];
	  return {
	    clear: function clear() {
	      next = CLEARED;
	      current = CLEARED;
	    },
	    notify: function notify() {
	      var listeners = current = next;

	      for (var i = 0; i < listeners.length; i++) {
	        listeners[i]();
	      }
	    },
	    get: function get() {
	      return next;
	    },
	    subscribe: function subscribe(listener) {
	      var isSubscribed = true;
	      if (next === current) next = current.slice();
	      next.push(listener);
	      return function unsubscribe() {
	        if (!isSubscribed || current === CLEARED) return;
	        isSubscribed = false;
	        if (next === current) next = current.slice();
	        next.splice(next.indexOf(listener), 1);
	      };
	    }
	  };
	}

	var Subscription =
	/*#__PURE__*/
	function () {
	  function Subscription(store, parentSub, onStateChange) {
	    this.store = store;
	    this.parentSub = parentSub;
	    this.onStateChange = onStateChange;
	    this.unsubscribe = null;
	    this.listeners = nullListeners;
	  }

	  var _proto = Subscription.prototype;

	  _proto.addNestedSub = function addNestedSub(listener) {
	    this.trySubscribe();
	    return this.listeners.subscribe(listener);
	  };

	  _proto.notifyNestedSubs = function notifyNestedSubs() {
	    this.listeners.notify();
	  };

	  _proto.isSubscribed = function isSubscribed() {
	    return Boolean(this.unsubscribe);
	  };

	  _proto.trySubscribe = function trySubscribe() {
	    if (!this.unsubscribe) {
	      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
	      this.listeners = createListenerCollection();
	    }
	  };

	  _proto.tryUnsubscribe = function tryUnsubscribe() {
	    if (this.unsubscribe) {
	      this.unsubscribe();
	      this.unsubscribe = null;
	      this.listeners.clear();
	      this.listeners = nullListeners;
	    }
	  };

	  return Subscription;
	}();

	var hotReloadingVersion = 0;
	var dummyState = {};

	function noop() {}

	function makeSelectorStateful(sourceSelector, store) {
	  // wrap the selector in an object that tracks its results between runs.
	  var selector = {
	    run: function runComponentSelector(props) {
	      try {
	        var nextProps = sourceSelector(store.getState(), props);

	        if (nextProps !== selector.props || selector.error) {
	          selector.shouldComponentUpdate = true;
	          selector.props = nextProps;
	          selector.error = null;
	        }
	      } catch (error) {
	        selector.shouldComponentUpdate = true;
	        selector.error = error;
	      }
	    }
	  };
	  return selector;
	}

	function connectAdvanced(
	/*
	  selectorFactory is a func that is responsible for returning the selector function used to
	  compute new props from state, props, and dispatch. For example:
	     export default connectAdvanced((dispatch, options) => (state, props) => ({
	      thing: state.things[props.thingId],
	      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
	    }))(YourComponent)
	   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
	  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
	  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
	   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
	  props. Do not use connectAdvanced directly without memoizing results between calls to your
	  selector, otherwise the Connect component will re-render on every state or props change.
	*/
	selectorFactory, // options object:
	_ref) {
	  var _contextTypes, _childContextTypes;

	  if (_ref === void 0) {
	    _ref = {};
	  }

	  var _ref2 = _ref,
	      _ref2$getDisplayName = _ref2.getDisplayName,
	      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
	    return "ConnectAdvanced(" + name + ")";
	  } : _ref2$getDisplayName,
	      _ref2$methodName = _ref2.methodName,
	      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
	      _ref2$renderCountProp = _ref2.renderCountProp,
	      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
	      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
	      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
	      _ref2$storeKey = _ref2.storeKey,
	      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
	      _ref2$withRef = _ref2.withRef,
	      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
	      connectOptions = _objectWithoutPropertiesLoose(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]);

	  var subscriptionKey = storeKey + 'Subscription';
	  var version = hotReloadingVersion++;
	  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = storeShape, _contextTypes[subscriptionKey] = subscriptionShape, _contextTypes);
	  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = subscriptionShape, _childContextTypes);
	  return function wrapWithConnect(WrappedComponent) {
	    invariant_1(reactIs_1(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + JSON.stringify(WrappedComponent)));
	    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
	    var displayName = getDisplayName(wrappedComponentName);

	    var selectorFactoryOptions = _extends$2({}, connectOptions, {
	      getDisplayName: getDisplayName,
	      methodName: methodName,
	      renderCountProp: renderCountProp,
	      shouldHandleStateChanges: shouldHandleStateChanges,
	      storeKey: storeKey,
	      withRef: withRef,
	      displayName: displayName,
	      wrappedComponentName: wrappedComponentName,
	      WrappedComponent: WrappedComponent // TODO Actually fix our use of componentWillReceiveProps

	      /* eslint-disable react/no-deprecated */

	    });

	    var Connect =
	    /*#__PURE__*/
	    function (_Component) {
	      _inheritsLoose$2(Connect, _Component);

	      function Connect(props, context) {
	        var _this;

	        _this = _Component.call(this, props, context) || this;
	        _this.version = version;
	        _this.state = {};
	        _this.renderCount = 0;
	        _this.store = props[storeKey] || context[storeKey];
	        _this.propsMode = Boolean(props[storeKey]);
	        _this.setWrappedInstance = _this.setWrappedInstance.bind(_assertThisInitialized$1(_assertThisInitialized$1(_this)));
	        invariant_1(_this.store, "Could not find \"" + storeKey + "\" in either the context or props of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + ("or explicitly pass \"" + storeKey + "\" as a prop to \"" + displayName + "\"."));

	        _this.initSelector();

	        _this.initSubscription();

	        return _this;
	      }

	      var _proto = Connect.prototype;

	      _proto.getChildContext = function getChildContext() {
	        var _ref3;

	        // If this component received store from props, its subscription should be transparent
	        // to any descendants receiving store+subscription from context; it passes along
	        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
	        // Connect to control ordering of notifications to flow top-down.
	        var subscription = this.propsMode ? null : this.subscription;
	        return _ref3 = {}, _ref3[subscriptionKey] = subscription || this.context[subscriptionKey], _ref3;
	      };

	      _proto.componentDidMount = function componentDidMount() {
	        if (!shouldHandleStateChanges) return; // componentWillMount fires during server side rendering, but componentDidMount and
	        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
	        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
	        // To handle the case where a child component may have triggered a state change by
	        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
	        // re-render.

	        this.subscription.trySubscribe();
	        this.selector.run(this.props);
	        if (this.selector.shouldComponentUpdate) this.forceUpdate();
	      };

	      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        this.selector.run(nextProps);
	      };

	      _proto.shouldComponentUpdate = function shouldComponentUpdate() {
	        return this.selector.shouldComponentUpdate;
	      };

	      _proto.componentWillUnmount = function componentWillUnmount() {
	        if (this.subscription) this.subscription.tryUnsubscribe();
	        this.subscription = null;
	        this.notifyNestedSubs = noop;
	        this.store = null;
	        this.selector.run = noop;
	        this.selector.shouldComponentUpdate = false;
	      };

	      _proto.getWrappedInstance = function getWrappedInstance() {
	        invariant_1(withRef, "To access the wrapped instance, you need to specify " + ("{ withRef: true } in the options argument of the " + methodName + "() call."));
	        return this.wrappedInstance;
	      };

	      _proto.setWrappedInstance = function setWrappedInstance(ref) {
	        this.wrappedInstance = ref;
	      };

	      _proto.initSelector = function initSelector() {
	        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
	        this.selector = makeSelectorStateful(sourceSelector, this.store);
	        this.selector.run(this.props);
	      };

	      _proto.initSubscription = function initSubscription() {
	        if (!shouldHandleStateChanges) return; // parentSub's source should match where store came from: props vs. context. A component
	        // connected to the store via props shouldn't use subscription from context, or vice versa.

	        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
	        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this)); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
	        // the middle of the notification loop, where `this.subscription` will then be null. An
	        // extra null check every change can be avoided by copying the method onto `this` and then
	        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
	        // listeners logic is changed to not call listeners that have been unsubscribed in the
	        // middle of the notification loop.

	        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
	      };

	      _proto.onStateChange = function onStateChange() {
	        this.selector.run(this.props);

	        if (!this.selector.shouldComponentUpdate) {
	          this.notifyNestedSubs();
	        } else {
	          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
	          this.setState(dummyState);
	        }
	      };

	      _proto.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
	        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
	        // needs to notify nested subs. Once called, it unimplements itself until further state
	        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
	        // a boolean check every time avoids an extra method call most of the time, resulting
	        // in some perf boost.
	        this.componentDidUpdate = undefined;
	        this.notifyNestedSubs();
	      };

	      _proto.isSubscribed = function isSubscribed() {
	        return Boolean(this.subscription) && this.subscription.isSubscribed();
	      };

	      _proto.addExtraProps = function addExtraProps(props) {
	        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props; // make a shallow copy so that fields added don't leak to the original selector.
	        // this is especially important for 'ref' since that's a reference back to the component
	        // instance. a singleton memoized selector would then be holding a reference to the
	        // instance, preventing the instance from being garbage collected, and that would be bad

	        var withExtras = _extends$2({}, props);

	        if (withRef) withExtras.ref = this.setWrappedInstance;
	        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
	        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
	        return withExtras;
	      };

	      _proto.render = function render() {
	        var selector = this.selector;
	        selector.shouldComponentUpdate = false;

	        if (selector.error) {
	          throw selector.error;
	        } else {
	          return React.createElement(WrappedComponent, this.addExtraProps(selector.props));
	        }
	      };

	      return Connect;
	    }(React.Component);
	    /* eslint-enable react/no-deprecated */


	    Connect.WrappedComponent = WrappedComponent;
	    Connect.displayName = displayName;
	    Connect.childContextTypes = childContextTypes;
	    Connect.contextTypes = contextTypes;
	    Connect.propTypes = contextTypes;

	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        var _this2 = this;

	        // We are hot reloading!
	        if (this.version !== version) {
	          this.version = version;
	          this.initSelector(); // If any connected descendants don't hot reload (and resubscribe in the process), their
	          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
	          // listeners, this does mean that the old versions of connected descendants will still be
	          // notified of state changes; however, their onStateChange function is a no-op so this
	          // isn't a huge deal.

	          var oldListeners = [];

	          if (this.subscription) {
	            oldListeners = this.subscription.listeners.get();
	            this.subscription.tryUnsubscribe();
	          }

	          this.initSubscription();

	          if (shouldHandleStateChanges) {
	            this.subscription.trySubscribe();
	            oldListeners.forEach(function (listener) {
	              return _this2.subscription.listeners.subscribe(listener);
	            });
	          }
	        }
	      };
	    }

	    return hoistNonReactStatics_cjs(Connect, WrappedComponent);
	  };
	}

	var hasOwn = Object.prototype.hasOwnProperty;

	function is$1(x, y) {
	  if (x === y) {
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}

	function shallowEqual(objA, objB) {
	  if (is$1(objA, objB)) return true;

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	  if (keysA.length !== keysB.length) return false;

	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * @param {any} obj The object to inspect.
	 * @returns {boolean} True if the argument appears to be a plain object.
	 */
	function isPlainObject$1(obj) {
	  if (typeof obj !== 'object' || obj === null) return false;
	  var proto = Object.getPrototypeOf(obj);
	  if (proto === null) return true;
	  var baseProto = proto;

	  while (Object.getPrototypeOf(baseProto) !== null) {
	    baseProto = Object.getPrototypeOf(baseProto);
	  }

	  return proto === baseProto;
	}

	function verifyPlainObject(value, displayName, methodName) {
	  if (!isPlainObject$1(value)) {
	    warning$2(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
	  }
	}

	function wrapMapToPropsConstant(getConstant) {
	  return function initConstantSelector(dispatch, options) {
	    var constant = getConstant(dispatch, options);

	    function constantSelector() {
	      return constant;
	    }

	    constantSelector.dependsOnOwnProps = false;
	    return constantSelector;
	  };
	} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
	// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
	// whether mapToProps needs to be invoked when props have changed.
	// 
	// A length of one signals that mapToProps does not depend on props from the parent component.
	// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
	// therefore not reporting its length accurately..

	function getDependsOnOwnProps(mapToProps) {
	  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
	} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
	// this function wraps mapToProps in a proxy function which does several things:
	// 
	//  * Detects whether the mapToProps function being called depends on props, which
	//    is used by selectorFactory to decide if it should reinvoke on props changes.
	//    
	//  * On first call, handles mapToProps if returns another function, and treats that
	//    new function as the true mapToProps for subsequent calls.
	//    
	//  * On first call, verifies the first result is a plain object, in order to warn
	//    the developer that their mapToProps function is not returning a valid result.
	//    

	function wrapMapToPropsFunc(mapToProps, methodName) {
	  return function initProxySelector(dispatch, _ref) {
	    var displayName = _ref.displayName;

	    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
	      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
	    }; // allow detectFactoryAndVerify to get ownProps


	    proxy.dependsOnOwnProps = true;

	    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
	      proxy.mapToProps = mapToProps;
	      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
	      var props = proxy(stateOrDispatch, ownProps);

	      if (typeof props === 'function') {
	        proxy.mapToProps = props;
	        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
	        props = proxy(stateOrDispatch, ownProps);
	      }

	      if (process.env.NODE_ENV !== 'production') verifyPlainObject(props, displayName, methodName);
	      return props;
	    };

	    return proxy;
	  };
	}

	function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
	  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
	}
	function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
	  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
	    return {
	      dispatch: dispatch
	    };
	  }) : undefined;
	}
	function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
	  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {
	    return bindActionCreators(mapDispatchToProps, dispatch);
	  }) : undefined;
	}
	var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

	function whenMapStateToPropsIsFunction(mapStateToProps) {
	  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
	}
	function whenMapStateToPropsIsMissing(mapStateToProps) {
	  return !mapStateToProps ? wrapMapToPropsConstant(function () {
	    return {};
	  }) : undefined;
	}
	var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

	function defaultMergeProps(stateProps, dispatchProps, ownProps) {
	  return _extends$2({}, ownProps, stateProps, dispatchProps);
	}
	function wrapMergePropsFunc(mergeProps) {
	  return function initMergePropsProxy(dispatch, _ref) {
	    var displayName = _ref.displayName,
	        pure = _ref.pure,
	        areMergedPropsEqual = _ref.areMergedPropsEqual;
	    var hasRunOnce = false;
	    var mergedProps;
	    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
	      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

	      if (hasRunOnce) {
	        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
	      } else {
	        hasRunOnce = true;
	        mergedProps = nextMergedProps;
	        if (process.env.NODE_ENV !== 'production') verifyPlainObject(mergedProps, displayName, 'mergeProps');
	      }

	      return mergedProps;
	    };
	  };
	}
	function whenMergePropsIsFunction(mergeProps) {
	  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
	}
	function whenMergePropsIsOmitted(mergeProps) {
	  return !mergeProps ? function () {
	    return defaultMergeProps;
	  } : undefined;
	}
	var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

	function verify(selector, methodName, displayName) {
	  if (!selector) {
	    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
	  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
	    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
	      warning$2("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
	    }
	  }
	}

	function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
	  verify(mapStateToProps, 'mapStateToProps', displayName);
	  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
	  verify(mergeProps, 'mergeProps', displayName);
	}

	function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
	  return function impureFinalPropsSelector(state, ownProps) {
	    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
	  };
	}
	function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
	  var areStatesEqual = _ref.areStatesEqual,
	      areOwnPropsEqual = _ref.areOwnPropsEqual,
	      areStatePropsEqual = _ref.areStatePropsEqual;
	  var hasRunAtLeastOnce = false;
	  var state;
	  var ownProps;
	  var stateProps;
	  var dispatchProps;
	  var mergedProps;

	  function handleFirstCall(firstState, firstOwnProps) {
	    state = firstState;
	    ownProps = firstOwnProps;
	    stateProps = mapStateToProps(state, ownProps);
	    dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    hasRunAtLeastOnce = true;
	    return mergedProps;
	  }

	  function handleNewPropsAndNewState() {
	    stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewProps() {
	    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewState() {
	    var nextStateProps = mapStateToProps(state, ownProps);
	    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
	    stateProps = nextStateProps;
	    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleSubsequentCalls(nextState, nextOwnProps) {
	    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
	    var stateChanged = !areStatesEqual(nextState, state);
	    state = nextState;
	    ownProps = nextOwnProps;
	    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
	    if (propsChanged) return handleNewProps();
	    if (stateChanged) return handleNewState();
	    return mergedProps;
	  }

	  return function pureFinalPropsSelector(nextState, nextOwnProps) {
	    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
	  };
	} // TODO: Add more comments
	// If pure is true, the selector returned by selectorFactory will memoize its results,
	// allowing connectAdvanced's shouldComponentUpdate to return false if final
	// props have not changed. If false, the selector will always return a new
	// object and shouldComponentUpdate will always return true.

	function finalPropsSelectorFactory(dispatch, _ref2) {
	  var initMapStateToProps = _ref2.initMapStateToProps,
	      initMapDispatchToProps = _ref2.initMapDispatchToProps,
	      initMergeProps = _ref2.initMergeProps,
	      options = _objectWithoutPropertiesLoose(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);

	  var mapStateToProps = initMapStateToProps(dispatch, options);
	  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
	  var mergeProps = initMergeProps(dispatch, options);

	  if (process.env.NODE_ENV !== 'production') {
	    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
	  }

	  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
	  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
	}

	/*
	  connect is a facade over connectAdvanced. It turns its args into a compatible
	  selectorFactory, which has the signature:

	    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
	  
	  connect passes its args to connectAdvanced as options, which will in turn pass them to
	  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

	  selectorFactory returns a final props selector from its mapStateToProps,
	  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
	  mergePropsFactories, and pure args.

	  The resulting final props selector is called by the Connect component instance whenever
	  it receives new props or store state.
	 */

	function match(arg, factories, name) {
	  for (var i = factories.length - 1; i >= 0; i--) {
	    var result = factories[i](arg);
	    if (result) return result;
	  }

	  return function (dispatch, options) {
	    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
	  };
	}

	function strictEqual(a, b) {
	  return a === b;
	} // createConnect with default args builds the 'official' connect behavior. Calling it with
	// different options opens up some testing and extensibility scenarios


	function createConnect(_temp) {
	  var _ref = _temp === void 0 ? {} : _temp,
	      _ref$connectHOC = _ref.connectHOC,
	      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,
	      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
	      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
	      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
	      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
	      _ref$mergePropsFactor = _ref.mergePropsFactories,
	      mergePropsFactories = _ref$mergePropsFactor === void 0 ? defaultMergePropsFactories : _ref$mergePropsFactor,
	      _ref$selectorFactory = _ref.selectorFactory,
	      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;

	  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
	    if (_ref2 === void 0) {
	      _ref2 = {};
	    }

	    var _ref3 = _ref2,
	        _ref3$pure = _ref3.pure,
	        pure = _ref3$pure === void 0 ? true : _ref3$pure,
	        _ref3$areStatesEqual = _ref3.areStatesEqual,
	        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
	        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
	        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,
	        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
	        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,
	        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
	        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,
	        extraOptions = _objectWithoutPropertiesLoose(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);

	    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
	    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
	    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
	    return connectHOC(selectorFactory, _extends$2({
	      // used in error messages
	      methodName: 'connect',
	      // used to compute Connect's displayName from the wrapped component's displayName.
	      getDisplayName: function getDisplayName(name) {
	        return "Connect(" + name + ")";
	      },
	      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
	      shouldHandleStateChanges: Boolean(mapStateToProps),
	      // passed through to selectorFactory
	      initMapStateToProps: initMapStateToProps,
	      initMapDispatchToProps: initMapDispatchToProps,
	      initMergeProps: initMergeProps,
	      pure: pure,
	      areStatesEqual: areStatesEqual,
	      areOwnPropsEqual: areOwnPropsEqual,
	      areStatePropsEqual: areStatePropsEqual,
	      areMergedPropsEqual: areMergedPropsEqual
	    }, extraOptions));
	  };
	}
	var connect = createConnect();

	var mapToZero_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports['default'] = mapToZero;

	function mapToZero(obj) {
	  var ret = {};
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) {
	      ret[key] = 0;
	    }
	  }
	  return ret;
	}

	module.exports = exports['default'];
	});

	unwrapExports(mapToZero_1);

	var stripStyle_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports['default'] = stripStyle;

	function stripStyle(style) {
	  var ret = {};
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }
	    ret[key] = typeof style[key] === 'number' ? style[key] : style[key].val;
	  }
	  return ret;
	}

	module.exports = exports['default'];
	});

	unwrapExports(stripStyle_1);

	var stepper_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = stepper;

	var reusedTuple = [0, 0];

	function stepper(secondPerFrame, x, v, destX, k, b, precision) {
	  // Spring stiffness, in kg / s^2

	  // for animations, destX is really spring length (spring at rest). initial
	  // position is considered as the stretched/compressed position of a spring
	  var Fspring = -k * (x - destX);

	  // Damping, in kg / s
	  var Fdamper = -b * v;

	  // usually we put mass here, but for animation purposes, specifying mass is a
	  // bit redundant. you could simply adjust k and b accordingly
	  // let a = (Fspring + Fdamper) / mass;
	  var a = Fspring + Fdamper;

	  var newV = v + a * secondPerFrame;
	  var newX = x + newV * secondPerFrame;

	  if (Math.abs(newV) < precision && Math.abs(newX - destX) < precision) {
	    reusedTuple[0] = destX;
	    reusedTuple[1] = 0;
	    return reusedTuple;
	  }

	  reusedTuple[0] = newX;
	  reusedTuple[1] = newV;
	  return reusedTuple;
	}

	module.exports = exports["default"];
	// array reference around.
	});

	unwrapExports(stepper_1);

	var performanceNow = createCommonjsModule(function (module) {
	// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(commonjsGlobal);
	});

	var performanceNow$1 = createCommonjsModule(function (module) {
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(commonjsGlobal);


	});

	var root$1 = typeof window === 'undefined' ? commonjsGlobal : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root$1['request' + suffix]
	  , caf = root$1['cancel' + suffix] || root$1['cancelRequest' + suffix];

	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root$1[vendors[i] + 'Request' + suffix];
	  caf = root$1[vendors[i] + 'Cancel' + suffix]
	      || root$1[vendors[i] + 'CancelRequest' + suffix];
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id$1 = 0
	    , queue = []
	    , frameDuration = 1000 / 60;

	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = performanceNow$1()
	        , next = Math.max(0, frameDuration - (_now - last));
	      last = next + _now;
	      setTimeout(function() {
	        var cp = queue.slice(0);
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0;
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last);
	            } catch(e) {
	              setTimeout(function() { throw e }, 0);
	            }
	          }
	        }
	      }, Math.round(next));
	    }
	    queue.push({
	      handle: ++id$1,
	      callback: callback,
	      cancelled: false
	    });
	    return id$1
	  };

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true;
	      }
	    }
	  };
	}

	var raf_1 = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root$1, fn)
	};
	var cancel = function() {
	  caf.apply(root$1, arguments);
	};
	var polyfill = function(object) {
	  if (!object) {
	    object = root$1;
	  }
	  object.requestAnimationFrame = raf;
	  object.cancelAnimationFrame = caf;
	};
	raf_1.cancel = cancel;
	raf_1.polyfill = polyfill;

	var shouldStopAnimation_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports['default'] = shouldStopAnimation;

	function shouldStopAnimation(currentStyle, style, currentVelocity) {
	  for (var key in style) {
	    if (!Object.prototype.hasOwnProperty.call(style, key)) {
	      continue;
	    }

	    if (currentVelocity[key] !== 0) {
	      return false;
	    }

	    var styleValue = typeof style[key] === 'number' ? style[key] : style[key].val;
	    // stepper will have already taken care of rounding precision errors, so
	    // won't have such thing as 0.9999 !=== 1
	    if (currentStyle[key] !== styleValue) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = exports['default'];
	});

	unwrapExports(shouldStopAnimation_1);

	var Motion_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



	var _mapToZero2 = _interopRequireDefault(mapToZero_1);



	var _stripStyle2 = _interopRequireDefault(stripStyle_1);



	var _stepper4 = _interopRequireDefault(stepper_1);



	var _performanceNow2 = _interopRequireDefault(performanceNow);



	var _raf2 = _interopRequireDefault(raf_1);



	var _shouldStopAnimation2 = _interopRequireDefault(shouldStopAnimation_1);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	var msPerFrame = 1000 / 60;

	var Motion = (function (_React$Component) {
	  _inherits(Motion, _React$Component);

	  _createClass(Motion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyle: _propTypes2['default'].objectOf(_propTypes2['default'].number),
	      style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      onRest: _propTypes2['default'].func
	    },
	    enumerable: true
	  }]);

	  function Motion(props) {
	    var _this = this;

	    _classCallCheck(this, Motion);

	    _React$Component.call(this, props);
	    this.wasAnimating = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyle = null;

	    this.clearUnreadPropStyle = function (destStyle) {
	      var dirty = false;
	      var _state = _this.state;
	      var currentStyle = _state.currentStyle;
	      var currentVelocity = _state.currentVelocity;
	      var lastIdealStyle = _state.lastIdealStyle;
	      var lastIdealVelocity = _state.lastIdealVelocity;

	      for (var key in destStyle) {
	        if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	          continue;
	        }

	        var styleValue = destStyle[key];
	        if (typeof styleValue === 'number') {
	          if (!dirty) {
	            dirty = true;
	            currentStyle = _extends({}, currentStyle);
	            currentVelocity = _extends({}, currentVelocity);
	            lastIdealStyle = _extends({}, lastIdealStyle);
	            lastIdealVelocity = _extends({}, lastIdealVelocity);
	          }

	          currentStyle[key] = styleValue;
	          currentVelocity[key] = 0;
	          lastIdealStyle[key] = styleValue;
	          lastIdealVelocity[key] = 0;
	        }
	      }

	      if (dirty) {
	        _this.setState({ currentStyle: currentStyle, currentVelocity: currentVelocity, lastIdealStyle: lastIdealStyle, lastIdealVelocity: lastIdealVelocity });
	      }
	    };

	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // check if we need to animate in the first place
	        var propsStyle = _this.props.style;
	        if (_shouldStopAnimation2['default'](_this.state.currentStyle, propsStyle, _this.state.currentVelocity)) {
	          if (_this.wasAnimating && _this.props.onRest) {
	            _this.props.onRest();
	          }

	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.wasAnimating = false;
	          _this.accumulatedTime = 0;
	          return;
	        }

	        _this.wasAnimating = true;

	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }

	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }

	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	        var newLastIdealStyle = {};
	        var newLastIdealVelocity = {};
	        var newCurrentStyle = {};
	        var newCurrentVelocity = {};

	        for (var key in propsStyle) {
	          if (!Object.prototype.hasOwnProperty.call(propsStyle, key)) {
	            continue;
	          }

	          var styleValue = propsStyle[key];
	          if (typeof styleValue === 'number') {
	            newCurrentStyle[key] = styleValue;
	            newCurrentVelocity[key] = 0;
	            newLastIdealStyle[key] = styleValue;
	            newLastIdealVelocity[key] = 0;
	          } else {
	            var newLastIdealStyleValue = _this.state.lastIdealStyle[key];
	            var newLastIdealVelocityValue = _this.state.lastIdealVelocity[key];
	            for (var i = 0; i < framesToCatchUp; i++) {
	              var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              newLastIdealStyleValue = _stepper[0];
	              newLastIdealVelocityValue = _stepper[1];
	            }

	            var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	            var nextIdealX = _stepper2[0];
	            var nextIdealV = _stepper2[1];

	            newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	            newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	            newLastIdealStyle[key] = newLastIdealStyleValue;
	            newLastIdealVelocity[key] = newLastIdealVelocityValue;
	          }
	        }

	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	        _this.setState({
	          currentStyle: newCurrentStyle,
	          currentVelocity: newCurrentVelocity,
	          lastIdealStyle: newLastIdealStyle,
	          lastIdealVelocity: newLastIdealVelocity
	        });

	        _this.unreadPropStyle = null;

	        _this.startAnimationIfNecessary();
	      });
	    };

	    this.state = this.defaultState();
	  }

	  Motion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyle = _props.defaultStyle;
	    var style = _props.style;

	    var currentStyle = defaultStyle || _stripStyle2['default'](style);
	    var currentVelocity = _mapToZero2['default'](currentStyle);
	    return {
	      currentStyle: currentStyle,
	      currentVelocity: currentVelocity,
	      lastIdealStyle: currentStyle,
	      lastIdealVelocity: currentVelocity
	    };
	  };

	  // it's possible that currentStyle's value is stale: if props is immediately
	  // changed from 0 to 400 to spring(0) again, the async currentStyle is still
	  // at 0 (didn't have time to tick and interpolate even once). If we naively
	  // compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	  // In reality currentStyle should be 400

	  Motion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };

	  Motion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyle != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyle);
	    }

	    this.unreadPropStyle = props.style;
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };

	  Motion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };

	  Motion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyle);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };

	  return Motion;
	})(_react2['default'].Component);

	exports['default'] = Motion;
	module.exports = exports['default'];

	// after checking for unreadPropStyle != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)
	});

	unwrapExports(Motion_1);

	var StaggeredMotion_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



	var _mapToZero2 = _interopRequireDefault(mapToZero_1);



	var _stripStyle2 = _interopRequireDefault(stripStyle_1);



	var _stepper4 = _interopRequireDefault(stepper_1);



	var _performanceNow2 = _interopRequireDefault(performanceNow);



	var _raf2 = _interopRequireDefault(raf_1);



	var _shouldStopAnimation2 = _interopRequireDefault(shouldStopAnimation_1);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	var msPerFrame = 1000 / 60;

	function shouldStopAnimationAll(currentStyles, styles, currentVelocities) {
	  for (var i = 0; i < currentStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], styles[i], currentVelocities[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	var StaggeredMotion = (function (_React$Component) {
	  _inherits(StaggeredMotion, _React$Component);

	  _createClass(StaggeredMotion, null, [{
	    key: 'propTypes',
	    value: {
	      // TOOD: warn against putting a config in here
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].objectOf(_propTypes2['default'].number)),
	      styles: _propTypes2['default'].func.isRequired,
	      children: _propTypes2['default'].func.isRequired
	    },
	    enumerable: true
	  }]);

	  function StaggeredMotion(props) {
	    var _this = this;

	    _classCallCheck(this, StaggeredMotion);

	    _React$Component.call(this, props);
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;

	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _state = _this.state;
	      var currentStyles = _state.currentStyles;
	      var currentVelocities = _state.currentVelocities;
	      var lastIdealStyles = _state.lastIdealStyles;
	      var lastIdealVelocities = _state.lastIdealVelocities;

	      var someDirty = false;
	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i];
	        var dirty = false;

	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }

	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              someDirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	          }
	        }
	      }

	      if (someDirty) {
	        _this.setState({ currentStyles: currentStyles, currentVelocities: currentVelocities, lastIdealStyles: lastIdealStyles, lastIdealVelocities: lastIdealVelocities });
	      }
	    };

	    this.startAnimationIfNecessary = function () {
	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        var destStyles = _this.props.styles(_this.state.lastIdealStyles);

	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }

	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }

	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }

	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	        var newLastIdealStyles = [];
	        var newLastIdealVelocities = [];
	        var newCurrentStyles = [];
	        var newCurrentVelocities = [];

	        for (var i = 0; i < destStyles.length; i++) {
	          var destStyle = destStyles[i];
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};

	          for (var key in destStyle) {
	            if (!Object.prototype.hasOwnProperty.call(destStyle, key)) {
	              continue;
	            }

	            var styleValue = destStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = _this.state.lastIdealStyles[i][key];
	              var newLastIdealVelocityValue = _this.state.lastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }

	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];

	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }

	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	        }

	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities
	        });

	        _this.unreadPropStyles = null;

	        _this.startAnimationIfNecessary();
	      });
	    };

	    this.state = this.defaultState();
	  }

	  StaggeredMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;

	    var currentStyles = defaultStyles || styles().map(_stripStyle2['default']);
	    var currentVelocities = currentStyles.map(function (currentStyle) {
	      return _mapToZero2['default'](currentStyle);
	    });
	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: currentStyles,
	      lastIdealVelocities: currentVelocities
	    };
	  };

	  StaggeredMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };

	  StaggeredMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles != null) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    this.unreadPropStyles = props.styles(this.state.lastIdealStyles);
	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };

	  StaggeredMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };

	  StaggeredMotion.prototype.render = function render() {
	    var renderedChildren = this.props.children(this.state.currentStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };

	  return StaggeredMotion;
	})(_react2['default'].Component);

	exports['default'] = StaggeredMotion;
	module.exports = exports['default'];

	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400

	// after checking for unreadPropStyles != null, we manually go set the
	// non-interpolating values (those that are a number, without a spring
	// config)
	});

	unwrapExports(StaggeredMotion_1);

	var mergeDiff_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports['default'] = mergeDiff;

	function mergeDiff(prev, next, onRemove) {
	  // bookkeeping for easier access of a key's index below. This is 2 allocations +
	  // potentially triggering chrome hash map mode for objs (so it might be faster

	  var prevKeyIndex = {};
	  for (var i = 0; i < prev.length; i++) {
	    prevKeyIndex[prev[i].key] = i;
	  }
	  var nextKeyIndex = {};
	  for (var i = 0; i < next.length; i++) {
	    nextKeyIndex[next[i].key] = i;
	  }

	  // first, an overly elaborate way of merging prev and next, eliminating
	  // duplicates (in terms of keys). If there's dupe, keep the item in next).
	  // This way of writing it saves allocations
	  var ret = [];
	  for (var i = 0; i < next.length; i++) {
	    ret[i] = next[i];
	  }
	  for (var i = 0; i < prev.length; i++) {
	    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {
	      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't
	      // merge in keys that the user desires to kill
	      var fill = onRemove(i, prev[i]);
	      if (fill != null) {
	        ret.push(fill);
	      }
	    }
	  }

	  // now all the items all present. Core sorting logic to have the right order
	  return ret.sort(function (a, b) {
	    var nextOrderA = nextKeyIndex[a.key];
	    var nextOrderB = nextKeyIndex[b.key];
	    var prevOrderA = prevKeyIndex[a.key];
	    var prevOrderB = prevKeyIndex[b.key];

	    if (nextOrderA != null && nextOrderB != null) {
	      // both keys in next
	      return nextKeyIndex[a.key] - nextKeyIndex[b.key];
	    } else if (prevOrderA != null && prevOrderB != null) {
	      // both keys in prev
	      return prevKeyIndex[a.key] - prevKeyIndex[b.key];
	    } else if (nextOrderA != null) {
	      // key a in next, key b in prev

	      // how to determine the order between a and b? We find a "pivot" (term
	      // abuse), a key present in both prev and next, that is sandwiched between
	      // a and b. In the context of our above example, if we're comparing a and
	      // d, b's (the only) pivot
	      for (var i = 0; i < next.length; i++) {
	        var pivot = next[i].key;
	        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	          continue;
	        }

	        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {
	          return -1;
	        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {
	          return 1;
	        }
	      }
	      // pluggable. default to: next bigger than prev
	      return 1;
	    }
	    // prevOrderA, nextOrderB
	    for (var i = 0; i < next.length; i++) {
	      var pivot = next[i].key;
	      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {
	        continue;
	      }
	      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {
	        return 1;
	      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {
	        return -1;
	      }
	    }
	    // pluggable. default to: next bigger than prev
	    return -1;
	  });
	}

	module.exports = exports['default'];
	// to loop through and find a key's index each time), but I no longer care
	});

	unwrapExports(mergeDiff_1);

	var TransitionMotion_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



	var _mapToZero2 = _interopRequireDefault(mapToZero_1);



	var _stripStyle2 = _interopRequireDefault(stripStyle_1);



	var _stepper4 = _interopRequireDefault(stepper_1);



	var _mergeDiff2 = _interopRequireDefault(mergeDiff_1);



	var _performanceNow2 = _interopRequireDefault(performanceNow);



	var _raf2 = _interopRequireDefault(raf_1);



	var _shouldStopAnimation2 = _interopRequireDefault(shouldStopAnimation_1);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	var msPerFrame = 1000 / 60;

	// the children function & (potential) styles function asks as param an
	// Array<TransitionPlainStyle>, where each TransitionPlainStyle is of the format
	// {key: string, data?: any, style: PlainStyle}. However, the way we keep
	// internal states doesn't contain such a data structure (check the state and
	// TransitionMotionState). So when children function and others ask for such
	// data we need to generate them on the fly by combining mergedPropsStyles and
	// currentStyles/lastIdealStyles
	function rehydrateStyles(mergedPropsStyles, unreadPropStyles, plainStyles) {
	  // Copy the value to a `const` so that Flow understands that the const won't
	  // change and will be non-nullable in the callback below.
	  var cUnreadPropStyles = unreadPropStyles;
	  if (cUnreadPropStyles == null) {
	    return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	      return {
	        key: mergedPropsStyle.key,
	        data: mergedPropsStyle.data,
	        style: plainStyles[i]
	      };
	    });
	  }
	  return mergedPropsStyles.map(function (mergedPropsStyle, i) {
	    for (var j = 0; j < cUnreadPropStyles.length; j++) {
	      if (cUnreadPropStyles[j].key === mergedPropsStyle.key) {
	        return {
	          key: cUnreadPropStyles[j].key,
	          data: cUnreadPropStyles[j].data,
	          style: plainStyles[i]
	        };
	      }
	    }
	    return { key: mergedPropsStyle.key, data: mergedPropsStyle.data, style: plainStyles[i] };
	  });
	}

	function shouldStopAnimationAll(currentStyles, destStyles, currentVelocities, mergedPropsStyles) {
	  if (mergedPropsStyles.length !== destStyles.length) {
	    return false;
	  }

	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (mergedPropsStyles[i].key !== destStyles[i].key) {
	      return false;
	    }
	  }

	  // we have the invariant that mergedPropsStyles and
	  // currentStyles/currentVelocities/last* are synced in terms of cells, see
	  // mergeAndSync comment for more info
	  for (var i = 0; i < mergedPropsStyles.length; i++) {
	    if (!_shouldStopAnimation2['default'](currentStyles[i], destStyles[i].style, currentVelocities[i])) {
	      return false;
	    }
	  }

	  return true;
	}

	// core key merging logic

	// things to do: say previously merged style is {a, b}, dest style (prop) is {b,
	// c}, previous current (interpolating) style is {a, b}
	// **invariant**: current[i] corresponds to merged[i] in terms of key

	// steps:
	// turn merged style into {a?, b, c}
	//    add c, value of c is destStyles.c
	//    maybe remove a, aka call willLeave(a), then merged is either {b, c} or {a, b, c}
	// turn current (interpolating) style from {a, b} into {a?, b, c}
	//    maybe remove a
	//    certainly add c, value of c is willEnter(c)
	// loop over merged and construct new current
	// dest doesn't change, that's owner's
	function mergeAndSync(willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldLastIdealStyles, oldLastIdealVelocities) {
	  var newMergedPropsStyles = _mergeDiff2['default'](oldMergedPropsStyles, destStyles, function (oldIndex, oldMergedPropsStyle) {
	    var leavingStyle = willLeave(oldMergedPropsStyle);
	    if (leavingStyle == null) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    if (_shouldStopAnimation2['default'](oldCurrentStyles[oldIndex], leavingStyle, oldCurrentVelocities[oldIndex])) {
	      didLeave({ key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data });
	      return null;
	    }
	    return { key: oldMergedPropsStyle.key, data: oldMergedPropsStyle.data, style: leavingStyle };
	  });

	  var newCurrentStyles = [];
	  var newCurrentVelocities = [];
	  var newLastIdealStyles = [];
	  var newLastIdealVelocities = [];
	  for (var i = 0; i < newMergedPropsStyles.length; i++) {
	    var newMergedPropsStyleCell = newMergedPropsStyles[i];
	    var foundOldIndex = null;
	    for (var j = 0; j < oldMergedPropsStyles.length; j++) {
	      if (oldMergedPropsStyles[j].key === newMergedPropsStyleCell.key) {
	        foundOldIndex = j;
	        break;
	      }
	    }
	    // TODO: key search code
	    if (foundOldIndex == null) {
	      var plainStyle = willEnter(newMergedPropsStyleCell);
	      newCurrentStyles[i] = plainStyle;
	      newLastIdealStyles[i] = plainStyle;

	      var velocity = _mapToZero2['default'](newMergedPropsStyleCell.style);
	      newCurrentVelocities[i] = velocity;
	      newLastIdealVelocities[i] = velocity;
	    } else {
	      newCurrentStyles[i] = oldCurrentStyles[foundOldIndex];
	      newLastIdealStyles[i] = oldLastIdealStyles[foundOldIndex];
	      newCurrentVelocities[i] = oldCurrentVelocities[foundOldIndex];
	      newLastIdealVelocities[i] = oldLastIdealVelocities[foundOldIndex];
	    }
	  }

	  return [newMergedPropsStyles, newCurrentStyles, newCurrentVelocities, newLastIdealStyles, newLastIdealVelocities];
	}

	var TransitionMotion = (function (_React$Component) {
	  _inherits(TransitionMotion, _React$Component);

	  _createClass(TransitionMotion, null, [{
	    key: 'propTypes',
	    value: {
	      defaultStyles: _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].number).isRequired
	      })),
	      styles: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].arrayOf(_propTypes2['default'].shape({
	        key: _propTypes2['default'].string.isRequired,
	        data: _propTypes2['default'].any,
	        style: _propTypes2['default'].objectOf(_propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].object])).isRequired
	      }))]).isRequired,
	      children: _propTypes2['default'].func.isRequired,
	      willEnter: _propTypes2['default'].func,
	      willLeave: _propTypes2['default'].func,
	      didLeave: _propTypes2['default'].func
	    },
	    enumerable: true
	  }, {
	    key: 'defaultProps',
	    value: {
	      willEnter: function willEnter(styleThatEntered) {
	        return _stripStyle2['default'](styleThatEntered.style);
	      },
	      // recall: returning null makes the current unmounting TransitionStyle
	      // disappear immediately
	      willLeave: function willLeave() {
	        return null;
	      },
	      didLeave: function didLeave() {}
	    },
	    enumerable: true
	  }]);

	  function TransitionMotion(props) {
	    var _this = this;

	    _classCallCheck(this, TransitionMotion);

	    _React$Component.call(this, props);
	    this.unmounting = false;
	    this.animationID = null;
	    this.prevTime = 0;
	    this.accumulatedTime = 0;
	    this.unreadPropStyles = null;

	    this.clearUnreadPropStyle = function (unreadPropStyles) {
	      var _mergeAndSync = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, unreadPropStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);

	      var mergedPropsStyles = _mergeAndSync[0];
	      var currentStyles = _mergeAndSync[1];
	      var currentVelocities = _mergeAndSync[2];
	      var lastIdealStyles = _mergeAndSync[3];
	      var lastIdealVelocities = _mergeAndSync[4];

	      for (var i = 0; i < unreadPropStyles.length; i++) {
	        var unreadPropStyle = unreadPropStyles[i].style;
	        var dirty = false;

	        for (var key in unreadPropStyle) {
	          if (!Object.prototype.hasOwnProperty.call(unreadPropStyle, key)) {
	            continue;
	          }

	          var styleValue = unreadPropStyle[key];
	          if (typeof styleValue === 'number') {
	            if (!dirty) {
	              dirty = true;
	              currentStyles[i] = _extends({}, currentStyles[i]);
	              currentVelocities[i] = _extends({}, currentVelocities[i]);
	              lastIdealStyles[i] = _extends({}, lastIdealStyles[i]);
	              lastIdealVelocities[i] = _extends({}, lastIdealVelocities[i]);
	              mergedPropsStyles[i] = {
	                key: mergedPropsStyles[i].key,
	                data: mergedPropsStyles[i].data,
	                style: _extends({}, mergedPropsStyles[i].style)
	              };
	            }
	            currentStyles[i][key] = styleValue;
	            currentVelocities[i][key] = 0;
	            lastIdealStyles[i][key] = styleValue;
	            lastIdealVelocities[i][key] = 0;
	            mergedPropsStyles[i].style[key] = styleValue;
	          }
	        }
	      }

	      // unlike the other 2 components, we can't detect staleness and optionally
	      // opt out of setState here. each style object's data might contain new
	      // stuff we're not/cannot compare
	      _this.setState({
	        currentStyles: currentStyles,
	        currentVelocities: currentVelocities,
	        mergedPropsStyles: mergedPropsStyles,
	        lastIdealStyles: lastIdealStyles,
	        lastIdealVelocities: lastIdealVelocities
	      });
	    };

	    this.startAnimationIfNecessary = function () {
	      if (_this.unmounting) {
	        return;
	      }

	      // TODO: when config is {a: 10} and dest is {a: 10} do we raf once and
	      // call cb? No, otherwise accidental parent rerender causes cb trigger
	      _this.animationID = _raf2['default'](function (timestamp) {
	        // https://github.com/chenglou/react-motion/pull/420
	        // > if execution passes the conditional if (this.unmounting), then
	        // executes async defaultRaf and after that component unmounts and after
	        // that the callback of defaultRaf is called, then setState will be called
	        // on unmounted component.
	        if (_this.unmounting) {
	          return;
	        }

	        var propStyles = _this.props.styles;
	        var destStyles = typeof propStyles === 'function' ? propStyles(rehydrateStyles(_this.state.mergedPropsStyles, _this.unreadPropStyles, _this.state.lastIdealStyles)) : propStyles;

	        // check if we need to animate in the first place
	        if (shouldStopAnimationAll(_this.state.currentStyles, destStyles, _this.state.currentVelocities, _this.state.mergedPropsStyles)) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.accumulatedTime = 0;
	          return;
	        }

	        var currentTime = timestamp || _performanceNow2['default']();
	        var timeDelta = currentTime - _this.prevTime;
	        _this.prevTime = currentTime;
	        _this.accumulatedTime = _this.accumulatedTime + timeDelta;
	        // more than 10 frames? prolly switched browser tab. Restart
	        if (_this.accumulatedTime > msPerFrame * 10) {
	          _this.accumulatedTime = 0;
	        }

	        if (_this.accumulatedTime === 0) {
	          // no need to cancel animationID here; shouldn't have any in flight
	          _this.animationID = null;
	          _this.startAnimationIfNecessary();
	          return;
	        }

	        var currentFrameCompletion = (_this.accumulatedTime - Math.floor(_this.accumulatedTime / msPerFrame) * msPerFrame) / msPerFrame;
	        var framesToCatchUp = Math.floor(_this.accumulatedTime / msPerFrame);

	        var _mergeAndSync2 = mergeAndSync(_this.props.willEnter, _this.props.willLeave, _this.props.didLeave, _this.state.mergedPropsStyles, destStyles, _this.state.currentStyles, _this.state.currentVelocities, _this.state.lastIdealStyles, _this.state.lastIdealVelocities);

	        var newMergedPropsStyles = _mergeAndSync2[0];
	        var newCurrentStyles = _mergeAndSync2[1];
	        var newCurrentVelocities = _mergeAndSync2[2];
	        var newLastIdealStyles = _mergeAndSync2[3];
	        var newLastIdealVelocities = _mergeAndSync2[4];

	        for (var i = 0; i < newMergedPropsStyles.length; i++) {
	          var newMergedPropsStyle = newMergedPropsStyles[i].style;
	          var newCurrentStyle = {};
	          var newCurrentVelocity = {};
	          var newLastIdealStyle = {};
	          var newLastIdealVelocity = {};

	          for (var key in newMergedPropsStyle) {
	            if (!Object.prototype.hasOwnProperty.call(newMergedPropsStyle, key)) {
	              continue;
	            }

	            var styleValue = newMergedPropsStyle[key];
	            if (typeof styleValue === 'number') {
	              newCurrentStyle[key] = styleValue;
	              newCurrentVelocity[key] = 0;
	              newLastIdealStyle[key] = styleValue;
	              newLastIdealVelocity[key] = 0;
	            } else {
	              var newLastIdealStyleValue = newLastIdealStyles[i][key];
	              var newLastIdealVelocityValue = newLastIdealVelocities[i][key];
	              for (var j = 0; j < framesToCatchUp; j++) {
	                var _stepper = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	                newLastIdealStyleValue = _stepper[0];
	                newLastIdealVelocityValue = _stepper[1];
	              }

	              var _stepper2 = _stepper4['default'](msPerFrame / 1000, newLastIdealStyleValue, newLastIdealVelocityValue, styleValue.val, styleValue.stiffness, styleValue.damping, styleValue.precision);

	              var nextIdealX = _stepper2[0];
	              var nextIdealV = _stepper2[1];

	              newCurrentStyle[key] = newLastIdealStyleValue + (nextIdealX - newLastIdealStyleValue) * currentFrameCompletion;
	              newCurrentVelocity[key] = newLastIdealVelocityValue + (nextIdealV - newLastIdealVelocityValue) * currentFrameCompletion;
	              newLastIdealStyle[key] = newLastIdealStyleValue;
	              newLastIdealVelocity[key] = newLastIdealVelocityValue;
	            }
	          }

	          newLastIdealStyles[i] = newLastIdealStyle;
	          newLastIdealVelocities[i] = newLastIdealVelocity;
	          newCurrentStyles[i] = newCurrentStyle;
	          newCurrentVelocities[i] = newCurrentVelocity;
	        }

	        _this.animationID = null;
	        // the amount we're looped over above
	        _this.accumulatedTime -= framesToCatchUp * msPerFrame;

	        _this.setState({
	          currentStyles: newCurrentStyles,
	          currentVelocities: newCurrentVelocities,
	          lastIdealStyles: newLastIdealStyles,
	          lastIdealVelocities: newLastIdealVelocities,
	          mergedPropsStyles: newMergedPropsStyles
	        });

	        _this.unreadPropStyles = null;

	        _this.startAnimationIfNecessary();
	      });
	    };

	    this.state = this.defaultState();
	  }

	  TransitionMotion.prototype.defaultState = function defaultState() {
	    var _props = this.props;
	    var defaultStyles = _props.defaultStyles;
	    var styles = _props.styles;
	    var willEnter = _props.willEnter;
	    var willLeave = _props.willLeave;
	    var didLeave = _props.didLeave;

	    var destStyles = typeof styles === 'function' ? styles(defaultStyles) : styles;

	    // this is special. for the first time around, we don't have a comparison
	    // between last (no last) and current merged props. we'll compute last so:
	    // say default is {a, b} and styles (dest style) is {b, c}, we'll
	    // fabricate last as {a, b}
	    var oldMergedPropsStyles = undefined;
	    if (defaultStyles == null) {
	      oldMergedPropsStyles = destStyles;
	    } else {
	      oldMergedPropsStyles = defaultStyles.map(function (defaultStyleCell) {
	        // TODO: key search code
	        for (var i = 0; i < destStyles.length; i++) {
	          if (destStyles[i].key === defaultStyleCell.key) {
	            return destStyles[i];
	          }
	        }
	        return defaultStyleCell;
	      });
	    }
	    var oldCurrentStyles = defaultStyles == null ? destStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _stripStyle2['default'](s.style);
	    });
	    var oldCurrentVelocities = defaultStyles == null ? destStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    }) : defaultStyles.map(function (s) {
	      return _mapToZero2['default'](s.style);
	    });

	    var _mergeAndSync3 = mergeAndSync(
	    // Because this is an old-style createReactClass component, Flow doesn't
	    // understand that the willEnter and willLeave props have default values
	    // and will always be present.
	    willEnter, willLeave, didLeave, oldMergedPropsStyles, destStyles, oldCurrentStyles, oldCurrentVelocities, oldCurrentStyles, // oldLastIdealStyles really
	    oldCurrentVelocities);

	    var mergedPropsStyles = _mergeAndSync3[0];
	    var currentStyles = _mergeAndSync3[1];
	    var currentVelocities = _mergeAndSync3[2];
	    var lastIdealStyles = _mergeAndSync3[3];
	    var lastIdealVelocities = _mergeAndSync3[4];
	    // oldLastIdealVelocities really

	    return {
	      currentStyles: currentStyles,
	      currentVelocities: currentVelocities,
	      lastIdealStyles: lastIdealStyles,
	      lastIdealVelocities: lastIdealVelocities,
	      mergedPropsStyles: mergedPropsStyles
	    };
	  };

	  // after checking for unreadPropStyles != null, we manually go set the
	  // non-interpolating values (those that are a number, without a spring
	  // config)

	  TransitionMotion.prototype.componentDidMount = function componentDidMount() {
	    this.prevTime = _performanceNow2['default']();
	    this.startAnimationIfNecessary();
	  };

	  TransitionMotion.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (this.unreadPropStyles) {
	      // previous props haven't had the chance to be set yet; set them here
	      this.clearUnreadPropStyle(this.unreadPropStyles);
	    }

	    var styles = props.styles;
	    if (typeof styles === 'function') {
	      this.unreadPropStyles = styles(rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.lastIdealStyles));
	    } else {
	      this.unreadPropStyles = styles;
	    }

	    if (this.animationID == null) {
	      this.prevTime = _performanceNow2['default']();
	      this.startAnimationIfNecessary();
	    }
	  };

	  TransitionMotion.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unmounting = true;
	    if (this.animationID != null) {
	      _raf2['default'].cancel(this.animationID);
	      this.animationID = null;
	    }
	  };

	  TransitionMotion.prototype.render = function render() {
	    var hydratedStyles = rehydrateStyles(this.state.mergedPropsStyles, this.unreadPropStyles, this.state.currentStyles);
	    var renderedChildren = this.props.children(hydratedStyles);
	    return renderedChildren && _react2['default'].Children.only(renderedChildren);
	  };

	  return TransitionMotion;
	})(_react2['default'].Component);

	exports['default'] = TransitionMotion;
	module.exports = exports['default'];

	// list of styles, each containing interpolating values. Part of what's passed
	// to children function. Notice that this is
	// Array<ActualInterpolatingStyleObject>, without the wrapper that is {key: ...,
	// data: ... style: ActualInterpolatingStyleObject}. Only mergedPropsStyles
	// contains the key & data info (so that we only have a single source of truth
	// for these, and to save space). Check the comment for `rehydrateStyles` to
	// see how we regenerate the entirety of what's passed to children function

	// the array that keeps track of currently rendered stuff! Including stuff
	// that you've unmounted but that's still animating. This is where it lives

	// it's possible that currentStyle's value is stale: if props is immediately
	// changed from 0 to 400 to spring(0) again, the async currentStyle is still
	// at 0 (didn't have time to tick and interpolate even once). If we naively
	// compare currentStyle with destVal it'll be 0 === 0 (no animation, stop).
	// In reality currentStyle should be 400
	});

	unwrapExports(TransitionMotion_1);

	var presets = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports["default"] = {
	  noWobble: { stiffness: 170, damping: 26 }, // the default, if nothing provided
	  gentle: { stiffness: 120, damping: 14 },
	  wobbly: { stiffness: 180, damping: 12 },
	  stiff: { stiffness: 210, damping: 20 }
	};
	module.exports = exports["default"];
	});

	unwrapExports(presets);

	var spring_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports['default'] = spring;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }



	var _presets2 = _interopRequireDefault(presets);

	var defaultConfig = _extends({}, _presets2['default'].noWobble, {
	  precision: 0.01
	});

	function spring(val, config) {
	  return _extends({}, defaultConfig, config, { val: val });
	}

	module.exports = exports['default'];
	});

	unwrapExports(spring_1);

	var reorderKeys_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports['default'] = reorderKeys;

	var hasWarned = false;

	function reorderKeys() {
	  if (process.env.NODE_ENV === 'development') {
	    if (!hasWarned) {
	      hasWarned = true;
	      console.error('`reorderKeys` has been removed, since it is no longer needed for TransitionMotion\'s new styles array API.');
	    }
	  }
	}

	module.exports = exports['default'];
	});

	unwrapExports(reorderKeys_1);

	var reactMotion = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }



	exports.Motion = _interopRequire(Motion_1);



	exports.StaggeredMotion = _interopRequire(StaggeredMotion_1);



	exports.TransitionMotion = _interopRequire(TransitionMotion_1);



	exports.spring = _interopRequire(spring_1);



	exports.presets = _interopRequire(presets);



	exports.stripStyle = _interopRequire(stripStyle_1);

	// deprecated, dummy warning function



	exports.reorderKeys = _interopRequire(reorderKeys_1);
	});

	unwrapExports(reactMotion);
	var reactMotion_1 = reactMotion.Motion;
	var reactMotion_2 = reactMotion.StaggeredMotion;
	var reactMotion_3 = reactMotion.TransitionMotion;
	var reactMotion_4 = reactMotion.spring;
	var reactMotion_5 = reactMotion.presets;
	var reactMotion_6 = reactMotion.stripStyle;
	var reactMotion_7 = reactMotion.reorderKeys;

	var vertical = {
	  direction: 'vertical',
	  line: 'y',
	  crossAxisLine: 'x',
	  start: 'top',
	  end: 'bottom',
	  size: 'height',
	  crossAxisStart: 'left',
	  crossAxisEnd: 'right',
	  crossAxisSize: 'width'
	};
	var horizontal = {
	  direction: 'horizontal',
	  line: 'x',
	  crossAxisLine: 'y',
	  start: 'left',
	  end: 'right',
	  size: 'width',
	  crossAxisStart: 'top',
	  crossAxisEnd: 'bottom',
	  crossAxisSize: 'height'
	};

	var origin = {
	  x: 0,
	  y: 0
	};
	var add = function add(point1, point2) {
	  return {
	    x: point1.x + point2.x,
	    y: point1.y + point2.y
	  };
	};
	var subtract = function subtract(point1, point2) {
	  return {
	    x: point1.x - point2.x,
	    y: point1.y - point2.y
	  };
	};
	var isEqual = function isEqual(point1, point2) {
	  return point1.x === point2.x && point1.y === point2.y;
	};
	var negate = function negate(point) {
	  return {
	    x: point.x !== 0 ? -point.x : 0,
	    y: point.y !== 0 ? -point.y : 0
	  };
	};
	var absolute = function absolute(point) {
	  return {
	    x: Math.abs(point.x),
	    y: Math.abs(point.y)
	  };
	};
	var patch = function patch(line, value, otherValue) {
	  var _ref;

	  if (otherValue === void 0) {
	    otherValue = 0;
	  }

	  return _ref = {}, _ref[line] = value, _ref[line === 'x' ? 'y' : 'x'] = otherValue, _ref;
	};
	var distance = function distance(point1, point2) {
	  return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
	};
	var closest = function closest(target, points) {
	  return Math.min.apply(Math, points.map(function (point) {
	    return distance(target, point);
	  }));
	};
	var apply = function apply(fn) {
	  return function (point) {
	    return {
	      x: fn(point.x),
	      y: fn(point.y)
	    };
	  };
	};

	var offsetByPosition = function offsetByPosition(spacing, point) {
	  return {
	    top: spacing.top + point.y,
	    left: spacing.left + point.x,
	    bottom: spacing.bottom + point.y,
	    right: spacing.right + point.x
	  };
	};
	var expandByPosition = function expandByPosition(spacing, position) {
	  return {
	    top: spacing.top - position.y,
	    left: spacing.left - position.x,
	    right: spacing.right + position.x,
	    bottom: spacing.bottom + position.y
	  };
	};
	var getCorners = function getCorners(spacing) {
	  return [{
	    x: spacing.left,
	    y: spacing.top
	  }, {
	    x: spacing.right,
	    y: spacing.top
	  }, {
	    x: spacing.left,
	    y: spacing.bottom
	  }, {
	    x: spacing.right,
	    y: spacing.bottom
	  }];
	};

	var getMaxScroll = (function (_ref) {
	  var scrollHeight = _ref.scrollHeight,
	      scrollWidth = _ref.scrollWidth,
	      height = _ref.height,
	      width = _ref.width;
	  var maxScroll = subtract({
	    x: scrollWidth,
	    y: scrollHeight
	  }, {
	    x: width,
	    y: height
	  });
	  var adjustedMaxScroll = {
	    x: Math.max(0, maxScroll.x),
	    y: Math.max(0, maxScroll.y)
	  };
	  return adjustedMaxScroll;
	});

	var clip = function clip(frame, subject) {
	  var result = getRect({
	    top: Math.max(subject.top, frame.top),
	    right: Math.min(subject.right, frame.right),
	    bottom: Math.min(subject.bottom, frame.bottom),
	    left: Math.max(subject.left, frame.left)
	  });

	  if (result.width <= 0 || result.height <= 0) {
	    return null;
	  }

	  return result;
	};
	var getDroppableDimension = function getDroppableDimension(_ref) {
	  var descriptor = _ref.descriptor,
	      isEnabled = _ref.isEnabled,
	      direction = _ref.direction,
	      client = _ref.client,
	      page = _ref.page,
	      closest$$1 = _ref.closest;

	  var scrollable = function () {
	    if (!closest$$1) {
	      return null;
	    }

	    var maxScroll = getMaxScroll({
	      scrollHeight: closest$$1.scrollHeight,
	      scrollWidth: closest$$1.scrollWidth,
	      height: closest$$1.client.paddingBox.height,
	      width: closest$$1.client.paddingBox.width
	    });
	    return {
	      framePageMarginBox: closest$$1.page.marginBox,
	      shouldClipSubject: closest$$1.shouldClipSubject,
	      scroll: {
	        initial: closest$$1.scroll,
	        current: closest$$1.scroll,
	        max: maxScroll,
	        diff: {
	          value: origin,
	          displacement: origin
	        }
	      }
	    };
	  }();

	  var subjectPageMarginBox = page.marginBox;
	  var clippedPageMarginBox = scrollable && scrollable.shouldClipSubject ? clip(scrollable.framePageMarginBox, subjectPageMarginBox) : subjectPageMarginBox;
	  var viewport = {
	    closestScrollable: scrollable,
	    subjectPageMarginBox: subjectPageMarginBox,
	    clippedPageMarginBox: clippedPageMarginBox
	  };
	  var dimension = {
	    descriptor: descriptor,
	    axis: direction === 'vertical' ? vertical : horizontal,
	    isEnabled: isEnabled,
	    client: client,
	    page: page,
	    viewport: viewport
	  };
	  return dimension;
	};
	var scrollDroppable = function scrollDroppable(droppable, newScroll) {
	  !droppable.viewport.closestScrollable ? process.env.NODE_ENV !== "production" ? invariant(false) : invariant(false) : void 0;
	  var scrollable = droppable.viewport.closestScrollable;
	  var framePageMarginBox = scrollable.framePageMarginBox;
	  var scrollDiff = subtract(newScroll, scrollable.scroll.initial);
	  var scrollDisplacement = negate(scrollDiff);
	  var closestScrollable = {
	    framePageMarginBox: scrollable.framePageMarginBox,
	    shouldClipSubject: scrollable.shouldClipSubject,
	    scroll: {
	      initial: scrollable.scroll.initial,
	      current: newScroll,
	      diff: {
	        value: scrollDiff,
	        displacement: scrollDisplacement
	      },
	      max: scrollable.scroll.max
	    }
	  };
	  var displacedSubject = offsetByPosition(droppable.viewport.subjectPageMarginBox, scrollDisplacement);
	  var clippedPageMarginBox = closestScrollable.shouldClipSubject ? clip(framePageMarginBox, displacedSubject) : getRect(displacedSubject);
	  var viewport = {
	    closestScrollable: closestScrollable,
	    subjectPageMarginBox: droppable.viewport.subjectPageMarginBox,
	    clippedPageMarginBox: clippedPageMarginBox
	  };

	  var result = _extends$1({}, droppable, {
	    viewport: viewport
	  });

	  return result;
	};

	var toDroppableMap = index$1(function (droppables) {
	  return droppables.reduce(function (previous, current) {
	    previous[current.descriptor.id] = current;
	    return previous;
	  }, {});
	});
	var toDraggableMap = index$1(function (draggables) {
	  return draggables.reduce(function (previous, current) {
	    previous[current.descriptor.id] = current;
	    return previous;
	  }, {});
	});
	var toDroppableList = index$1(function (droppables) {
	  return keys$2(droppables).map(function (id) {
	    return droppables[id];
	  });
	});
	var toDraggableList = index$1(function (draggables) {
	  return keys$2(draggables).map(function (id) {
	    return draggables[id];
	  });
	});

	var getDraggablesInsideDroppable = index$1(function (droppable, draggables) {
	  return toDraggableList(draggables).filter(function (draggable) {
	    return droppable.descriptor.id === draggable.descriptor.droppableId;
	  }).sort(function (a, b) {
	    return a.descriptor.index - b.descriptor.index;
	  });
	});

	var isWithin = (function (lowerBound, upperBound) {
	  return function (value) {
	    return value <= upperBound && value >= lowerBound;
	  };
	});

	var isPositionInFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (point) {
	    return isWithinVertical(point.y) && isWithinVertical(point.y) && isWithinHorizontal(point.x) && isWithinHorizontal(point.x);
	  };
	});

	var getRequiredGrowth = index$1(function (draggable, draggables, droppable) {
	  var getResult = function getResult(existingSpace) {
	    var requiredSpace = draggable.page.marginBox[droppable.axis.size];

	    if (requiredSpace <= existingSpace) {
	      return null;
	    }

	    var requiredGrowth = patch(droppable.axis.line, requiredSpace - existingSpace);
	    return requiredGrowth;
	  };

	  var dimensions = getDraggablesInsideDroppable(droppable, draggables);

	  if (!dimensions.length) {
	    var _existingSpace = droppable.page.marginBox[droppable.axis.size];
	    return getResult(_existingSpace);
	  }

	  var endOfDraggables = dimensions[dimensions.length - 1].page.marginBox[droppable.axis.end];
	  var endOfDroppable = droppable.page.marginBox[droppable.axis.end];
	  var existingSpace = endOfDroppable - endOfDraggables;
	  return getResult(existingSpace);
	});
	var getWithGrowth = index$1(function (area, growth) {
	  return getRect(expandByPosition(area, growth));
	});

	var getClippedRectWithPlaceholder = function getClippedRectWithPlaceholder(_ref) {
	  var draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      droppable = _ref.droppable,
	      previousDroppableOverId = _ref.previousDroppableOverId;
	  var isHome = draggable.descriptor.droppableId === droppable.descriptor.id;
	  var wasOver = Boolean(previousDroppableOverId && previousDroppableOverId === droppable.descriptor.id);
	  var clippedPageMarginBox = droppable.viewport.clippedPageMarginBox;

	  if (!clippedPageMarginBox) {
	    return clippedPageMarginBox;
	  }

	  if (isHome || !wasOver) {
	    return clippedPageMarginBox;
	  }

	  var requiredGrowth = getRequiredGrowth(draggable, draggables, droppable);

	  if (!requiredGrowth) {
	    return clippedPageMarginBox;
	  }

	  var subjectWithGrowth = getWithGrowth(clippedPageMarginBox, requiredGrowth);
	  var closestScrollable = droppable.viewport.closestScrollable;

	  if (!closestScrollable) {
	    return subjectWithGrowth;
	  }

	  if (!closestScrollable.shouldClipSubject) {
	    return subjectWithGrowth;
	  }

	  return clip(closestScrollable.framePageMarginBox, subjectWithGrowth);
	};

	var getDroppableOver = (function (_ref2) {
	  var target = _ref2.target,
	      draggable = _ref2.draggable,
	      draggables = _ref2.draggables,
	      droppables = _ref2.droppables,
	      previousDroppableOverId = _ref2.previousDroppableOverId;
	  var maybe = toDroppableList(droppables).filter(function (droppable) {
	    return droppable.isEnabled;
	  }).find(function (droppable) {
	    var withPlaceholder = getClippedRectWithPlaceholder({
	      draggable: draggable,
	      draggables: draggables,
	      droppable: droppable,
	      previousDroppableOverId: previousDroppableOverId
	    });

	    if (!withPlaceholder) {
	      return false;
	    }

	    return isPositionInFrame(withPlaceholder)(target);
	  });
	  return maybe ? maybe.descriptor.id : null;
	});

	var noMovement = {
	  displaced: [],
	  amount: origin,
	  isBeyondStartPosition: false
	};
	var noImpact = {
	  movement: noMovement,
	  direction: null,
	  destination: null
	};

	var getDisplacementMap = index$1(function (displaced) {
	  return displaced.reduce(function (map, displacement) {
	    map[displacement.draggableId] = displacement;
	    return map;
	  }, {});
	});

	var isPartiallyVisibleThroughFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (subject) {
	    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);

	    if (isContained) {
	      return true;
	    }

	    var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);
	    var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);
	    var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;

	    if (isPartiallyContained) {
	      return true;
	    }

	    var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;
	    var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;
	    var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;

	    if (isTargetBiggerThanFrame) {
	      return true;
	    }

	    var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;
	    return isTargetBiggerOnOneAxis;
	  };
	});

	var isTotallyVisibleThroughFrame = (function (frame) {
	  var isWithinVertical = isWithin(frame.top, frame.bottom);
	  var isWithinHorizontal = isWithin(frame.left, frame.right);
	  return function (subject) {
	    var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);
	    return isContained;
	  };
	});

	var isVisible = function isVisible(_ref) {
	  var target = _ref.target,
	      destination = _ref.destination,
	      viewport = _ref.viewport,
	      isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;
	  var displacement = destination.viewport.closestScrollable ? destination.viewport.closestScrollable.scroll.diff.displacement : origin;
	  var withDisplacement = offsetByPosition(target, displacement);

	  if (!destination.viewport.clippedPageMarginBox) {
	    return false;
	  }

	  var isVisibleInDroppable = isVisibleThroughFrameFn(destination.viewport.clippedPageMarginBox)(withDisplacement);
	  var isVisibleInViewport = isVisibleThroughFrameFn(viewport)(withDisplacement);
	  return isVisibleInDroppable && isVisibleInViewport;
	};

	var isPartiallyVisible = function isPartiallyVisible(_ref2) {
	  var target = _ref2.target,
	      destination = _ref2.destination,
	      viewport = _ref2.viewport;
	  return isVisible({
	    target: target,
	    destination: destination,
	    viewport: viewport,
	    isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame
	  });
	};
	var isTotallyVisible = function isTotallyVisible(_ref3) {
	  var target = _ref3.target,
	      destination = _ref3.destination,
	      viewport = _ref3.viewport;
	  return isVisible({
	    target: target,
	    destination: destination,
	    viewport: viewport,
	    isVisibleThroughFrameFn: isTotallyVisibleThroughFrame
	  });
	};

	var getDisplacement = (function (_ref) {
	  var draggable = _ref.draggable,
	      destination = _ref.destination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var id = draggable.descriptor.id;
	  var map = getDisplacementMap(previousImpact.movement.displaced);
	  var isVisible = isPartiallyVisible({
	    target: draggable.page.marginBox,
	    destination: destination,
	    viewport: viewport
	  });

	  var shouldAnimate = function () {
	    if (!isVisible) {
	      return false;
	    }

	    var previous = map[id];

	    if (!previous) {
	      return true;
	    }

	    return previous.shouldAnimate;
	  }();

	  var displacement = {
	    draggableId: id,
	    isVisible: isVisible,
	    shouldAnimate: shouldAnimate
	  };
	  return displacement;
	});

	var withDroppableScroll = (function (droppable, point) {
	  var closestScrollable = droppable.viewport.closestScrollable;

	  if (!closestScrollable) {
	    return point;
	  }

	  return add(point, closestScrollable.scroll.diff.value);
	});

	var inHomeList = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggable = _ref.draggable,
	      home = _ref.home,
	      insideHome = _ref.insideHome,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = home.axis;
	  var originalCenter = draggable.page.borderBox.center;
	  var currentCenter = withDroppableScroll(home, pageBorderBoxCenter);
	  var isBeyondStartPosition = currentCenter[axis.line] - originalCenter[axis.line] > 0;
	  var amount = patch(axis.line, draggable.client.marginBox[axis.size]);
	  var displaced = insideHome.filter(function (child) {
	    if (child === draggable) {
	      return false;
	    }

	    var borderBox = child.page.borderBox;

	    if (isBeyondStartPosition) {
	      if (borderBox.center[axis.line] < originalCenter[axis.line]) {
	        return false;
	      }

	      return currentCenter[axis.line] > borderBox[axis.start];
	    }

	    if (originalCenter[axis.line] < borderBox.center[axis.line]) {
	      return false;
	    }

	    return currentCenter[axis.line] < borderBox[axis.end];
	  }).map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: home,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	  });
	  var ordered = isBeyondStartPosition ? displaced.reverse() : displaced;

	  var index = function () {
	    var startIndex = draggable.descriptor.index;
	    var length = ordered.length;

	    if (!length) {
	      return startIndex;
	    }

	    if (isBeyondStartPosition) {
	      return startIndex + length;
	    }

	    return startIndex - length;
	  }();

	  var movement = {
	    amount: amount,
	    displaced: ordered,
	    isBeyondStartPosition: isBeyondStartPosition
	  };
	  var impact = {
	    movement: movement,
	    direction: axis.direction,
	    destination: {
	      droppableId: home.descriptor.id,
	      index: index
	    }
	  };
	  return impact;
	});

	var inForeignList = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = destination.axis;
	  var currentCenter = withDroppableScroll(destination, pageBorderBoxCenter);
	  var displaced = insideDestination.filter(function (child) {
	    var threshold = child.page.borderBox[axis.end];
	    return threshold > currentCenter[axis.line];
	  }).map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: destination,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	  });
	  var newIndex = insideDestination.length - displaced.length;
	  var movement = {
	    amount: patch(axis.line, draggable.page.marginBox[axis.size]),
	    displaced: displaced,
	    isBeyondStartPosition: false
	  };
	  var impact = {
	    movement: movement,
	    direction: axis.direction,
	    destination: {
	      droppableId: destination.descriptor.id,
	      index: newIndex
	    }
	  };
	  return impact;
	});

	var getDragImpact = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      droppables = _ref.droppables,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var previousDroppableOverId = previousImpact.destination && previousImpact.destination.droppableId;
	  var destinationId = getDroppableOver({
	    target: pageBorderBoxCenter,
	    draggable: draggable,
	    draggables: draggables,
	    droppables: droppables,
	    previousDroppableOverId: previousDroppableOverId
	  });

	  if (!destinationId) {
	    return noImpact;
	  }

	  var destination = droppables[destinationId];

	  if (!destination.isEnabled) {
	    return noImpact;
	  }

	  var home = droppables[draggable.descriptor.droppableId];
	  var isWithinHomeDroppable = home.descriptor.id === destinationId;
	  var insideDestination = getDraggablesInsideDroppable(destination, draggables);

	  if (isWithinHomeDroppable) {
	    return inHomeList({
	      pageBorderBoxCenter: pageBorderBoxCenter,
	      draggable: draggable,
	      home: home,
	      insideHome: insideDestination,
	      previousImpact: previousImpact || noImpact,
	      viewport: viewport
	    });
	  }

	  return inForeignList({
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    draggable: draggable,
	    destination: destination,
	    insideDestination: insideDestination,
	    previousImpact: previousImpact || noImpact,
	    viewport: viewport
	  });
	});

	var getHomeLocation = (function (critical) {
	  return {
	    index: critical.draggable.index,
	    droppableId: critical.droppable.id
	  };
	});

	var getSafeClipped = function getSafeClipped(droppable) {
	  var rect = droppable.viewport.clippedPageMarginBox;
	  !rect ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get clipped area from droppable') : invariant(false) : void 0;
	  return rect;
	};

	var getBestCrossAxisDroppable = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      source = _ref.source,
	      droppables = _ref.droppables,
	      viewport = _ref.viewport;
	  var sourceClipped = source.viewport.clippedPageMarginBox;

	  if (!sourceClipped) {
	    return null;
	  }

	  var axis = source.axis;
	  var isBetweenSourceClipped = isWithin(sourceClipped[axis.start], sourceClipped[axis.end]);
	  var candidates = toDroppableList(droppables).filter(function (droppable) {
	    return droppable !== source;
	  }).filter(function (droppable) {
	    return droppable.isEnabled;
	  }).filter(function (droppable) {
	    var clippedPageMarginBox = droppable.viewport.clippedPageMarginBox;

	    if (!clippedPageMarginBox) {
	      return false;
	    }

	    return isPartiallyVisibleThroughFrame(viewport.frame)(clippedPageMarginBox);
	  }).filter(function (droppable) {
	    var targetClipped = getSafeClipped(droppable);

	    if (isMovingForward) {
	      return sourceClipped[axis.crossAxisEnd] < targetClipped[axis.crossAxisEnd];
	    }

	    return targetClipped[axis.crossAxisStart] < sourceClipped[axis.crossAxisStart];
	  }).filter(function (droppable) {
	    var targetClipped = getSafeClipped(droppable);
	    var isBetweenDestinationClipped = isWithin(targetClipped[axis.start], targetClipped[axis.end]);
	    return isBetweenSourceClipped(targetClipped[axis.start]) || isBetweenSourceClipped(targetClipped[axis.end]) || isBetweenDestinationClipped(sourceClipped[axis.start]) || isBetweenDestinationClipped(sourceClipped[axis.end]);
	  }).sort(function (a, b) {
	    var first = getSafeClipped(a)[axis.crossAxisStart];
	    var second = getSafeClipped(b)[axis.crossAxisStart];

	    if (isMovingForward) {
	      return first - second;
	    }

	    return second - first;
	  }).filter(function (droppable, index, array) {
	    return getSafeClipped(droppable)[axis.crossAxisStart] === getSafeClipped(array[0])[axis.crossAxisStart];
	  });

	  if (!candidates.length) {
	    return null;
	  }

	  if (candidates.length === 1) {
	    return candidates[0];
	  }

	  var contains = candidates.filter(function (droppable) {
	    var isWithinDroppable = isWithin(getSafeClipped(droppable)[axis.start], getSafeClipped(droppable)[axis.end]);
	    return isWithinDroppable(pageBorderBoxCenter[axis.line]);
	  });

	  if (contains.length === 1) {
	    return contains[0];
	  }

	  if (contains.length > 1) {
	    return contains.sort(function (a, b) {
	      return getSafeClipped(a)[axis.start] - getSafeClipped(b)[axis.start];
	    })[0];
	  }

	  return candidates.sort(function (a, b) {
	    var first = closest(pageBorderBoxCenter, getCorners(getSafeClipped(a)));
	    var second = closest(pageBorderBoxCenter, getCorners(getSafeClipped(b)));

	    if (first !== second) {
	      return first - second;
	    }

	    return getSafeClipped(a)[axis.start] - getSafeClipped(b)[axis.start];
	  })[0];
	});

	var withDroppableDisplacement = (function (droppable, point) {
	  var closestScrollable = droppable.viewport.closestScrollable;

	  if (!closestScrollable) {
	    return point;
	  }

	  return add(point, closestScrollable.scroll.diff.displacement);
	});

	var getClosestDraggable = (function (_ref) {
	  var axis = _ref.axis,
	      viewport = _ref.viewport,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination;

	  if (!insideDestination.length) {
	    return null;
	  }

	  var result = insideDestination.filter(function (draggable) {
	    return isTotallyVisible({
	      target: draggable.page.borderBox,
	      destination: destination,
	      viewport: viewport.frame
	    });
	  }).sort(function (a, b) {
	    var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, a.page.borderBox.center));
	    var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, b.page.borderBox.center));

	    if (distanceToA < distanceToB) {
	      return -1;
	    }

	    if (distanceToB < distanceToA) {
	      return 1;
	    }

	    return a.page.borderBox[axis.start] - b.page.borderBox[axis.start];
	  });
	  return result.length ? result[0] : null;
	});

	var moveToEdge = (function (_ref) {
	  var source = _ref.source,
	      sourceEdge = _ref.sourceEdge,
	      destination = _ref.destination,
	      destinationEdge = _ref.destinationEdge,
	      destinationAxis = _ref.destinationAxis;

	  var getCorner = function getCorner(area) {
	    return patch(destinationAxis.line, area[destinationAxis[destinationEdge]], area[destinationAxis.crossAxisStart]);
	  };

	  var corner = getCorner(destination);
	  var centerDiff = absolute(subtract(source.center, getCorner(source)));
	  var signed = patch(destinationAxis.line, (sourceEdge === 'end' ? -1 : 1) * centerDiff[destinationAxis.line], centerDiff[destinationAxis.crossAxisLine]);
	  return add(corner, signed);
	});

	var toHomeList = (function (_ref) {
	  var amount = _ref.amount,
	      homeIndex = _ref.homeIndex,
	      movingRelativeTo = _ref.movingRelativeTo,
	      insideDestination = _ref.insideDestination,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = destination.axis;
	  var targetIndex = insideDestination.indexOf(movingRelativeTo);
	  !(targetIndex !== -1) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Unable to find target in destination droppable') : invariant(false) : void 0;

	  if (targetIndex === homeIndex) {
	    var _newCenter = draggable.page.borderBox.center;
	    var _newImpact = {
	      movement: {
	        displaced: [],
	        amount: amount,
	        isBeyondStartPosition: false
	      },
	      direction: destination.axis.direction,
	      destination: {
	        droppableId: destination.descriptor.id,
	        index: homeIndex
	      }
	    };
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(destination, _newCenter),
	      impact: _newImpact
	    };
	  }

	  var isMovingPastOriginalIndex = targetIndex > homeIndex;
	  var edge = isMovingPastOriginalIndex ? 'end' : 'start';
	  var newCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: edge,
	    destination: isMovingPastOriginalIndex ? movingRelativeTo.page.borderBox : movingRelativeTo.page.marginBox,
	    destinationEdge: edge,
	    destinationAxis: axis
	  });

	  var modified = function () {
	    if (!isMovingPastOriginalIndex) {
	      return insideDestination.slice(targetIndex, homeIndex);
	    }

	    var from = homeIndex + 1;
	    var to = targetIndex + 1;
	    return insideDestination.slice(from, to).reverse();
	  }();

	  var displaced = modified.map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: destination,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	  });
	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: amount,
	      isBeyondStartPosition: isMovingPastOriginalIndex
	    },
	    direction: axis.direction,
	    destination: {
	      droppableId: destination.descriptor.id,
	      index: targetIndex
	    }
	  };
	  return {
	    pageBorderBoxCenter: withDroppableDisplacement(destination, newCenter),
	    impact: newImpact
	  };
	});

	var toForeignList = (function (_ref) {
	  var amount = _ref.amount,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      movingRelativeTo = _ref.movingRelativeTo,
	      insideDestination = _ref.insideDestination,
	      draggable = _ref.draggable,
	      destination = _ref.destination,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var axis = destination.axis;
	  var isGoingBeforeTarget = Boolean(movingRelativeTo && pageBorderBoxCenter[destination.axis.line] < movingRelativeTo.page.borderBox.center[destination.axis.line]);

	  if (!movingRelativeTo) {
	    var _newCenter = moveToEdge({
	      source: draggable.page.borderBox,
	      sourceEdge: 'start',
	      destination: destination.page.contentBox,
	      destinationEdge: 'start',
	      destinationAxis: axis
	    });

	    var _newImpact = {
	      movement: {
	        displaced: [],
	        amount: amount,
	        isBeyondStartPosition: false
	      },
	      direction: axis.direction,
	      destination: {
	        droppableId: destination.descriptor.id,
	        index: 0
	      }
	    };
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(destination, _newCenter),
	      impact: _newImpact
	    };
	  }

	  var targetIndex = insideDestination.indexOf(movingRelativeTo);
	  !(targetIndex !== -1) ? process.env.NODE_ENV !== "production" ? invariant(false, 'The target was not found within its droppable') : invariant(false) : void 0;
	  var proposedIndex = isGoingBeforeTarget ? targetIndex : targetIndex + 1;
	  var newCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: 'start',
	    destination: movingRelativeTo.page.marginBox,
	    destinationEdge: isGoingBeforeTarget ? 'start' : 'end',
	    destinationAxis: axis
	  });
	  var displaced = insideDestination.slice(proposedIndex, insideDestination.length).map(function (dimension) {
	    return getDisplacement({
	      draggable: dimension,
	      destination: destination,
	      viewport: viewport.frame,
	      previousImpact: previousImpact
	    });
	  });
	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: amount,
	      isBeyondStartPosition: false
	    },
	    direction: axis.direction,
	    destination: {
	      droppableId: destination.descriptor.id,
	      index: proposedIndex
	    }
	  };
	  return {
	    pageBorderBoxCenter: withDroppableDisplacement(destination, newCenter),
	    impact: newImpact
	  };
	});

	var moveToNewDroppable = (function (_ref) {
	  var pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      destination = _ref.destination,
	      insideDestination = _ref.insideDestination,
	      draggable = _ref.draggable,
	      movingRelativeTo = _ref.movingRelativeTo,
	      home = _ref.home,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var amount = patch(destination.axis.line, draggable.client.marginBox[destination.axis.size]);

	  if (destination.descriptor.id === draggable.descriptor.droppableId) {
	    !movingRelativeTo ? process.env.NODE_ENV !== "production" ? invariant(false, 'There will always be a target in the original list') : invariant(false) : void 0;
	    return toHomeList({
	      amount: amount,
	      homeIndex: home.index,
	      movingRelativeTo: movingRelativeTo,
	      insideDestination: insideDestination,
	      draggable: draggable,
	      destination: destination,
	      previousImpact: previousImpact,
	      viewport: viewport
	    });
	  }

	  return toForeignList({
	    amount: amount,
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    movingRelativeTo: movingRelativeTo,
	    insideDestination: insideDestination,
	    draggable: draggable,
	    destination: destination,
	    previousImpact: previousImpact,
	    viewport: viewport
	  });
	});

	var moveCrossAxis = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      pageBorderBoxCenter = _ref.pageBorderBoxCenter,
	      draggableId = _ref.draggableId,
	      droppableId = _ref.droppableId,
	      home = _ref.home,
	      draggables = _ref.draggables,
	      droppables = _ref.droppables,
	      previousImpact = _ref.previousImpact,
	      viewport = _ref.viewport;
	  var draggable = draggables[draggableId];
	  var source = droppables[droppableId];
	  var destination = getBestCrossAxisDroppable({
	    isMovingForward: isMovingForward,
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    source: source,
	    droppables: droppables,
	    viewport: viewport
	  });

	  if (!destination) {
	    return null;
	  }

	  var insideDestination = getDraggablesInsideDroppable(destination, draggables);
	  var movingRelativeTo = getClosestDraggable({
	    axis: destination.axis,
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    destination: destination,
	    insideDestination: insideDestination,
	    viewport: viewport
	  });

	  if (insideDestination.length && !movingRelativeTo) {
	    return null;
	  }

	  return moveToNewDroppable({
	    pageBorderBoxCenter: pageBorderBoxCenter,
	    destination: destination,
	    draggable: draggable,
	    movingRelativeTo: movingRelativeTo,
	    insideDestination: insideDestination,
	    home: home,
	    previousImpact: previousImpact || noImpact,
	    viewport: viewport
	  });
	});

	var isTotallyVisibleInNewLocation = (function (_ref) {
	  var draggable = _ref.draggable,
	      destination = _ref.destination,
	      newPageBorderBoxCenter = _ref.newPageBorderBoxCenter,
	      viewport = _ref.viewport;
	  var diff = subtract(newPageBorderBoxCenter, draggable.page.borderBox.center);
	  var shifted = offsetByPosition(draggable.page.borderBox, diff);
	  return isTotallyVisible({
	    target: shifted,
	    destination: destination,
	    viewport: viewport
	  });
	});

	var withFirstAdded = function withFirstAdded(_ref) {
	  var add = _ref.add,
	      previousImpact = _ref.previousImpact,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport;
	  var newDisplacement = {
	    draggableId: add,
	    isVisible: true,
	    shouldAnimate: true
	  };
	  var added = [newDisplacement].concat(previousImpact.movement.displaced);
	  var withUpdatedVisibility = added.map(function (current) {
	    if (current === newDisplacement) {
	      return current;
	    }

	    var updated = getDisplacement({
	      draggable: draggables[current.draggableId],
	      destination: droppable,
	      previousImpact: previousImpact,
	      viewport: viewport.frame
	    });
	    return updated;
	  });
	  return withUpdatedVisibility;
	};

	var forceVisibleDisplacement = function forceVisibleDisplacement(current) {
	  if (current.isVisible) {
	    return current;
	  }

	  return {
	    draggableId: current.draggableId,
	    isVisible: true,
	    shouldAnimate: false
	  };
	};

	var withFirstRemoved = function withFirstRemoved(_ref2) {
	  var dragging = _ref2.dragging,
	      isVisibleInNewLocation = _ref2.isVisibleInNewLocation,
	      previousImpact = _ref2.previousImpact,
	      droppable = _ref2.droppable,
	      draggables = _ref2.draggables;
	  var last = previousImpact.movement.displaced;
	  !last.length ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot remove displacement from empty list') : invariant(false) : void 0;
	  var withFirstRestored = last.slice(1, last.length);

	  if (!withFirstRestored.length) {
	    return withFirstRestored;
	  }

	  if (isVisibleInNewLocation) {
	    return withFirstRestored;
	  }

	  var axis = droppable.axis;
	  var sizeOfRestored = draggables[last[0].draggableId].page.marginBox[axis.size];
	  var sizeOfDragging = draggables[dragging].page.marginBox[axis.size];
	  var buffer = sizeOfRestored + sizeOfDragging;
	  var withUpdatedVisibility = withFirstRestored.map(function (displacement, index) {
	    if (index === 0) {
	      return forceVisibleDisplacement(displacement);
	    }

	    if (buffer > 0) {
	      var current = draggables[displacement.draggableId];
	      var size = current.page.marginBox[axis.size];
	      buffer -= size;
	      return forceVisibleDisplacement(displacement);
	    }

	    return {
	      draggableId: displacement.draggableId,
	      isVisible: false,
	      shouldAnimate: false
	    };
	  });
	  return withUpdatedVisibility;
	};

	var inHomeList$1 = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      draggableId = _ref.draggableId,
	      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
	      previousImpact = _ref.previousImpact,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport;
	  var location = previousImpact.destination;
	  !location ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot move to next index in home list when there is no previous destination') : invariant(false) : void 0;
	  var draggable = draggables[draggableId];
	  var axis = droppable.axis;
	  var insideDroppable = getDraggablesInsideDroppable(droppable, draggables);
	  var startIndex = draggable.descriptor.index;
	  var currentIndex = location.index;
	  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;

	  if (proposedIndex > insideDroppable.length - 1) {
	    return null;
	  }

	  if (proposedIndex < 0) {
	    return null;
	  }

	  var destination = insideDroppable[proposedIndex];
	  var isMovingTowardStart = isMovingForward && proposedIndex <= startIndex || !isMovingForward && proposedIndex >= startIndex;

	  var edge = function () {
	    if (!isMovingTowardStart) {
	      return isMovingForward ? 'end' : 'start';
	    }

	    return isMovingForward ? 'start' : 'end';
	  }();

	  var newPageBorderBoxCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: edge,
	    destination: destination.page.borderBox,
	    destinationEdge: edge,
	    destinationAxis: droppable.axis
	  });
	  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
	    draggable: draggable,
	    destination: droppable,
	    newPageBorderBoxCenter: newPageBorderBoxCenter,
	    viewport: viewport.frame
	  });
	  var displaced = isMovingTowardStart ? withFirstRemoved({
	    dragging: draggableId,
	    isVisibleInNewLocation: isVisibleInNewLocation,
	    previousImpact: previousImpact,
	    droppable: droppable,
	    draggables: draggables
	  }) : withFirstAdded({
	    add: destination.descriptor.id,
	    previousImpact: previousImpact,
	    droppable: droppable,
	    draggables: draggables,
	    viewport: viewport
	  });
	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: patch(axis.line, draggable.page.marginBox[axis.size]),
	      isBeyondStartPosition: proposedIndex > startIndex
	    },
	    destination: {
	      droppableId: droppable.descriptor.id,
	      index: proposedIndex
	    },
	    direction: droppable.axis.direction
	  };

	  if (isVisibleInNewLocation) {
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(droppable, newPageBorderBoxCenter),
	      impact: newImpact,
	      scrollJumpRequest: null
	    };
	  }

	  var distance$$1 = subtract(newPageBorderBoxCenter, previousPageBorderBoxCenter);
	  var distanceWithScroll = withDroppableDisplacement(droppable, distance$$1);
	  return {
	    pageBorderBoxCenter: previousPageBorderBoxCenter,
	    impact: newImpact,
	    scrollJumpRequest: distanceWithScroll
	  };
	});

	var inForeignList$1 = (function (_ref) {
	  var isMovingForward = _ref.isMovingForward,
	      draggableId = _ref.draggableId,
	      previousImpact = _ref.previousImpact,
	      previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter,
	      droppable = _ref.droppable,
	      draggables = _ref.draggables,
	      viewport = _ref.viewport;
	  !previousImpact.destination ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot move to next index where there is no previous destination') : invariant(false) : void 0;
	  var location = previousImpact.destination;
	  var draggable = draggables[draggableId];
	  var axis = droppable.axis;
	  var insideForeignDroppable = getDraggablesInsideDroppable(droppable, draggables);
	  var currentIndex = location.index;
	  var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;
	  var lastIndex = insideForeignDroppable.length - 1;

	  if (proposedIndex > insideForeignDroppable.length) {
	    return null;
	  }

	  if (proposedIndex < 0) {
	    return null;
	  }

	  var movingRelativeTo = insideForeignDroppable[Math.min(proposedIndex, lastIndex)];
	  var isMovingPastLastIndex = proposedIndex > lastIndex;
	  var sourceEdge = 'start';

	  var destinationEdge = function () {
	    if (isMovingPastLastIndex) {
	      return 'end';
	    }

	    return 'start';
	  }();

	  var newPageBorderBoxCenter = moveToEdge({
	    source: draggable.page.borderBox,
	    sourceEdge: sourceEdge,
	    destination: movingRelativeTo.page.marginBox,
	    destinationEdge: destinationEdge,
	    destinationAxis: droppable.axis
	  });
	  var isVisibleInNewLocation = isTotallyVisibleInNewLocation({
	    draggable: draggable,
	    destination: droppable,
	    newPageBorderBoxCenter: newPageBorderBoxCenter,
	    viewport: viewport.frame
	  });

	  var displaced = function () {
	    if (isMovingForward) {
	      return withFirstRemoved({
	        dragging: draggableId,
	        isVisibleInNewLocation: isVisibleInNewLocation,
	        previousImpact: previousImpact,
	        droppable: droppable,
	        draggables: draggables
	      });
	    }

	    return withFirstAdded({
	      add: movingRelativeTo.descriptor.id,
	      previousImpact: previousImpact,
	      droppable: droppable,
	      draggables: draggables,
	      viewport: viewport
	    });
	  }();

	  var newImpact = {
	    movement: {
	      displaced: displaced,
	      amount: patch(axis.line, draggable.page.marginBox[axis.size]),
	      isBeyondStartPosition: false
	    },
	    destination: {
	      droppableId: droppable.descriptor.id,
	      index: proposedIndex
	    },
	    direction: droppable.axis.direction
	  };

	  if (isVisibleInNewLocation) {
	    return {
	      pageBorderBoxCenter: withDroppableDisplacement(droppable, newPageBorderBoxCenter),
	      impact: newImpact,
	      scrollJumpRequest: null
	    };
	  }

	  var distanceMoving = subtract(newPageBorderBoxCenter, previousPageBorderBoxCenter);
	  var distanceWithScroll = withDroppableDisplacement(droppable, distanceMoving);
	  return {
	    pageBorderBoxCenter: previousPageBorderBoxCenter,
	    impact: newImpact,
	    scrollJumpRequest: distanceWithScroll
	  };
	});

	var moveToNextIndex = (function (args) {
	  var draggableId = args.draggableId,
	      draggables = args.draggables,
	      droppable = args.droppable;
	  var draggable = draggables[draggableId];
	  var isInHomeList = draggable.descriptor.droppableId === droppable.descriptor.id;

	  if (!droppable.isEnabled) {
	    return null;
	  }

	  if (isInHomeList) {
	    return inHomeList$1(args);
	  }

	  return inForeignList$1(args);
	});

	var getClientSelection = function getClientSelection(pageBorderBoxCenter, currentScroll) {
	  return subtract(pageBorderBoxCenter, currentScroll);
	};

	var moveInDirection = (function (_ref) {
	  var state = _ref.state,
	      type = _ref.type;

	  var _ref2 = function () {
	    if (state.impact.destination) {
	      return {
	        droppable: state.dimensions.droppables[state.impact.destination.droppableId],
	        isMainAxisMovementAllowed: true
	      };
	    }

	    return {
	      droppable: state.dimensions.droppables[state.critical.droppable.id],
	      isMainAxisMovementAllowed: false
	    };
	  }(),
	      droppable = _ref2.droppable,
	      isMainAxisMovementAllowed = _ref2.isMainAxisMovementAllowed;

	  var direction = droppable.axis.direction;
	  var isMovingOnMainAxis = direction === 'vertical' && (type === 'MOVE_UP' || type === 'MOVE_DOWN') || direction === 'horizontal' && (type === 'MOVE_LEFT' || type === 'MOVE_RIGHT');

	  if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {
	    return null;
	  }

	  var isMovingForward = type === 'MOVE_DOWN' || type === 'MOVE_RIGHT';

	  if (isMovingOnMainAxis) {
	    var _result = moveToNextIndex({
	      isMovingForward: isMovingForward,
	      draggableId: state.critical.draggable.id,
	      droppable: droppable,
	      draggables: state.dimensions.draggables,
	      previousPageBorderBoxCenter: state.current.page.borderBoxCenter,
	      previousImpact: state.impact,
	      viewport: state.viewport
	    });

	    if (!_result) {
	      return null;
	    }

	    return {
	      impact: _result.impact,
	      clientSelection: getClientSelection(_result.pageBorderBoxCenter, state.viewport.scroll.current),
	      scrollJumpRequest: _result.scrollJumpRequest
	    };
	  }

	  var home = getHomeLocation(state.critical);
	  var result = moveCrossAxis({
	    isMovingForward: isMovingForward,
	    pageBorderBoxCenter: state.current.page.borderBoxCenter,
	    draggableId: state.critical.draggable.id,
	    droppableId: droppable.descriptor.id,
	    home: home,
	    draggables: state.dimensions.draggables,
	    droppables: state.dimensions.droppables,
	    previousImpact: state.impact,
	    viewport: state.viewport
	  });

	  if (!result) {
	    return null;
	  }

	  return {
	    clientSelection: getClientSelection(result.pageBorderBoxCenter, state.viewport.scroll.current),
	    impact: result.impact,
	    scrollJumpRequest: null
	  };
	});

	var scrollViewport = (function (viewport, newScroll) {
	  var diff = subtract(newScroll, viewport.scroll.initial);
	  var displacement = negate(diff);
	  var frame = getRect({
	    top: newScroll.y,
	    bottom: newScroll.y + viewport.frame.height,
	    left: newScroll.x,
	    right: newScroll.x + viewport.frame.width
	  });
	  var updated = {
	    frame: frame,
	    scroll: {
	      initial: viewport.scroll.initial,
	      max: viewport.scroll.max,
	      current: newScroll,
	      diff: {
	        value: diff,
	        displacement: displacement
	      }
	    }
	  };
	  return updated;
	});

	var getHomeImpact = (function (critical, dimensions) {
	  var home = dimensions.droppables[critical.droppable.id];
	  var axis = home.axis;
	  var draggable = dimensions.draggables[critical.draggable.id];
	  return {
	    movement: {
	      displaced: [],
	      isBeyondStartPosition: false,
	      amount: patch(axis.line, draggable.client.marginBox[axis.size])
	    },
	    direction: axis.direction,
	    destination: getHomeLocation(critical)
	  };
	});

	var getPageItemPositions = (function (client, windowScroll) {
	  return {
	    selection: add(client.selection, windowScroll),
	    borderBoxCenter: add(client.borderBoxCenter, windowScroll),
	    offset: add(client.offset, windowScroll)
	  };
	});

	function isMovementAllowed(state) {
	  return state.phase === 'DRAGGING' || state.phase === 'COLLECTING';
	}

	var idle = {
	  phase: 'IDLE'
	};
	var preparing = {
	  phase: 'PREPARING'
	};

	var moveWithPositionUpdates = function moveWithPositionUpdates(_ref) {
	  var state = _ref.state,
	      clientSelection = _ref.clientSelection,
	      shouldAnimate = _ref.shouldAnimate,
	      viewport = _ref.viewport,
	      impact = _ref.impact,
	      scrollJumpRequest = _ref.scrollJumpRequest;
	  var newViewport = viewport || state.viewport;
	  var currentWindowScroll = newViewport.scroll.current;

	  var client = function () {
	    var offset = subtract(clientSelection, state.initial.client.selection);
	    return {
	      offset: offset,
	      selection: clientSelection,
	      borderBoxCenter: add(state.initial.client.borderBoxCenter, offset)
	    };
	  }();

	  var page = getPageItemPositions(client, currentWindowScroll);
	  var current = {
	    client: client,
	    page: page
	  };

	  if (state.phase === 'COLLECTING') {
	    return _extends$1({
	      phase: 'COLLECTING'
	    }, state, {
	      current: current
	    });
	  }

	  var newImpact = impact || getDragImpact({
	    pageBorderBoxCenter: page.borderBoxCenter,
	    draggable: state.dimensions.draggables[state.critical.draggable.id],
	    draggables: state.dimensions.draggables,
	    droppables: state.dimensions.droppables,
	    previousImpact: state.impact,
	    viewport: newViewport
	  });

	  var result = _extends$1({}, state, {
	    current: current,
	    shouldAnimate: shouldAnimate,
	    impact: newImpact,
	    scrollJumpRequest: scrollJumpRequest || null,
	    viewport: newViewport
	  });

	  return result;
	};

	var reducer = (function (state, action) {
	  if (state === void 0) {
	    state = idle;
	  }

	  if (action.type === 'CLEAN') {
	    return idle;
	  }

	  if (action.type === 'PREPARE') {
	    return preparing;
	  }

	  if (action.type === 'INITIAL_PUBLISH') {
	    !(state.phase === 'PREPARING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'INITIAL_PUBLISH must come after a PREPARING phase') : invariant(false) : void 0;
	    var _action$payload = action.payload,
	        critical = _action$payload.critical,
	        client = _action$payload.client,
	        viewport = _action$payload.viewport,
	        dimensions = _action$payload.dimensions,
	        autoScrollMode = _action$payload.autoScrollMode;
	    var initial = {
	      client: client,
	      page: {
	        selection: add(client.selection, viewport.scroll.initial),
	        borderBoxCenter: add(client.selection, viewport.scroll.initial),
	        offset: origin
	      }
	    };
	    var result = {
	      phase: 'DRAGGING',
	      isDragging: true,
	      critical: critical,
	      autoScrollMode: autoScrollMode,
	      dimensions: dimensions,
	      initial: initial,
	      current: initial,
	      impact: getHomeImpact(critical, dimensions),
	      viewport: viewport,
	      scrollJumpRequest: null,
	      shouldAnimate: false
	    };
	    return result;
	  }

	  if (action.type === 'COLLECTION_STARTING') {
	    var _extends2;

	    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !(state.phase === 'DRAGGING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Collection cannot start from phase " + state.phase) : invariant(false) : void 0;

	    var _result = _extends$1({
	      phase: 'COLLECTING'
	    }, state, (_extends2 = {}, _extends2["phase"] = 'COLLECTING', _extends2));

	    return _result;
	  }

	  if (action.type === 'PUBLISH') {
	    !(state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Unexpected " + action.type + " received in phase " + state.phase) : invariant(false) : void 0;
	    process.env.NODE_ENV !== "production" ? invariant(false, "Dynamic additions and removals of Draggable and Droppable components\n      is currently not supported. But will be soon!") : invariant(false);
	  }

	  if (action.type === 'MOVE') {
	    if (state.phase === 'PREPARING') {
	      return state;
	    }

	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, action.type + " not permitted in phase " + state.phase) : invariant(false) : void 0;
	    var _action$payload2 = action.payload,
	        _client = _action$payload2.client,
	        shouldAnimate = _action$payload2.shouldAnimate;

	    if (state.shouldAnimate === shouldAnimate && isEqual(_client, state.current.client.selection)) {
	      return state;
	    }

	    var impact = state.autoScrollMode === 'JUMP' ? state.impact : null;
	    return moveWithPositionUpdates({
	      state: state,
	      clientSelection: _client,
	      impact: impact,
	      shouldAnimate: shouldAnimate
	    });
	  }

	  if (action.type === 'UPDATE_DROPPABLE_SCROLL') {
	    var _extends3, _extends4;

	    if (state.phase === 'PREPARING') {
	      return state;
	    }

	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, action.type + " not permitted in phase " + state.phase) : invariant(false) : void 0;
	    var _action$payload3 = action.payload,
	        id = _action$payload3.id,
	        offset = _action$payload3.offset;
	    var target = state.dimensions.droppables[id];

	    if (!target) {
	      return state;
	    }

	    var updated = scrollDroppable(target, offset);

	    var _dimensions = _extends$1({}, state.dimensions, {
	      droppables: _extends$1({}, state.dimensions.droppables, (_extends3 = {}, _extends3[id] = updated, _extends3))
	    });

	    var _impact = function () {
	      !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false) : invariant(false) : void 0;

	      if (state.autoScrollMode === 'JUMP') {
	        return state.impact;
	      }

	      return getDragImpact({
	        pageBorderBoxCenter: state.current.page.borderBoxCenter,
	        draggable: _dimensions.draggables[state.critical.draggable.id],
	        draggables: _dimensions.draggables,
	        droppables: _dimensions.droppables,
	        previousImpact: state.impact,
	        viewport: state.viewport
	      });
	    }();

	    return _extends$1({
	      phase: 'DRAGGING'
	    }, state, (_extends4 = {}, _extends4["phase"] = state.phase, _extends4.impact = _impact, _extends4.dimensions = _dimensions, _extends4.scrollJumpRequest = null, _extends4));
	  }

	  if (action.type === 'UPDATE_DROPPABLE_IS_ENABLED') {
	    var _extends5, _extends6;

	    if (state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, "Attempting to move in an unsupported phase " + state.phase) : invariant(false) : void 0;
	    var _action$payload4 = action.payload,
	        _id = _action$payload4.id,
	        isEnabled = _action$payload4.isEnabled;
	    var _target = state.dimensions.droppables[_id];
	    !_target ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot find Droppable[id: " + _id + "] to toggle its enabled state") : invariant(false) : void 0;
	    !(_target.isEnabled !== isEnabled) ? process.env.NODE_ENV !== "production" ? invariant(false, "Trying to set droppable isEnabled to " + String(isEnabled) + "\n      but it is already " + String(_target.isEnabled)) : invariant(false) : void 0;

	    var _updated = _extends$1({}, _target, {
	      isEnabled: isEnabled
	    });

	    var _dimensions2 = _extends$1({}, state.dimensions, {
	      droppables: _extends$1({}, state.dimensions.droppables, (_extends5 = {}, _extends5[_id] = _updated, _extends5))
	    });

	    var _impact2 = getDragImpact({
	      pageBorderBoxCenter: state.current.page.borderBoxCenter,
	      draggable: _dimensions2.draggables[state.critical.draggable.id],
	      draggables: _dimensions2.draggables,
	      droppables: _dimensions2.droppables,
	      previousImpact: state.impact,
	      viewport: state.viewport
	    });

	    return _extends$1({
	      phase: 'DRAGGING'
	    }, state, (_extends6 = {}, _extends6["phase"] = state.phase, _extends6.impact = _impact2, _extends6.dimensions = _dimensions2, _extends6));
	  }

	  if (action.type === 'MOVE_BY_WINDOW_SCROLL') {
	    if (state.phase === 'PREPARING') {
	      return state;
	    }

	    if (state.phase === 'DROP_PENDING' || state.phase === 'DROP_ANIMATING') {
	      return state;
	    }

	    !isMovementAllowed(state) ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot move by window in phase " + state.phase) : invariant(false) : void 0;
	    var newScroll = action.payload.scroll;

	    if (isEqual(state.viewport.scroll.current, newScroll)) {
	      return state;
	    }

	    var isJumpScrolling = state.autoScrollMode === 'JUMP';

	    var _impact3 = isJumpScrolling ? state.impact : null;

	    var _viewport = scrollViewport(state.viewport, newScroll);

	    return moveWithPositionUpdates({
	      state: state,
	      clientSelection: state.current.client.selection,
	      viewport: _viewport,
	      shouldAnimate: false,
	      impact: _impact3
	    });
	  }

	  if (action.type === 'UPDATE_VIEWPORT_MAX_SCROLL') {
	    var _extends7;

	    !state.isDragging ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update the max viewport scroll if not dragging') : invariant(false) : void 0;
	    var existing = state.viewport;

	    var _viewport2 = _extends$1({}, existing, {
	      scroll: _extends$1({}, existing.scroll, {
	        max: action.payload
	      })
	    });

	    return _extends$1({
	      phase: 'DRAGGING'
	    }, state, (_extends7 = {}, _extends7["phase"] = state.phase, _extends7.viewport = _viewport2, _extends7));
	  }

	  if (action.type === 'MOVE_UP' || action.type === 'MOVE_DOWN' || action.type === 'MOVE_LEFT' || action.type === 'MOVE_RIGHT') {
	    if (state.phase === 'PREPARING') {
	      return state;
	    }

	    if (state.phase === 'COLLECTING' || state.phase === 'DROP_PENDING') {
	      return state;
	    }

	    !(state.phase === 'DRAGGING') ? process.env.NODE_ENV !== "production" ? invariant(false, action.type + " received while not in DRAGGING phase") : invariant(false) : void 0;

	    var _result2 = moveInDirection({
	      state: state,
	      type: action.type
	    });

	    if (!_result2) {
	      return state;
	    }

	    return moveWithPositionUpdates({
	      state: state,
	      impact: _result2.impact,
	      clientSelection: _result2.clientSelection,
	      shouldAnimate: true,
	      scrollJumpRequest: _result2.scrollJumpRequest
	    });
	  }

	  if (action.type === 'DROP_PENDING') {
	    var _extends8;

	    var reason = action.payload.reason;
	    !(state.phase === 'COLLECTING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Can only move into the DROP_PENDING phase from the COLLECTING phase') : invariant(false) : void 0;

	    var newState = _extends$1({
	      phase: 'DROP_PENDING'
	    }, state, (_extends8 = {}, _extends8["phase"] = 'DROP_PENDING', _extends8.isWaiting = true, _extends8.reason = reason, _extends8));

	    return newState;
	  }

	  if (action.type === 'DROP_ANIMATE') {
	    var pending = action.payload;
	    !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot animate drop from phase " + state.phase) : invariant(false) : void 0;
	    var _result3 = {
	      phase: 'DROP_ANIMATING',
	      pending: pending,
	      dimensions: state.dimensions
	    };
	    return _result3;
	  }

	  if (action.type === 'DROP_COMPLETE') {
	    return idle;
	  }

	  return state;
	});

	var lift = function lift(args) {
	  return {
	    type: 'LIFT',
	    payload: args
	  };
	};
	var initialPublish = function initialPublish(args) {
	  return {
	    type: 'INITIAL_PUBLISH',
	    payload: args
	  };
	};
	var publish = function publish(args) {
	  return {
	    type: 'PUBLISH',
	    payload: args
	  };
	};
	var collectionStarting = function collectionStarting() {
	  return {
	    type: 'COLLECTION_STARTING',
	    payload: null
	  };
	};
	var updateDroppableScroll = function updateDroppableScroll(args) {
	  return {
	    type: 'UPDATE_DROPPABLE_SCROLL',
	    payload: args
	  };
	};
	var updateDroppableIsEnabled = function updateDroppableIsEnabled(args) {
	  return {
	    type: 'UPDATE_DROPPABLE_IS_ENABLED',
	    payload: args
	  };
	};
	var move = function move(args) {
	  return {
	    type: 'MOVE',
	    payload: args
	  };
	};
	var moveByWindowScroll = function moveByWindowScroll(args) {
	  return {
	    type: 'MOVE_BY_WINDOW_SCROLL',
	    payload: args
	  };
	};
	var updateViewportMaxScroll = function updateViewportMaxScroll(max) {
	  return {
	    type: 'UPDATE_VIEWPORT_MAX_SCROLL',
	    payload: max
	  };
	};
	var moveUp = function moveUp() {
	  return {
	    type: 'MOVE_UP',
	    payload: null
	  };
	};
	var moveDown = function moveDown() {
	  return {
	    type: 'MOVE_DOWN',
	    payload: null
	  };
	};
	var moveRight = function moveRight() {
	  return {
	    type: 'MOVE_RIGHT',
	    payload: null
	  };
	};
	var moveLeft = function moveLeft() {
	  return {
	    type: 'MOVE_LEFT',
	    payload: null
	  };
	};
	var clean = function clean() {
	  return {
	    type: 'CLEAN',
	    payload: null
	  };
	};
	var prepare = function prepare() {
	  return {
	    type: 'PREPARE',
	    payload: null
	  };
	};
	var animateDrop = function animateDrop(pending) {
	  return {
	    type: 'DROP_ANIMATE',
	    payload: pending
	  };
	};
	var completeDrop = function completeDrop(result) {
	  return {
	    type: 'DROP_COMPLETE',
	    payload: result
	  };
	};
	var drop = function drop(args) {
	  return {
	    type: 'DROP',
	    payload: args
	  };
	};
	var dropPending = function dropPending(args) {
	  return {
	    type: 'DROP_PENDING',
	    payload: args
	  };
	};
	var dropAnimationFinished = function dropAnimationFinished() {
	  return {
	    type: 'DROP_ANIMATION_FINISHED',
	    payload: null
	  };
	};

	var lift$1 = (function (getMarshal) {
	  var timeoutId = null;

	  var tryAbortCriticalCollection = function tryAbortCriticalCollection() {
	    if (timeoutId == null) {
	      return;
	    }

	    clearTimeout(timeoutId);
	    timeoutId = null;
	  };

	  return function (_ref) {
	    var getState = _ref.getState,
	        dispatch = _ref.dispatch;
	    return function (next) {
	      return function (action) {
	        if (action.type === 'CLEAN') {
	          tryAbortCriticalCollection();
	          next(action);
	          return;
	        }

	        if (action.type !== 'LIFT') {
	          next(action);
	          return;
	        }

	        !!timeoutId ? process.env.NODE_ENV !== "production" ? invariant(false, 'There should not be a pending complete lift phase when a lift action is fired') : invariant(false) : void 0;
	        var marshal = getMarshal();
	        var _action$payload = action.payload,
	            id = _action$payload.id,
	            client = _action$payload.client,
	            autoScrollMode = _action$payload.autoScrollMode,
	            viewport = _action$payload.viewport;
	        var initial = getState();

	        if (initial.phase === 'DROP_ANIMATING') {
	          dispatch(completeDrop(initial.pending.result));
	        }

	        var postFlushState = getState();
	        !(postFlushState.phase === 'IDLE') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Incorrect phase to start a drag') : invariant(false) : void 0;
	        dispatch(prepare());
	        timeoutId = setTimeout(function () {
	          timeoutId = null;
	          var state = getState();
	          !(state.phase === 'PREPARING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Invalid phase for completing lift') : invariant(false) : void 0;
	          var scrollOptions = {
	            shouldPublishImmediately: autoScrollMode === 'JUMP'
	          };
	          var request = {
	            draggableId: id,
	            scrollOptions: scrollOptions
	          };

	          var _marshal$startPublish = marshal.startPublishing(request, viewport.scroll.current),
	              critical = _marshal$startPublish.critical,
	              dimensions = _marshal$startPublish.dimensions;

	          dispatch(initialPublish({
	            critical: critical,
	            dimensions: dimensions,
	            client: client,
	            autoScrollMode: autoScrollMode,
	            viewport: viewport
	          }));
	        });
	      };
	    };
	  };
	});

	var style = (function (marshal) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'INITIAL_PUBLISH') {
	          marshal.dragging();
	        }

	        if (action.type === 'COLLECTION_STARTING') {
	          marshal.collecting();
	        }

	        if (action.type === 'PUBLISH') {
	          marshal.dragging();
	        }

	        if (action.type === 'DROP_ANIMATE') {
	          marshal.dropping(action.payload.result.reason);
	        }

	        if (action.type === 'CLEAN' || action.type === 'DROP_COMPLETE') {
	          marshal.resting();
	        }

	        next(action);
	      };
	    };
	  };
	});

	var getNewHomeClientBorderBoxCenter = (function (_ref) {
	  var movement = _ref.movement,
	      draggable = _ref.draggable,
	      draggables = _ref.draggables,
	      destination = _ref.destination;
	  var originalCenter = draggable.client.borderBox.center;

	  if (destination == null) {
	    return originalCenter;
	  }

	  var displaced = movement.displaced,
	      isBeyondStartPosition = movement.isBeyondStartPosition;
	  var axis = destination.axis;
	  var isWithinHomeDroppable = destination.descriptor.id === draggable.descriptor.droppableId;

	  if (isWithinHomeDroppable && !displaced.length) {
	    return originalCenter;
	  }

	  var draggablesInDestination = getDraggablesInsideDroppable(destination, draggables);

	  var movingRelativeTo = function () {
	    if (isWithinHomeDroppable) {
	      return draggables[displaced[0].draggableId].client.borderBox;
	    }

	    if (displaced.length) {
	      return draggables[displaced[0].draggableId].client.borderBox;
	    }

	    if (draggablesInDestination.length) {
	      return draggablesInDestination[draggablesInDestination.length - 1].client.marginBox;
	    }

	    return destination.client.contentBox;
	  }();

	  var _ref2 = function () {
	    if (isWithinHomeDroppable) {
	      if (isBeyondStartPosition) {
	        return {
	          sourceEdge: 'end',
	          destinationEdge: 'end'
	        };
	      }

	      return {
	        sourceEdge: 'start',
	        destinationEdge: 'start'
	      };
	    }

	    if (!displaced.length && draggablesInDestination.length) {
	      return {
	        sourceEdge: 'start',
	        destinationEdge: 'end'
	      };
	    }

	    return {
	      sourceEdge: 'start',
	      destinationEdge: 'start'
	    };
	  }(),
	      sourceEdge = _ref2.sourceEdge,
	      destinationEdge = _ref2.destinationEdge;

	  var source = draggable.client.borderBox;
	  var targetCenter = moveToEdge({
	    source: source,
	    sourceEdge: sourceEdge,
	    destination: movingRelativeTo,
	    destinationEdge: destinationEdge,
	    destinationAxis: axis
	  });
	  return targetCenter;
	});

	var getScrollDisplacement = function getScrollDisplacement(droppable, viewport) {
	  return withDroppableDisplacement(droppable, viewport.scroll.diff.displacement);
	};

	var drop$1 = (function (_ref) {
	  var getState = _ref.getState,
	      dispatch = _ref.dispatch;
	  return function (next) {
	    return function (action) {
	      if (action.type !== 'DROP') {
	        next(action);
	        return;
	      }

	      var state = getState();
	      var reason = action.payload.reason;

	      if (state.phase === 'COLLECTING') {
	        dispatch(dropPending({
	          reason: reason
	        }));
	        return;
	      }

	      if (state.phase === 'PREPARING') {
	        dispatch(clean());
	        return;
	      }

	      if (state.phase === 'IDLE') {
	        return;
	      }

	      var isWaitingForDrop = state.phase === 'DROP_PENDING' && state.isWaiting;
	      !!isWaitingForDrop ? process.env.NODE_ENV !== "production" ? invariant(false, 'A DROP action occurred while DROP_PENDING and still waiting') : invariant(false) : void 0;
	      !(state.phase === 'DRAGGING' || state.phase === 'DROP_PENDING') ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot drop in phase: " + state.phase) : invariant(false) : void 0;
	      var critical = state.critical;
	      var dimensions = state.dimensions;
	      var impact = reason === 'DROP' ? state.impact : noImpact;
	      var home = dimensions.droppables[state.critical.droppable.id];
	      var draggable = dimensions.draggables[state.critical.draggable.id];
	      var droppable = impact && impact.destination ? dimensions.droppables[impact.destination.droppableId] : null;
	      var source = {
	        index: critical.draggable.index,
	        droppableId: critical.droppable.id
	      };
	      var destination = reason === 'DROP' ? impact.destination : null;
	      var result = {
	        draggableId: draggable.descriptor.id,
	        type: home.descriptor.type,
	        source: source,
	        destination: destination,
	        reason: reason
	      };

	      var clientOffset = function () {
	        if (reason === 'CANCEL') {
	          return origin;
	        }

	        var newBorderBoxClientCenter = getNewHomeClientBorderBoxCenter({
	          movement: impact.movement,
	          draggable: draggable,
	          draggables: dimensions.draggables,
	          destination: droppable
	        });
	        return subtract(newBorderBoxClientCenter, draggable.client.borderBox.center);
	      }();

	      var newHomeOffset = add(clientOffset, getScrollDisplacement(droppable || home, state.viewport));
	      var isAnimationRequired = !isEqual(state.current.client.offset, newHomeOffset);
	      var pending = {
	        newHomeOffset: newHomeOffset,
	        result: result,
	        impact: impact
	      };

	      if (isAnimationRequired) {
	        dispatch(animateDrop(pending));
	        return;
	      }

	      dispatch(completeDrop(result));
	    };
	  };
	});

	var onDragStart = function onDragStart(start) {
	  return "\n  You have lifted an item in position " + (start.source.index + 1) + ".\n  Use the arrow keys to move, space bar to drop, and escape to cancel.\n";
	};

	var onDragUpdate = function onDragUpdate(update) {
	  if (!update.destination) {
	    return 'You are currently not dragging over a droppable area';
	  }

	  if (update.source.droppableId === update.destination.droppableId) {
	    return "You have moved the item to position " + (update.destination.index + 1);
	  }

	  return "\n    You have moved the item from list " + update.source.droppableId + " in position " + (update.source.index + 1) + "\n    to list " + update.destination.droppableId + " in position " + (update.destination.index + 1) + "\n  ";
	};

	var onDragEnd = function onDragEnd(result) {
	  if (result.reason === 'CANCEL') {
	    return "\n      Movement cancelled.\n      The item has returned to its starting position of " + (result.source.index + 1) + "\n    ";
	  }

	  if (!result.destination) {
	    return "\n      The item has been dropped while not over a droppable location.\n      The item has returned to its starting position of " + (result.source.index + 1) + "\n    ";
	  }

	  if (result.source.droppableId === result.destination.droppableId) {
	    if (result.source.index === result.destination.index) {
	      return "\n        You have dropped the item.\n        It has been dropped on its starting position of " + (result.source.index + 1) + "\n      ";
	    }

	    return "\n      You have dropped the item.\n      It has moved from position " + (result.source.index + 1) + " to " + (result.destination.index + 1) + "\n    ";
	  }

	  return "\n    You have dropped the item.\n    It has moved from position " + (result.source.index + 1) + " in list " + result.source.droppableId + "\n    to position " + (result.destination.index + 1) + " in list " + result.destination.droppableId + "\n  ";
	};

	var preset = {
	  onDragStart: onDragStart,
	  onDragUpdate: onDragUpdate,
	  onDragEnd: onDragEnd
	};

	var records = {};
	var flag = '__react-beautiful-dnd-debug-timings-hook__';

	var isTimingsEnabled = function isTimingsEnabled() {
	  return Boolean(window[flag]);
	};

	var start = function start(key) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!isTimingsEnabled()) {
	      return;
	    }

	    var now = performance.now();
	    records[key] = now;
	  }
	};
	var finish = function finish(key) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!isTimingsEnabled()) {
	      return;
	    }

	    var now = performance.now();
	    var previous = records[key];
	    !previous ? process.env.NODE_ENV !== "production" ? invariant(false, 'cannot finish timing as no previous time found') : invariant(false) : void 0;
	    var result = now - previous;
	    var rounded = result.toFixed(2);

	    var style = function () {
	      if (result < 12) {
	        return {
	          textColor: 'green',
	          symbol: '✅'
	        };
	      }

	      if (result < 40) {
	        return {
	          textColor: 'orange',
	          symbol: '⚠️'
	        };
	      }

	      return {
	        textColor: 'red',
	        symbol: '❌'
	      };
	    }();

	    console.log(style.symbol + " %cTiming %c" + rounded + " %cms %c" + key, 'color: blue; font-weight: bold; ', "color: " + style.textColor + "; font-size: 1.1em;", 'color: grey;', 'color: purple; font-weight: bold;');
	  }
	};

	var withTimings = function withTimings(key, fn) {
	  start(key);
	  fn();
	  finish(key);
	};

	var areLocationsEqual = function areLocationsEqual(first, second) {
	  if (first == null && second == null) {
	    return true;
	  }

	  if (first == null || second == null) {
	    return false;
	  }

	  return first.droppableId === second.droppableId && first.index === second.index;
	};

	var isCriticalEqual = function isCriticalEqual(first, second) {
	  if (first === second) {
	    return true;
	  }

	  var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;
	  var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;
	  return isDraggableEqual && isDroppableEqual;
	};

	var getExpiringAnnounce = function getExpiringAnnounce(announce) {
	  var wasCalled = false;
	  var isExpired = false;
	  setTimeout(function () {
	    isExpired = true;
	  });

	  var result = function result(message) {
	    if (wasCalled) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.warn('Announcement already made. Not making a second announcement');
	      }

	      return;
	    }

	    if (isExpired) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.warn("\n          Announcements cannot be made asynchronously.\n          Default message has already been announced.\n        ");
	      }

	      return;
	    }

	    wasCalled = true;
	    announce(message);
	  };

	  result.wasCalled = function () {
	    return wasCalled;
	  };

	  return result;
	};

	var getDragStart = function getDragStart(critical) {
	  return {
	    draggableId: critical.draggable.id,
	    type: critical.droppable.type,
	    source: {
	      droppableId: critical.droppable.id,
	      index: critical.draggable.index
	    }
	  };
	};

	var hooks = (function (getHooks, announce) {
	  var execute = function execute(hook, data, getDefaultMessage) {
	    if (!hook) {
	      announce(getDefaultMessage(data));
	      return;
	    }

	    var willExpire = getExpiringAnnounce(announce);
	    var provided = {
	      announce: willExpire
	    };
	    hook(data, provided);

	    if (!willExpire.wasCalled()) {
	      announce(getDefaultMessage(data));
	    }
	  };

	  var publisher = function () {
	    var lastLocation = null;
	    var lastCritical = null;
	    var _isDragStartPublished = false;

	    var beforeStart = function beforeStart(critical) {
	      !!_isDragStartPublished ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published') : invariant(false) : void 0;
	      withTimings('onBeforeDragStart', function () {
	        var fn = getHooks().onBeforeDragStart;

	        if (fn) {
	          fn(getDragStart(critical));
	        }
	      });
	    };

	    var start$$1 = function start$$1(critical) {
	      !!_isDragStartPublished ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onBeforeDragStart as a drag start has already been published') : invariant(false) : void 0;
	      var data = getDragStart(critical);
	      lastCritical = critical;
	      lastLocation = data.source;
	      _isDragStartPublished = true;
	      withTimings('onDragStart', function () {
	        return execute(getHooks().onDragStart, data, preset.onDragStart);
	      });
	    };

	    var move = function move(critical, location) {
	      !(_isDragStartPublished && lastCritical) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onDragMove when onDragStart has not been called') : invariant(false) : void 0;
	      var hasCriticalChanged = !isCriticalEqual(critical, lastCritical);

	      if (hasCriticalChanged) {
	        lastCritical = critical;
	      }

	      var hasLocationChanged = !areLocationsEqual(lastLocation, location);

	      if (hasLocationChanged) {
	        lastLocation = location;
	      }

	      if (!hasCriticalChanged && !hasLocationChanged) {
	        return;
	      }

	      var data = _extends$1({}, getDragStart(critical), {
	        destination: location
	      });

	      withTimings('onDragUpdate', function () {
	        return execute(getHooks().onDragUpdate, data, preset.onDragUpdate);
	      });
	    };

	    var drop = function drop(result) {
	      !_isDragStartPublished ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot fire onDragEnd when there is no matching onDragStart') : invariant(false) : void 0;
	      _isDragStartPublished = false;
	      lastLocation = null;
	      lastCritical = null;
	      withTimings('onDragEnd', function () {
	        return execute(getHooks().onDragEnd, result, preset.onDragEnd);
	      });
	    };

	    var abort = function abort() {
	      !(_isDragStartPublished && lastCritical) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot cancel when onDragStart not fired') : invariant(false) : void 0;

	      var result = _extends$1({}, getDragStart(lastCritical), {
	        destination: null,
	        reason: 'CANCEL'
	      });

	      drop(result);
	    };

	    return {
	      beforeStart: beforeStart,
	      start: start$$1,
	      move: move,
	      drop: drop,
	      abort: abort,
	      isDragStartPublished: function isDragStartPublished() {
	        return _isDragStartPublished;
	      }
	    };
	  }();

	  return function (store) {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'INITIAL_PUBLISH') {
	          var critical = action.payload.critical;
	          publisher.beforeStart(critical);
	          next(action);
	          publisher.start(critical);
	          return;
	        }

	        next(action);

	        if (action.type === 'DROP_COMPLETE') {
	          var result = action.payload;
	          publisher.drop(result);
	          return;
	        }

	        if (action.type === 'CLEAN') {
	          if (publisher.isDragStartPublished()) {
	            publisher.abort();
	          }

	          return;
	        }

	        if (!publisher.isDragStartPublished()) {
	          return;
	        }

	        var state = store.getState();

	        if (state.phase === 'DRAGGING') {
	          publisher.move(state.critical, state.impact.destination);
	        }
	      };
	    };
	  };
	});

	var dropAnimationFinish = (function (store) {
	  return function (next) {
	    return function (action) {
	      if (action.type !== 'DROP_ANIMATION_FINISHED') {
	        next(action);
	        return;
	      }

	      var state = store.getState();
	      !(state.phase === 'DROP_ANIMATING') ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot finish a drop animating when no drop is occurring') : invariant(false) : void 0;
	      store.dispatch(completeDrop(state.pending.result));
	    };
	  };
	});

	var dimensionMarshalStopper = (function (getMarshal) {
	  return function () {
	    return function (next) {
	      return function (action) {
	        if (action.type === 'DROP_COMPLETE' || action.type === 'CLEAN' || action.type === 'DROP_ANIMATE') {
	          var marshal = getMarshal();
	          marshal.stopPublishing();
	        }

	        next(action);
	      };
	    };
	  };
	});

	var shouldCancel = function shouldCancel(action) {
	  return action.type === 'CANCEL' || action.type === 'DROP_ANIMATE' || action.type === 'DROP' || action.type === 'DROP_COMPLETE' || action.type === 'COLLECTION_STARTING';
	};

	var autoScroll = (function (getScroller) {
	  return function (store) {
	    return function (next) {
	      return function (action) {
	        if (shouldCancel(action)) {
	          getScroller().cancel();
	          next(action);
	          return;
	        }

	        next(action);
	        var state = store.getState();

	        if (state.phase !== 'DRAGGING') {
	          return;
	        }

	        if (state.autoScrollMode === 'FLUID') {
	          getScroller().fluidScroll(state);
	          return;
	        }

	        if (!state.scrollJumpRequest) {
	          return;
	        }

	        getScroller().jumpScroll(state);
	      };
	    };
	  };
	});

	var shouldCheckOnAction = function shouldCheckOnAction(action) {
	  return action.type === 'MOVE' || action.type === 'MOVE_UP' || action.type === 'MOVE_RIGHT' || action.type === 'MOVE_DOWN' || action.type === 'MOVE_LEFT' || action.type === 'MOVE_BY_WINDOW_SCROLL';
	};

	var hasDroppableOverChanged = function hasDroppableOverChanged(previous, current) {
	  if (!previous) {
	    return Boolean(current);
	  }

	  if (!current) {
	    return Boolean(previous);
	  }

	  return previous.droppableId !== current.droppableId;
	};

	var getNewMaxScroll = function getNewMaxScroll(previous, current, action) {
	  if (!shouldCheckOnAction(action)) {
	    return null;
	  }

	  if (!isMovementAllowed(previous) || !isMovementAllowed(current)) {
	    return null;
	  }

	  if (!hasDroppableOverChanged(previous.impact.destination, current.impact.destination)) {
	    return null;
	  }

	  var viewport = current.viewport;
	  var doc = document.documentElement;
	  !doc ? process.env.NODE_ENV !== "production" ? invariant(false, 'Could not find document.documentElement') : invariant(false) : void 0;
	  var maxScroll = getMaxScroll({
	    scrollHeight: doc.scrollHeight,
	    scrollWidth: doc.scrollWidth,
	    width: viewport.frame.width,
	    height: viewport.frame.height
	  });

	  if (isEqual(maxScroll, viewport.scroll.max)) {
	    return null;
	  }

	  return maxScroll;
	};

	var maxScrollUpdater = (function (store) {
	  return function (next) {
	    return function (action) {
	      var previous = store.getState();
	      next(action);
	      var current = store.getState();
	      var maxScroll = getNewMaxScroll(previous, current, action);

	      if (maxScroll) {
	        next(updateViewportMaxScroll(maxScroll));
	      }
	    };
	  };
	});

	var composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;
	var createStore$1 = (function (_ref) {
	  var getDimensionMarshal = _ref.getDimensionMarshal,
	      styleMarshal = _ref.styleMarshal,
	      getHooks = _ref.getHooks,
	      announce = _ref.announce,
	      getScroller = _ref.getScroller;
	  return createStore(reducer, composeEnhancers(applyMiddleware(style(styleMarshal), dimensionMarshalStopper(getDimensionMarshal), lift$1(getDimensionMarshal), drop$1, dropAnimationFinish, maxScrollUpdater, autoScroll(getScroller), hooks(getHooks, announce))));
	});

	var getEmptyMap = function getEmptyMap() {
	  return {
	    draggables: {},
	    droppables: {}
	  };
	};

	var timingKey = 'Publish collection from DOM';
	var createPublisher = (function (_ref) {
	  var getProvided = _ref.getProvided,
	      callbacks = _ref.callbacks;

	  var advancedUsageWarning = function () {
	    if (process.env.NODE_ENV === 'production') {
	      return function () {};
	    }

	    var hasAnnounced = false;
	    return function () {
	      if (hasAnnounced) {
	        return;
	      }

	      hasAnnounced = true;

	      if (process.env.NODE_ENV === 'production') {
	        return;
	      }

	      console.warn("\n        Advanced usage warning: you are adding or removing a dimension during a drag\n        This an advanced feature used to support dynamic interactions such as lazy loading lists.\n\n        Keep in mind the following restrictions:\n\n        - Draggable's can only be added to Droppable's that are scroll containers\n        - Adding a Droppable cannot impact the placement of other Droppables\n          (it cannot push a Droppable on the page)\n\n        (This warning will be stripped in production builds)\n      ".trim());
	    };
	  }();

	  var additions = getEmptyMap();
	  var removals = getEmptyMap();
	  var frameId = null;

	  var reset = function reset() {
	    additions = getEmptyMap();
	    removals = getEmptyMap();
	  };

	  var collect = function collect() {
	    advancedUsageWarning();

	    if (frameId) {
	      return;
	    }

	    frameId = requestAnimationFrame(function () {
	      frameId = null;
	      callbacks.collectionStarting();
	      start(timingKey);

	      var _getProvided = getProvided(),
	          entries = _getProvided.entries,
	          collection = _getProvided.collection;

	      var windowScroll = collection.initialWindowScroll;

	      var draggables = keys$2(additions.draggables).map(function (id) {
	        return entries.draggables[id].getDimension(windowScroll);
	      });

	      var droppables = keys$2(additions.droppables).map(function (id) {
	        return entries.droppables[id].callbacks.getDimensionAndWatchScroll(windowScroll, collection.scrollOptions);
	      });

	      var result = {
	        additions: {
	          draggables: draggables,
	          droppables: droppables
	        },
	        removals: {
	          draggables: keys$2(removals.draggables),
	          droppables: keys$2(removals.droppables)
	        }
	      };
	      reset();
	      finish(timingKey);
	      callbacks.publish(result);
	    });
	  };

	  var addDraggable = function addDraggable(id) {
	    additions.draggables[id] = true;

	    if (removals.draggables[id]) {
	      delete removals.draggables[id];
	    }

	    collect();
	  };

	  var removeDraggable = function removeDraggable(id) {
	    removals.draggables[id] = true;

	    if (additions.draggables[id]) {
	      delete additions.draggables[id];
	    }

	    collect();
	  };

	  var addDroppable = function addDroppable(id) {
	    additions.droppables[id] = true;

	    if (removals.droppables[id]) {
	      delete removals.droppables[id];
	    }

	    collect();
	  };

	  var removeDroppable = function removeDroppable(id) {
	    removals.droppables[id] = true;

	    if (additions.droppables[id]) {
	      delete additions.droppables[id];
	    }

	    collect();
	  };

	  var stop = function stop() {
	    if (!frameId) {
	      return;
	    }

	    cancelAnimationFrame(frameId);
	    frameId = null;
	    reset();
	  };

	  return {
	    addDraggable: addDraggable,
	    removeDraggable: removeDraggable,
	    addDroppable: addDroppable,
	    removeDroppable: removeDroppable,
	    stop: stop
	  };
	});

	var createDimensionMarshal = (function (callbacks) {
	  var entries = {
	    droppables: {},
	    draggables: {}
	  };
	  var collection = null;
	  var publisher = createPublisher({
	    callbacks: {
	      publish: callbacks.publish,
	      collectionStarting: callbacks.collectionStarting
	    },
	    getProvided: function getProvided() {
	      !collection ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get scroll options when there is no collection') : invariant(false) : void 0;
	      return {
	        entries: entries,
	        collection: collection
	      };
	    }
	  });

	  var registerDraggable = function registerDraggable(descriptor, getDimension) {
	    var entry = {
	      descriptor: descriptor,
	      getDimension: getDimension
	    };
	    entries.draggables[descriptor.id] = entry;

	    if (!collection) {
	      return;
	    }

	    if (collection.critical.draggable.type !== descriptor.type) {
	      return;
	    }

	    publisher.addDraggable(descriptor.id);
	  };

	  var updateDraggable = function updateDraggable(previous, descriptor, getDimension) {
	    !entries.draggables[previous.id] ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update draggable registration as no previous registration was found') : invariant(false) : void 0;
	    delete entries.draggables[previous.id];
	    var entry = {
	      descriptor: descriptor,
	      getDimension: getDimension
	    };
	    entries.draggables[descriptor.id] = entry;
	  };

	  var unregisterDraggable = function unregisterDraggable(descriptor) {
	    var entry = entries.draggables[descriptor.id];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot unregister Draggable with id " + descriptor.id + " as it is not registered") : invariant(false) : void 0;

	    if (entry.descriptor !== descriptor) {
	      return;
	    }

	    delete entries.draggables[descriptor.id];

	    if (!collection) {
	      return;
	    }

	    !(collection.critical.draggable.id !== descriptor.id) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot remove the dragging item during a drag') : invariant(false) : void 0;

	    if (descriptor.type !== collection.critical.draggable.type) {
	      return;
	    }

	    publisher.removeDraggable(descriptor.id);
	  };

	  var registerDroppable = function registerDroppable(descriptor, droppableCallbacks) {
	    var id = descriptor.id;
	    entries.droppables[id] = {
	      descriptor: descriptor,
	      callbacks: droppableCallbacks
	    };

	    if (!collection) {
	      return;
	    }

	    if (descriptor.type !== collection.critical.droppable.type) {
	      return;
	    }

	    publisher.addDroppable(id);
	  };

	  var updateDroppable = function updateDroppable(previous, descriptor, droppableCallbacks) {
	    !entries.droppables[previous.id] ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update droppable registration as no previous registration was found') : invariant(false) : void 0;
	    delete entries.droppables[previous.id];
	    var entry = {
	      descriptor: descriptor,
	      callbacks: droppableCallbacks
	    };
	    entries.droppables[descriptor.id] = entry;

	    if (collection) {
	      process.env.NODE_ENV !== "production" ? invariant(false, 'You are not able to update the id or type of a droppable during a drag') : invariant(false);
	    }
	  };

	  var unregisterDroppable = function unregisterDroppable(descriptor) {
	    var entry = entries.droppables[descriptor.id];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot unregister Droppable with id " + descriptor.id + " as as it is not registered") : invariant(false) : void 0;

	    if (entry.descriptor !== descriptor) {
	      return;
	    }

	    delete entries.droppables[descriptor.id];

	    if (!collection) {
	      return;
	    }

	    !(collection.critical.droppable.id !== descriptor.id) ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot remove the home Droppable during a drag') : invariant(false) : void 0;

	    if (collection.critical.droppable.type !== descriptor.type) {
	      return;
	    }

	    publisher.removeDroppable(descriptor.id);
	  };

	  var updateDroppableIsEnabled = function updateDroppableIsEnabled(id, isEnabled) {
	    !entries.droppables[id] ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant(false) : void 0;

	    if (!collection) {
	      return;
	    }

	    callbacks.updateDroppableIsEnabled({
	      id: id,
	      isEnabled: isEnabled
	    });
	  };

	  var updateDroppableScroll = function updateDroppableScroll(id, newScroll) {
	    !entries.droppables[id] ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot update the scroll on Droppable " + id + " as it is not registered") : invariant(false) : void 0;

	    if (!collection) {
	      return;
	    }

	    callbacks.updateDroppableScroll({
	      id: id,
	      offset: newScroll
	    });
	  };

	  var scrollDroppable = function scrollDroppable(id, change) {
	    var entry = entries.droppables[id];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, "Cannot scroll Droppable " + id + " as it is not registered") : invariant(false) : void 0;

	    if (!collection) {
	      return;
	    }

	    entry.callbacks.scroll(change);
	  };

	  var getInitialPublish = function getInitialPublish(args) {
	    var critical = args.critical,
	        scrollOptions = args.scrollOptions,
	        windowScroll = args.initialWindowScroll;
	    var timingKey = 'Initial collection from DOM';
	    start(timingKey);
	    var home = critical.droppable;

	    var droppables = keys$2(entries.droppables).map(function (id) {
	      return entries.droppables[id];
	    }).filter(function (entry) {
	      return entry.descriptor.type === home.type;
	    }).map(function (entry) {
	      return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);
	    }).reduce(function (previous, dimension) {
	      previous[dimension.descriptor.id] = dimension;
	      return previous;
	    }, {});

	    var draggables = keys$2(entries.draggables).map(function (id) {
	      return entries.draggables[id];
	    }).filter(function (entry) {
	      return entry.descriptor.type === critical.draggable.type;
	    }).map(function (entry) {
	      return entry.getDimension(windowScroll);
	    }).reduce(function (previous, dimension) {
	      previous[dimension.descriptor.id] = dimension;
	      return previous;
	    }, {});

	    finish(timingKey);
	    var dimensions = {
	      draggables: draggables,
	      droppables: droppables
	    };
	    var result = {
	      dimensions: dimensions,
	      critical: critical
	    };
	    return result;
	  };

	  var stopPublishing = function stopPublishing() {
	    if (!collection) {
	      return;
	    }

	    publisher.stop();
	    var home = collection.critical.droppable;

	    keys$2(entries.droppables).filter(function (id) {
	      return entries.droppables[id].descriptor.type === home.type;
	    }).forEach(function (id) {
	      return entries.droppables[id].callbacks.unwatchScroll();
	    });

	    collection = null;
	  };

	  var startPublishing = function startPublishing(request, windowScroll) {
	    !!collection ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot start capturing critical dimensions as there is already a collection') : invariant(false) : void 0;
	    var entry = entries.draggables[request.draggableId];
	    !entry ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot find critical draggable entry') : invariant(false) : void 0;
	    var home = entries.droppables[entry.descriptor.droppableId];
	    !home ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot find critical droppable entry') : invariant(false) : void 0;
	    var critical = {
	      draggable: entry.descriptor,
	      droppable: home.descriptor
	    };
	    collection = {
	      scrollOptions: request.scrollOptions,
	      critical: critical,
	      initialWindowScroll: windowScroll
	    };
	    return getInitialPublish(collection);
	  };

	  var marshal = {
	    registerDraggable: registerDraggable,
	    updateDraggable: updateDraggable,
	    unregisterDraggable: unregisterDraggable,
	    registerDroppable: registerDroppable,
	    updateDroppable: updateDroppable,
	    unregisterDroppable: unregisterDroppable,
	    updateDroppableIsEnabled: updateDroppableIsEnabled,
	    scrollDroppable: scrollDroppable,
	    updateDroppableScroll: updateDroppableScroll,
	    startPublishing: startPublishing,
	    stopPublishing: stopPublishing
	  };
	  return marshal;
	});

	var physics = function () {
	  var base = {
	    stiffness: 1000,
	    damping: 60,
	    precision: 0.99
	  };

	  var standard = _extends$1({}, base);

	  var fast = _extends$1({}, base, {
	    stiffness: base.stiffness * 2
	  });

	  return {
	    standard: standard,
	    fast: fast
	  };
	}();
	var css$1 = {
	  outOfTheWay: 'transform 0.2s cubic-bezier(0.2, 0, 0, 1)'
	};

	var prefix$1 = 'data-react-beautiful-dnd';
	var dragHandle = prefix$1 + "-drag-handle";
	var draggable = prefix$1 + "-draggable";
	var droppable = prefix$1 + "-droppable";

	var getStyles = (function (styleContext) {
	  var dragHandleSelector = "[" + dragHandle + "=\"" + styleContext + "\"]";
	  var draggableSelector = "[" + draggable + "=\"" + styleContext + "\"]";
	  var droppableSelector = "[" + droppable + "=\"" + styleContext + "\"]";
	  var dragHandleStyles = {
	    base: "\n      " + dragHandleSelector + " {\n        -webkit-touch-callout: none;\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n        touch-action: manipulation;\n      }\n    ",
	    grabCursor: "\n      " + dragHandleSelector + " {\n        cursor: -webkit-grab;\n        cursor: grab;\n      }\n    ",
	    blockPointerEvents: "\n      " + dragHandleSelector + " {\n        pointer-events: none;\n      }\n    "
	  };
	  var draggableStyles = {
	    animateMovement: "\n      " + draggableSelector + " {\n        transition: " + css$1.outOfTheWay + ";\n      }\n    "
	  };
	  var droppableStyles = {
	    base: "\n      " + droppableSelector + " {\n        overflow-anchor: none;\n      }\n    "
	  };
	  var bodyStyles = {
	    whileActiveDragging: "\n      body {\n        cursor: grabbing;\n        cursor: -webkit-grabbing;\n        user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n      }\n    "
	  };
	  var base = [dragHandleStyles.base, droppableStyles.base];
	  var resting = base.concat([dragHandleStyles.grabCursor]);
	  var collecting = base.concat([dragHandleStyles.blockPointerEvents, bodyStyles.whileActiveDragging]);
	  var dragging = collecting.concat([draggableStyles.animateMovement]);
	  var dropAnimating = base.concat([dragHandleStyles.grabCursor, draggableStyles.animateMovement]);
	  var userCancel = base.concat([draggableStyles.animateMovement]);
	  return {
	    resting: resting.join(''),
	    dragging: dragging.join(''),
	    dropAnimating: dropAnimating.join(''),
	    collecting: collecting.join(''),
	    userCancel: userCancel.join('')
	  };
	});

	var count = 0;
	var resetStyleContext = function resetStyleContext() {
	  count = 0;
	};

	var getHead = function getHead() {
	  var head = document.querySelector('head');
	  !head ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot find the head to append a style to') : invariant(false) : void 0;
	  return head;
	};

	var createStyleMarshal = (function () {
	  var context = "" + count++;
	  var styles = getStyles(context);
	  var el = null;
	  var setStyle = index$1(function (proposed) {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot set style of style tag if not mounted') : invariant(false) : void 0;
	    el.innerHTML = proposed;
	  });

	  var mount = function mount() {
	    !!el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Style marshal already mounted') : invariant(false) : void 0;
	    el = document.createElement('style');
	    el.type = 'text/css';
	    el.setAttribute(prefix$1, context);
	    getHead().appendChild(el);
	    setStyle(styles.resting);
	  };

	  var collecting = function collecting() {
	    return setStyle(styles.collecting);
	  };

	  var dragging = function dragging() {
	    return setStyle(styles.dragging);
	  };

	  var dropping = function dropping(reason) {
	    if (reason === 'DROP') {
	      setStyle(styles.dropAnimating);
	      return;
	    }

	    setStyle(styles.userCancel);
	  };

	  var resting = function resting() {
	    return setStyle(styles.resting);
	  };

	  var unmount = function unmount() {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot unmount style marshal as it is already unmounted') : invariant(false) : void 0;
	    getHead().removeChild(el);
	    el = null;
	  };

	  var marshal = {
	    collecting: collecting,
	    dragging: dragging,
	    dropping: dropping,
	    resting: resting,
	    styleContext: context,
	    mount: mount,
	    unmount: unmount
	  };
	  return marshal;
	});

	var canStartDrag = (function (state, id) {
	  if (state.phase === 'IDLE') {
	    return true;
	  }

	  if (state.phase !== 'DROP_ANIMATING') {
	    return false;
	  }

	  if (state.pending.result.draggableId === id) {
	    return false;
	  }

	  return state.pending.result.reason === 'DROP';
	});

	var scrollWindow = (function (change) {
	  window.scrollBy(change.x, change.y);
	});

	var count$1 = 0;
	var visuallyHidden = {
	  position: 'absolute',
	  width: '1px',
	  height: '1px',
	  margin: '-1px',
	  border: '0',
	  padding: '0',
	  overflow: 'hidden',
	  clip: 'rect(0 0 0 0)',
	  'clip-path': 'inset(100%)'
	};

	var getBody = function getBody() {
	  !document.body ? process.env.NODE_ENV !== "production" ? invariant(false, 'Announcer cannot find document.body') : invariant(false) : void 0;
	  return document.body;
	};

	var createAnnouncer = (function () {
	  var id = "react-beautiful-dnd-announcement-" + count$1++;
	  var el = null;

	  var announce = function announce(message) {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot announce to unmounted node') : invariant(false) : void 0;
	    el.textContent = message;
	  };

	  var mount = function mount() {
	    !!el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Announcer already mounted') : invariant(false) : void 0;
	    el = document.createElement('div');
	    el.id = id;
	    el.setAttribute('aria-live', 'assertive');
	    el.setAttribute('role', 'log');
	    el.setAttribute('aria-atomic', 'true');

	    assign$2(el.style, visuallyHidden);

	    getBody().appendChild(el);
	  };

	  var unmount = function unmount() {
	    !el ? process.env.NODE_ENV !== "production" ? invariant(false, 'Will not unmount annoucer as it is already unmounted') : invariant(false) : void 0;
	    getBody().removeChild(el);
	    el = null;
	  };

	  var announcer = {
	    announce: announce,
	    id: id,
	    mount: mount,
	    unmount: unmount
	  };
	  return announcer;
	});

	var getScrollableDroppables = index$1(function (droppables) {
	  return toDroppableList(droppables).filter(function (droppable) {
	    if (!droppable.isEnabled) {
	      return false;
	    }

	    if (!droppable.viewport.closestScrollable) {
	      return false;
	    }

	    return true;
	  });
	});

	var getScrollableDroppableOver = function getScrollableDroppableOver(target, droppables) {
	  var maybe = getScrollableDroppables(droppables).find(function (droppable) {
	    !droppable.viewport.closestScrollable ? process.env.NODE_ENV !== "production" ? invariant(false, 'Invalid result') : invariant(false) : void 0;
	    return isPositionInFrame(droppable.viewport.closestScrollable.framePageMarginBox)(target);
	  });
	  return maybe;
	};

	var getBestScrollableDroppable = (function (_ref) {
	  var center = _ref.center,
	      destination = _ref.destination,
	      droppables = _ref.droppables;

	  if (destination) {
	    var _dimension = droppables[destination.droppableId];

	    if (!_dimension.viewport.closestScrollable) {
	      return null;
	    }

	    return _dimension;
	  }

	  var dimension = getScrollableDroppableOver(center, droppables);
	  return dimension;
	});

	var smallestSigned = apply(function (value) {
	  if (value === 0) {
	    return 0;
	  }

	  return value > 0 ? 1 : -1;
	});
	var getOverlap = function () {
	  var getRemainder = function getRemainder(target, max) {
	    if (target < 0) {
	      return target;
	    }

	    if (target > max) {
	      return target - max;
	    }

	    return 0;
	  };

	  return function (_ref) {
	    var current = _ref.current,
	        max = _ref.max,
	        change = _ref.change;
	    var targetScroll = add(current, change);
	    var overlap = {
	      x: getRemainder(targetScroll.x, max.x),
	      y: getRemainder(targetScroll.y, max.y)
	    };

	    if (isEqual(overlap, origin)) {
	      return null;
	    }

	    return overlap;
	  };
	}();
	var canPartiallyScroll = function canPartiallyScroll(_ref2) {
	  var rawMax = _ref2.max,
	      current = _ref2.current,
	      change = _ref2.change;
	  var max = {
	    x: Math.max(current.x, rawMax.x),
	    y: Math.max(current.y, rawMax.y)
	  };
	  var smallestChange = smallestSigned(change);
	  var overlap = getOverlap({
	    max: max,
	    current: current,
	    change: smallestChange
	  });

	  if (!overlap) {
	    return true;
	  }

	  if (smallestChange.x !== 0 && overlap.x === 0) {
	    return true;
	  }

	  if (smallestChange.y !== 0 && overlap.y === 0) {
	    return true;
	  }

	  return false;
	};
	var canScrollWindow = function canScrollWindow(viewport, change) {
	  return canPartiallyScroll({
	    current: viewport.scroll.current,
	    max: viewport.scroll.max,
	    change: change
	  });
	};
	var getWindowOverlap = function getWindowOverlap(viewport, change) {
	  if (!canScrollWindow(viewport, change)) {
	    return null;
	  }

	  var max = viewport.scroll.max;
	  var current = viewport.scroll.current;
	  return getOverlap({
	    current: current,
	    max: max,
	    change: change
	  });
	};
	var canScrollDroppable = function canScrollDroppable(droppable, change) {
	  var closest$$1 = droppable.viewport.closestScrollable;

	  if (!closest$$1) {
	    return false;
	  }

	  return canPartiallyScroll({
	    current: closest$$1.scroll.current,
	    max: closest$$1.scroll.max,
	    change: change
	  });
	};
	var getDroppableOverlap = function getDroppableOverlap(droppable, change) {
	  var closest$$1 = droppable.viewport.closestScrollable;

	  if (!closest$$1) {
	    return null;
	  }

	  if (!canScrollDroppable(droppable, change)) {
	    return null;
	  }

	  return getOverlap({
	    current: closest$$1.scroll.current,
	    max: closest$$1.scroll.max,
	    change: change
	  });
	};

	var config = {
	  startFrom: 0.25,
	  maxSpeedAt: 0.05,
	  maxScrollSpeed: 28,
	  ease: function ease(percentage) {
	    return Math.pow(percentage, 2);
	  }
	};
	var clean$1 = apply(function (value) {
	  return value === 0 ? 0 : value;
	});
	var getPixelThresholds = function getPixelThresholds(container, axis) {
	  var startFrom = container[axis.size] * config.startFrom;
	  var maxSpeedAt = container[axis.size] * config.maxSpeedAt;
	  var accelerationPlane = startFrom - maxSpeedAt;
	  var thresholds = {
	    startFrom: startFrom,
	    maxSpeedAt: maxSpeedAt,
	    accelerationPlane: accelerationPlane
	  };
	  return thresholds;
	};

	var getSpeed = function getSpeed(distance$$1, thresholds) {
	  if (distance$$1 >= thresholds.startFrom) {
	    return 0;
	  }

	  if (distance$$1 <= thresholds.maxSpeedAt) {
	    return config.maxScrollSpeed;
	  }

	  var distancePastStart = thresholds.startFrom - distance$$1;
	  var percentage = distancePastStart / thresholds.accelerationPlane;
	  var transformed = config.ease(percentage);
	  var speed = config.maxScrollSpeed * transformed;
	  return speed;
	};

	var adjustForSizeLimits = function adjustForSizeLimits(_ref) {
	  var container = _ref.container,
	      subject = _ref.subject,
	      proposedScroll = _ref.proposedScroll;
	  var isTooBigVertically = subject.height > container.height;
	  var isTooBigHorizontally = subject.width > container.width;

	  if (!isTooBigHorizontally && !isTooBigVertically) {
	    return proposedScroll;
	  }

	  if (isTooBigHorizontally && isTooBigVertically) {
	    return null;
	  }

	  return {
	    x: isTooBigHorizontally ? 0 : proposedScroll.x,
	    y: isTooBigVertically ? 0 : proposedScroll.y
	  };
	};

	var getRequiredScroll = function getRequiredScroll(_ref2) {
	  var container = _ref2.container,
	      subject = _ref2.subject,
	      center = _ref2.center;
	  var distance$$1 = {
	    top: center.y - container.top,
	    right: container.right - center.x,
	    bottom: container.bottom - center.y,
	    left: center.x - container.left
	  };

	  var y = function () {
	    var thresholds = getPixelThresholds(container, vertical);
	    var isCloserToBottom = distance$$1.bottom < distance$$1.top;

	    if (isCloserToBottom) {
	      return getSpeed(distance$$1.bottom, thresholds);
	    }

	    return -1 * getSpeed(distance$$1.top, thresholds);
	  }();

	  var x = function () {
	    var thresholds = getPixelThresholds(container, horizontal);
	    var isCloserToRight = distance$$1.right < distance$$1.left;

	    if (isCloserToRight) {
	      return getSpeed(distance$$1.right, thresholds);
	    }

	    return -1 * getSpeed(distance$$1.left, thresholds);
	  }();

	  var required = clean$1({
	    x: x,
	    y: y
	  });

	  if (isEqual(required, origin)) {
	    return null;
	  }

	  var limited = adjustForSizeLimits({
	    container: container,
	    subject: subject,
	    proposedScroll: required
	  });

	  if (!limited) {
	    return null;
	  }

	  return isEqual(limited, origin) ? null : limited;
	};

	var withPlaceholder = function withPlaceholder(droppable, draggable) {
	  var closest$$1 = droppable.viewport.closestScrollable;

	  if (!closest$$1) {
	    return null;
	  }

	  var isOverHome = droppable.descriptor.id === draggable.descriptor.droppableId;
	  var max = closest$$1.scroll.max;
	  var current = closest$$1.scroll.current;

	  if (isOverHome) {
	    return {
	      max: max,
	      current: current
	    };
	  }

	  var spaceForPlaceholder = patch(droppable.axis.line, draggable.placeholder.client.borderBox[droppable.axis.size]);
	  var newMax = add(max, spaceForPlaceholder);
	  var newCurrent = {
	    x: Math.min(current.x, newMax.x),
	    y: Math.min(current.y, newMax.y)
	  };
	  return {
	    max: newMax,
	    current: newCurrent
	  };
	};

	var createFluidScroller = (function (_ref3) {
	  var scrollWindow = _ref3.scrollWindow,
	      scrollDroppable = _ref3.scrollDroppable;
	  var scheduleWindowScroll = index$2(scrollWindow);
	  var scheduleDroppableScroll = index$2(scrollDroppable);

	  var scroller = function scroller(state) {
	    var center = state.current.page.borderBoxCenter;
	    var draggable = state.dimensions.draggables[state.critical.draggable.id];
	    var subject = draggable.page.marginBox;
	    var viewport = state.viewport;
	    var requiredWindowScroll = getRequiredScroll({
	      container: viewport.frame,
	      subject: subject,
	      center: center
	    });

	    if (requiredWindowScroll && canScrollWindow(viewport, requiredWindowScroll)) {
	      scheduleWindowScroll(requiredWindowScroll);
	      return;
	    }

	    var droppable = getBestScrollableDroppable({
	      center: center,
	      destination: state.impact.destination,
	      droppables: state.dimensions.droppables
	    });

	    if (!droppable) {
	      return;
	    }

	    var closestScrollable = droppable.viewport.closestScrollable;

	    if (!closestScrollable) {
	      return;
	    }

	    var requiredFrameScroll = getRequiredScroll({
	      container: closestScrollable.framePageMarginBox,
	      subject: subject,
	      center: center
	    });

	    if (!requiredFrameScroll) {
	      return;
	    }

	    var result = withPlaceholder(droppable, draggable);

	    if (!result) {
	      return;
	    }

	    var closest$$1 = droppable.viewport.closestScrollable;

	    if (!closest$$1) {
	      return;
	    }

	    var canScrollDroppable$$1 = canPartiallyScroll({
	      current: result.current,
	      max: result.max,
	      change: requiredFrameScroll
	    });

	    if (canScrollDroppable$$1) {
	      scheduleDroppableScroll(droppable.descriptor.id, requiredFrameScroll);
	    }
	  };

	  scroller.cancel = function () {
	    scheduleWindowScroll.cancel();
	    scheduleDroppableScroll.cancel();
	  };

	  return scroller;
	});

	var createJumpScroller = (function (_ref) {
	  var move = _ref.move,
	      scrollDroppable = _ref.scrollDroppable,
	      scrollWindow = _ref.scrollWindow;

	  var moveByOffset = function moveByOffset(state, offset) {
	    var client = add(state.current.client.selection, offset);
	    move({
	      client: client,
	      shouldAnimate: true
	    });
	  };

	  var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan(droppable, change) {
	    if (!canScrollDroppable(droppable, change)) {
	      return change;
	    }

	    var overlap = getDroppableOverlap(droppable, change);

	    if (!overlap) {
	      scrollDroppable(droppable.descriptor.id, change);
	      return null;
	    }

	    var whatTheDroppableCanScroll = subtract(change, overlap);
	    scrollDroppable(droppable.descriptor.id, whatTheDroppableCanScroll);
	    var remainder = subtract(change, whatTheDroppableCanScroll);
	    return remainder;
	  };

	  var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan(viewport, change) {
	    if (!canScrollWindow(viewport, change)) {
	      return change;
	    }

	    var overlap = getWindowOverlap(viewport, change);

	    if (!overlap) {
	      scrollWindow(change);
	      return null;
	    }

	    var whatTheWindowCanScroll = subtract(change, overlap);
	    scrollWindow(whatTheWindowCanScroll);
	    var remainder = subtract(change, whatTheWindowCanScroll);
	    return remainder;
	  };

	  var jumpScroller = function jumpScroller(state) {
	    var request = state.scrollJumpRequest;

	    if (!request) {
	      return;
	    }

	    var destination = state.impact.destination;
	    !destination ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot perform a jump scroll when there is no destination') : invariant(false) : void 0;
	    var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination.droppableId], request);

	    if (!droppableRemainder) {
	      return;
	    }

	    var viewport = state.viewport;
	    var windowRemainder = scrollWindowAsMuchAsItCan(viewport, droppableRemainder);

	    if (!windowRemainder) {
	      return;
	    }

	    moveByOffset(state, windowRemainder);
	  };

	  return jumpScroller;
	});

	var createAutoScroller = (function (_ref) {
	  var scrollDroppable = _ref.scrollDroppable,
	      scrollWindow = _ref.scrollWindow,
	      move = _ref.move;
	  var fluidScroll = createFluidScroller({
	    scrollWindow: scrollWindow,
	    scrollDroppable: scrollDroppable
	  });
	  var jumpScroll = createJumpScroller({
	    move: move,
	    scrollWindow: scrollWindow,
	    scrollDroppable: scrollDroppable
	  });
	  var marshal = {
	    cancel: fluidScroll.cancel,
	    fluidScroll: fluidScroll,
	    jumpScroll: jumpScroll
	  };
	  return marshal;
	});

	var prefix$1$1 = function prefix(key) {
	  return "private-react-beautiful-dnd-key-do-not-use-" + key;
	};

	var storeKey = prefix$1$1('store');
	var droppableIdKey = prefix$1$1('droppable-id');
	var droppableTypeKey = prefix$1$1('droppable-type');
	var dimensionMarshalKey = prefix$1$1('dimension-marshal');
	var styleContextKey = prefix$1$1('style-context');
	var canLiftContextKey = prefix$1$1('can-lift');

	var _DragDropContext$chil;
	var resetServerContext = function resetServerContext() {
	  resetStyleContext();
	};

	var printFatalDevError = function printFatalDevError(error) {
	  if (process.env.NODE_ENV === 'production') {
	    return;
	  }

	  console.warn("\n    An error has occurred while a drag is occurring.\n    Any existing drag will be cancelled.\n\n    Raw error:\n  ");
	  console.error(error);
	};

	var DragDropContext = function (_React$Component) {
	  _inheritsLoose$1(DragDropContext, _React$Component);

	  function DragDropContext(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    _this.store = void 0;
	    _this.dimensionMarshal = void 0;
	    _this.styleMarshal = void 0;
	    _this.autoScroller = void 0;
	    _this.announcer = void 0;
	    _this.unsubscribe = void 0;

	    _this.canLift = function (id) {
	      return canStartDrag(_this.store.getState(), id);
	    };

	    _this.onFatalError = function (error) {
	      printFatalDevError(error);

	      var state = _this.store.getState();

	      if (state.phase !== 'IDLE') {
	        _this.store.dispatch(clean());
	      }
	    };

	    _this.onWindowError = function (error) {
	      return _this.onFatalError(error);
	    };

	    _this.announcer = createAnnouncer();
	    _this.styleMarshal = createStyleMarshal();
	    _this.store = createStore$1({
	      getDimensionMarshal: function getDimensionMarshal() {
	        return _this.dimensionMarshal;
	      },
	      styleMarshal: _this.styleMarshal,
	      getHooks: function getHooks() {
	        return {
	          onBeforeDragStart: _this.props.onBeforeDragStart,
	          onDragStart: _this.props.onDragStart,
	          onDragEnd: _this.props.onDragEnd,
	          onDragUpdate: _this.props.onDragUpdate
	        };
	      },
	      announce: _this.announcer.announce,
	      getScroller: function getScroller() {
	        return _this.autoScroller;
	      }
	    });
	    var callbacks = bindActionCreators({
	      collectionStarting: collectionStarting,
	      publish: publish,
	      updateDroppableScroll: updateDroppableScroll,
	      updateDroppableIsEnabled: updateDroppableIsEnabled
	    }, _this.store.dispatch);
	    _this.dimensionMarshal = createDimensionMarshal(callbacks);
	    _this.autoScroller = createAutoScroller(_extends$1({
	      scrollWindow: scrollWindow,
	      scrollDroppable: _this.dimensionMarshal.scrollDroppable
	    }, bindActionCreators({
	      move: move
	    }, _this.store.dispatch)));
	    return _this;
	  }

	  var _proto = DragDropContext.prototype;

	  _proto.getChildContext = function getChildContext() {
	    var _ref;

	    return _ref = {}, _ref[storeKey] = this.store, _ref[dimensionMarshalKey] = this.dimensionMarshal, _ref[styleContextKey] = this.styleMarshal.styleContext, _ref[canLiftContextKey] = this.canLift, _ref;
	  };

	  _proto.componentDidMount = function componentDidMount() {
	    window.addEventListener('error', this.onWindowError);
	    this.styleMarshal.mount();
	    this.announcer.mount();
	  };

	  _proto.componentDidCatch = function componentDidCatch(error) {
	    this.onFatalError(error);

	    if (error.message.indexOf('Invariant failed') !== -1) {
	      this.setState({});
	      return;
	    }

	    throw error;
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    window.removeEventListener('error', this.onWindowError);
	    var state = this.store.getState();

	    if (state.phase !== 'IDLE') {
	      this.store.dispatch(clean());
	    }

	    this.styleMarshal.unmount();
	    this.announcer.unmount();
	  };

	  _proto.render = function render() {
	    return this.props.children;
	  };

	  return DragDropContext;
	}(React__default.Component);

	DragDropContext.childContextTypes = (_DragDropContext$chil = {}, _DragDropContext$chil[storeKey] = propTypes.shape({
	  dispatch: propTypes.func.isRequired,
	  subscribe: propTypes.func.isRequired,
	  getState: propTypes.func.isRequired
	}).isRequired, _DragDropContext$chil[dimensionMarshalKey] = propTypes.object.isRequired, _DragDropContext$chil[styleContextKey] = propTypes.string.isRequired, _DragDropContext$chil[canLiftContextKey] = propTypes.func.isRequired, _DragDropContext$chil);

	var isScrollable = function isScrollable() {
	  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
	    values[_key] = arguments[_key];
	  }

	  return values.some(function (value) {
	    return value === 'auto' || value === 'scroll';
	  });
	};

	var isElementScrollable = function isElementScrollable(el) {
	  var style = window.getComputedStyle(el);
	  return isScrollable(style.overflow, style.overflowY, style.overflowX);
	};

	var getClosestScrollable = function getClosestScrollable(el) {
	  if (el == null) {
	    return null;
	  }

	  if (!isElementScrollable(el)) {
	    return getClosestScrollable(el.parentElement);
	  }

	  return el;
	};

	var _DroppableDimensionPu;

	var getScroll$1 = function getScroll(el) {
	  return {
	    x: el.scrollLeft,
	    y: el.scrollTop
	  };
	};

	var checkForNestedScrollContainers = function checkForNestedScrollContainers(scrollable) {
	  if (process.env.NODE_ENV === 'production') {
	    return;
	  }

	  if (!scrollable) {
	    return;
	  }

	  var anotherScrollParent = getClosestScrollable(scrollable.parentElement);

	  if (!anotherScrollParent) {
	    return;
	  }

	  console.warn("\n    Droppable: unsupported nested scroll container detected.\n    A Droppable can only have one scroll parent (which can be itself)\n    Nested scroll containers are currently not supported.\n\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\n  ");
	};

	var listenerOptions = {
	  passive: true
	};

	var DroppableDimensionPublisher = function (_React$Component) {
	  _inheritsLoose$1(DroppableDimensionPublisher, _React$Component);

	  function DroppableDimensionPublisher(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    _this.watchingScroll = null;
	    _this.callbacks = void 0;
	    _this.publishedDescriptor = null;

	    _this.getClosestScroll = function () {
	      if (!_this.watchingScroll) {
	        return origin;
	      }

	      return getScroll$1(_this.watchingScroll.closestScrollable);
	    };

	    _this.memoizedUpdateScroll = index$1(function (x, y) {
	      !_this.publishedDescriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot update scroll on unpublished droppable') : invariant(false) : void 0;
	      var newScroll = {
	        x: x,
	        y: y
	      };
	      var marshal = _this.context[dimensionMarshalKey];
	      marshal.updateDroppableScroll(_this.publishedDescriptor.id, newScroll);
	    });

	    _this.updateScroll = function () {
	      var offset = _this.getClosestScroll();

	      _this.memoizedUpdateScroll(offset.x, offset.y);
	    };

	    _this.scheduleScrollUpdate = index$2(_this.updateScroll);

	    _this.onClosestScroll = function () {
	      !_this.watchingScroll ? process.env.NODE_ENV !== "production" ? invariant(false, 'Could not find scroll options while scrolling') : invariant(false) : void 0;
	      var options = _this.watchingScroll.options;

	      if (options.shouldPublishImmediately) {
	        _this.updateScroll();

	        return;
	      }

	      _this.scheduleScrollUpdate();
	    };

	    _this.scroll = function (change) {
	      !_this.watchingScroll ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot scroll a droppable with no closest scrollable') : invariant(false) : void 0;
	      var closestScrollable = _this.watchingScroll.closestScrollable;
	      closestScrollable.scrollTop += change.y;
	      closestScrollable.scrollLeft += change.x;
	    };

	    _this.watchScroll = function (closestScrollable, options) {
	      !!_this.watchingScroll ? process.env.NODE_ENV !== "production" ? invariant(false, 'Droppable cannot watch scroll as it is already watching scroll') : invariant(false) : void 0;

	      if (!closestScrollable) {
	        return;
	      }

	      _this.watchingScroll = {
	        options: options,
	        closestScrollable: closestScrollable
	      };
	      closestScrollable.addEventListener('scroll', _this.onClosestScroll, listenerOptions);
	    };

	    _this.unwatchScroll = function () {
	      var watching = _this.watchingScroll;

	      if (!watching) {
	        return;
	      }

	      _this.scheduleScrollUpdate.cancel();

	      watching.closestScrollable.removeEventListener('scroll', _this.onClosestScroll, listenerOptions);
	      _this.watchingScroll = null;
	    };

	    _this.getMemoizedDescriptor = index$1(function (id, type) {
	      return {
	        id: id,
	        type: type
	      };
	    });

	    _this.publish = function () {
	      var marshal = _this.context[dimensionMarshalKey];

	      var descriptor = _this.getMemoizedDescriptor(_this.props.droppableId, _this.props.type);

	      if (!_this.publishedDescriptor) {
	        marshal.registerDroppable(descriptor, _this.callbacks);
	        _this.publishedDescriptor = descriptor;
	        return;
	      }

	      if (_this.publishedDescriptor === descriptor) {
	        return;
	      }

	      marshal.updateDroppable(_this.publishedDescriptor, descriptor, _this.callbacks);
	      _this.publishedDescriptor = descriptor;
	    };

	    _this.unpublish = function () {
	      !_this.publishedDescriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot unpublish descriptor when none is published') : invariant(false) : void 0;
	      var marshal = _this.context[dimensionMarshalKey];
	      marshal.unregisterDroppable(_this.publishedDescriptor);
	      _this.publishedDescriptor = null;
	    };

	    _this.getDimensionAndWatchScroll = function (windowScroll, options) {
	      var _this$props = _this.props,
	          direction = _this$props.direction,
	          ignoreContainerClipping = _this$props.ignoreContainerClipping,
	          isDropDisabled = _this$props.isDropDisabled,
	          getDroppableRef = _this$props.getDroppableRef;
	      var targetRef = getDroppableRef();
	      var descriptor = _this.publishedDescriptor;
	      !targetRef ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot calculate a dimension when not attached to the DOM') : invariant(false) : void 0;
	      !descriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get dimension for unpublished droppable') : invariant(false) : void 0;
	      var scrollableRef = getClosestScrollable(targetRef);
	      checkForNestedScrollContainers(scrollableRef);

	      _this.watchScroll(scrollableRef, options);

	      var client = function () {
	        var base = getBox(targetRef);

	        if (!scrollableRef) {
	          return base;
	        }

	        if (targetRef !== scrollableRef) {
	          return base;
	        }

	        var top = base.paddingBox.top - scrollableRef.scrollTop;
	        var left = base.paddingBox.left - scrollableRef.scrollLeft;
	        var bottom = top + scrollableRef.scrollHeight;
	        var right = left + scrollableRef.scrollWidth;
	        var paddingBox = {
	          top: top,
	          right: right,
	          bottom: bottom,
	          left: left
	        };
	        var borderBox = {
	          top: paddingBox.top - base.border.top,
	          right: paddingBox.right + base.border.right,
	          bottom: paddingBox.bottom + base.border.bottom,
	          left: paddingBox.left - base.border.left
	        };
	        return createBox({
	          borderBox: borderBox,
	          margin: base.margin,
	          border: base.border,
	          padding: base.padding
	        });
	      }();

	      var page = withScroll(client, windowScroll);

	      var closest$$1 = function () {
	        if (!scrollableRef) {
	          return null;
	        }

	        var frameClient = getBox(scrollableRef);
	        return {
	          client: frameClient,
	          page: withScroll(frameClient),
	          scrollHeight: scrollableRef.scrollHeight,
	          scrollWidth: scrollableRef.scrollWidth,
	          scroll: getScroll$1(scrollableRef),
	          shouldClipSubject: !ignoreContainerClipping
	        };
	      }();

	      return getDroppableDimension({
	        descriptor: descriptor,
	        isEnabled: !isDropDisabled,
	        direction: direction,
	        client: client,
	        page: page,
	        closest: closest$$1
	      });
	    };

	    var callbacks = {
	      getDimensionAndWatchScroll: _this.getDimensionAndWatchScroll,
	      unwatchScroll: _this.unwatchScroll,
	      scroll: _this.scroll
	    };
	    _this.callbacks = callbacks;
	    return _this;
	  }

	  var _proto = DroppableDimensionPublisher.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.publish();
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    this.publish();

	    if (this.props.isDropDisabled === prevProps.isDropDisabled) {
	      return;
	    }

	    var marshal = this.context[dimensionMarshalKey];
	    marshal.updateDroppableIsEnabled(this.props.droppableId, !this.props.isDropDisabled);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.watchingScroll) {
	      if (process.env.NODE_ENV !== 'production') {
	        console.warn('Unmounting droppable while it was watching scroll');
	      }

	      this.unwatchScroll();
	    }

	    this.unpublish();
	  };

	  _proto.render = function render() {
	    return this.props.children;
	  };

	  return DroppableDimensionPublisher;
	}(React__default.Component);

	DroppableDimensionPublisher.contextTypes = (_DroppableDimensionPu = {}, _DroppableDimensionPu[dimensionMarshalKey] = propTypes.object.isRequired, _DroppableDimensionPu);

	var Placeholder = function (_PureComponent) {
	  _inheritsLoose$1(Placeholder, _PureComponent);

	  function Placeholder() {
	    return _PureComponent.apply(this, arguments) || this;
	  }

	  var _proto = Placeholder.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    if (this.props.onMount) {
	      this.props.onMount();
	    }
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    if (this.props.onUnmount) {
	      this.props.onUnmount();
	    }
	  };

	  _proto.render = function render() {
	    var placeholder = this.props.placeholder;
	    var client = placeholder.client,
	        display = placeholder.display,
	        tagName = placeholder.tagName;
	    var style = {
	      display: display,
	      boxSizing: 'border-box',
	      width: client.borderBox.width,
	      height: client.borderBox.height,
	      marginTop: client.margin.top,
	      marginRight: client.margin.right,
	      marginBottom: client.margin.bottom,
	      marginLeft: client.margin.left,
	      flexShrink: '0',
	      flexGrow: '0',
	      pointerEvents: 'none'
	    };
	    return React__default.createElement(tagName, {
	      style: style
	    });
	  };

	  return Placeholder;
	}(React.PureComponent);

	var throwIfRefIsInvalid = (function (ref) {
	  !(ref && ref instanceof HTMLElement) ? process.env.NODE_ENV !== "production" ? invariant(false, "\n    provided.innerRef has not been provided with a HTMLElement.\n\n    You can find a guide on using the innerRef callback functions at:\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\n  ") : invariant(false) : void 0;
	});

	var _Droppable$contextTyp, _Droppable$childConte;

	var Droppable = function (_Component) {
	  _inheritsLoose$1(Droppable, _Component);

	  function Droppable(props, context) {
	    var _this;

	    _this = _Component.call(this, props, context) || this;
	    _this.styleContext = void 0;
	    _this.ref = null;
	    _this.isPlaceholderMounted = false;

	    _this.onPlaceholderMount = function () {
	      _this.isPlaceholderMounted = true;
	    };

	    _this.onPlaceholderUnmount = function () {
	      _this.isPlaceholderMounted = false;
	    };

	    _this.setRef = function (ref) {
	      if (ref === null) {
	        return;
	      }

	      if (ref === _this.ref) {
	        return;
	      }

	      _this.ref = ref;
	      throwIfRefIsInvalid(ref);
	    };

	    _this.getDroppableRef = function () {
	      return _this.ref;
	    };

	    _this.styleContext = context[styleContextKey];
	    return _this;
	  }

	  var _proto = Droppable.prototype;

	  _proto.getChildContext = function getChildContext() {
	    var _value;

	    var value = (_value = {}, _value[droppableIdKey] = this.props.droppableId, _value[droppableTypeKey] = this.props.type, _value);
	    return value;
	  };

	  _proto.componentDidMount = function componentDidMount() {
	    throwIfRefIsInvalid(this.ref);
	    this.warnIfPlaceholderNotMounted();
	  };

	  _proto.componentDidUpdate = function componentDidUpdate() {
	    this.warnIfPlaceholderNotMounted();
	  };

	  _proto.warnIfPlaceholderNotMounted = function warnIfPlaceholderNotMounted() {
	    if (process.env.NODE_ENV === 'production') {
	      return;
	    }

	    if (!this.props.placeholder) {
	      return;
	    }

	    if (this.isPlaceholderMounted) {
	      return;
	    }

	    console.warn("\n      Droppable setup issue: DroppableProvided > placeholder could not be found.\n      Please be sure to add the {provided.placeholder} Node as a child of your Droppable\n\n      More information: https://github.com/atlassian/react-beautiful-dnd#1-provided-droppableprovided\n    ");
	  };

	  _proto.getPlaceholder = function getPlaceholder() {
	    if (!this.props.placeholder) {
	      return null;
	    }

	    return React__default.createElement(Placeholder, {
	      placeholder: this.props.placeholder,
	      onMount: this.onPlaceholderMount,
	      onUnmount: this.onPlaceholderUnmount
	    });
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        direction = _this$props.direction,
	        droppableId = _this$props.droppableId,
	        ignoreContainerClipping = _this$props.ignoreContainerClipping,
	        isDraggingOver = _this$props.isDraggingOver,
	        isDropDisabled = _this$props.isDropDisabled,
	        draggingOverWith = _this$props.draggingOverWith,
	        type = _this$props.type;
	    var provided = {
	      innerRef: this.setRef,
	      placeholder: this.getPlaceholder(),
	      droppableProps: {
	        'data-react-beautiful-dnd-droppable': this.styleContext
	      }
	    };
	    var snapshot = {
	      isDraggingOver: isDraggingOver,
	      draggingOverWith: draggingOverWith
	    };
	    return React__default.createElement(DroppableDimensionPublisher, {
	      droppableId: droppableId,
	      type: type,
	      direction: direction,
	      ignoreContainerClipping: ignoreContainerClipping,
	      isDropDisabled: isDropDisabled,
	      getDroppableRef: this.getDroppableRef
	    }, children(provided, snapshot));
	  };

	  return Droppable;
	}(React.Component);

	Droppable.contextTypes = (_Droppable$contextTyp = {}, _Droppable$contextTyp[styleContextKey] = propTypes.string.isRequired, _Droppable$contextTyp);
	Droppable.childContextTypes = (_Droppable$childConte = {}, _Droppable$childConte[droppableIdKey] = propTypes.string.isRequired, _Droppable$childConte[droppableTypeKey] = propTypes.string.isRequired, _Droppable$childConte);

	var isStrictEqual = (function (a, b) {
	  return a === b;
	});

	var makeMapStateToProps = function makeMapStateToProps() {
	  var getIsDraggingOver = function getIsDraggingOver(id, destination) {
	    if (!destination) {
	      return false;
	    }

	    return destination.droppableId === id;
	  };

	  var shouldUsePlaceholder = function shouldUsePlaceholder(id, descriptor, destination) {
	    if (!destination) {
	      return false;
	    }

	    if (id === descriptor.droppableId) {
	      return false;
	    }

	    return id === destination.droppableId;
	  };

	  var getMapProps = index$1(function (isDraggingOver, draggingOverWith, placeholder) {
	    return {
	      isDraggingOver: isDraggingOver,
	      draggingOverWith: draggingOverWith,
	      placeholder: placeholder
	    };
	  });

	  var getDefault = function getDefault() {
	    return getMapProps(false, null, null);
	  };

	  var selector = function selector(state, ownProps) {
	    if (ownProps.isDropDisabled) {
	      return getDefault();
	    }

	    var id = ownProps.droppableId;

	    if (state.isDragging) {
	      var destination = state.impact.destination;
	      var isDraggingOver = getIsDraggingOver(id, destination);
	      var draggableId = state.critical.draggable.id;
	      var draggingOverWith = isDraggingOver ? draggableId : null;
	      var draggable = state.dimensions.draggables[draggableId];
	      var placeholder = shouldUsePlaceholder(id, draggable.descriptor, destination) ? draggable.placeholder : null;
	      return getMapProps(isDraggingOver, draggingOverWith, placeholder);
	    }

	    if (state.phase === 'DROP_ANIMATING') {
	      var _destination = state.pending.impact.destination;

	      var _isDraggingOver = getIsDraggingOver(id, _destination);

	      var _draggableId = state.pending.result.draggableId;

	      var _draggingOverWith = _isDraggingOver ? _draggableId : null;

	      var _draggable = state.dimensions.draggables[_draggableId];

	      var _placeholder = shouldUsePlaceholder(id, _draggable.descriptor, _destination) ? _draggable.placeholder : null;

	      return getMapProps(_isDraggingOver, _draggingOverWith, _placeholder);
	    }

	    return getDefault();
	  };

	  return selector;
	};
	var connectedDroppable = connect(makeMapStateToProps, null, null, {
	  storeKey: storeKey,
	  pure: true,
	  areStatePropsEqual: isStrictEqual
	})(Droppable);
	connectedDroppable.defaultProps = {
	  type: 'DEFAULT',
	  isDropDisabled: false,
	  direction: 'vertical',
	  ignoreContainerClipping: false
	};

	var _DraggableDimensionPu;

	var DraggableDimensionPublisher = function (_Component) {
	  _inheritsLoose$1(DraggableDimensionPublisher, _Component);

	  function DraggableDimensionPublisher() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _Component.call.apply(_Component, [this].concat(args)) || this;
	    _this.publishedDescriptor = null;
	    _this.getMemoizedDescriptor = index$1(function (id, index, droppableId, type) {
	      return {
	        id: id,
	        index: index,
	        droppableId: droppableId,
	        type: type
	      };
	    });

	    _this.publish = function () {
	      var marshal = _this.context[dimensionMarshalKey];

	      var descriptor = _this.getMemoizedDescriptor(_this.props.draggableId, _this.props.index, _this.props.droppableId, _this.props.type);

	      if (!_this.publishedDescriptor) {
	        marshal.registerDraggable(descriptor, _this.getDimension);
	        _this.publishedDescriptor = descriptor;
	        return;
	      }

	      if (descriptor === _this.publishedDescriptor) {
	        return;
	      }

	      marshal.updateDraggable(_this.publishedDescriptor, descriptor, _this.getDimension);
	      _this.publishedDescriptor = descriptor;
	    };

	    _this.unpublish = function () {
	      !_this.publishedDescriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot unpublish descriptor when none is published') : invariant(false) : void 0;
	      var marshal = _this.context[dimensionMarshalKey];
	      marshal.unregisterDraggable(_this.publishedDescriptor);
	      _this.publishedDescriptor = null;
	    };

	    _this.getDimension = function (windowScroll) {
	      var targetRef = _this.props.getDraggableRef();

	      var descriptor = _this.publishedDescriptor;
	      !targetRef ? process.env.NODE_ENV !== "production" ? invariant(false, 'DraggableDimensionPublisher cannot calculate a dimension when not attached to the DOM') : invariant(false) : void 0;
	      !descriptor ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get dimension for unpublished draggable') : invariant(false) : void 0;
	      var computedStyles = window.getComputedStyle(targetRef);
	      var borderBox = targetRef.getBoundingClientRect();
	      var client = calculateBox(borderBox, computedStyles);
	      var page = withScroll(client, windowScroll);
	      var placeholder = {
	        client: client,
	        tagName: targetRef.tagName.toLowerCase(),
	        display: computedStyles.display
	      };
	      var dimension = {
	        descriptor: descriptor,
	        placeholder: placeholder,
	        client: client,
	        page: page
	      };
	      return dimension;
	    };

	    return _this;
	  }

	  var _proto = DraggableDimensionPublisher.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.publish();
	  };

	  _proto.componentDidUpdate = function componentDidUpdate() {
	    this.publish();
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.unpublish();
	  };

	  _proto.render = function render() {
	    return this.props.children;
	  };

	  return DraggableDimensionPublisher;
	}(React.Component);

	DraggableDimensionPublisher.contextTypes = (_DraggableDimensionPu = {}, _DraggableDimensionPu[dimensionMarshalKey] = propTypes.object.isRequired, _DraggableDimensionPu);

	var DoubleRenderBlocker = function (_React$Component) {
	  _inheritsLoose$1(DoubleRenderBlocker, _React$Component);

	  function DoubleRenderBlocker() {
	    return _React$Component.apply(this, arguments) || this;
	  }

	  var _proto = DoubleRenderBlocker.prototype;

	  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    if (isEqual(origin, nextProps.change)) {
	      return true;
	    }

	    if (isEqual(this.props.change, nextProps.change)) {
	      return false;
	    }

	    return true;
	  };

	  _proto.render = function render() {
	    return this.props.children(this.props.change);
	  };

	  return DoubleRenderBlocker;
	}(React__default.Component);

	var Moveable = function (_Component) {
	  _inheritsLoose$1(Moveable, _Component);

	  function Moveable() {
	    return _Component.apply(this, arguments) || this;
	  }

	  var _proto2 = Moveable.prototype;

	  _proto2.getFinal = function getFinal() {
	    var destination = this.props.destination;
	    var speed = this.props.speed;

	    if (speed === 'INSTANT') {
	      return destination;
	    }

	    var config = speed === 'FAST' ? physics.fast : physics.standard;
	    return {
	      x: reactMotion_4(destination.x, config),
	      y: reactMotion_4(destination.y, config)
	    };
	  };

	  _proto2.render = function render() {
	    var _this = this;

	    var final = this.getFinal();
	    return React__default.createElement(reactMotion_1, {
	      defaultStyle: origin,
	      style: final,
	      onRest: this.props.onMoveEnd
	    }, function (current) {
	      var _this$props = _this.props,
	          speed = _this$props.speed,
	          destination = _this$props.destination,
	          children = _this$props.children;
	      var target = speed === 'INSTANT' ? destination : current;
	      return React__default.createElement(DoubleRenderBlocker, {
	        change: target
	      }, children);
	    });
	  };

	  return Moveable;
	}(React.Component);

	Moveable.defaultProps = {
	  destination: origin
	};

	var getWindowFromRef = (function (ref) {
	  return ref ? ref.ownerDocument.defaultView : window;
	});

	var selector = "[" + dragHandle + "]";

	var isSVG = function isSVG(el) {
	  if (typeof SVGElement === 'undefined') {
	    return false;
	  }

	  return el instanceof SVGElement;
	};

	var throwIfSVG = function throwIfSVG(el) {
	  !!isSVG(el) ? process.env.NODE_ENV !== "production" ? invariant(false, "A drag handle cannot be an SVGElement: it has inconsistent focus support.\n\n    More information: https://github.com/atlassian/react-beautiful-dnd/tree/master/docs/guides/dragging-svgs.md") : invariant(false) : void 0;
	};

	var getDragHandleRef = function getDragHandleRef(draggableRef) {
	  if (draggableRef.hasAttribute(dragHandle)) {
	    throwIfSVG(draggableRef);
	    return draggableRef;
	  }

	  var el = draggableRef.querySelector(selector);
	  throwIfSVG(draggableRef);
	  !el ? process.env.NODE_ENV !== "production" ? invariant(false, "\n      Cannot find drag handle element inside of Draggable.\n      Please be sure to apply the {...provided.dragHandleProps} to your Draggable\n\n      More information: https://github.com/atlassian/react-beautiful-dnd#draggable\n    ") : invariant(false) : void 0;
	  !(el instanceof HTMLElement) ? process.env.NODE_ENV !== "production" ? invariant(false, 'A drag handle must be a HTMLElement') : invariant(false) : void 0;
	  return el;
	};

	var retainingFocusFor = null;
	var listenerOptions$1 = {
	  capture: true
	};

	var clearRetentionOnFocusChange = function () {
	  var isBound = false;

	  var bind = function bind() {
	    if (isBound) {
	      return;
	    }

	    isBound = true;
	    window.addEventListener('focus', onWindowFocusChange, listenerOptions$1);
	  };

	  var unbind = function unbind() {
	    if (!isBound) {
	      return;
	    }

	    isBound = false;
	    window.removeEventListener('focus', onWindowFocusChange, listenerOptions$1);
	  };

	  var onWindowFocusChange = function onWindowFocusChange() {
	    unbind();
	    retainingFocusFor = null;
	  };

	  var result = function result() {
	    return bind();
	  };

	  result.cancel = function () {
	    return unbind();
	  };

	  return result;
	}();

	var retain = function retain(id) {
	  retainingFocusFor = id;
	  clearRetentionOnFocusChange();
	};

	var tryRestoreFocus = function tryRestoreFocus(id, draggableRef) {
	  if (!retainingFocusFor) {
	    return;
	  }

	  if (id !== retainingFocusFor) {
	    return;
	  }

	  retainingFocusFor = null;
	  clearRetentionOnFocusChange.cancel();
	  var dragHandleRef = getDragHandleRef(draggableRef);

	  if (!dragHandleRef) {
	    console.warn('Could not find drag handle in the DOM to focus on it');
	    return;
	  }

	  dragHandleRef.focus();
	};

	var retainer = {
	  retain: retain,
	  tryRestoreFocus: tryRestoreFocus
	};

	var interactiveTagNames = {
	  input: true,
	  button: true,
	  textarea: true,
	  select: true,
	  option: true,
	  optgroup: true,
	  video: true,
	  audio: true
	};

	var isAnInteractiveElement = function isAnInteractiveElement(parent, current) {
	  if (current == null) {
	    return false;
	  }

	  var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);

	  if (hasAnInteractiveTag) {
	    return true;
	  }

	  var attribute = current.getAttribute('contenteditable');

	  if (attribute === 'true' || attribute === '') {
	    return true;
	  }

	  if (current === parent) {
	    return false;
	  }

	  return isAnInteractiveElement(parent, current.parentElement);
	};

	var shouldAllowDraggingFromTarget = (function (event, props) {
	  if (props.canDragInteractiveElements) {
	    return true;
	  }

	  var target = event.target,
	      currentTarget = event.currentTarget;

	  if (!(target instanceof Element) || !(currentTarget instanceof Element)) {
	    return true;
	  }

	  return !isAnInteractiveElement(currentTarget, target);
	});

	var createScheduler = (function (callbacks) {
	  var memoizedMove = index$1(function (x, y) {
	    var point = {
	      x: x,
	      y: y
	    };
	    callbacks.onMove(point);
	  });
	  var move = index$2(function (point) {
	    return memoizedMove(point.x, point.y);
	  });
	  var moveUp = index$2(callbacks.onMoveUp);
	  var moveDown = index$2(callbacks.onMoveDown);
	  var moveRight = index$2(callbacks.onMoveRight);
	  var moveLeft = index$2(callbacks.onMoveLeft);
	  var windowScrollMove = index$2(callbacks.onWindowScroll);

	  var cancel = function cancel() {
	    move.cancel();
	    moveUp.cancel();
	    moveDown.cancel();
	    moveRight.cancel();
	    moveLeft.cancel();
	    windowScrollMove.cancel();
	  };

	  return {
	    move: move,
	    moveUp: moveUp,
	    moveDown: moveDown,
	    moveRight: moveRight,
	    moveLeft: moveLeft,
	    windowScrollMove: windowScrollMove,
	    cancel: cancel
	  };
	});

	var sloppyClickThreshold = 5;
	var isSloppyClickThresholdExceeded = (function (original, current) {
	  return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;
	});

	var tab = 9;
	var enter = 13;
	var escape$1 = 27;
	var space = 32;
	var pageUp = 33;
	var pageDown = 34;
	var end = 35;
	var home = 36;
	var arrowLeft = 37;
	var arrowUp = 38;
	var arrowRight = 39;
	var arrowDown = 40;

	var _preventedKeys;
	var preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);
	var preventStandardKeyEvents = (function (event) {
	  if (preventedKeys[event.keyCode]) {
	    event.preventDefault();
	  }
	});

	var getOptions = function getOptions(shared, fromBinding) {
	  return _extends$1({}, shared, fromBinding);
	};

	var bindEvents = function bindEvents(el, bindings, sharedOptions) {
	  bindings.forEach(function (binding) {
	    var options = getOptions(sharedOptions, binding.options);
	    el.addEventListener(binding.eventName, binding.fn, options);
	  });
	};
	var unbindEvents = function unbindEvents(el, bindings, sharedOptions) {
	  bindings.forEach(function (binding) {
	    var options = getOptions(sharedOptions, binding.options);
	    el.removeEventListener(binding.eventName, binding.fn, options);
	  });
	};

	var sharedOptions = {
	  capture: true
	};
	var createPostDragEventPreventer = (function (getWindow) {
	  var isBound = false;

	  var bind = function bind() {
	    if (isBound) {
	      return;
	    }

	    isBound = true;
	    bindEvents(getWindow(), pointerEvents, sharedOptions);
	  };

	  var unbind = function unbind() {
	    if (!isBound) {
	      return;
	    }

	    isBound = false;
	    unbindEvents(getWindow(), pointerEvents, sharedOptions);
	  };

	  var pointerEvents = [{
	    eventName: 'click',
	    fn: function fn(event) {
	      event.preventDefault();
	      unbind();
	    }
	  }, {
	    eventName: 'mousedown',
	    fn: unbind
	  }, {
	    eventName: 'touchstart',
	    fn: unbind
	  }];

	  var preventNext = function preventNext() {
	    if (isBound) {
	      unbind();
	    }

	    bind();
	  };

	  var preventer = {
	    preventNext: preventNext,
	    abort: unbind
	  };
	  return preventer;
	});

	var createEventMarshal = (function () {
	  var isMouseDownHandled = false;

	  var handle = function handle() {
	    !!isMouseDownHandled ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot handle mouse down as it is already handled') : invariant(false) : void 0;
	    isMouseDownHandled = true;
	  };

	  var isHandled = function isHandled() {
	    return isMouseDownHandled;
	  };

	  var reset = function reset() {
	    isMouseDownHandled = false;
	  };

	  return {
	    handle: handle,
	    isHandled: isHandled,
	    reset: reset
	  };
	});

	var supportedEventName = function () {
	  var base = 'visibilitychange';

	  if (typeof document === 'undefined') {
	    return base;
	  }

	  var candidates = [base, "ms" + base, "webkit" + base, "moz" + base, "o" + base];
	  var supported = candidates.find(function (eventName) {
	    return "on" + eventName in document;
	  });
	  return supported || base;
	}();

	var primaryButton = 0;

	var noop$1 = function noop() {};

	var mouseDownMarshal = createEventMarshal();
	var createMouseSensor = (function (_ref) {
	  var callbacks = _ref.callbacks,
	      getWindow = _ref.getWindow,
	      canStartCapturing = _ref.canStartCapturing;
	  var state = {
	    isDragging: false,
	    pending: null
	  };

	  var setState = function setState(newState) {
	    state = newState;
	  };

	  var isDragging = function isDragging() {
	    return state.isDragging;
	  };

	  var isCapturing = function isCapturing() {
	    return Boolean(state.pending || state.isDragging);
	  };

	  var schedule = createScheduler(callbacks);
	  var postDragEventPreventer = createPostDragEventPreventer(getWindow);

	  var startDragging = function startDragging(fn) {
	    if (fn === void 0) {
	      fn = noop$1;
	    }

	    setState({
	      pending: null,
	      isDragging: true
	    });
	    fn();
	  };

	  var stopDragging = function stopDragging(fn, shouldBlockClick) {
	    if (fn === void 0) {
	      fn = noop$1;
	    }

	    if (shouldBlockClick === void 0) {
	      shouldBlockClick = true;
	    }

	    schedule.cancel();
	    unbindWindowEvents();
	    mouseDownMarshal.reset();

	    if (shouldBlockClick) {
	      postDragEventPreventer.preventNext();
	    }

	    setState({
	      isDragging: false,
	      pending: null
	    });
	    fn();
	  };

	  var startPendingDrag = function startPendingDrag(point) {
	    setState({
	      pending: point,
	      isDragging: false
	    });
	    bindWindowEvents();
	  };

	  var stopPendingDrag = function stopPendingDrag() {
	    stopDragging(noop$1, false);
	  };

	  var kill = function kill(fn) {
	    if (fn === void 0) {
	      fn = noop$1;
	    }

	    if (state.pending) {
	      stopPendingDrag();
	      return;
	    }

	    stopDragging(fn);
	  };

	  var unmount = function unmount() {
	    kill();
	    postDragEventPreventer.abort();
	  };

	  var cancel = function cancel() {
	    kill(callbacks.onCancel);
	  };

	  var windowBindings = [{
	    eventName: 'mousemove',
	    fn: function fn(event) {
	      var button = event.button,
	          clientX = event.clientX,
	          clientY = event.clientY;

	      if (button !== primaryButton) {
	        return;
	      }

	      var point = {
	        x: clientX,
	        y: clientY
	      };

	      if (state.isDragging) {
	        event.preventDefault();
	        schedule.move(point);
	        return;
	      }

	      if (!state.pending) {
	        kill();
	        process.env.NODE_ENV !== "production" ? invariant(false, 'Expected there to be a pending drag') : invariant(false);
	      }

	      if (!isSloppyClickThresholdExceeded(state.pending, point)) {
	        return;
	      }

	      event.preventDefault();
	      startDragging(function () {
	        return callbacks.onLift({
	          clientSelection: point,
	          autoScrollMode: 'FLUID'
	        });
	      });
	    }
	  }, {
	    eventName: 'mouseup',
	    fn: function fn(event) {
	      if (state.pending) {
	        stopPendingDrag();
	        return;
	      }

	      event.preventDefault();
	      stopDragging(callbacks.onDrop);
	    }
	  }, {
	    eventName: 'mousedown',
	    fn: function fn(event) {
	      if (state.isDragging) {
	        event.preventDefault();
	      }

	      stopDragging(callbacks.onCancel);
	    }
	  }, {
	    eventName: 'keydown',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        cancel();
	        return;
	      }

	      if (event.keyCode === escape$1) {
	        event.preventDefault();
	        cancel();
	        return;
	      }

	      preventStandardKeyEvents(event);
	    }
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'scroll',
	    options: {
	      passive: true,
	      capture: false
	    },
	    fn: function fn() {
	      if (state.pending) {
	        stopPendingDrag();
	        return;
	      }

	      schedule.windowScrollMove();
	    }
	  }, {
	    eventName: 'webkitmouseforcechanged',
	    fn: function fn(event) {
	      if (event.webkitForce == null || MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN == null) {
	        if (process.env.NODE_ENV !== 'production') {
	          console.warn('handling a mouse force changed event when it is not supported');
	        }

	        return;
	      }

	      var forcePressThreshold = MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN;
	      var isForcePressing = event.webkitForce >= forcePressThreshold;

	      if (isForcePressing) {
	        cancel();
	      }
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];

	  var bindWindowEvents = function bindWindowEvents() {
	    var win = getWindow();
	    bindEvents(win, windowBindings, {
	      capture: true
	    });
	  };

	  var unbindWindowEvents = function unbindWindowEvents() {
	    var win = getWindow();
	    unbindEvents(win, windowBindings, {
	      capture: true
	    });
	  };

	  var onMouseDown = function onMouseDown(event) {
	    if (mouseDownMarshal.isHandled()) {
	      return;
	    }

	    !!isCapturing() ? process.env.NODE_ENV !== "production" ? invariant(false, 'Should not be able to perform a mouse down while a drag or pending drag is occurring') : invariant(false) : void 0;

	    if (!canStartCapturing(event)) {
	      return;
	    }

	    if (event.button !== primaryButton) {
	      return;
	    }

	    if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {
	      return;
	    }

	    mouseDownMarshal.handle();
	    event.preventDefault();
	    var point = {
	      x: event.clientX,
	      y: event.clientY
	    };
	    startPendingDrag(point);
	  };

	  var sensor = {
	    onMouseDown: onMouseDown,
	    kill: kill,
	    isCapturing: isCapturing,
	    isDragging: isDragging,
	    unmount: unmount
	  };
	  return sensor;
	});

	var getBorderBoxCenterPosition = (function (el) {
	  return getRect(el.getBoundingClientRect()).center;
	});

	var _scrollJumpKeys;
	var scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end] = true, _scrollJumpKeys);

	var noop$1$1 = function noop() {};

	var createKeyboardSensor = (function (_ref) {
	  var callbacks = _ref.callbacks,
	      getWindow = _ref.getWindow,
	      getDraggableRef = _ref.getDraggableRef,
	      canStartCapturing = _ref.canStartCapturing;
	  var state = {
	    isDragging: false
	  };

	  var setState = function setState(newState) {
	    state = newState;
	  };

	  var startDragging = function startDragging(fn) {
	    if (fn === void 0) {
	      fn = noop$1$1;
	    }

	    setState({
	      isDragging: true
	    });
	    bindWindowEvents();
	    fn();
	  };

	  var stopDragging = function stopDragging(fn) {
	    if (fn === void 0) {
	      fn = noop$1$1;
	    }

	    schedule.cancel();
	    unbindWindowEvents();
	    setState({
	      isDragging: false
	    });
	    fn();
	  };

	  var kill = function kill() {
	    return stopDragging();
	  };

	  var cancel = function cancel() {
	    stopDragging(callbacks.onCancel);
	  };

	  var isDragging = function isDragging() {
	    return state.isDragging;
	  };

	  var schedule = createScheduler(callbacks);

	  var onKeyDown = function onKeyDown(event) {
	    if (!isDragging()) {
	      if (event.defaultPrevented) {
	        return;
	      }

	      if (!canStartCapturing(event)) {
	        return;
	      }

	      if (event.keyCode !== space) {
	        return;
	      }

	      var ref = getDraggableRef();
	      !ref ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot start a keyboard drag without a draggable ref') : invariant(false) : void 0;
	      var center = getBorderBoxCenterPosition(ref);
	      event.preventDefault();
	      startDragging(function () {
	        return callbacks.onLift({
	          clientSelection: center,
	          autoScrollMode: 'JUMP'
	        });
	      });
	      return;
	    }

	    if (event.keyCode === escape$1) {
	      event.preventDefault();
	      cancel();
	      return;
	    }

	    if (event.keyCode === space) {
	      event.preventDefault();
	      stopDragging(callbacks.onDrop);
	      return;
	    }

	    if (event.keyCode === arrowDown) {
	      event.preventDefault();
	      schedule.moveDown();
	      return;
	    }

	    if (event.keyCode === arrowUp) {
	      event.preventDefault();
	      schedule.moveUp();
	      return;
	    }

	    if (event.keyCode === arrowRight) {
	      event.preventDefault();
	      schedule.moveRight();
	      return;
	    }

	    if (event.keyCode === arrowLeft) {
	      event.preventDefault();
	      schedule.moveLeft();
	      return;
	    }

	    if (scrollJumpKeys[event.keyCode]) {
	      event.preventDefault();
	      return;
	    }

	    preventStandardKeyEvents(event);
	  };

	  var windowBindings = [{
	    eventName: 'mousedown',
	    fn: cancel
	  }, {
	    eventName: 'mouseup',
	    fn: cancel
	  }, {
	    eventName: 'click',
	    fn: cancel
	  }, {
	    eventName: 'touchstart',
	    fn: cancel
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'wheel',
	    fn: cancel
	  }, {
	    eventName: 'scroll',
	    options: {
	      capture: false
	    },
	    fn: callbacks.onWindowScroll
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];

	  var bindWindowEvents = function bindWindowEvents() {
	    bindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };

	  var unbindWindowEvents = function unbindWindowEvents() {
	    unbindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };

	  var sensor = {
	    onKeyDown: onKeyDown,
	    kill: kill,
	    isDragging: isDragging,
	    isCapturing: isDragging,
	    unmount: kill
	  };
	  return sensor;
	});

	var timeForLongPress = 150;
	var forcePressThreshold = 0.15;
	var touchStartMarshal = createEventMarshal();

	var noop$2 = function noop() {};

	var webkitHack = function () {
	  var stub = {
	    preventTouchMove: noop$2,
	    releaseTouchMove: noop$2
	  };

	  if (typeof window === 'undefined') {
	    return stub;
	  }

	  if (!('ontouchstart' in window)) {
	    return stub;
	  }

	  var isBlocking = false;
	  window.addEventListener('touchmove', function (event) {
	    if (!isBlocking) {
	      return;
	    }

	    if (event.defaultPrevented) {
	      return;
	    }

	    event.preventDefault();
	  }, {
	    passive: false,
	    capture: false
	  });

	  var preventTouchMove = function preventTouchMove() {
	    isBlocking = true;
	  };

	  var releaseTouchMove = function releaseTouchMove() {
	    isBlocking = false;
	  };

	  return {
	    preventTouchMove: preventTouchMove,
	    releaseTouchMove: releaseTouchMove
	  };
	}();

	var initial = {
	  isDragging: false,
	  pending: null,
	  hasMoved: false,
	  longPressTimerId: null
	};
	var createTouchSensor = (function (_ref) {
	  var callbacks = _ref.callbacks,
	      getWindow = _ref.getWindow,
	      canStartCapturing = _ref.canStartCapturing;
	  var state = initial;

	  var setState = function setState(partial) {
	    state = _extends$1({}, state, partial);
	  };

	  var isDragging = function isDragging() {
	    return state.isDragging;
	  };

	  var isCapturing = function isCapturing() {
	    return Boolean(state.pending || state.isDragging || state.longPressTimerId);
	  };

	  var schedule = createScheduler(callbacks);
	  var postDragEventPreventer = createPostDragEventPreventer(getWindow);

	  var startDragging = function startDragging() {
	    var pending = state.pending;

	    if (!pending) {
	      kill();
	      process.env.NODE_ENV !== "production" ? invariant(false, 'cannot start a touch drag without a pending position') : invariant(false);
	    }

	    setState({
	      isDragging: true,
	      hasMoved: false,
	      pending: null,
	      longPressTimerId: null
	    });
	    callbacks.onLift({
	      clientSelection: pending,
	      autoScrollMode: 'FLUID'
	    });
	  };

	  var stopDragging = function stopDragging(fn) {
	    if (fn === void 0) {
	      fn = noop$2;
	    }

	    schedule.cancel();
	    touchStartMarshal.reset();
	    webkitHack.releaseTouchMove();
	    unbindWindowEvents();
	    postDragEventPreventer.preventNext();
	    setState(initial);
	    fn();
	  };

	  var startPendingDrag = function startPendingDrag(event) {
	    var touch = event.touches[0];
	    var clientX = touch.clientX,
	        clientY = touch.clientY;
	    var point = {
	      x: clientX,
	      y: clientY
	    };
	    var longPressTimerId = setTimeout(startDragging, timeForLongPress);
	    setState({
	      longPressTimerId: longPressTimerId,
	      pending: point,
	      isDragging: false,
	      hasMoved: false
	    });
	    bindWindowEvents();
	  };

	  var stopPendingDrag = function stopPendingDrag() {
	    if (state.longPressTimerId) {
	      clearTimeout(state.longPressTimerId);
	    }

	    schedule.cancel();
	    touchStartMarshal.reset();
	    webkitHack.releaseTouchMove();
	    unbindWindowEvents();
	    setState(initial);
	  };

	  var kill = function kill(fn) {
	    if (fn === void 0) {
	      fn = noop$2;
	    }

	    if (state.pending) {
	      stopPendingDrag();
	      return;
	    }

	    stopDragging(fn);
	  };

	  var unmount = function unmount() {
	    kill();
	    postDragEventPreventer.abort();
	  };

	  var cancel = function cancel() {
	    kill(callbacks.onCancel);
	  };

	  var windowBindings = [{
	    eventName: 'touchmove',
	    options: {
	      passive: false
	    },
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        stopPendingDrag();
	        return;
	      }

	      if (!state.hasMoved) {
	        setState({
	          hasMoved: true
	        });
	      }

	      var _event$touches$ = event.touches[0],
	          clientX = _event$touches$.clientX,
	          clientY = _event$touches$.clientY;
	      var point = {
	        x: clientX,
	        y: clientY
	      };
	      event.preventDefault();
	      schedule.move(point);
	    }
	  }, {
	    eventName: 'touchend',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        stopPendingDrag();
	        return;
	      }

	      event.preventDefault();
	      stopDragging(callbacks.onDrop);
	    }
	  }, {
	    eventName: 'touchcancel',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        stopPendingDrag();
	        return;
	      }

	      event.preventDefault();
	      stopDragging(callbacks.onCancel);
	    }
	  }, {
	    eventName: 'touchstart',
	    fn: cancel
	  }, {
	    eventName: 'orientationchange',
	    fn: cancel
	  }, {
	    eventName: 'resize',
	    fn: cancel
	  }, {
	    eventName: 'scroll',
	    options: {
	      passive: true,
	      capture: false
	    },
	    fn: function fn() {
	      if (state.pending) {
	        stopPendingDrag();
	        return;
	      }

	      schedule.windowScrollMove();
	    }
	  }, {
	    eventName: 'contextmenu',
	    fn: function fn(event) {
	      event.preventDefault();
	    }
	  }, {
	    eventName: 'keydown',
	    fn: function fn(event) {
	      if (!state.isDragging) {
	        cancel();
	        return;
	      }

	      if (event.keyCode === escape$1) {
	        event.preventDefault();
	      }

	      cancel();
	    }
	  }, {
	    eventName: 'touchforcechange',
	    fn: function fn(event) {
	      if (state.hasMoved) {
	        event.preventDefault();
	        return;
	      }

	      var touch = event.touches[0];

	      if (touch.force >= forcePressThreshold) {
	        cancel();
	      }
	    }
	  }, {
	    eventName: supportedEventName,
	    fn: cancel
	  }];

	  var bindWindowEvents = function bindWindowEvents() {
	    bindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };

	  var unbindWindowEvents = function unbindWindowEvents() {
	    unbindEvents(getWindow(), windowBindings, {
	      capture: true
	    });
	  };

	  var onTouchStart = function onTouchStart(event) {
	    if (touchStartMarshal.isHandled()) {
	      return;
	    }

	    !!isCapturing() ? process.env.NODE_ENV !== "production" ? invariant(false, 'Should not be able to perform a touch start while a drag or pending drag is occurring') : invariant(false) : void 0;

	    if (!canStartCapturing(event)) {
	      return;
	    }

	    touchStartMarshal.handle();
	    webkitHack.preventTouchMove();
	    startPendingDrag(event);
	  };

	  var sensor = {
	    onTouchStart: onTouchStart,
	    kill: kill,
	    isCapturing: isCapturing,
	    isDragging: isDragging,
	    unmount: unmount
	  };
	  return sensor;
	});

	var _DragHandle$contextTy;

	var preventHtml5Dnd = function preventHtml5Dnd(event) {
	  event.preventDefault();
	};

	var DragHandle = function (_Component) {
	  _inheritsLoose$1(DragHandle, _Component);

	  function DragHandle(props, context) {
	    var _this;

	    _this = _Component.call(this, props, context) || this;
	    _this.mouseSensor = void 0;
	    _this.keyboardSensor = void 0;
	    _this.touchSensor = void 0;
	    _this.sensors = void 0;
	    _this.styleContext = void 0;
	    _this.canLift = void 0;
	    _this.isFocused = false;
	    _this.lastDraggableRef = void 0;

	    _this.onFocus = function () {
	      _this.isFocused = true;
	    };

	    _this.onBlur = function () {
	      _this.isFocused = false;
	    };

	    _this.onKeyDown = function (event) {
	      if (_this.mouseSensor.isCapturing() || _this.touchSensor.isCapturing()) {
	        return;
	      }

	      _this.keyboardSensor.onKeyDown(event);
	    };

	    _this.onMouseDown = function (event) {
	      if (_this.keyboardSensor.isCapturing() || _this.mouseSensor.isCapturing()) {
	        return;
	      }

	      _this.mouseSensor.onMouseDown(event);
	    };

	    _this.onTouchStart = function (event) {
	      if (_this.mouseSensor.isCapturing() || _this.keyboardSensor.isCapturing()) {
	        return;
	      }

	      _this.touchSensor.onTouchStart(event);
	    };

	    _this.canStartCapturing = function (event) {
	      if (_this.isAnySensorCapturing()) {
	        return false;
	      }

	      if (!_this.canLift(_this.props.draggableId)) {
	        return false;
	      }

	      return shouldAllowDraggingFromTarget(event, _this.props);
	    };

	    _this.isAnySensorCapturing = function () {
	      return _this.sensors.some(function (sensor) {
	        return sensor.isCapturing();
	      });
	    };

	    _this.getProvided = index$1(function (isEnabled) {
	      if (!isEnabled) {
	        return null;
	      }

	      var provided = {
	        onMouseDown: _this.onMouseDown,
	        onKeyDown: _this.onKeyDown,
	        onTouchStart: _this.onTouchStart,
	        onFocus: _this.onFocus,
	        onBlur: _this.onBlur,
	        tabIndex: 0,
	        'data-react-beautiful-dnd-drag-handle': _this.styleContext,
	        'aria-roledescription': 'Draggable item. Press space bar to lift',
	        draggable: false,
	        onDragStart: preventHtml5Dnd
	      };
	      return provided;
	    });

	    var getWindow = function getWindow() {
	      return getWindowFromRef(_this.props.getDraggableRef());
	    };

	    var args = {
	      callbacks: _this.props.callbacks,
	      getDraggableRef: _this.props.getDraggableRef,
	      getWindow: getWindow,
	      canStartCapturing: _this.canStartCapturing
	    };
	    _this.mouseSensor = createMouseSensor(args);
	    _this.keyboardSensor = createKeyboardSensor(args);
	    _this.touchSensor = createTouchSensor(args);
	    _this.sensors = [_this.mouseSensor, _this.keyboardSensor, _this.touchSensor];
	    _this.styleContext = context[styleContextKey];
	    _this.canLift = context[canLiftContextKey];
	    return _this;
	  }

	  var _proto = DragHandle.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    var draggableRef = this.props.getDraggableRef();
	    this.lastDraggableRef = draggableRef;
	    !draggableRef ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot get draggable ref from drag handle') : invariant(false) : void 0;

	    if (!this.props.isEnabled) {
	      return;
	    }

	    var dragHandleRef = getDragHandleRef(draggableRef);
	    retainer.tryRestoreFocus(this.props.draggableId, dragHandleRef);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var _this2 = this;

	    var ref = this.props.getDraggableRef();

	    if (ref !== this.lastDraggableRef) {
	      this.lastDraggableRef = ref;

	      if (!ref || !this.isFocused) {
	        return;
	      }

	      if (!this.props.isEnabled) {
	        return;
	      }

	      getDragHandleRef(ref).focus();
	    }

	    var isCapturing = this.isAnySensorCapturing();

	    if (!isCapturing) {
	      return;
	    }

	    var isDragStopping = prevProps.isDragging && !this.props.isDragging;

	    if (isDragStopping) {
	      this.sensors.forEach(function (sensor) {
	        if (sensor.isCapturing()) {
	          sensor.kill();
	        }
	      });
	    }

	    if (this.props.isEnabled) {
	      return;
	    }

	    this.sensors.forEach(function (sensor) {
	      if (!sensor.isCapturing()) {
	        return;
	      }

	      var wasDragging = sensor.isDragging();
	      sensor.kill();

	      if (wasDragging) {
	        if (process.env.NODE_ENV !== 'production') {
	          console.warn('You have disabled dragging on a Draggable while it was dragging. The drag has been cancelled');
	        }

	        _this2.props.callbacks.onCancel();
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    var _this3 = this;

	    this.sensors.forEach(function (sensor) {
	      var wasDragging = sensor.isDragging();
	      sensor.unmount();

	      if (wasDragging) {
	        _this3.props.callbacks.onCancel();
	      }
	    });

	    var shouldRetainFocus = function () {
	      if (!_this3.props.isEnabled) {
	        return false;
	      }

	      if (!_this3.isFocused) {
	        return false;
	      }

	      return _this3.props.isDragging || _this3.props.isDropAnimating;
	    }();

	    if (shouldRetainFocus) {
	      retainer.retain(this.props.draggableId);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        isEnabled = _this$props.isEnabled;
	    return children(this.getProvided(isEnabled));
	  };

	  return DragHandle;
	}(React.Component);

	DragHandle.contextTypes = (_DragHandle$contextTy = {}, _DragHandle$contextTy[styleContextKey] = propTypes.string.isRequired, _DragHandle$contextTy[canLiftContextKey] = propTypes.func.isRequired, _DragHandle$contextTy);

	var getWindowScroll$1 = (function () {
	  return {
	    x: window.pageXOffset,
	    y: window.pageYOffset
	  };
	});

	var getViewport = (function () {
	  var scroll = getWindowScroll$1();
	  var top = scroll.y;
	  var left = scroll.x;
	  var doc = document.documentElement;
	  !doc ? process.env.NODE_ENV !== "production" ? invariant(false, 'Could not find document.documentElement') : invariant(false) : void 0;
	  var width = doc.clientWidth;
	  var height = doc.clientHeight;
	  var right = left + width;
	  var bottom = top + height;
	  var frame = getRect({
	    top: top,
	    left: left,
	    right: right,
	    bottom: bottom
	  });
	  var maxScroll = getMaxScroll({
	    scrollHeight: doc.scrollHeight,
	    scrollWidth: doc.scrollWidth,
	    width: frame.width,
	    height: frame.height
	  });
	  var viewport = {
	    frame: frame,
	    scroll: {
	      initial: scroll,
	      current: scroll,
	      max: maxScroll,
	      diff: {
	        value: origin,
	        displacement: origin
	      }
	    }
	  };
	  return viewport;
	});

	var _Draggable$contextTyp;
	var zIndexOptions = {
	  dragging: 5000,
	  dropAnimating: 4500
	};

	var getTranslate = function getTranslate(offset) {
	  if (isEqual(offset, origin)) {
	    return null;
	  }

	  return "translate(" + offset.x + "px, " + offset.y + "px)";
	};

	var getSpeed$1 = function getSpeed(isDragging, shouldAnimateDragMovement, isDropAnimating) {
	  if (isDropAnimating) {
	    return 'STANDARD';
	  }

	  if (isDragging && shouldAnimateDragMovement) {
	    return 'FAST';
	  }

	  return 'INSTANT';
	};

	var Draggable = function (_Component) {
	  _inheritsLoose$1(Draggable, _Component);

	  function Draggable(props, context) {
	    var _this;

	    _this = _Component.call(this, props, context) || this;
	    _this.callbacks = void 0;
	    _this.styleContext = void 0;
	    _this.ref = null;

	    _this.onMoveEnd = function () {
	      if (_this.props.isDropAnimating) {
	        _this.props.dropAnimationFinished();
	      }
	    };

	    _this.onLift = function (options) {
	      start('LIFT');
	      var ref = _this.ref;
	      !ref ? process.env.NODE_ENV !== "production" ? invariant(false) : invariant(false) : void 0;
	      !!_this.props.isDragDisabled ? process.env.NODE_ENV !== "production" ? invariant(false, 'Cannot lift a Draggable when it is disabled') : invariant(false) : void 0;
	      var clientSelection = options.clientSelection,
	          autoScrollMode = options.autoScrollMode;
	      var _this$props = _this.props,
	          lift = _this$props.lift,
	          draggableId = _this$props.draggableId;
	      var client = {
	        selection: clientSelection,
	        borderBoxCenter: getBorderBoxCenterPosition(ref),
	        offset: origin
	      };
	      lift({
	        id: draggableId,
	        client: client,
	        autoScrollMode: autoScrollMode,
	        viewport: getViewport()
	      });
	      finish('LIFT');
	    };

	    _this.setRef = function (ref) {
	      if (ref === null) {
	        return;
	      }

	      if (ref === _this.ref) {
	        return;
	      }

	      _this.ref = ref;
	      throwIfRefIsInvalid(ref);
	    };

	    _this.getDraggableRef = function () {
	      return _this.ref;
	    };

	    _this.getDraggingStyle = index$1(function (change, dimension, isDropAnimating) {
	      var box = dimension.client;
	      var style = {
	        position: 'fixed',
	        top: box.marginBox.top,
	        left: box.marginBox.left,
	        boxSizing: 'border-box',
	        width: box.borderBox.width,
	        height: box.borderBox.height,
	        transition: 'none',
	        zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,
	        transform: getTranslate(change),
	        pointerEvents: 'none'
	      };
	      return style;
	    });
	    _this.getNotDraggingStyle = index$1(function (current, shouldAnimateDisplacement) {
	      var style = {
	        transform: getTranslate(current),
	        transition: shouldAnimateDisplacement ? null : 'none'
	      };
	      return style;
	    });
	    _this.getProvided = index$1(function (change, isDragging, isDropAnimating, shouldAnimateDisplacement, dimension, dragHandleProps) {
	      var useDraggingStyle = isDragging || isDropAnimating;

	      var draggableStyle = function () {
	        if (!useDraggingStyle) {
	          return _this.getNotDraggingStyle(change, shouldAnimateDisplacement);
	        }

	        !dimension ? process.env.NODE_ENV !== "production" ? invariant(false, 'draggable dimension required for dragging') : invariant(false) : void 0;
	        return _this.getDraggingStyle(change, dimension, isDropAnimating);
	      }();

	      var provided = {
	        innerRef: _this.setRef,
	        draggableProps: {
	          'data-react-beautiful-dnd-draggable': _this.styleContext,
	          style: draggableStyle
	        },
	        dragHandleProps: dragHandleProps
	      };
	      return provided;
	    });
	    _this.getSnapshot = index$1(function (isDragging, isDropAnimating, draggingOver) {
	      return {
	        isDragging: isDragging || isDropAnimating,
	        isDropAnimating: isDropAnimating,
	        draggingOver: draggingOver
	      };
	    });

	    _this.renderChildren = function (change, dragHandleProps) {
	      var _this$props2 = _this.props,
	          isDragging = _this$props2.isDragging,
	          isDropAnimating = _this$props2.isDropAnimating,
	          dimension = _this$props2.dimension,
	          draggingOver = _this$props2.draggingOver,
	          shouldAnimateDisplacement = _this$props2.shouldAnimateDisplacement,
	          children = _this$props2.children;
	      var child = children(_this.getProvided(change, isDragging, isDropAnimating, shouldAnimateDisplacement, dimension, dragHandleProps), _this.getSnapshot(isDragging, isDropAnimating, draggingOver));
	      var isDraggingOrDropping = isDragging || isDropAnimating;

	      var placeholder = function () {
	        if (!isDraggingOrDropping) {
	          return null;
	        }

	        !dimension ? process.env.NODE_ENV !== "production" ? invariant(false, 'Draggable: Dimension is required for dragging') : invariant(false) : void 0;
	        return React__default.createElement(Placeholder, {
	          placeholder: dimension.placeholder
	        });
	      }();

	      return React__default.createElement(React.Fragment, null, child, placeholder);
	    };

	    var callbacks = {
	      onLift: _this.onLift,
	      onMove: function onMove(clientSelection) {
	        return props.move({
	          client: clientSelection,
	          shouldAnimate: false
	        });
	      },
	      onDrop: function onDrop() {
	        return props.drop({
	          reason: 'DROP'
	        });
	      },
	      onCancel: function onCancel() {
	        return props.drop({
	          reason: 'CANCEL'
	        });
	      },
	      onMoveUp: props.moveUp,
	      onMoveDown: props.moveDown,
	      onMoveRight: props.moveRight,
	      onMoveLeft: props.moveLeft,
	      onWindowScroll: function onWindowScroll() {
	        return props.moveByWindowScroll({
	          scroll: getWindowScroll$1()
	        });
	      }
	    };
	    _this.callbacks = callbacks;
	    _this.styleContext = context[styleContextKey];
	    return _this;
	  }

	  var _proto = Draggable.prototype;

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.ref = null;
	  };

	  _proto.render = function render() {
	    var _this2 = this;

	    var _this$props3 = this.props,
	        draggableId = _this$props3.draggableId,
	        index = _this$props3.index,
	        offset = _this$props3.offset,
	        isDragging = _this$props3.isDragging,
	        isDropAnimating = _this$props3.isDropAnimating,
	        isDragDisabled = _this$props3.isDragDisabled,
	        shouldAnimateDragMovement = _this$props3.shouldAnimateDragMovement,
	        disableInteractiveElementBlocking = _this$props3.disableInteractiveElementBlocking;
	    var droppableId = this.context[droppableIdKey];
	    var type = this.context[droppableTypeKey];
	    var speed = getSpeed$1(isDragging, shouldAnimateDragMovement, isDropAnimating);
	    return React__default.createElement(DraggableDimensionPublisher, {
	      key: draggableId,
	      draggableId: draggableId,
	      droppableId: droppableId,
	      type: type,
	      index: index,
	      getDraggableRef: this.getDraggableRef
	    }, React__default.createElement(Moveable, {
	      speed: speed,
	      destination: offset,
	      onMoveEnd: this.onMoveEnd
	    }, function (change) {
	      return React__default.createElement(DragHandle, {
	        draggableId: draggableId,
	        isDragging: isDragging,
	        isDropAnimating: isDropAnimating,
	        isEnabled: !isDragDisabled,
	        callbacks: _this2.callbacks,
	        getDraggableRef: _this2.getDraggableRef,
	        canDragInteractiveElements: disableInteractiveElementBlocking
	      }, function (dragHandleProps) {
	        return _this2.renderChildren(change, dragHandleProps);
	      });
	    }));
	  };

	  return Draggable;
	}(React.Component);

	Draggable.contextTypes = (_Draggable$contextTyp = {}, _Draggable$contextTyp[droppableIdKey] = propTypes.string.isRequired, _Draggable$contextTyp[droppableTypeKey] = propTypes.string.isRequired, _Draggable$contextTyp[styleContextKey] = propTypes.string.isRequired, _Draggable$contextTyp);

	var defaultMapProps = {
	  isDropAnimating: false,
	  isDragging: false,
	  offset: origin,
	  shouldAnimateDragMovement: false,
	  shouldAnimateDisplacement: true,
	  dimension: null,
	  draggingOver: null
	};
	var makeMapStateToProps$1 = function makeMapStateToProps() {
	  var memoizedOffset = index$1(function (x, y) {
	    return {
	      x: x,
	      y: y
	    };
	  });
	  var getNotDraggingProps = index$1(function (offset, shouldAnimateDisplacement) {
	    return {
	      isDropAnimating: false,
	      isDragging: false,
	      offset: offset,
	      shouldAnimateDisplacement: shouldAnimateDisplacement,
	      shouldAnimateDragMovement: false,
	      dimension: null,
	      draggingOver: null
	    };
	  });
	  var getDraggingProps = index$1(function (offset, shouldAnimateDragMovement, dimension, draggingOver) {
	    return {
	      isDragging: true,
	      isDropAnimating: false,
	      shouldAnimateDisplacement: false,
	      offset: offset,
	      shouldAnimateDragMovement: shouldAnimateDragMovement,
	      dimension: dimension,
	      draggingOver: draggingOver
	    };
	  });

	  var getOutOfTheWayMovement = function getOutOfTheWayMovement(id, movement) {
	    var map = getDisplacementMap(movement.displaced);
	    var displacement = map[id];

	    if (!displacement) {
	      return null;
	    }

	    if (!displacement.isVisible) {
	      return null;
	    }

	    var amount = movement.isBeyondStartPosition ? negate(movement.amount) : movement.amount;
	    return getNotDraggingProps(memoizedOffset(amount.x, amount.y), displacement.shouldAnimate);
	  };

	  var draggingSelector = function draggingSelector(state, ownProps) {
	    if (state.isDragging) {
	      if (state.critical.draggable.id !== ownProps.draggableId) {
	        return null;
	      }

	      var offset = state.current.client.offset;
	      var dimension = state.dimensions.draggables[ownProps.draggableId];
	      var shouldAnimateDragMovement = state.shouldAnimate;
	      var draggingOver = state.impact.destination ? state.impact.destination.droppableId : null;
	      return getDraggingProps(memoizedOffset(offset.x, offset.y), shouldAnimateDragMovement, dimension, draggingOver);
	    }

	    if (state.phase === 'DROP_ANIMATING') {
	      var pending = state.pending;

	      if (pending.result.draggableId !== ownProps.draggableId) {
	        return null;
	      }

	      var _draggingOver = pending.result.destination ? pending.result.destination.droppableId : null;

	      return {
	        isDragging: false,
	        isDropAnimating: true,
	        offset: pending.newHomeOffset,
	        dimension: state.dimensions.draggables[ownProps.draggableId],
	        draggingOver: _draggingOver,
	        shouldAnimateDragMovement: false,
	        shouldAnimateDisplacement: false
	      };
	    }

	    return null;
	  };

	  var movingOutOfTheWaySelector = function movingOutOfTheWaySelector(state, ownProps) {
	    if (state.isDragging) {
	      if (state.critical.draggable.id === ownProps.draggableId) {
	        return null;
	      }

	      return getOutOfTheWayMovement(ownProps.draggableId, state.impact.movement);
	    }

	    if (state.phase === 'DROP_ANIMATING') {
	      if (state.pending.result.draggableId === ownProps.draggableId) {
	        return null;
	      }

	      return getOutOfTheWayMovement(ownProps.draggableId, state.pending.impact.movement);
	    }

	    return null;
	  };

	  var selector = function selector(state, ownProps) {
	    var dragging = draggingSelector(state, ownProps);

	    if (dragging) {
	      return dragging;
	    }

	    var movingOutOfTheWay = movingOutOfTheWaySelector(state, ownProps);

	    if (movingOutOfTheWay) {
	      return movingOutOfTheWay;
	    }

	    return defaultMapProps;
	  };

	  return selector;
	};
	var mapDispatchToProps = {
	  lift: lift,
	  move: move,
	  moveUp: moveUp,
	  moveDown: moveDown,
	  moveLeft: moveLeft,
	  moveRight: moveRight,
	  moveByWindowScroll: moveByWindowScroll,
	  drop: drop,
	  dropAnimationFinished: dropAnimationFinished
	};
	var ConnectedDraggable = connect(makeMapStateToProps$1, mapDispatchToProps, null, {
	  storeKey: storeKey,
	  pure: true,
	  areStatePropsEqual: isStrictEqual
	})(Draggable);
	ConnectedDraggable.defaultProps = {
	  isDragDisabled: false,
	  disableInteractiveElementBlocking: false
	};

	var reactBeautifulDnd_esm = /*#__PURE__*/Object.freeze({
		DragDropContext: DragDropContext,
		Droppable: connectedDroppable,
		Draggable: ConnectedDraggable,
		resetServerContext: resetServerContext
	});

	var reactDraggable = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
		module.exports = factory(ReactDOM__default, React__default);
	}(commonjsGlobal, (function (ReactDOM,React) {
		ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;
		React = React && React.hasOwnProperty('default') ? React['default'] : React;

		function createCommonjsModule(fn, module) {
			return module = { exports: {} }, fn(module, module.exports), module.exports;
		}

		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 * 
		 */

		function makeEmptyFunction(arg) {
		  return function () {
		    return arg;
		  };
		}

		/**
		 * This function accepts and discards inputs; it has no side effects. This is
		 * primarily useful idiomatically for overridable function endpoints which
		 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
		 */
		var emptyFunction = function emptyFunction() {};

		emptyFunction.thatReturns = makeEmptyFunction;
		emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
		emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
		emptyFunction.thatReturnsNull = makeEmptyFunction(null);
		emptyFunction.thatReturnsThis = function () {
		  return this;
		};
		emptyFunction.thatReturnsArgument = function (arg) {
		  return arg;
		};

		var emptyFunction_1 = emptyFunction;

		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 *
		 */

		/**
		 * Use invariant() to assert state which your program assumes to be true.
		 *
		 * Provide sprintf-style format (only %s is supported) and arguments
		 * to provide information about what broke and what you were
		 * expecting.
		 *
		 * The invariant message will be stripped in production, but the invariant
		 * will remain to ensure logic does not differ in production.
		 */

		var validateFormat = function validateFormat(format) {};

		{
		  validateFormat = function validateFormat(format) {
		    if (format === undefined) {
		      throw new Error('invariant requires an error message argument');
		    }
		  };
		}

		function invariant(condition, format, a, b, c, d, e, f) {
		  validateFormat(format);

		  if (!condition) {
		    var error;
		    if (format === undefined) {
		      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
		    } else {
		      var args = [a, b, c, d, e, f];
		      var argIndex = 0;
		      error = new Error(format.replace(/%s/g, function () {
		        return args[argIndex++];
		      }));
		      error.name = 'Invariant Violation';
		    }

		    error.framesToPop = 1; // we don't care about invariant's own frame
		    throw error;
		  }
		}

		var invariant_1 = invariant;

		/**
		 * Similar to invariant but only logs a warning if the condition is not met.
		 * This can be used to log issues in development environments in critical
		 * paths. Removing the logging code for production environments will keep the
		 * same logic and follow the same code paths.
		 */

		var warning = emptyFunction_1;

		{
		  var printWarning = function printWarning(format) {
		    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		      args[_key - 1] = arguments[_key];
		    }

		    var argIndex = 0;
		    var message = 'Warning: ' + format.replace(/%s/g, function () {
		      return args[argIndex++];
		    });
		    if (typeof console !== 'undefined') {
		      console.error(message);
		    }
		    try {
		      // --- Welcome to debugging React ---
		      // This error was thrown as a convenience so that you can use this stack
		      // to find the callsite that caused this warning to fire.
		      throw new Error(message);
		    } catch (x) {}
		  };

		  warning = function warning(condition, format) {
		    if (format === undefined) {
		      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
		    }

		    if (format.indexOf('Failed Composite propType: ') === 0) {
		      return; // Ignore CompositeComponent proptype check.
		    }

		    if (!condition) {
		      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
		        args[_key2 - 2] = arguments[_key2];
		      }

		      printWarning.apply(undefined, [format].concat(args));
		    }
		  };
		}

		var warning_1 = warning;

		/*
		object-assign
		(c) Sindre Sorhus
		@license MIT
		*/
		/* eslint-disable no-unused-vars */
		var getOwnPropertySymbols = Object.getOwnPropertySymbols;
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		var propIsEnumerable = Object.prototype.propertyIsEnumerable;

		function toObject(val) {
			if (val === null || val === undefined) {
				throw new TypeError('Object.assign cannot be called with null or undefined');
			}

			return Object(val);
		}

		function shouldUseNative() {
			try {
				if (!Object.assign) {
					return false;
				}

				// Detect buggy property enumeration order in older V8 versions.

				// https://bugs.chromium.org/p/v8/issues/detail?id=4118
				var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
				test1[5] = 'de';
				if (Object.getOwnPropertyNames(test1)[0] === '5') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test2 = {};
				for (var i = 0; i < 10; i++) {
					test2['_' + String.fromCharCode(i)] = i;
				}
				var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
					return test2[n];
				});
				if (order2.join('') !== '0123456789') {
					return false;
				}

				// https://bugs.chromium.org/p/v8/issues/detail?id=3056
				var test3 = {};
				'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
					test3[letter] = letter;
				});
				if (Object.keys(Object.assign({}, test3)).join('') !==
						'abcdefghijklmnopqrst') {
					return false;
				}

				return true;
			} catch (err) {
				// We don't expect any of the above to throw, but better to be safe.
				return false;
			}
		}

		var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
			var from;
			var to = toObject(target);
			var symbols;

			for (var s = 1; s < arguments.length; s++) {
				from = Object(arguments[s]);

				for (var key in from) {
					if (hasOwnProperty.call(from, key)) {
						to[key] = from[key];
					}
				}

				if (getOwnPropertySymbols) {
					symbols = getOwnPropertySymbols(from);
					for (var i = 0; i < symbols.length; i++) {
						if (propIsEnumerable.call(from, symbols[i])) {
							to[symbols[i]] = from[symbols[i]];
						}
					}
				}
			}

			return to;
		};

		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 */

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

		var ReactPropTypesSecret_1 = ReactPropTypesSecret;

		{
		  var invariant$1 = invariant_1;
		  var warning$1 = warning_1;
		  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
		  var loggedTypeFailures = {};
		}

		/**
		 * Assert that the values match with the type specs.
		 * Error messages are memorized and will only be shown once.
		 *
		 * @param {object} typeSpecs Map of name to a ReactPropType
		 * @param {object} values Runtime values that need to be type-checked
		 * @param {string} location e.g. "prop", "context", "child context"
		 * @param {string} componentName Name of the component for error messages.
		 * @param {?Function} getStack Returns the component stack.
		 * @private
		 */
		function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
		  {
		    for (var typeSpecName in typeSpecs) {
		      if (typeSpecs.hasOwnProperty(typeSpecName)) {
		        var error;
		        // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.
		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          invariant$1(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
		          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
		        } catch (ex) {
		          error = ex;
		        }
		        warning$1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
		        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error.message] = true;

		          var stack = getStack ? getStack() : '';

		          warning$1(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
		        }
		      }
		    }
		  }
		}

		var checkPropTypes_1 = checkPropTypes;

		var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
		  /* global Symbol */
		  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
		  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

		  /**
		   * Returns the iterator method function contained on the iterable object.
		   *
		   * Be sure to invoke the function with the iterable as context:
		   *
		   *     var iteratorFn = getIteratorFn(myIterable);
		   *     if (iteratorFn) {
		   *       var iterator = iteratorFn.call(myIterable);
		   *       ...
		   *     }
		   *
		   * @param {?object} maybeIterable
		   * @return {?function}
		   */
		  function getIteratorFn(maybeIterable) {
		    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
		    if (typeof iteratorFn === 'function') {
		      return iteratorFn;
		    }
		  }

		  /**
		   * Collection of methods that allow declaration and validation of props that are
		   * supplied to React components. Example usage:
		   *
		   *   var Props = require('ReactPropTypes');
		   *   var MyArticle = React.createClass({
		   *     propTypes: {
		   *       // An optional string prop named "description".
		   *       description: Props.string,
		   *
		   *       // A required enum prop named "category".
		   *       category: Props.oneOf(['News','Photos']).isRequired,
		   *
		   *       // A prop named "dialog" that requires an instance of Dialog.
		   *       dialog: Props.instanceOf(Dialog).isRequired
		   *     },
		   *     render: function() { ... }
		   *   });
		   *
		   * A more formal specification of how these methods are used:
		   *
		   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
		   *   decl := ReactPropTypes.{type}(.isRequired)?
		   *
		   * Each and every declaration produces a function with the same signature. This
		   * allows the creation of custom validation functions. For example:
		   *
		   *  var MyLink = React.createClass({
		   *    propTypes: {
		   *      // An optional string or URI prop named "href".
		   *      href: function(props, propName, componentName) {
		   *        var propValue = props[propName];
		   *        if (propValue != null && typeof propValue !== 'string' &&
		   *            !(propValue instanceof URI)) {
		   *          return new Error(
		   *            'Expected a string or an URI for ' + propName + ' in ' +
		   *            componentName
		   *          );
		   *        }
		   *      }
		   *    },
		   *    render: function() {...}
		   *  });
		   *
		   * @internal
		   */

		  var ANONYMOUS = '<<anonymous>>';

		  // Important!
		  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
		  var ReactPropTypes = {
		    array: createPrimitiveTypeChecker('array'),
		    bool: createPrimitiveTypeChecker('boolean'),
		    func: createPrimitiveTypeChecker('function'),
		    number: createPrimitiveTypeChecker('number'),
		    object: createPrimitiveTypeChecker('object'),
		    string: createPrimitiveTypeChecker('string'),
		    symbol: createPrimitiveTypeChecker('symbol'),

		    any: createAnyTypeChecker(),
		    arrayOf: createArrayOfTypeChecker,
		    element: createElementTypeChecker(),
		    instanceOf: createInstanceTypeChecker,
		    node: createNodeChecker(),
		    objectOf: createObjectOfTypeChecker,
		    oneOf: createEnumTypeChecker,
		    oneOfType: createUnionTypeChecker,
		    shape: createShapeTypeChecker,
		    exact: createStrictShapeTypeChecker,
		  };

		  /**
		   * inlined Object.is polyfill to avoid requiring consumers ship their own
		   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
		   */
		  /*eslint-disable no-self-compare*/
		  function is(x, y) {
		    // SameValue algorithm
		    if (x === y) {
		      // Steps 1-5, 7-10
		      // Steps 6.b-6.e: +0 != -0
		      return x !== 0 || 1 / x === 1 / y;
		    } else {
		      // Step 6.a: NaN == NaN
		      return x !== x && y !== y;
		    }
		  }
		  /*eslint-enable no-self-compare*/

		  /**
		   * We use an Error-like object for backward compatibility as people may call
		   * PropTypes directly and inspect their output. However, we don't use real
		   * Errors anymore. We don't inspect their stack anyway, and creating them
		   * is prohibitively expensive if they are created too often, such as what
		   * happens in oneOfType() for any type before the one that matched.
		   */
		  function PropTypeError(message) {
		    this.message = message;
		    this.stack = '';
		  }
		  // Make `instanceof Error` still work for returned errors.
		  PropTypeError.prototype = Error.prototype;

		  function createChainableTypeChecker(validate) {
		    {
		      var manualPropTypeCallCache = {};
		      var manualPropTypeWarningCount = 0;
		    }
		    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
		      componentName = componentName || ANONYMOUS;
		      propFullName = propFullName || propName;

		      if (secret !== ReactPropTypesSecret_1) {
		        if (throwOnDirectAccess) {
		          // New behavior only for users of `prop-types` package
		          invariant_1(
		            false,
		            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
		            'Use `PropTypes.checkPropTypes()` to call them. ' +
		            'Read more at http://fb.me/use-check-prop-types'
		          );
		        } else if (typeof console !== 'undefined') {
		          // Old behavior for people using React.PropTypes
		          var cacheKey = componentName + ':' + propName;
		          if (
		            !manualPropTypeCallCache[cacheKey] &&
		            // Avoid spamming the console because they are often not actionable except for lib authors
		            manualPropTypeWarningCount < 3
		          ) {
		            warning_1(
		              false,
		              'You are manually calling a React.PropTypes validation ' +
		              'function for the `%s` prop on `%s`. This is deprecated ' +
		              'and will throw in the standalone `prop-types` package. ' +
		              'You may be seeing this warning due to a third-party PropTypes ' +
		              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
		              propFullName,
		              componentName
		            );
		            manualPropTypeCallCache[cacheKey] = true;
		            manualPropTypeWarningCount++;
		          }
		        }
		      }
		      if (props[propName] == null) {
		        if (isRequired) {
		          if (props[propName] === null) {
		            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
		          }
		          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
		        }
		        return null;
		      } else {
		        return validate(props, propName, componentName, location, propFullName);
		      }
		    }

		    var chainedCheckType = checkType.bind(null, false);
		    chainedCheckType.isRequired = checkType.bind(null, true);

		    return chainedCheckType;
		  }

		  function createPrimitiveTypeChecker(expectedType) {
		    function validate(props, propName, componentName, location, propFullName, secret) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== expectedType) {
		        // `propValue` being instance of, say, date/regexp, pass the 'object'
		        // check, but we can offer a more precise error message here rather than
		        // 'of type `object`'.
		        var preciseType = getPreciseType(propValue);

		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createAnyTypeChecker() {
		    return createChainableTypeChecker(emptyFunction_1.thatReturnsNull);
		  }

		  function createArrayOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
		      }
		      var propValue = props[propName];
		      if (!Array.isArray(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
		      }
		      for (var i = 0; i < propValue.length; i++) {
		        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
		        if (error instanceof Error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createElementTypeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      if (!isValidElement(propValue)) {
		        var propType = getPropType(propValue);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createInstanceTypeChecker(expectedClass) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!(props[propName] instanceof expectedClass)) {
		        var expectedClassName = expectedClass.name || ANONYMOUS;
		        var actualClassName = getClassName(props[propName]);
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createEnumTypeChecker(expectedValues) {
		    if (!Array.isArray(expectedValues)) {
		      warning_1(false, 'Invalid argument supplied to oneOf, expected an instance of array.');
		      return emptyFunction_1.thatReturnsNull;
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      for (var i = 0; i < expectedValues.length; i++) {
		        if (is(propValue, expectedValues[i])) {
		          return null;
		        }
		      }

		      var valuesString = JSON.stringify(expectedValues);
		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createObjectOfTypeChecker(typeChecker) {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (typeof typeChecker !== 'function') {
		        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
		      }
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
		      }
		      for (var key in propValue) {
		        if (propValue.hasOwnProperty(key)) {
		          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
		          if (error instanceof Error) {
		            return error;
		          }
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createUnionTypeChecker(arrayOfTypeCheckers) {
		    if (!Array.isArray(arrayOfTypeCheckers)) {
		      warning_1(false, 'Invalid argument supplied to oneOfType, expected an instance of array.');
		      return emptyFunction_1.thatReturnsNull;
		    }

		    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		      var checker = arrayOfTypeCheckers[i];
		      if (typeof checker !== 'function') {
		        warning_1(
		          false,
		          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
		          'received %s at index %s.',
		          getPostfixForTypeWarning(checker),
		          i
		        );
		        return emptyFunction_1.thatReturnsNull;
		      }
		    }

		    function validate(props, propName, componentName, location, propFullName) {
		      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
		        var checker = arrayOfTypeCheckers[i];
		        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
		          return null;
		        }
		      }

		      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createNodeChecker() {
		    function validate(props, propName, componentName, location, propFullName) {
		      if (!isNode(props[propName])) {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      for (var key in shapeTypes) {
		        var checker = shapeTypes[key];
		        if (!checker) {
		          continue;
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }
		    return createChainableTypeChecker(validate);
		  }

		  function createStrictShapeTypeChecker(shapeTypes) {
		    function validate(props, propName, componentName, location, propFullName) {
		      var propValue = props[propName];
		      var propType = getPropType(propValue);
		      if (propType !== 'object') {
		        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
		      }
		      // We need to check all keys in case some are required but missing from
		      // props.
		      var allKeys = objectAssign({}, props[propName], shapeTypes);
		      for (var key in allKeys) {
		        var checker = shapeTypes[key];
		        if (!checker) {
		          return new PropTypeError(
		            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
		            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
		            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
		          );
		        }
		        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
		        if (error) {
		          return error;
		        }
		      }
		      return null;
		    }

		    return createChainableTypeChecker(validate);
		  }

		  function isNode(propValue) {
		    switch (typeof propValue) {
		      case 'number':
		      case 'string':
		      case 'undefined':
		        return true;
		      case 'boolean':
		        return !propValue;
		      case 'object':
		        if (Array.isArray(propValue)) {
		          return propValue.every(isNode);
		        }
		        if (propValue === null || isValidElement(propValue)) {
		          return true;
		        }

		        var iteratorFn = getIteratorFn(propValue);
		        if (iteratorFn) {
		          var iterator = iteratorFn.call(propValue);
		          var step;
		          if (iteratorFn !== propValue.entries) {
		            while (!(step = iterator.next()).done) {
		              if (!isNode(step.value)) {
		                return false;
		              }
		            }
		          } else {
		            // Iterator will provide entry [k,v] tuples rather than values.
		            while (!(step = iterator.next()).done) {
		              var entry = step.value;
		              if (entry) {
		                if (!isNode(entry[1])) {
		                  return false;
		                }
		              }
		            }
		          }
		        } else {
		          return false;
		        }

		        return true;
		      default:
		        return false;
		    }
		  }

		  function isSymbol(propType, propValue) {
		    // Native Symbol.
		    if (propType === 'symbol') {
		      return true;
		    }

		    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
		    if (propValue['@@toStringTag'] === 'Symbol') {
		      return true;
		    }

		    // Fallback for non-spec compliant Symbols which are polyfilled.
		    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
		      return true;
		    }

		    return false;
		  }

		  // Equivalent of `typeof` but with special handling for array and regexp.
		  function getPropType(propValue) {
		    var propType = typeof propValue;
		    if (Array.isArray(propValue)) {
		      return 'array';
		    }
		    if (propValue instanceof RegExp) {
		      // Old webkits (at least until Android 4.0) return 'function' rather than
		      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
		      // passes PropTypes.object.
		      return 'object';
		    }
		    if (isSymbol(propType, propValue)) {
		      return 'symbol';
		    }
		    return propType;
		  }

		  // This handles more types than `getPropType`. Only used for error messages.
		  // See `createPrimitiveTypeChecker`.
		  function getPreciseType(propValue) {
		    if (typeof propValue === 'undefined' || propValue === null) {
		      return '' + propValue;
		    }
		    var propType = getPropType(propValue);
		    if (propType === 'object') {
		      if (propValue instanceof Date) {
		        return 'date';
		      } else if (propValue instanceof RegExp) {
		        return 'regexp';
		      }
		    }
		    return propType;
		  }

		  // Returns a string that is postfixed to a warning about an invalid type.
		  // For example, "undefined" or "of type array"
		  function getPostfixForTypeWarning(value) {
		    var type = getPreciseType(value);
		    switch (type) {
		      case 'array':
		      case 'object':
		        return 'an ' + type;
		      case 'boolean':
		      case 'date':
		      case 'regexp':
		        return 'a ' + type;
		      default:
		        return type;
		    }
		  }

		  // Returns class name of the object, if any.
		  function getClassName(propValue) {
		    if (!propValue.constructor || !propValue.constructor.name) {
		      return ANONYMOUS;
		    }
		    return propValue.constructor.name;
		  }

		  ReactPropTypes.checkPropTypes = checkPropTypes_1;
		  ReactPropTypes.PropTypes = ReactPropTypes;

		  return ReactPropTypes;
		};

		var propTypes = createCommonjsModule(function (module) {
		/**
		 * Copyright (c) 2013-present, Facebook, Inc.
		 *
		 * This source code is licensed under the MIT license found in the
		 * LICENSE file in the root directory of this source tree.
		 */

		{
		  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
		    Symbol.for &&
		    Symbol.for('react.element')) ||
		    0xeac7;

		  var isValidElement = function(object) {
		    return typeof object === 'object' &&
		      object !== null &&
		      object.$$typeof === REACT_ELEMENT_TYPE;
		  };

		  // By explicitly using `prop-types` you are opting into new development behavior.
		  // http://fb.me/prop-types-in-prod
		  var throwOnDirectAccess = true;
		  module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
		}
		});

		var classnames = createCommonjsModule(function (module) {
		/*!
		  Copyright (c) 2016 Jed Watson.
		  Licensed under the MIT License (MIT), see
		  http://jedwatson.github.io/classnames
		*/
		/* global define */

		(function () {

			var hasOwn = {}.hasOwnProperty;

			function classNames () {
				var classes = [];

				for (var i = 0; i < arguments.length; i++) {
					var arg = arguments[i];
					if (!arg) continue;

					var argType = typeof arg;

					if (argType === 'string' || argType === 'number') {
						classes.push(arg);
					} else if (Array.isArray(arg)) {
						classes.push(classNames.apply(null, arg));
					} else if (argType === 'object') {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					}
				}

				return classes.join(' ');
			}

			if (module.exports) {
				module.exports = classNames;
			} else {
				window.classNames = classNames;
			}
		}());
		});

		// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc
		function findInArray(array /*: Array<any> | TouchList*/, callback /*: Function*/) /*: any*/ {
		  for (var i = 0, length = array.length; i < length; i++) {
		    if (callback.apply(callback, [array[i], i, array])) return array[i];
		  }
		}

		function isFunction(func /*: any*/) /*: boolean*/ {
		  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';
		}

		function isNum(num /*: any*/) /*: boolean*/ {
		  return typeof num === 'number' && !isNaN(num);
		}

		function int(a /*: string*/) /*: number*/ {
		  return parseInt(a, 10);
		}

		function dontSetMe(props /*: Object*/, propName /*: string*/, componentName /*: string*/) {
		  if (props[propName]) {
		    return new Error('Invalid prop ' + propName + ' passed to ' + componentName + ' - do not set this, set it on the child.');
		  }
		}

		var prefixes = ['Moz', 'Webkit', 'O', 'ms'];
		function getPrefix() /*: string*/ {
		  var prop /*: string*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';

		  // Checking specifically for 'window.document' is for pseudo-browser server-side
		  // environments that define 'window' as the global context.
		  // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)
		  if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';

		  var style = window.document.documentElement.style;

		  if (prop in style) return '';

		  for (var i = 0; i < prefixes.length; i++) {
		    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];
		  }

		  return '';
		}

		function browserPrefixToKey(prop /*: string*/, prefix /*: string*/) /*: string*/ {
		  return prefix ? '' + prefix + kebabToTitleCase(prop) : prop;
		}

		function kebabToTitleCase(str /*: string*/) /*: string*/ {
		  var out = '';
		  var shouldCapitalize = true;
		  for (var i = 0; i < str.length; i++) {
		    if (shouldCapitalize) {
		      out += str[i].toUpperCase();
		      shouldCapitalize = false;
		    } else if (str[i] === '-') {
		      shouldCapitalize = true;
		    } else {
		      out += str[i];
		    }
		  }
		  return out;
		}

		// Default export is the prefix itself, like 'Moz', 'Webkit', etc
		// Note that you may have to re-test for certain things; for instance, Chrome 50
		// can handle unprefixed `transform`, but not unprefixed `user-select`
		var browserPrefix = getPrefix();

		var classCallCheck = function (instance, Constructor) {
		  if (!(instance instanceof Constructor)) {
		    throw new TypeError("Cannot call a class as a function");
		  }
		};

		var createClass = function () {
		  function defineProperties(target, props) {
		    for (var i = 0; i < props.length; i++) {
		      var descriptor = props[i];
		      descriptor.enumerable = descriptor.enumerable || false;
		      descriptor.configurable = true;
		      if ("value" in descriptor) descriptor.writable = true;
		      Object.defineProperty(target, descriptor.key, descriptor);
		    }
		  }

		  return function (Constructor, protoProps, staticProps) {
		    if (protoProps) defineProperties(Constructor.prototype, protoProps);
		    if (staticProps) defineProperties(Constructor, staticProps);
		    return Constructor;
		  };
		}();

		var defineProperty = function (obj, key, value) {
		  if (key in obj) {
		    Object.defineProperty(obj, key, {
		      value: value,
		      enumerable: true,
		      configurable: true,
		      writable: true
		    });
		  } else {
		    obj[key] = value;
		  }

		  return obj;
		};

		var _extends = Object.assign || function (target) {
		  for (var i = 1; i < arguments.length; i++) {
		    var source = arguments[i];

		    for (var key in source) {
		      if (Object.prototype.hasOwnProperty.call(source, key)) {
		        target[key] = source[key];
		      }
		    }
		  }

		  return target;
		};

		var inherits = function (subClass, superClass) {
		  if (typeof superClass !== "function" && superClass !== null) {
		    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		  }

		  subClass.prototype = Object.create(superClass && superClass.prototype, {
		    constructor: {
		      value: subClass,
		      enumerable: false,
		      writable: true,
		      configurable: true
		    }
		  });
		  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		};

		var possibleConstructorReturn = function (self, call) {
		  if (!self) {
		    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		  }

		  return call && (typeof call === "object" || typeof call === "function") ? call : self;
		};

		var slicedToArray = function () {
		  function sliceIterator(arr, i) {
		    var _arr = [];
		    var _n = true;
		    var _d = false;
		    var _e = undefined;

		    try {
		      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
		        _arr.push(_s.value);

		        if (i && _arr.length === i) break;
		      }
		    } catch (err) {
		      _d = true;
		      _e = err;
		    } finally {
		      try {
		        if (!_n && _i["return"]) _i["return"]();
		      } finally {
		        if (_d) throw _e;
		      }
		    }

		    return _arr;
		  }

		  return function (arr, i) {
		    if (Array.isArray(arr)) {
		      return arr;
		    } else if (Symbol.iterator in Object(arr)) {
		      return sliceIterator(arr, i);
		    } else {
		      throw new TypeError("Invalid attempt to destructure non-iterable instance");
		    }
		  };
		}();

		/*:: import type {ControlPosition, PositionOffsetControlPosition, MouseTouchEvent} from './types';*/


		var matchesSelectorFunc = '';
		function matchesSelector(el /*: Node*/, selector /*: string*/) /*: boolean*/ {
		  if (!matchesSelectorFunc) {
		    matchesSelectorFunc = findInArray(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {
		      // $FlowIgnore: Doesn't think elements are indexable
		      return isFunction(el[method]);
		    });
		  }

		  // Might not be found entirely (not an Element?) - in that case, bail
		  // $FlowIgnore: Doesn't think elements are indexable
		  if (!isFunction(el[matchesSelectorFunc])) return false;

		  // $FlowIgnore: Doesn't think elements are indexable
		  return el[matchesSelectorFunc](selector);
		}

		// Works up the tree to the draggable itself attempting to match selector.
		function matchesSelectorAndParentsTo(el /*: Node*/, selector /*: string*/, baseNode /*: Node*/) /*: boolean*/ {
		  var node = el;
		  do {
		    if (matchesSelector(node, selector)) return true;
		    if (node === baseNode) return false;
		    node = node.parentNode;
		  } while (node);

		  return false;
		}

		function addEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {
		  if (!el) {
		    return;
		  }
		  if (el.attachEvent) {
		    el.attachEvent('on' + event, handler);
		  } else if (el.addEventListener) {
		    el.addEventListener(event, handler, true);
		  } else {
		    // $FlowIgnore: Doesn't think elements are indexable
		    el['on' + event] = handler;
		  }
		}

		function removeEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/ {
		  if (!el) {
		    return;
		  }
		  if (el.detachEvent) {
		    el.detachEvent('on' + event, handler);
		  } else if (el.removeEventListener) {
		    el.removeEventListener(event, handler, true);
		  } else {
		    // $FlowIgnore: Doesn't think elements are indexable
		    el['on' + event] = null;
		  }
		}

		function outerHeight(node /*: HTMLElement*/) /*: number*/ {
		  // This is deliberately excluding margin for our calculations, since we are using
		  // offsetTop which is including margin. See getBoundPosition
		  var height = node.clientHeight;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  height += int(computedStyle.borderTopWidth);
		  height += int(computedStyle.borderBottomWidth);
		  return height;
		}

		function outerWidth(node /*: HTMLElement*/) /*: number*/ {
		  // This is deliberately excluding margin for our calculations, since we are using
		  // offsetLeft which is including margin. See getBoundPosition
		  var width = node.clientWidth;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  width += int(computedStyle.borderLeftWidth);
		  width += int(computedStyle.borderRightWidth);
		  return width;
		}
		function innerHeight(node /*: HTMLElement*/) /*: number*/ {
		  var height = node.clientHeight;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  height -= int(computedStyle.paddingTop);
		  height -= int(computedStyle.paddingBottom);
		  return height;
		}

		function innerWidth(node /*: HTMLElement*/) /*: number*/ {
		  var width = node.clientWidth;
		  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);
		  width -= int(computedStyle.paddingLeft);
		  width -= int(computedStyle.paddingRight);
		  return width;
		}

		// Get from offsetParent
		function offsetXYFromParent(evt /*: {clientX: number, clientY: number}*/, offsetParent /*: HTMLElement*/) /*: ControlPosition*/ {
		  var isBody = offsetParent === offsetParent.ownerDocument.body;
		  var offsetParentRect = isBody ? { left: 0, top: 0 } : offsetParent.getBoundingClientRect();

		  var x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;
		  var y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;

		  return { x: x, y: y };
		}

		function createCSSTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: Object*/ {
		  var translation = getTranslation(controlPos, positionOffset, 'px');
		  return defineProperty({}, browserPrefixToKey('transform', browserPrefix), translation);
		}

		function createSVGTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: string*/ {
		  var translation = getTranslation(controlPos, positionOffset, '');
		  return translation;
		}
		function getTranslation(_ref2, positionOffset /*: PositionOffsetControlPosition*/, unitSuffix /*: string*/) /*: string*/ {
		  var x = _ref2.x,
		      y = _ref2.y;

		  var translation = 'translate(' + x + unitSuffix + ',' + y + unitSuffix + ')';
		  if (positionOffset) {
		    var defaultX = '' + (typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);
		    var defaultY = '' + (typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);
		    translation = 'translate(' + defaultX + ', ' + defaultY + ')' + translation;
		  }
		  return translation;
		}

		function getTouch(e /*: MouseTouchEvent*/, identifier /*: number*/) /*: ?{clientX: number, clientY: number}*/ {
		  return e.targetTouches && findInArray(e.targetTouches, function (t) {
		    return identifier === t.identifier;
		  }) || e.changedTouches && findInArray(e.changedTouches, function (t) {
		    return identifier === t.identifier;
		  });
		}

		function getTouchIdentifier(e /*: MouseTouchEvent*/) /*: ?number*/ {
		  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;
		  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;
		}

		// User-select Hacks:
		//
		// Useful for preventing blue highlights all over everything when dragging.

		// Note we're passing `document` b/c we could be iframed
		function addUserSelectStyles(doc /*: ?Document*/) {
		  if (!doc) return;
		  var styleEl = doc.getElementById('react-draggable-style-el');
		  if (!styleEl) {
		    styleEl = doc.createElement('style');
		    styleEl.type = 'text/css';
		    styleEl.id = 'react-draggable-style-el';
		    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {background: transparent;}\n';
		    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {background: transparent;}\n';
		    doc.getElementsByTagName('head')[0].appendChild(styleEl);
		  }
		  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');
		}

		function removeUserSelectStyles(doc /*: ?Document*/) {
		  try {
		    if (doc && doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');
		    // $FlowIgnore: IE
		    if (doc.selection) {
		      // $FlowIgnore: IE
		      doc.selection.empty();
		    } else {
		      window.getSelection().removeAllRanges(); // remove selection caused by scroll
		    }
		  } catch (e) {
		    // probably IE
		  }
		}

		function styleHacks() /*: Object*/ {
		  var childStyle /*: Object*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		  // Workaround IE pointer events; see #51
		  // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278
		  return _extends({
		    touchAction: 'none'
		  }, childStyle);
		}

		function addClassName(el /*: HTMLElement*/, className /*: string*/) {
		  if (el.classList) {
		    el.classList.add(className);
		  } else {
		    if (!el.className.match(new RegExp('(?:^|\\s)' + className + '(?!\\S)'))) {
		      el.className += ' ' + className;
		    }
		  }
		}

		function removeClassName(el /*: HTMLElement*/, className /*: string*/) {
		  if (el.classList) {
		    el.classList.remove(className);
		  } else {
		    el.className = el.className.replace(new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g'), '');
		  }
		}

		/*:: import type Draggable from '../Draggable';*/
		/*:: import type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';*/
		/*:: import type DraggableCore from '../DraggableCore';*/


		function getBoundPosition(draggable /*: Draggable*/, x /*: number*/, y /*: number*/) /*: [number, number]*/ {
		  // If no bounds, short-circuit and move on
		  if (!draggable.props.bounds) return [x, y];

		  // Clone new bounds
		  var bounds = draggable.props.bounds;

		  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);
		  var node = findDOMNode(draggable);

		  if (typeof bounds === 'string') {
		    var ownerDocument = node.ownerDocument;

		    var ownerWindow = ownerDocument.defaultView;
		    var boundNode = void 0;
		    if (bounds === 'parent') {
		      boundNode = node.parentNode;
		    } else {
		      boundNode = ownerDocument.querySelector(bounds);
		    }
		    if (!(boundNode instanceof ownerWindow.HTMLElement)) {
		      throw new Error('Bounds selector "' + bounds + '" could not find an element.');
		    }
		    var nodeStyle = ownerWindow.getComputedStyle(node);
		    var boundNodeStyle = ownerWindow.getComputedStyle(boundNode);
		    // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.
		    bounds = {
		      left: -node.offsetLeft + int(boundNodeStyle.paddingLeft) + int(nodeStyle.marginLeft),
		      top: -node.offsetTop + int(boundNodeStyle.paddingTop) + int(nodeStyle.marginTop),
		      right: innerWidth(boundNode) - outerWidth(node) - node.offsetLeft + int(boundNodeStyle.paddingRight) - int(nodeStyle.marginRight),
		      bottom: innerHeight(boundNode) - outerHeight(node) - node.offsetTop + int(boundNodeStyle.paddingBottom) - int(nodeStyle.marginBottom)
		    };
		  }

		  // Keep x and y below right and bottom limits...
		  if (isNum(bounds.right)) x = Math.min(x, bounds.right);
		  if (isNum(bounds.bottom)) y = Math.min(y, bounds.bottom);

		  // But above left and top limits.
		  if (isNum(bounds.left)) x = Math.max(x, bounds.left);
		  if (isNum(bounds.top)) y = Math.max(y, bounds.top);

		  return [x, y];
		}

		function snapToGrid(grid /*: [number, number]*/, pendingX /*: number*/, pendingY /*: number*/) /*: [number, number]*/ {
		  var x = Math.round(pendingX / grid[0]) * grid[0];
		  var y = Math.round(pendingY / grid[1]) * grid[1];
		  return [x, y];
		}

		function canDragX(draggable /*: Draggable*/) /*: boolean*/ {
		  return draggable.props.axis === 'both' || draggable.props.axis === 'x';
		}

		function canDragY(draggable /*: Draggable*/) /*: boolean*/ {
		  return draggable.props.axis === 'both' || draggable.props.axis === 'y';
		}

		// Get {x, y} positions from event.
		function getControlPosition(e /*: MouseTouchEvent*/, touchIdentifier /*: ?number*/, draggableCore /*: DraggableCore*/) /*: ?ControlPosition*/ {
		  var touchObj = typeof touchIdentifier === 'number' ? getTouch(e, touchIdentifier) : null;
		  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch
		  var node = findDOMNode(draggableCore);
		  // User can provide an offsetParent if desired.
		  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;
		  return offsetXYFromParent(touchObj || e, offsetParent);
		}

		// Create an data object exposed by <DraggableCore>'s events
		function createCoreData(draggable /*: DraggableCore*/, x /*: number*/, y /*: number*/) /*: DraggableData*/ {
		  var state = draggable.state;
		  var isStart = !isNum(state.lastX);
		  var node = findDOMNode(draggable);

		  if (isStart) {
		    // If this is our first move, use the x and y as last coords.
		    return {
		      node: node,
		      deltaX: 0, deltaY: 0,
		      lastX: x, lastY: y,
		      x: x, y: y
		    };
		  } else {
		    // Otherwise calculate proper values.
		    return {
		      node: node,
		      deltaX: x - state.lastX, deltaY: y - state.lastY,
		      lastX: state.lastX, lastY: state.lastY,
		      x: x, y: y
		    };
		  }
		}

		// Create an data exposed by <Draggable>'s events
		function createDraggableData(draggable /*: Draggable*/, coreData /*: DraggableData*/) /*: DraggableData*/ {
		  var scale = draggable.props.scale;
		  return {
		    node: coreData.node,
		    x: draggable.state.x + coreData.deltaX / scale,
		    y: draggable.state.y + coreData.deltaY / scale,
		    deltaX: coreData.deltaX / scale,
		    deltaY: coreData.deltaY / scale,
		    lastX: draggable.state.x,
		    lastY: draggable.state.y
		  };
		}

		// A lot faster than stringify/parse
		function cloneBounds(bounds /*: Bounds*/) /*: Bounds*/ {
		  return {
		    left: bounds.left,
		    top: bounds.top,
		    right: bounds.right,
		    bottom: bounds.bottom
		  };
		}

		function findDOMNode(draggable /*: Draggable | DraggableCore*/) /*: HTMLElement*/ {
		  var node = ReactDOM.findDOMNode(draggable);
		  if (!node) {
		    throw new Error('<DraggableCore>: Unmounted during event!');
		  }
		  // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME
		  return node;
		}

		/*eslint no-console:0*/
		function log() {
		}

		/*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/


		// Simple abstraction for dragging events names.
		/*:: import type {Element as ReactElement} from 'react';*/
		var eventsFor = {
		  touch: {
		    start: 'touchstart',
		    move: 'touchmove',
		    stop: 'touchend'
		  },
		  mouse: {
		    start: 'mousedown',
		    move: 'mousemove',
		    stop: 'mouseup'
		  }
		};

		// Default to mouse events.
		var dragEventFor = eventsFor.mouse;

		/*:: type DraggableCoreState = {
		  dragging: boolean,
		  lastX: number,
		  lastY: number,
		  touchIdentifier: ?number
		};*/
		/*:: export type DraggableBounds = {
		  left: number,
		  right: number,
		  top: number,
		  bottom: number,
		};*/
		/*:: export type DraggableData = {
		  node: HTMLElement,
		  x: number, y: number,
		  deltaX: number, deltaY: number,
		  lastX: number, lastY: number,
		};*/
		/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void;*/
		/*:: export type ControlPosition = {x: number, y: number};*/
		/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/


		//
		// Define <DraggableCore>.
		//
		// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can
		// work well with libraries that require more control over the element.
		//

		/*:: export type DraggableCoreProps = {
		  allowAnyClick: boolean,
		  cancel: string,
		  children: ReactElement<any>,
		  disabled: boolean,
		  enableUserSelectHack: boolean,
		  offsetParent: HTMLElement,
		  grid: [number, number],
		  handle: string,
		  onStart: DraggableEventHandler,
		  onDrag: DraggableEventHandler,
		  onStop: DraggableEventHandler,
		  onMouseDown: (e: MouseEvent) => void,
		};*/

		var DraggableCore = function (_React$Component) {
		  inherits(DraggableCore, _React$Component);

		  function DraggableCore() {
		    var _ref;

		    var _temp, _this, _ret;

		    classCallCheck(this, DraggableCore);

		    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		      args[_key] = arguments[_key];
		    }

		    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = DraggableCore.__proto__ || Object.getPrototypeOf(DraggableCore)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
		      dragging: false,
		      // Used while dragging to determine deltas.
		      lastX: NaN, lastY: NaN,
		      touchIdentifier: null
		    }, _this.handleDragStart = function (e) {
		      // Make it possible to attach event handlers on top of this one.
		      _this.props.onMouseDown(e);

		      // Only accept left-clicks.
		      if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;

		      // Get nodes. Be sure to grab relative document (could be iframed)
		      var thisNode = ReactDOM.findDOMNode(_this);
		      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {
		        throw new Error('<DraggableCore> not mounted on DragStart!');
		      }
		      var ownerDocument = thisNode.ownerDocument;

		      // Short circuit if handle or cancel prop was provided and selector doesn't match.

		      if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !matchesSelectorAndParentsTo(e.target, _this.props.handle, thisNode) || _this.props.cancel && matchesSelectorAndParentsTo(e.target, _this.props.cancel, thisNode)) {
		        return;
		      }

		      // Set touch identifier in component state if this is a touch event. This allows us to
		      // distinguish between individual touches on multitouch screens by identifying which
		      // touchpoint was set to this element.
		      var touchIdentifier = getTouchIdentifier(e);
		      _this.setState({ touchIdentifier: touchIdentifier });

		      // Get the current drag point from the event. This is used as the offset.
		      var position = getControlPosition(e, touchIdentifier, _this);
		      if (position == null) return; // not possible but satisfies flow
		      var x = position.x,
		          y = position.y;

		      // Create an event object with all the data parents need to make a decision here.

		      var coreEvent = createCoreData(_this, x, y);

		      // Call event handler. If it returns explicit false, cancel.
		      log('calling', _this.props.onStart);
		      var shouldUpdate = _this.props.onStart(e, coreEvent);
		      if (shouldUpdate === false) return;

		      // Add a style to the body to disable user-select. This prevents text from
		      // being selected all over the page.
		      if (_this.props.enableUserSelectHack) addUserSelectStyles(ownerDocument);

		      // Initiate dragging. Set the current x and y as offsets
		      // so we know how much we've moved during the drag. This allows us
		      // to drag elements around even if they have been moved, without issue.
		      _this.setState({
		        dragging: true,

		        lastX: x,
		        lastY: y
		      });

		      // Add events to the document directly so we catch when the user's mouse/touch moves outside of
		      // this element. We use different events depending on whether or not we have detected that this
		      // is a touch-capable device.
		      addEvent(ownerDocument, dragEventFor.move, _this.handleDrag);
		      addEvent(ownerDocument, dragEventFor.stop, _this.handleDragStop);
		    }, _this.handleDrag = function (e) {

		      // Prevent scrolling on mobile devices, like ipad/iphone.
		      if (e.type === 'touchmove') e.preventDefault();

		      // Get the current drag point from the event. This is used as the offset.
		      var position = getControlPosition(e, _this.state.touchIdentifier, _this);
		      if (position == null) return;
		      var x = position.x,
		          y = position.y;

		      // Snap to grid if prop has been provided

		      if (Array.isArray(_this.props.grid)) {
		        var _deltaX = x - _this.state.lastX,
		            _deltaY = y - _this.state.lastY;

		        var _snapToGrid = snapToGrid(_this.props.grid, _deltaX, _deltaY);

		        var _snapToGrid2 = slicedToArray(_snapToGrid, 2);

		        _deltaX = _snapToGrid2[0];
		        _deltaY = _snapToGrid2[1];

		        if (!_deltaX && !_deltaY) return; // skip useless drag
		        x = _this.state.lastX + _deltaX, y = _this.state.lastY + _deltaY;
		      }

		      var coreEvent = createCoreData(_this, x, y);

		      // Call event handler. If it returns explicit false, trigger end.
		      var shouldUpdate = _this.props.onDrag(e, coreEvent);
		      if (shouldUpdate === false) {
		        try {
		          // $FlowIgnore
		          _this.handleDragStop(new MouseEvent('mouseup'));
		        } catch (err) {
		          // Old browsers
		          var event = ((document.createEvent('MouseEvents') /*: any*/) /*: MouseTouchEvent*/);
		          // I see why this insanity was deprecated
		          // $FlowIgnore
		          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		          _this.handleDragStop(event);
		        }
		        return;
		      }

		      _this.setState({
		        lastX: x,
		        lastY: y
		      });
		    }, _this.handleDragStop = function (e) {
		      if (!_this.state.dragging) return;

		      var position = getControlPosition(e, _this.state.touchIdentifier, _this);
		      if (position == null) return;
		      var x = position.x,
		          y = position.y;

		      var coreEvent = createCoreData(_this, x, y);

		      var thisNode = ReactDOM.findDOMNode(_this);
		      if (thisNode) {
		        // Remove user-select hack
		        if (_this.props.enableUserSelectHack) removeUserSelectStyles(thisNode.ownerDocument);
		      }

		      // Reset the el.
		      _this.setState({
		        dragging: false,
		        lastX: NaN,
		        lastY: NaN
		      });

		      // Call event handler
		      _this.props.onStop(e, coreEvent);

		      if (thisNode) {
		        removeEvent(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);
		        removeEvent(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);
		      }
		    }, _this.onMouseDown = function (e) {
		      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse

		      return _this.handleDragStart(e);
		    }, _this.onMouseUp = function (e) {
		      dragEventFor = eventsFor.mouse;

		      return _this.handleDragStop(e);
		    }, _this.onTouchStart = function (e) {
		      // We're on a touch device now, so change the event handlers
		      dragEventFor = eventsFor.touch;

		      return _this.handleDragStart(e);
		    }, _this.onTouchEnd = function (e) {
		      // We're on a touch device now, so change the event handlers
		      dragEventFor = eventsFor.touch;

		      return _this.handleDragStop(e);
		    }, _temp), possibleConstructorReturn(_this, _ret);
		  }

		  createClass(DraggableCore, [{
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      // Remove any leftover event handlers. Remove both touch and mouse handlers in case
		      // some browser quirk caused a touch event to fire during a mouse move, or vice versa.
		      var thisNode = ReactDOM.findDOMNode(this);
		      if (thisNode) {
		        var ownerDocument = thisNode.ownerDocument;

		        removeEvent(ownerDocument, eventsFor.mouse.move, this.handleDrag);
		        removeEvent(ownerDocument, eventsFor.touch.move, this.handleDrag);
		        removeEvent(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);
		        removeEvent(ownerDocument, eventsFor.touch.stop, this.handleDragStop);
		        if (this.props.enableUserSelectHack) removeUserSelectStyles(ownerDocument);
		      }
		    }

		    // Same as onMouseDown (start drag), but now consider this a touch device.

		  }, {
		    key: 'render',
		    value: function render() {
		      // Reuse the child provided
		      // This makes it flexible to use whatever element is wanted (div, ul, etc)
		      return React.cloneElement(React.Children.only(this.props.children), {
		        style: styleHacks(this.props.children.props.style),

		        // Note: mouseMove handler is attached to document so it will still function
		        // when the user drags quickly and leaves the bounds of the element.
		        onMouseDown: this.onMouseDown,
		        onTouchStart: this.onTouchStart,
		        onMouseUp: this.onMouseUp,
		        onTouchEnd: this.onTouchEnd
		      });
		    }
		  }]);
		  return DraggableCore;
		}(React.Component);

		DraggableCore.displayName = 'DraggableCore';
		DraggableCore.propTypes = {
		  /**
		   * `allowAnyClick` allows dragging using any mouse button.
		   * By default, we only accept the left button.
		   *
		   * Defaults to `false`.
		   */
		  allowAnyClick: propTypes.bool,

		  /**
		   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,
		   * with the exception of `onMouseDown`, will not fire.
		   */
		  disabled: propTypes.bool,

		  /**
		   * By default, we add 'user-select:none' attributes to the document body
		   * to prevent ugly text selection during drag. If this is causing problems
		   * for your app, set this to `false`.
		   */
		  enableUserSelectHack: propTypes.bool,

		  /**
		   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets
		   * instead of using the parent node.
		   */
		  offsetParent: function offsetParent(props /*: DraggableCoreProps*/, propName /*: $Keys<DraggableCoreProps>*/) {
		    if (props[propName] && props[propName].nodeType !== 1) {
		      throw new Error('Draggable\'s offsetParent must be a DOM Node.');
		    }
		  },

		  /**
		   * `grid` specifies the x and y that dragging should snap to.
		   */
		  grid: propTypes.arrayOf(propTypes.number),

		  /**
		   * `scale` specifies the scale of the area you are dragging inside of. It allows
		   * the drag deltas to scale correctly with how far zoomed in/out you are.
		   */
		  scale: propTypes.number,

		  /**
		   * `handle` specifies a selector to be used as the handle that initiates drag.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *         return (
		   *            <Draggable handle=".handle">
		   *              <div>
		   *                  <div className="handle">Click me to drag</div>
		   *                  <div>This is some other content</div>
		   *              </div>
		   *           </Draggable>
		   *         );
		   *       }
		   *   });
		   * ```
		   */
		  handle: propTypes.string,

		  /**
		   * `cancel` specifies a selector to be used to prevent drag initialization.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *           return(
		   *               <Draggable cancel=".cancel">
		   *                   <div>
		   *                     <div className="cancel">You can't drag from here</div>
		   *                     <div>Dragging here works fine</div>
		   *                   </div>
		   *               </Draggable>
		   *           );
		   *       }
		   *   });
		   * ```
		   */
		  cancel: propTypes.string,

		  /**
		   * Called when dragging starts.
		   * If this function returns the boolean false, dragging will be canceled.
		   */
		  onStart: propTypes.func,

		  /**
		   * Called while dragging.
		   * If this function returns the boolean false, dragging will be canceled.
		   */
		  onDrag: propTypes.func,

		  /**
		   * Called when dragging stops.
		   * If this function returns the boolean false, the drag will remain active.
		   */
		  onStop: propTypes.func,

		  /**
		   * A workaround option which can be passed if onMouseDown needs to be accessed,
		   * since it'll always be blocked (as there is internal use of onMouseDown)
		   */
		  onMouseDown: propTypes.func,

		  /**
		   * These properties should be defined on the child, not here.
		   */
		  className: dontSetMe,
		  style: dontSetMe,
		  transform: dontSetMe
		};
		DraggableCore.defaultProps = {
		  allowAnyClick: false, // by default only accept left click
		  cancel: null,
		  disabled: false,
		  enableUserSelectHack: true,
		  offsetParent: null,
		  handle: null,
		  grid: null,
		  transform: null,
		  onStart: function onStart() {},
		  onDrag: function onDrag() {},
		  onStop: function onStop() {},
		  onMouseDown: function onMouseDown() {}
		};

		/*:: import type {DraggableEventHandler} from './utils/types';*/
		/*:: import type {Element as ReactElement} from 'react';*/
		/*:: type DraggableState = {
		  dragging: boolean,
		  dragged: boolean,
		  x: number, y: number,
		  slackX: number, slackY: number,
		  isElementSVG: boolean
		};*/


		//
		// Define <Draggable>
		//

		/*:: export type DraggableProps = {
		  ...$Exact<DraggableCoreProps>,
		  axis: 'both' | 'x' | 'y' | 'none',
		  bounds: DraggableBounds | string | false,
		  defaultClassName: string,
		  defaultClassNameDragging: string,
		  defaultClassNameDragged: string,
		  defaultPosition: ControlPosition,
		  positionOffset: PositionOffsetControlPosition,
		  position: ControlPosition,
		  scale: number
		};*/

		var Draggable = function (_React$Component) {
		  inherits(Draggable, _React$Component);

		  function Draggable(props /*: DraggableProps*/) {
		    classCallCheck(this, Draggable);

		    var _this = possibleConstructorReturn(this, (Draggable.__proto__ || Object.getPrototypeOf(Draggable)).call(this, props));

		    _this.onDragStart = function (e, coreData) {

		      // Short-circuit if user's callback killed it.
		      var shouldStart = _this.props.onStart(e, createDraggableData(_this, coreData));
		      // Kills start event on core as well, so move handlers are never bound.
		      if (shouldStart === false) return false;

		      _this.setState({ dragging: true, dragged: true });
		    };

		    _this.onDrag = function (e, coreData) {
		      if (!_this.state.dragging) return false;

		      var uiData = createDraggableData(_this, coreData);

		      var newState /*: $Shape<DraggableState>*/ = {
		        x: uiData.x,
		        y: uiData.y
		      };

		      // Keep within bounds.
		      if (_this.props.bounds) {
		        // Save original x and y.
		        var _x = newState.x,
		            _y = newState.y;

		        // Add slack to the values used to calculate bound position. This will ensure that if
		        // we start removing slack, the element won't react to it right away until it's been
		        // completely removed.

		        newState.x += _this.state.slackX;
		        newState.y += _this.state.slackY;

		        // Get bound position. This will ceil/floor the x and y within the boundaries.

		        var _getBoundPosition = getBoundPosition(_this, newState.x, newState.y),
		            _getBoundPosition2 = slicedToArray(_getBoundPosition, 2),
		            newStateX = _getBoundPosition2[0],
		            newStateY = _getBoundPosition2[1];

		        newState.x = newStateX;
		        newState.y = newStateY;

		        // Recalculate slack by noting how much was shaved by the boundPosition handler.
		        newState.slackX = _this.state.slackX + (_x - newState.x);
		        newState.slackY = _this.state.slackY + (_y - newState.y);

		        // Update the event we fire to reflect what really happened after bounds took effect.
		        uiData.x = newState.x;
		        uiData.y = newState.y;
		        uiData.deltaX = newState.x - _this.state.x;
		        uiData.deltaY = newState.y - _this.state.y;
		      }

		      // Short-circuit if user's callback killed it.
		      var shouldUpdate = _this.props.onDrag(e, uiData);
		      if (shouldUpdate === false) return false;

		      _this.setState(newState);
		    };

		    _this.onDragStop = function (e, coreData) {
		      if (!_this.state.dragging) return false;

		      // Short-circuit if user's callback killed it.
		      var shouldStop = _this.props.onStop(e, createDraggableData(_this, coreData));
		      if (shouldStop === false) return false;

		      var newState /*: $Shape<DraggableState>*/ = {
		        dragging: false,
		        slackX: 0,
		        slackY: 0
		      };

		      // If this is a controlled component, the result of this operation will be to
		      // revert back to the old position. We expect a handler on `onDragStop`, at the least.
		      var controlled = Boolean(_this.props.position);
		      if (controlled) {
		        var _this$props$position = _this.props.position,
		            _x2 = _this$props$position.x,
		            _y2 = _this$props$position.y;

		        newState.x = _x2;
		        newState.y = _y2;
		      }

		      _this.setState(newState);
		    };

		    _this.state = {
		      // Whether or not we are currently dragging.
		      dragging: false,

		      // Whether or not we have been dragged before.
		      dragged: false,

		      // Current transform x and y.
		      x: props.position ? props.position.x : props.defaultPosition.x,
		      y: props.position ? props.position.y : props.defaultPosition.y,

		      // Used for compensating for out-of-bounds drags
		      slackX: 0, slackY: 0,

		      // Can only determine if SVG after mounting
		      isElementSVG: false
		    };
		    return _this;
		  }

		  createClass(Draggable, [{
		    key: 'componentWillMount',
		    value: function componentWillMount() {
		      if (this.props.position && !(this.props.onDrag || this.props.onStop)) {
		        // eslint-disable-next-line
		        console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');
		      }
		    }
		  }, {
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      // Check to see if the element passed is an instanceof SVGElement
		      if (typeof window.SVGElement !== 'undefined' && ReactDOM.findDOMNode(this) instanceof window.SVGElement) {
		        this.setState({ isElementSVG: true });
		      }
		    }
		  }, {
		    key: 'componentWillReceiveProps',
		    value: function componentWillReceiveProps(nextProps /*: Object*/) {
		      // Set x/y if position has changed
		      if (nextProps.position && (!this.props.position || nextProps.position.x !== this.props.position.x || nextProps.position.y !== this.props.position.y)) {
		        this.setState({ x: nextProps.position.x, y: nextProps.position.y });
		      }
		    }
		  }, {
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      this.setState({ dragging: false }); // prevents invariant if unmounted while dragging
		    }
		  }, {
		    key: 'render',
		    value: function render() /*: ReactElement<any>*/ {
		      var _classNames;

		      var style = {},
		          svgTransform = null;

		      // If this is controlled, we don't want to move it - unless it's dragging.
		      var controlled = Boolean(this.props.position);
		      var draggable = !controlled || this.state.dragging;

		      var position = this.props.position || this.props.defaultPosition;
		      var transformOpts = {
		        // Set left if horizontal drag is enabled
		        x: canDragX(this) && draggable ? this.state.x : position.x,

		        // Set top if vertical drag is enabled
		        y: canDragY(this) && draggable ? this.state.y : position.y
		      };

		      // If this element was SVG, we use the `transform` attribute.
		      if (this.state.isElementSVG) {
		        svgTransform = createSVGTransform(transformOpts, this.props.positionOffset);
		      } else {
		        // Add a CSS transform to move the element around. This allows us to move the element around
		        // without worrying about whether or not it is relatively or absolutely positioned.
		        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>
		        // has a clean slate.
		        style = createCSSTransform(transformOpts, this.props.positionOffset);
		      }

		      var _props = this.props,
		          defaultClassName = _props.defaultClassName,
		          defaultClassNameDragging = _props.defaultClassNameDragging,
		          defaultClassNameDragged = _props.defaultClassNameDragged;


		      var children = React.Children.only(this.props.children);

		      // Mark with class while dragging
		      var className = classnames(children.props.className || '', defaultClassName, (_classNames = {}, defineProperty(_classNames, defaultClassNameDragging, this.state.dragging), defineProperty(_classNames, defaultClassNameDragged, this.state.dragged), _classNames));

		      // Reuse the child provided
		      // This makes it flexible to use whatever element is wanted (div, ul, etc)
		      return React.createElement(
		        DraggableCore,
		        _extends({}, this.props, { onStart: this.onDragStart, onDrag: this.onDrag, onStop: this.onDragStop }),
		        React.cloneElement(children, {
		          className: className,
		          style: _extends({}, children.props.style, style),
		          transform: svgTransform
		        })
		      );
		    }
		  }]);
		  return Draggable;
		}(React.Component);

		Draggable.displayName = 'Draggable';
		Draggable.propTypes = _extends({}, DraggableCore.propTypes, {

		  /**
		   * `axis` determines which axis the draggable can move.
		   *
		   *  Note that all callbacks will still return data as normal. This only
		   *  controls flushing to the DOM.
		   *
		   * 'both' allows movement horizontally and vertically.
		   * 'x' limits movement to horizontal axis.
		   * 'y' limits movement to vertical axis.
		   * 'none' limits all movement.
		   *
		   * Defaults to 'both'.
		   */
		  axis: propTypes.oneOf(['both', 'x', 'y', 'none']),

		  /**
		   * `bounds` determines the range of movement available to the element.
		   * Available values are:
		   *
		   * 'parent' restricts movement within the Draggable's parent node.
		   *
		   * Alternatively, pass an object with the following properties, all of which are optional:
		   *
		   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}
		   *
		   * All values are in px.
		   *
		   * Example:
		   *
		   * ```jsx
		   *   let App = React.createClass({
		   *       render: function () {
		   *         return (
		   *            <Draggable bounds={{right: 300, bottom: 300}}>
		   *              <div>Content</div>
		   *           </Draggable>
		   *         );
		   *       }
		   *   });
		   * ```
		   */
		  bounds: propTypes.oneOfType([propTypes.shape({
		    left: propTypes.number,
		    right: propTypes.number,
		    top: propTypes.number,
		    bottom: propTypes.number
		  }), propTypes.string, propTypes.oneOf([false])]),

		  defaultClassName: propTypes.string,
		  defaultClassNameDragging: propTypes.string,
		  defaultClassNameDragged: propTypes.string,

		  /**
		   * `defaultPosition` specifies the x and y that the dragged item should start at
		   *
		   * Example:
		   *
		   * ```jsx
		   *      let App = React.createClass({
		   *          render: function () {
		   *              return (
		   *                  <Draggable defaultPosition={{x: 25, y: 25}}>
		   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
		   *                  </Draggable>
		   *              );
		   *          }
		   *      });
		   * ```
		   */
		  defaultPosition: propTypes.shape({
		    x: propTypes.number,
		    y: propTypes.number
		  }),
		  positionOffset: propTypes.shape({
		    x: propTypes.oneOfType([propTypes.number, propTypes.string]),
		    y: propTypes.oneOfType([propTypes.number, propTypes.string])
		  }),

		  /**
		   * `position`, if present, defines the current position of the element.
		   *
		   *  This is similar to how form elements in React work - if no `position` is supplied, the component
		   *  is uncontrolled.
		   *
		   * Example:
		   *
		   * ```jsx
		   *      let App = React.createClass({
		   *          render: function () {
		   *              return (
		   *                  <Draggable position={{x: 25, y: 25}}>
		   *                      <div>I start with transformX: 25px and transformY: 25px;</div>
		   *                  </Draggable>
		   *              );
		   *          }
		   *      });
		   * ```
		   */
		  position: propTypes.shape({
		    x: propTypes.number,
		    y: propTypes.number
		  }),

		  /**
		   * These properties should be defined on the child, not here.
		   */
		  className: dontSetMe,
		  style: dontSetMe,
		  transform: dontSetMe
		});
		Draggable.defaultProps = _extends({}, DraggableCore.defaultProps, {
		  axis: 'both',
		  bounds: false,
		  defaultClassName: 'react-draggable',
		  defaultClassNameDragging: 'react-draggable-dragging',
		  defaultClassNameDragged: 'react-draggable-dragged',
		  defaultPosition: { x: 0, y: 0 },
		  position: null,
		  scale: 1
		});

		// Previous versions of this lib exported <Draggable> as the root export. As to not break
		// them, or TypeScript, we export *both* as the root and as 'default'.
		// See https://github.com/mzabriskie/react-draggable/pull/254
		// and https://github.com/mzabriskie/react-draggable/issues/266
		Draggable.default = Draggable;
		Draggable.DraggableCore = DraggableCore;

		return Draggable;

	})));

	});

	var util = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var getClass = exports.getClass = function getClass(props, doing) {
	    var dropClass = props.dropClass,
	        dropOverClass = props.dropOverClass,
	        dragClass = props.dragClass,
	        dragingClass = props.dragingClass,
	        type = props.type;


	    var verticalObj = {
	        drop: {}, drag: {}
	    };
	    verticalObj.drop['u-drop ' + dropClass] = true;
	    verticalObj.drop['u-droping ' + dropOverClass] = doing;
	    verticalObj.drag['u-drag ' + dragClass] = true;
	    verticalObj.drag['u-draging ' + dragingClass] = doing;

	    var horizontalObj = {
	        drop: {}, drag: {}
	    };
	    horizontalObj.drop['u-drop u-drop-horizontal ' + dropClass] = true;
	    horizontalObj.drop['u-droping u-droping-horizontal ' + dropOverClass] = doing;
	    horizontalObj.drag['u-drag u-drag-horizontal ' + dragClass] = true;
	    horizontalObj.drag['u-draging u-draging-horizontal ' + dragingClass] = doing;

	    switch (type) {
	        case 'vertical':
	            return verticalObj;
	            break;
	        case 'horizontal':
	            return horizontalObj;
	            break;
	        case 'betweenVertical':
	            return verticalObj;
	            break;
	        case 'betweenHorizontal':
	            return horizontalObj;
	            break;
	    }
	};
	});

	unwrapExports(util);
	var util_1 = util.getClass;

	var SortList = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);







	var _classnames2 = _interopRequireDefault(classnames);



	var _lodash2 = _interopRequireDefault(lodash_isequal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var reorder = function reorder(list, startIndex, endIndex) {
	  var result = Array.from(list);

	  var _result$splice = result.splice(startIndex, 1),
	      _result$splice2 = _slicedToArray(_result$splice, 1),
	      removed = _result$splice2[0];

	  result.splice(endIndex, 0, removed);

	  return result;
	};

	var Vertical = function (_Component) {
	  _inherits(Vertical, _Component);

	  function Vertical(props) {
	    _classCallCheck(this, Vertical);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.onDragEnd = function (result) {
	      if (!result.destination) {
	        return;
	      }
	      var items = reorder(_this.state.items, result.source.index, result.destination.index);

	      _this.setState({
	        items: items
	      });
	      _this.props.onStop(result, items);
	    };

	    _this.onDragStart = function (result) {
	      _this.props.onStart(result, _this.state.items);
	    };

	    _this.state = {
	      items: _this.props.list || []
	    };
	    return _this;
	  }

	  Vertical.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (!(0, _lodash2["default"])(this.state.items, nextProps.list)) {
	      this.setState({
	        items: nextProps.list
	      });
	    }
	  };

	  Vertical.prototype.render = function render() {
	    var _this2 = this;

	    var _props = this.props,
	        onStart = _props.onStart,
	        onDrag = _props.onDrag,
	        onStop = _props.onStop,
	        onDragUpdate = _props.onDragUpdate,
	        dropClass = _props.dropClass,
	        dropOverClass = _props.dropOverClass,
	        dragClass = _props.dragClass,
	        dragingClass = _props.dragingClass,
	        showKey = _props.showKey,
	        type = _props.type;


	    return _react2["default"].createElement(
	      reactBeautifulDnd_esm.DragDropContext,
	      { onDragEnd: this.onDragEnd, onDragStart: this.onDragStart, onDragUpdate: onDragUpdate },
	      _react2["default"].createElement(
	        reactBeautifulDnd_esm.Droppable,
	        { droppableId: 'droppable', direction: type },
	        function (provided, snapshot) {
	          return _react2["default"].createElement(
	            'div',
	            {
	              ref: provided.innerRef,
	              className: (0, _classnames2["default"])(_extends({}, (0, util.getClass)(_this2.props, snapshot.isDraggingOver).drop))
	            },
	            _this2.state.items.map(function (item, index) {
	              return _react2["default"].createElement(
	                reactBeautifulDnd_esm.Draggable,
	                { key: index, draggableId: index, index: index },
	                function (provided, snapshot) {
	                  return _react2["default"].createElement(
	                    'div',
	                    _extends({
	                      ref: provided.innerRef
	                    }, provided.draggableProps, provided.dragHandleProps, {
	                      className: (0, _classnames2["default"])(_extends({}, (0, util.getClass)(_this2.props, snapshot.isDragging).drag)),
	                      style: _extends({}, provided.draggableProps.style)
	                    }),
	                    showKey ? item[showKey] : item
	                  );
	                }
	              );
	            }),
	            provided.placeholder
	          );
	        }
	      )
	    );
	  };

	  return Vertical;
	}(React__default.Component);

	exports["default"] = Vertical;
	module.exports = exports['default'];
	});

	unwrapExports(SortList);

	var Between_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);







	var _classnames2 = _interopRequireDefault(classnames);



	var _lodash2 = _interopRequireDefault(lodash_isequal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var reorder = function reorder(list, startIndex, endIndex) {
	    var result = Array.from(list);

	    var _result$splice = result.splice(startIndex, 1),
	        _result$splice2 = _slicedToArray(_result$splice, 1),
	        removed = _result$splice2[0];

	    result.splice(endIndex, 0, removed);

	    return result;
	};

	/**
	 * Moves an item from one list to another list.
	 */
	var move = function move(source, destination, droppableSource, droppableDestination) {
	    var sourceClone = Array.from(source);
	    var destClone = Array.from(destination);

	    var _sourceClone$splice = sourceClone.splice(droppableSource.index, 1),
	        _sourceClone$splice2 = _slicedToArray(_sourceClone$splice, 1),
	        removed = _sourceClone$splice2[0];

	    destClone.splice(droppableDestination.index, 0, removed);

	    var result = {};
	    result[droppableSource.droppableId] = sourceClone;
	    result[droppableDestination.droppableId] = destClone;

	    return result;
	};

	var Between = function (_Component) {
	    _inherits(Between, _Component);

	    function Between(props) {
	        _classCallCheck(this, Between);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this.id2List = {
	            droppable: 'items',
	            droppable2: 'selected'
	        };

	        _this.getList = function (id) {
	            return _this.state[_this.id2List[id]];
	        };

	        _this.onDragEnd = function (result) {
	            console.log(result);
	            var source = result.source,
	                destination = result.destination;

	            // dropped outside the list

	            if (!destination) {
	                return;
	            }
	            var list = _this.state.items;
	            var otherList = _this.state.selected;

	            if (source.droppableId === destination.droppableId) {
	                var items = reorder(_this.getList(source.droppableId), source.index, destination.index);

	                var state = { items: items };
	                list = items;

	                if (source.droppableId === 'droppable2') {
	                    state = { selected: items };
	                    otherList = items;
	                    list = _this.state.items;
	                }
	                _this.setState(state);
	            } else {
	                var _result = move(_this.getList(source.droppableId), _this.getList(destination.droppableId), source, destination);

	                _this.setState({
	                    items: _result.droppable,
	                    selected: _result.droppable2
	                });
	                list = _result.droppable;
	                otherList = _result.droppable2;
	            }
	            _this.props.onStop(result, {
	                list: list,
	                otherList: otherList
	            });
	        };

	        _this.onDragStart = function (result) {
	            _this.props.onStart(result, {
	                list: _this.state.list,
	                otherList: _this.state.selected
	            });
	        };

	        _this.state = {
	            items: _this.props.list,
	            selected: _this.props.otherList
	        };
	        return _this;
	    }

	    Between.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!(0, _lodash2["default"])(this.state.items, nextProps.list)) {
	            this.setState({
	                items: nextProps.list
	            });
	        }
	        if (!(0, _lodash2["default"])(this.state.selected, nextProps.otherList)) {
	            this.setState({
	                selected: nextProps.otherList
	            });
	        }
	    };

	    Between.prototype.render = function render() {
	        var _this2 = this;

	        var _props = this.props,
	            onStart = _props.onStart,
	            onDrag = _props.onDrag,
	            onStop = _props.onStop,
	            onDragUpdate = _props.onDragUpdate,
	            dropClass = _props.dropClass,
	            dropOverClass = _props.dropOverClass,
	            dragClass = _props.dragClass,
	            dragingClass = _props.dragingClass,
	            showKey = _props.showKey,
	            type = _props.type;


	        return _react2["default"].createElement(
	            'div',
	            { className: (0, _classnames2["default"])({
	                    'u-drag-between': type == 'betweenVertical',
	                    'u-drag-between u-drag-between-horizontal': type == 'betweenHorizontal'

	                }) },
	            _react2["default"].createElement(
	                reactBeautifulDnd_esm.DragDropContext,
	                { onDragEnd: this.onDragEnd, onDragStart: this.onDragStart, onDragUpdate: onDragUpdate },
	                _react2["default"].createElement(
	                    reactBeautifulDnd_esm.Droppable,
	                    { droppableId: 'droppable', direction: type == 'betweenVertical' ? 'vertical' : 'horizontal' },
	                    function (provided, snapshot) {
	                        return _react2["default"].createElement(
	                            'div',
	                            {
	                                ref: provided.innerRef,
	                                className: (0, _classnames2["default"])(_extends({}, (0, util.getClass)(_this2.props, snapshot.isDraggingOver).drop)) },
	                            _this2.state.items.map(function (item, index) {
	                                return _react2["default"].createElement(
	                                    reactBeautifulDnd_esm.Draggable,
	                                    {
	                                        key: '1' + index,
	                                        draggableId: '1' + index,
	                                        index: index },
	                                    function (provided, snapshot) {
	                                        return _react2["default"].createElement(
	                                            'div',
	                                            _extends({
	                                                ref: provided.innerRef
	                                            }, provided.draggableProps, provided.dragHandleProps, {
	                                                className: (0, _classnames2["default"])(_extends({}, (0, util.getClass)(_this2.props, snapshot.isDragging).drag)),
	                                                style: _extends({}, provided.draggableProps.style) }),
	                                            showKey ? item[showKey] : item
	                                        );
	                                    }
	                                );
	                            }),
	                            provided.placeholder
	                        );
	                    }
	                ),
	                _react2["default"].createElement(
	                    reactBeautifulDnd_esm.Droppable,
	                    { droppableId: 'droppable2', direction: type == 'betweenVertical' ? 'vertical' : 'horizontal' },
	                    function (provided, snapshot) {
	                        return _react2["default"].createElement(
	                            'div',
	                            {
	                                ref: provided.innerRef,
	                                className: (0, _classnames2["default"])(_extends({}, (0, util.getClass)(_this2.props, snapshot.isDraggingOver).drop)) },
	                            _this2.state.selected.map(function (item, index) {
	                                return _react2["default"].createElement(
	                                    reactBeautifulDnd_esm.Draggable,
	                                    {
	                                        key: '2' + index,
	                                        draggableId: '2' + index,
	                                        index: index },
	                                    function (provided, snapshot) {
	                                        return _react2["default"].createElement(
	                                            'div',
	                                            _extends({
	                                                ref: provided.innerRef
	                                            }, provided.draggableProps, provided.dragHandleProps, {
	                                                className: (0, _classnames2["default"])(_extends({}, (0, util.getClass)(_this2.props, snapshot.isDragging).drag)),
	                                                style: _extends({}, provided.draggableProps.style) }),
	                                            showKey ? item[showKey] : item
	                                        );
	                                    }
	                                );
	                            }),
	                            provided.placeholder
	                        );
	                    }
	                )
	            )
	        );
	    };

	    return Between;
	}(React__default.Component);

	exports["default"] = Between;
	module.exports = exports['default'];
	});

	unwrapExports(Between_1);

	var Dnd_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);





	var _reactDraggable2 = _interopRequireDefault(reactDraggable);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _lodash2 = _interopRequireDefault(lodash_isequal);



	var _SortList2 = _interopRequireDefault(SortList);



	var _Between2 = _interopRequireDefault(Between_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    onStart: _propTypes2["default"].func,
	    onDrag: _propTypes2["default"].func,
	    onStop: _propTypes2["default"].func,
	    onDragUpdate: _propTypes2["default"].func,
	    dropClass: _propTypes2["default"].string,
	    dropOverClass: _propTypes2["default"].string,
	    dragClass: _propTypes2["default"].string,
	    dragingClass: _propTypes2["default"].string,
	    draggedClass: _propTypes2["default"].string,
	    className: _propTypes2["default"].string,
	    style: _propTypes2["default"].object,
	    list: _propTypes2["default"].array,
	    otherList: _propTypes2["default"].array,
	    type: _propTypes2["default"].oneOf(['vertical', 'horizontal', 'betweenVertical', 'betweenHorizontal']),
	    showKey: _propTypes2["default"].string

	};
	var defaultProps = {
	    onStart: function onStart() {},
	    onDrag: function onDrag() {},
	    onStop: function onStop() {},
	    onDragUpdate: function onDragUpdate() {},
	    list: false,
	    otherList: [],
	    dropClass: '',
	    dropOverClass: '',
	    dragClass: '',
	    dragingClass: '',
	    draggedClass: '',
	    type: 'vertical'
	};

	var Dnd = function (_Component) {
	    _inherits(Dnd, _Component);

	    function Dnd(props) {
	        _classCallCheck(this, Dnd);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this.state = {
	            items: _this.props.list || []
	        };
	        return _this;
	    }

	    Dnd.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!(0, _lodash2["default"])(this.state.items, nextProps.list)) {
	            this.setState({
	                items: nextProps.list
	            });
	        }
	    };

	    Dnd.prototype.render = function render() {
	        var _this2 = this;

	        var self = this;
	        var DndType = function DndType() {
	            switch (_this2.props.type) {
	                case 'vertical':
	                    return _react2["default"].createElement(_SortList2["default"], _this2.props);
	                    break;
	                case 'horizontal':
	                    return _react2["default"].createElement(_SortList2["default"], _this2.props);
	                    break;
	                case 'betweenVertical':
	                    return _react2["default"].createElement(_Between2["default"], _this2.props);
	                    break;
	                case 'betweenHorizontal':
	                    return _react2["default"].createElement(_Between2["default"], _this2.props);
	                    break;
	                default:
	                    return _react2["default"].createElement(_SortList2["default"], _this2.props);
	                    break;
	            }
	        };
	        return _react2["default"].createElement(
	            'div',
	            null,
	            self.state.items.length ? DndType() : _react2["default"].createElement(
	                _reactDraggable2["default"],
	                _extends({ defaultClassName: this.props.dragClass,
	                    defaultClassNameDragging: this.props.dragingClass,
	                    defaultClassNameDragged: this.props.draggedClass
	                }, this.props),
	                self.props.children
	            )
	        );
	    };

	    return Dnd;
	}(React__default.Component);

	Dnd.propTypes = propTypes$1;
	Dnd.defaultProps = defaultProps;
	Dnd.Drag = _reactDraggable2["default"];
	Dnd.DragDropContext = reactBeautifulDnd_esm.DragDropContext;
	Dnd.Droppable = reactBeautifulDnd_esm.Droppable;
	Dnd.Draggable = reactBeautifulDnd_esm.Draggable;
	exports["default"] = Dnd;
	module.exports = exports['default'];
	});

	unwrapExports(Dnd_1);

	var build$7 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Dnd2 = _interopRequireDefault(Dnd_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Dnd2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$7);

	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

	var _extends$3 = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	var styles = {
	  base: {
	    position: 'absolute',
	    userSelect: 'none',
	    MsUserSelect: 'none'
	  },
	  top: {
	    width: '100%',
	    height: '10px',
	    top: '-5px',
	    left: '0px',
	    cursor: 'row-resize'
	  },
	  right: {
	    width: '10px',
	    height: '100%',
	    top: '0px',
	    right: '-5px',
	    cursor: 'col-resize'
	  },
	  bottom: {
	    width: '100%',
	    height: '10px',
	    bottom: '-5px',
	    left: '0px',
	    cursor: 'row-resize'
	  },
	  left: {
	    width: '10px',
	    height: '100%',
	    top: '0px',
	    left: '-5px',
	    cursor: 'col-resize'
	  },
	  topRight: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    right: '-10px',
	    top: '-10px',
	    cursor: 'ne-resize'
	  },
	  bottomRight: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    right: '-10px',
	    bottom: '-10px',
	    cursor: 'se-resize'
	  },
	  bottomLeft: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    left: '-10px',
	    bottom: '-10px',
	    cursor: 'sw-resize'
	  },
	  topLeft: {
	    width: '20px',
	    height: '20px',
	    position: 'absolute',
	    left: '-10px',
	    top: '-10px',
	    cursor: 'nw-resize'
	  }
	};

	var Resizer = (function (props) {
	  return React.createElement(
	    'div',
	    {
	      className: props.className,
	      style: _extends$3({}, styles.base, styles[props.direction], props.replaceStyles || {}),
	      onMouseDown: function onMouseDown(e) {
	        props.onResizeStart(e, props.direction);
	      },
	      onTouchStart: function onTouchStart(e) {
	        props.onResizeStart(e, props.direction);
	      }
	    },
	    props.children
	  );
	});

	var userSelectNone = {
	  userSelect: 'none',
	  MozUserSelect: 'none',
	  WebkitUserSelect: 'none',
	  MsUserSelect: 'none'
	};

	var userSelectAuto = {
	  userSelect: 'auto',
	  MozUserSelect: 'auto',
	  WebkitUserSelect: 'auto',
	  MsUserSelect: 'auto'
	};

	var clamp = function clamp(n, min, max) {
	  return Math.max(Math.min(n, max), min);
	};
	var snap = function snap(n, size) {
	  return Math.round(n / size) * size;
	};

	var findClosestSnap = function findClosestSnap(n, snapArray) {
	  return snapArray.reduce(function (prev, curr) {
	    return Math.abs(curr - n) < Math.abs(prev - n) ? curr : prev;
	  });
	};

	var endsWith = function endsWith(str, searchStr) {
	  return str.substr(str.length - searchStr.length, searchStr.length) === searchStr;
	};

	var getStringSize = function getStringSize(n) {
	  if (n.toString() === 'auto') return n.toString();
	  if (endsWith(n.toString(), 'px')) return n.toString();
	  if (endsWith(n.toString(), '%')) return n.toString();
	  if (endsWith(n.toString(), 'vh')) return n.toString();
	  if (endsWith(n.toString(), 'vw')) return n.toString();
	  if (endsWith(n.toString(), 'vmax')) return n.toString();
	  if (endsWith(n.toString(), 'vmin')) return n.toString();
	  return n + 'px';
	};

	var definedProps = ['style', 'className', 'grid', 'snap', 'bounds', 'size', 'defaultSize', 'minWidth', 'minHeight', 'maxWidth', 'maxHeight', 'lockAspectRatio', 'lockAspectRatioExtraWidth', 'lockAspectRatioExtraHeight', 'enable', 'handleStyles', 'handleClasses', 'handleWrapperStyle', 'handleWrapperClass', 'children', 'onResizeStart', 'onResize', 'onResizeStop', 'handleComponent', 'scale', 'resizeRatio'];

	var baseClassName = '__resizable_base__';

	var Resizable = function (_React$Component) {
	  inherits(Resizable, _React$Component);

	  function Resizable(props) {
	    classCallCheck(this, Resizable);

	    var _this = possibleConstructorReturn(this, (Resizable.__proto__ || Object.getPrototypeOf(Resizable)).call(this, props));

	    _this.state = {
	      isResizing: false,
	      resizeCursor: 'auto',
	      width: typeof (_this.propsSize && _this.propsSize.width) === 'undefined' ? 'auto' : _this.propsSize && _this.propsSize.width,
	      height: typeof (_this.propsSize && _this.propsSize.height) === 'undefined' ? 'auto' : _this.propsSize && _this.propsSize.height,
	      direction: 'right',
	      original: {
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	      }
	    };

	    _this.updateExtendsProps(props);
	    _this.onResizeStart = _this.onResizeStart.bind(_this);
	    _this.onMouseMove = _this.onMouseMove.bind(_this);
	    _this.onMouseUp = _this.onMouseUp.bind(_this);

	    if (typeof window !== 'undefined') {
	      window.addEventListener('mouseup', _this.onMouseUp);
	      window.addEventListener('mousemove', _this.onMouseMove);
	      window.addEventListener('mouseleave', _this.onMouseUp);
	      window.addEventListener('touchmove', _this.onMouseMove);
	      window.addEventListener('touchend', _this.onMouseUp);
	    }
	    return _this;
	  }

	  createClass(Resizable, [{
	    key: 'updateExtendsProps',
	    value: function updateExtendsProps(props) {
	      this.extendsProps = Object.keys(props).reduce(function (acc, key) {
	        if (definedProps.indexOf(key) !== -1) return acc;
	        acc[key] = props[key];
	        return acc;
	      }, {});
	    }
	  }, {
	    key: 'getParentSize',
	    value: function getParentSize() {
	      var base = this.base;

	      if (!base) return { width: window.innerWidth, height: window.innerHeight };
	      // INFO: To calculate parent width with flex layout
	      var wrapChanged = false;
	      var wrap = this.parentNode.style.flexWrap;
	      var minWidth = base.style.minWidth;
	      if (wrap !== 'wrap') {
	        wrapChanged = true;
	        this.parentNode.style.flexWrap = 'wrap';
	        // HACK: Use relative to get parent padding size
	      }
	      base.style.position = 'relative';
	      base.style.minWidth = '100%';
	      var size = {
	        width: base.offsetWidth,
	        height: base.offsetHeight
	      };
	      base.style.position = 'absolute';
	      if (wrapChanged) this.parentNode.style.flexWrap = wrap;
	      base.style.minWidth = minWidth;
	      return size;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var size = this.size;

	      this.setState({
	        width: this.state.width || size.width,
	        height: this.state.height || size.height
	      });
	      var parent = this.parentNode;
	      if (!(parent instanceof HTMLElement)) return;
	      if (this.base) return;
	      var element = document.createElement('div');
	      element.style.width = '100%';
	      element.style.height = '100%';
	      element.style.position = 'absolute';
	      element.style.transform = 'scale(0, 0)';
	      element.style.left = '0';
	      element.style.flex = '0';
	      if (element.classList) {
	        element.classList.add(baseClassName);
	      } else {
	        element.className += baseClassName;
	      }
	      parent.appendChild(element);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(next) {
	      this.updateExtendsProps(next);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (typeof window !== 'undefined') {
	        window.removeEventListener('mouseup', this.onMouseUp);
	        window.removeEventListener('mousemove', this.onMouseMove);
	        window.removeEventListener('mouseleave', this.onMouseUp);
	        window.removeEventListener('touchmove', this.onMouseMove);
	        window.removeEventListener('touchend', this.onMouseUp);
	        var parent = this.parentNode;
	        var base = this.base;

	        if (!base || !parent) return;
	        if (!(parent instanceof HTMLElement) || !(base instanceof Node)) return;
	        parent.removeChild(base);
	      }
	    }
	  }, {
	    key: 'calculateNewSize',
	    value: function calculateNewSize(newSize, kind) {
	      var propsSize = this.propsSize && this.propsSize[kind];
	      return this.state[kind] === 'auto' && this.state.original[kind] === newSize && (typeof propsSize === 'undefined' || propsSize === 'auto') ? 'auto' : newSize;
	    }
	  }, {
	    key: 'onResizeStart',
	    value: function onResizeStart(event, direction) {
	      var clientX = 0;
	      var clientY = 0;
	      if (event.nativeEvent instanceof MouseEvent) {
	        clientX = event.nativeEvent.clientX;
	        clientY = event.nativeEvent.clientY;

	        // When user click with right button the resize is stuck in resizing mode
	        // until users clicks again, dont continue if right click is used.
	        // HACK: MouseEvent does not have `which` from flow-bin v0.68.
	        if (event.nativeEvent.which === 3) {
	          return;
	        }
	      } else if (event.nativeEvent instanceof TouchEvent) {
	        clientX = event.nativeEvent.touches[0].clientX;
	        clientY = event.nativeEvent.touches[0].clientY;
	      }
	      if (this.props.onResizeStart) {
	        this.props.onResizeStart(event, direction, this.resizable);
	      }

	      // Fix #168
	      if (this.props.size) {
	        if (typeof this.props.size.height !== 'undefined' && this.props.size.height !== this.state.height) {
	          this.setState({ height: this.props.size.height });
	        }
	        if (typeof this.props.size.width !== 'undefined' && this.props.size.width !== this.state.width) {
	          this.setState({ width: this.props.size.width });
	        }
	      }

	      this.setState({
	        original: {
	          x: clientX,
	          y: clientY,
	          width: this.size.width,
	          height: this.size.height
	        },
	        isResizing: true,
	        resizeCursor: window.getComputedStyle(event.target).cursor,
	        direction: direction
	      });
	    }
	  }, {
	    key: 'onMouseMove',
	    value: function onMouseMove(event) {
	      if (!this.state.isResizing) return;
	      var clientX = event instanceof MouseEvent ? event.clientX : event.touches[0].clientX;
	      var clientY = event instanceof MouseEvent ? event.clientY : event.touches[0].clientY;
	      var _state = this.state,
	          direction = _state.direction,
	          original = _state.original,
	          width = _state.width,
	          height = _state.height;
	      var _props = this.props,
	          lockAspectRatio = _props.lockAspectRatio,
	          lockAspectRatioExtraHeight = _props.lockAspectRatioExtraHeight,
	          lockAspectRatioExtraWidth = _props.lockAspectRatioExtraWidth;

	      var scale = this.props.scale || 1;
	      var _props2 = this.props,
	          maxWidth = _props2.maxWidth,
	          maxHeight = _props2.maxHeight,
	          minWidth = _props2.minWidth,
	          minHeight = _props2.minHeight;

	      var resizeRatio = this.props.resizeRatio || 1;

	      // TODO: refactor
	      var parentSize = this.getParentSize();
	      if (maxWidth && typeof maxWidth === 'string' && endsWith(maxWidth, '%')) {
	        var _ratio = Number(maxWidth.replace('%', '')) / 100;
	        maxWidth = parentSize.width * _ratio;
	      }
	      if (maxHeight && typeof maxHeight === 'string' && endsWith(maxHeight, '%')) {
	        var _ratio2 = Number(maxHeight.replace('%', '')) / 100;
	        maxHeight = parentSize.height * _ratio2;
	      }
	      if (minWidth && typeof minWidth === 'string' && endsWith(minWidth, '%')) {
	        var _ratio3 = Number(minWidth.replace('%', '')) / 100;
	        minWidth = parentSize.width * _ratio3;
	      }
	      if (minHeight && typeof minHeight === 'string' && endsWith(minHeight, '%')) {
	        var _ratio4 = Number(minHeight.replace('%', '')) / 100;
	        minHeight = parentSize.height * _ratio4;
	      }
	      maxWidth = typeof maxWidth === 'undefined' ? undefined : Number(maxWidth);
	      maxHeight = typeof maxHeight === 'undefined' ? undefined : Number(maxHeight);
	      minWidth = typeof minWidth === 'undefined' ? undefined : Number(minWidth);
	      minHeight = typeof minHeight === 'undefined' ? undefined : Number(minHeight);

	      var ratio = typeof lockAspectRatio === 'number' ? lockAspectRatio : original.width / original.height;
	      var newWidth = original.width;
	      var newHeight = original.height;
	      if (/right/i.test(direction)) {
	        newWidth = original.width + (clientX - original.x) * resizeRatio / scale;
	        if (lockAspectRatio) newHeight = (newWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	      }
	      if (/left/i.test(direction)) {
	        newWidth = original.width - (clientX - original.x) * resizeRatio / scale;
	        if (lockAspectRatio) newHeight = (newWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	      }
	      if (/bottom/i.test(direction)) {
	        newHeight = original.height + (clientY - original.y) * resizeRatio / scale;
	        if (lockAspectRatio) newWidth = (newHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	      }
	      if (/top/i.test(direction)) {
	        newHeight = original.height - (clientY - original.y) * resizeRatio / scale;
	        if (lockAspectRatio) newWidth = (newHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	      }

	      if (this.props.bounds === 'parent') {
	        var parent = this.parentNode;
	        if (parent instanceof HTMLElement) {
	          var parentRect = parent.getBoundingClientRect();
	          var parentLeft = parentRect.left;
	          var parentTop = parentRect.top;

	          var _resizable$getBoundin = this.resizable.getBoundingClientRect(),
	              _left = _resizable$getBoundin.left,
	              _top = _resizable$getBoundin.top;

	          var boundWidth = parent.offsetWidth + (parentLeft - _left);
	          var boundHeight = parent.offsetHeight + (parentTop - _top);
	          maxWidth = maxWidth && maxWidth < boundWidth ? maxWidth : boundWidth;
	          maxHeight = maxHeight && maxHeight < boundHeight ? maxHeight : boundHeight;
	        }
	      } else if (this.props.bounds === 'window') {
	        if (typeof window !== 'undefined') {
	          var _resizable$getBoundin2 = this.resizable.getBoundingClientRect(),
	              _left2 = _resizable$getBoundin2.left,
	              _top2 = _resizable$getBoundin2.top;

	          var _boundWidth = window.innerWidth - _left2;
	          var _boundHeight = window.innerHeight - _top2;
	          maxWidth = maxWidth && maxWidth < _boundWidth ? maxWidth : _boundWidth;
	          maxHeight = maxHeight && maxHeight < _boundHeight ? maxHeight : _boundHeight;
	        }
	      } else if (this.props.bounds instanceof HTMLElement) {
	        var targetRect = this.props.bounds.getBoundingClientRect();
	        var targetLeft = targetRect.left;
	        var targetTop = targetRect.top;

	        var _resizable$getBoundin3 = this.resizable.getBoundingClientRect(),
	            _left3 = _resizable$getBoundin3.left,
	            _top3 = _resizable$getBoundin3.top;

	        if (!(this.props.bounds instanceof HTMLElement)) return;
	        var _boundWidth2 = this.props.bounds.offsetWidth + (targetLeft - _left3);
	        var _boundHeight2 = this.props.bounds.offsetHeight + (targetTop - _top3);
	        maxWidth = maxWidth && maxWidth < _boundWidth2 ? maxWidth : _boundWidth2;
	        maxHeight = maxHeight && maxHeight < _boundHeight2 ? maxHeight : _boundHeight2;
	      }

	      var computedMinWidth = typeof minWidth === 'undefined' ? 10 : minWidth;
	      var computedMaxWidth = typeof maxWidth === 'undefined' || maxWidth < 0 ? newWidth : maxWidth;
	      var computedMinHeight = typeof minHeight === 'undefined' ? 10 : minHeight;
	      var computedMaxHeight = typeof maxHeight === 'undefined' || maxHeight < 0 ? newHeight : maxHeight;

	      if (lockAspectRatio) {
	        var extraMinWidth = (computedMinHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	        var extraMaxWidth = (computedMaxHeight - lockAspectRatioExtraHeight) * ratio + lockAspectRatioExtraWidth;
	        var extraMinHeight = (computedMinWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	        var extraMaxHeight = (computedMaxWidth - lockAspectRatioExtraWidth) / ratio + lockAspectRatioExtraHeight;
	        var lockedMinWidth = Math.max(computedMinWidth, extraMinWidth);
	        var lockedMaxWidth = Math.min(computedMaxWidth, extraMaxWidth);
	        var lockedMinHeight = Math.max(computedMinHeight, extraMinHeight);
	        var lockedMaxHeight = Math.min(computedMaxHeight, extraMaxHeight);
	        newWidth = clamp(newWidth, lockedMinWidth, lockedMaxWidth);
	        newHeight = clamp(newHeight, lockedMinHeight, lockedMaxHeight);
	      } else {
	        newWidth = clamp(newWidth, computedMinWidth, computedMaxWidth);
	        newHeight = clamp(newHeight, computedMinHeight, computedMaxHeight);
	      }
	      if (this.props.grid) {
	        newWidth = snap(newWidth, this.props.grid[0]);
	      }
	      if (this.props.grid) {
	        newHeight = snap(newHeight, this.props.grid[1]);
	      }

	      if (this.props.snap && this.props.snap.x) {
	        newWidth = findClosestSnap(newWidth, this.props.snap.x);
	      }
	      if (this.props.snap && this.props.snap.y) {
	        newHeight = findClosestSnap(newHeight, this.props.snap.y);
	      }

	      var delta = {
	        width: newWidth - original.width,
	        height: newHeight - original.height
	      };

	      if (width && typeof width === 'string' && endsWith(width, '%')) {
	        var percent = newWidth / parentSize.width * 100;
	        newWidth = percent + '%';
	      }

	      if (height && typeof height === 'string' && endsWith(height, '%')) {
	        var _percent = newHeight / parentSize.height * 100;
	        newHeight = _percent + '%';
	      }

	      this.setState({
	        width: this.calculateNewSize(newWidth, 'width'),
	        height: this.calculateNewSize(newHeight, 'height')
	      });

	      if (this.props.onResize) {
	        this.props.onResize(event, direction, this.resizable, delta);
	      }
	    }
	  }, {
	    key: 'onMouseUp',
	    value: function onMouseUp(event) {
	      var _state2 = this.state,
	          isResizing = _state2.isResizing,
	          direction = _state2.direction,
	          original = _state2.original;

	      if (!isResizing) return;
	      var delta = {
	        width: this.size.width - original.width,
	        height: this.size.height - original.height
	      };
	      if (this.props.onResizeStop) {
	        this.props.onResizeStop(event, direction, this.resizable, delta);
	      }
	      if (this.props.size) {
	        this.setState(this.props.size);
	      }
	      this.setState({ isResizing: false, resizeCursor: 'auto' });
	    }
	  }, {
	    key: 'updateSize',
	    value: function updateSize(size) {
	      this.setState({ width: size.width, height: size.height });
	    }
	  }, {
	    key: 'renderResizer',
	    value: function renderResizer() {
	      var _this2 = this;

	      var _props3 = this.props,
	          enable = _props3.enable,
	          handleStyles = _props3.handleStyles,
	          handleClasses = _props3.handleClasses,
	          handleWrapperStyle = _props3.handleWrapperStyle,
	          handleWrapperClass = _props3.handleWrapperClass,
	          handleComponent = _props3.handleComponent;

	      if (!enable) return null;
	      var resizers = Object.keys(enable).map(function (dir) {
	        if (enable[dir] !== false) {
	          return React.createElement(
	            Resizer,
	            {
	              key: dir,
	              direction: dir,
	              onResizeStart: _this2.onResizeStart,
	              replaceStyles: handleStyles && handleStyles[dir],
	              className: handleClasses && handleClasses[dir]
	            },
	            handleComponent && handleComponent[dir] ? React.createElement(handleComponent[dir]) : null
	          );
	        }
	        return null;
	      });
	      // #93 Wrap the resize box in span (will not break 100% width/height)
	      return React.createElement(
	        'span',
	        { className: handleWrapperClass, style: handleWrapperStyle },
	        resizers
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;

	      var userSelect = this.state.isResizing ? userSelectNone : userSelectAuto;
	      return React.createElement(
	        'div',
	        _extends$3({
	          ref: function ref(c) {
	            if (c) {
	              _this3.resizable = c;
	            }
	          },
	          style: _extends$3({
	            position: 'relative'
	          }, userSelect, this.props.style, this.sizeStyle, {
	            maxWidth: this.props.maxWidth,
	            maxHeight: this.props.maxHeight,
	            minWidth: this.props.minWidth,
	            minHeight: this.props.minHeight,
	            boxSizing: 'border-box'
	          }),
	          className: this.props.className
	        }, this.extendsProps),
	        this.state.isResizing && React.createElement('div', {
	          style: {
	            height: '100%',
	            width: '100%',
	            backgroundColor: 'rgba(0,0,0,0)',
	            cursor: '' + (this.state.resizeCursor || 'auto'),
	            opacity: '0',
	            position: 'fixed',
	            zIndex: '9999',
	            top: '0',
	            left: '0',
	            bottom: '0',
	            right: '0'
	          }
	        }),
	        this.props.children,
	        this.renderResizer()
	      );
	    }
	  }, {
	    key: 'parentNode',
	    get: function get$$1() {
	      return this.resizable.parentNode;
	    }
	  }, {
	    key: 'propsSize',
	    get: function get$$1() {
	      return this.props.size || this.props.defaultSize;
	    }
	  }, {
	    key: 'base',
	    get: function get$$1() {
	      var parent = this.parentNode;
	      if (!parent) return undefined;
	      var children = [].slice.call(parent.children);
	      for (var i = 0; i < children.length; i += 1) {
	        var n = children[i];
	        if (n instanceof HTMLElement) {
	          if (n.classList.contains(baseClassName)) {
	            return n;
	          }
	        }
	      }
	      return undefined;
	    }
	  }, {
	    key: 'size',
	    get: function get$$1() {
	      var width = 0;
	      var height = 0;
	      if (typeof window !== 'undefined') {
	        var orgWidth = this.resizable.offsetWidth;
	        var orgHeight = this.resizable.offsetHeight;
	        // HACK: Set position `relative` to get parent size.
	        //       This is because when re-resizable set `absolute`, I can not get base width correctly.
	        var orgPosition = this.resizable.style.position;
	        if (orgPosition !== 'relative') {
	          this.resizable.style.position = 'relative';
	        }
	        // INFO: Use original width or height if set auto.
	        width = this.resizable.style.width !== 'auto' ? this.resizable.offsetWidth : orgWidth;
	        height = this.resizable.style.height !== 'auto' ? this.resizable.offsetHeight : orgHeight;
	        // Restore original position
	        this.resizable.style.position = orgPosition;
	      }
	      return { width: width, height: height };
	    }
	  }, {
	    key: 'sizeStyle',
	    get: function get$$1() {
	      var _this4 = this;

	      var size = this.props.size;

	      var getSize = function getSize(key) {
	        if (typeof _this4.state[key] === 'undefined' || _this4.state[key] === 'auto') return 'auto';
	        if (_this4.propsSize && _this4.propsSize[key] && endsWith(_this4.propsSize[key].toString(), '%')) {
	          if (endsWith(_this4.state[key].toString(), '%')) return _this4.state[key].toString();
	          var parentSize = _this4.getParentSize();
	          var value = Number(_this4.state[key].toString().replace('px', ''));
	          var percent = value / parentSize[key] * 100;
	          return percent + '%';
	        }
	        return getStringSize(_this4.state[key]);
	      };
	      var width = size && typeof size.width !== 'undefined' && !this.state.isResizing ? getStringSize(size.width) : getSize('width');
	      var height = size && typeof size.height !== 'undefined' && !this.state.isResizing ? getStringSize(size.height) : getSize('height');
	      return { width: width, height: height };
	    }
	  }]);
	  return Resizable;
	}(React.Component);

	Resizable.defaultProps = {
	  onResizeStart: function onResizeStart() {},
	  onResize: function onResize() {},
	  onResizeStop: function onResizeStop() {},
	  enable: {
	    top: true,
	    right: true,
	    bottom: true,
	    left: true,
	    topRight: true,
	    bottomRight: true,
	    bottomLeft: true,
	    topLeft: true
	  },
	  style: {},
	  grid: [1, 1],
	  lockAspectRatio: false,
	  lockAspectRatioExtraWidth: 0,
	  lockAspectRatioExtraHeight: 0,
	  scale: 1,
	  resizeRatio: 1
	};

	var ModalDialog_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _beeDnd2 = _interopRequireDefault(build$7);



	var _reResizable2 = _interopRequireDefault(Resizable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  /**
	   * 传给dialog的classname
	   */
	  dialogClassName: _propTypes2["default"].string,
	  contentStyle: _propTypes2["default"].object

	};

	var defaultProps = {
	  minHeight: 150,
	  minWidth: 200,
	  clsPrefix: 'u-modal'
	};

	var ModalDialog = function (_React$Component) {
	  _inherits(ModalDialog, _React$Component);

	  function ModalDialog() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, ModalDialog);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      original: {
	        x: 0,
	        y: 0
	      },
	      maxWidth: Number.MAX_SAFE_INTEGER,
	      maxHeight: Number.MAX_SAFE_INTEGER
	    }, _this.onStart = function () {
	      var draggable = _this.props.draggable;

	      return draggable;
	    }, _this.onStop = function (e, delta) {
	      _this.setState({
	        original: {
	          x: delta.x,
	          y: delta.y
	        }
	      });
	    }, _this.onResizeStart = function (e, dir, elementRef) {
	      var onResizeStart = _this.props.onResizeStart;

	      typeof onResizeStart === "function" && onResizeStart(e, dir, elementRef);
	    }, _this.onResize = function (e, direction, elementRef, delta) {
	      var onResize = _this.props.onResize;
	      var original = _this.state.original;
	      /* resize 之前的值 */

	      var originX = original.x;
	      var originY = original.y;

	      /* 移动的位移 */
	      var moveW = delta.width;
	      var moveH = delta.height;

	      /* 移动的位移 */
	      var x = null,
	          y = null;

	      /* 处理上边缘 */
	      if (/left/i.test(direction)) {
	        x = originX - moveW;
	        y = originY;
	        _this.position = { x: x, y: y

	          /* 处理左边缘 */
	        };
	      } else if (/top/i.test(direction)) {
	        x = originX;
	        y = originY - moveH;
	        _this.position = { x: x, y: y };
	      } else {
	        _this.position = null;
	      }

	      if (x || y) {
	        elementRef.style.transform = 'translate(' + x + 'px, ' + y + 'px)';
	      }
	      if (delta.height) {
	        _this.updateBodyH();
	      }

	      typeof onResize === "function" && onResize(e, direction, elementRef, delta);
	    }, _this.onResizeStop = function (e, direction, elementRef, delta) {
	      var onResizeStop = _this.props.onResizeStop;


	      if (_this.position) {
	        _this.setState({
	          original: _this.position
	        });
	      }

	      typeof onResizeStop === "function" && onResizeStop(e, direction, elementRef, delta);
	    }, _this.updateBodyH = function () {
	      var $resizable = _reactDom2["default"].findDOMNode(_this.resizable);
	      var $header = $resizable.querySelector(".u-modal-header");
	      var $body = $resizable.querySelector(".u-modal-body");
	      var $footer = $resizable.querySelector(".u-modal-footer");

	      var totalH = $resizable.style.height;
	      totalH = Number(totalH.replace("px", ""));
	      if ($header) {
	        totalH -= $header.offsetHeight;
	      }
	      if ($footer) {
	        totalH -= $footer.offsetHeight;
	      }

	      $body.style.height = totalH + 'px';
	    }, _this.getMaxSizesFromProps = function () {
	      var backDropW = _this.backdrop && _this.backdrop.offsetWidth ? _this.backdrop.offsetWidth : Number.MAX_SAFE_INTEGER;
	      var backDropH = _this.backdrop && _this.backdrop.offsetHeight ? _this.backdrop.offsetHeight : Number.MAX_SAFE_INTEGER;

	      var maxWidth = typeof _this.props.maxWidth === "undefined" ? backDropW : _this.props.maxWidth;
	      var maxHeight = typeof _this.props.maxHeight === "undefined" ? backDropH : _this.props.maxHeight;
	      return { maxWidth: maxWidth, maxHeight: maxHeight };
	    }, _this.handleWH = function (value) {
	      var size = value;
	      if (typeof value === "string" && value.endsWith("px")) {
	        size = Number(value.replace("px", ""));
	      } else if (typeof Number(value) === "number" && !Number.isNaN(Number(value))) {
	        size = Number(value);
	      }
	      return size;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  ModalDialog.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _getMaxSizesFromProps = this.getMaxSizesFromProps(),
	        maxWidth = _getMaxSizesFromProps.maxWidth,
	        maxHeight = _getMaxSizesFromProps.maxHeight;

	    if (maxWidth != this.state.maxWidth) {
	      this.setState({
	        maxWidth: maxWidth,
	        maxHeight: maxHeight
	      });
	    }
	  };

	  /* 开始resize */


	  /* resizing */


	  /* resize 结束 */


	  /**
	   * 更新Modal.Body的高度
	   */


	  /**
	   * 获取最大宽度和高度
	   */


	  ModalDialog.prototype.render = function render() {
	    var _dialogClasses,
	        _this2 = this;

	    var _props = this.props,
	        dialogClassName = _props.dialogClassName,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        size = _props.size,
	        style = _props.style,
	        contentStyle = _props.contentStyle,
	        children = _props.children,
	        draggable = _props.draggable,
	        resizable = _props.resizable,
	        minHeight = _props.minHeight,
	        minWidth = _props.minWidth,
	        props = _objectWithoutProperties(_props, ['dialogClassName', 'className', 'clsPrefix', 'size', 'style', 'contentStyle', 'children', 'draggable', 'resizable', 'minHeight', 'minWidth']);

	    var _state = this.state,
	        original = _state.original,
	        maxWidth = _state.maxWidth,
	        maxHeight = _state.maxHeight;


	    var uClassName = _defineProperty({}, '' + clsPrefix, true);

	    var modalStyle = { display: 'block' };

	    var dialogClasses = (_dialogClasses = {}, _defineProperty(_dialogClasses, uClassName, false), _defineProperty(_dialogClasses, clsPrefix + '-dialog', true), _dialogClasses);
	    if (size) {
	      dialogClasses[clsPrefix + '-' + size] = true;
	    }
	    if (draggable) {
	      dialogClasses[clsPrefix + '-draggable'] = true;
	    }

	    return _react2["default"].createElement(
	      'div',
	      _extends({}, props, {
	        tabIndex: '-1',
	        role: 'dialog',
	        style: modalStyle,
	        ref: function ref(_ref3) {
	          return _this2.backdrop = _ref3;
	        },
	        className: (0, _classnames2["default"])(className, uClassName)
	      }),
	      _react2["default"].createElement(
	        'div',
	        { className: (0, _classnames2["default"])(dialogClassName, dialogClasses), style: style },
	        _react2["default"].createElement(
	          _beeDnd2["default"],
	          {
	            handle: '.dnd-handle',
	            cancel: '.dnd-cancel',
	            onStart: this.onStart,
	            onStop: this.onStop,
	            position: original,
	            list: []
	          },
	          resizable ? _react2["default"].createElement(
	            _reResizable2["default"],
	            {
	              ref: function ref(c) {
	                if (c) {
	                  _this2.resizable = c;
	                }
	              },
	              onResizeStart: this.onResizeStart,
	              onResize: this.onResize,
	              onResizeStop: this.onResizeStop,
	              minWidth: this.handleWH(minWidth),
	              minHeight: this.handleWH(minHeight),
	              maxWidth: this.handleWH(maxWidth),
	              maxHeight: this.handleWH(maxHeight)
	            },
	            _react2["default"].createElement(
	              'div',
	              { style: _extends({}, contentStyle, { height: "100%" }), className: (0, _classnames2["default"])([clsPrefix + '-content']), role: 'document', ref: function ref(_ref) {
	                  return _this2.resize = _ref;
	                } },
	              children
	            )
	          ) : _react2["default"].createElement(
	            'div',
	            { style: contentStyle, className: (0, _classnames2["default"])([clsPrefix + '-content']), role: 'document', ref: function ref(_ref2) {
	                return _this2.resize = _ref2;
	              } },
	            children
	          )
	        )
	      )
	    );
	  };

	  return ModalDialog;
	}(_react2["default"].Component);

	ModalDialog.propTypes = propTypes$1;
	ModalDialog.defaultProps = defaultProps;

	exports["default"] = ModalDialog;
	module.exports = exports['default'];
	});

	unwrapExports(ModalDialog_1);

	var ModalFooter_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes = {
	  componentClass: lib$1.elementType
	};

	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-modal-footer'
	};

	var ModalFooter = function (_React$Component) {
	  _inherits(ModalFooter, _React$Component);

	  function ModalFooter() {
	    _classCallCheck(this, ModalFooter);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  ModalFooter.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['componentClass', 'clsPrefix', 'className']);

	    var classes = {};
	    classes['' + clsPrefix] = true;

	    return _react2["default"].createElement(Component, _extends({}, props, {
	      className: (0, _classnames2["default"])(className, classes)
	    }));
	  };

	  return ModalFooter;
	}(_react2["default"].Component);

	ModalFooter.propTypes = propTypes;
	ModalFooter.defaultProps = defaultProps;

	exports["default"] = ModalFooter;
	module.exports = exports['default'];
	});

	unwrapExports(ModalFooter_1);

	var ModalHeader_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {

	  /**
	   * 是否显示关闭按钮
	   */
	  closeButton: _propTypes2["default"].bool,

	  /**
	   * 关闭时的钩子函数
	   */
	  onHide: _propTypes2["default"].func
	};

	var defaultProps = {
	  'aria-label': 'Close',
	  closeButton: false,
	  clsPrefix: 'u-modal-header'
	};

	var contextTypes = {
	  $u_modal: _propTypes2["default"].shape({
	    onHide: _propTypes2["default"].func
	  })
	};

	var ModalHeader = function (_React$Component) {
	  _inherits(ModalHeader, _React$Component);

	  function ModalHeader() {
	    _classCallCheck(this, ModalHeader);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  ModalHeader.prototype.render = function render() {
	    var _props = this.props,
	        label = _props['aria-label'],
	        closeButton = _props.closeButton,
	        onHide = _props.onHide,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        children = _props.children,
	        props = _objectWithoutProperties(_props, ['aria-label', 'closeButton', 'onHide', 'className', 'clsPrefix', 'children']);

	    var modal = this.context.$u_modal;

	    var classes = {};
	    classes['' + clsPrefix] = true;
	    classes['dnd-handle'] = true;
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, props, {
	        className: (0, _classnames2["default"])(className, classes)
	      }),
	      closeButton && _react2["default"].createElement(
	        'button',
	        {
	          type: 'button',
	          className: 'u-close dnd-cancel',
	          'aria-label': label,
	          onClick: (0, lib$1.createChainedFunction)(modal.onHide, onHide)
	        },
	        _react2["default"].createElement(
	          'span',
	          { 'aria-hidden': 'true' },
	          _react2["default"].createElement('i', { className: 'uf uf-close' })
	        )
	      ),
	      children
	    );
	  };

	  return ModalHeader;
	}(_react2["default"].Component);

	ModalHeader.propTypes = propTypes$1;
	ModalHeader.defaultProps = defaultProps;
	ModalHeader.contextTypes = contextTypes;

	exports["default"] = ModalHeader;
	module.exports = exports['default'];
	});

	unwrapExports(ModalHeader_1);

	var ModalTitle_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes = {
	  componentClass: lib$1.elementType
	};

	var defaultProps = {
	  componentClass: 'h4',
	  clsPrefix: 'u-modal-title'
	};

	var ModalTitle = function (_React$Component) {
	  _inherits(ModalTitle, _React$Component);

	  function ModalTitle() {
	    _classCallCheck(this, ModalTitle);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  ModalTitle.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        props = _objectWithoutProperties(_props, ['componentClass', 'className', 'clsPrefix']);

	    var classes = {};
	    classes['' + clsPrefix] = true;
	    classes['clearfix'] = true;

	    return _react2["default"].createElement(Component, _extends({}, props, {
	      className: (0, _classnames2["default"])(className, classes)
	    }));
	  };

	  return ModalTitle;
	}(_react2["default"].Component);

	ModalTitle.propTypes = propTypes;
	ModalTitle.defaultProps = defaultProps;

	exports["default"] = ModalTitle;
	module.exports = exports['default'];
	});

	unwrapExports(ModalTitle_1);

	var Modal_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.destroyFns = undefined;

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _extends2;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _events2 = _interopRequireDefault(events);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _inDOM2 = _interopRequireDefault(inDOM);



	var _scrollbarSize2 = _interopRequireDefault(scrollbarSize);



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _Modal2 = _interopRequireDefault(Modal);



	var _isOverflowing2 = _interopRequireDefault(isOverflowing_1);







	var _ModalBody2 = _interopRequireDefault(ModalBody_1);



	var _ModalDialog2 = _interopRequireDefault(ModalDialog_1);



	var _ModalFooter2 = _interopRequireDefault(ModalFooter_1);



	var _ModalHeader2 = _interopRequireDefault(ModalHeader_1);



	var _ModalTitle2 = _interopRequireDefault(ModalTitle_1);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var propTypes$1 = _extends({}, _Modal2["default"].propTypes, _ModalDialog2["default"].propTypes, (_extends2 = {

	  /**
	   * 是否弹出遮罩层/遮罩层点击是否触发关闭
	   */
	  backdrop: _propTypes2["default"].oneOf(['static', true, false]),

	  /**
	   * 点击遮罩层是否允许关闭
	   */
	  backdropClosable: _propTypes2["default"].bool,
	  /**
	   * esc触发关闭
	   */
	  keyboard: _propTypes2["default"].bool,

	  /**
	   * 显隐时是否使用动画
	   */
	  animation: _propTypes2["default"].bool,

	  /**
	   * 传递给模态框的样式
	   */
	  dialogComponentClass: lib$1.elementType,

	  /**
	   * 自动设置焦点
	   */
	  autoFocus: _propTypes2["default"].bool,

	  /**
	   * 防止打开时焦点离开模态框
	   */
	  enforceFocus: _propTypes2["default"].bool,

	  /**
	   * 是否打开模态框
	   */
	  show: _propTypes2["default"].bool,

	  /**
	   * 关闭时的钩子函数
	   */
	  onHide: _propTypes2["default"].func,

	  onEnter: _propTypes2["default"].func,

	  onEntering: _propTypes2["default"].func,

	  onEntered: _propTypes2["default"].func,

	  onExit: _propTypes2["default"].func,

	  onExiting: _propTypes2["default"].func,

	  onExited: _propTypes2["default"].func,

	  containerClassName: _propTypes2["default"].string
	}, _defineProperty(_extends2, 'containerClassName', _propTypes2["default"].string), _defineProperty(_extends2, 'container', _Modal2["default"].propTypes.container), _defineProperty(_extends2, 'size', _propTypes2["default"].oneOf(["sm", "lg", "xlg", ""])), _defineProperty(_extends2, 'width', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'draggable', _propTypes2["default"].bool), _defineProperty(_extends2, 'resizable', _propTypes2["default"].bool), _defineProperty(_extends2, 'onResizeStart', _propTypes2["default"].func), _defineProperty(_extends2, 'onResize', _propTypes2["default"].func), _defineProperty(_extends2, 'onResizeStop', _propTypes2["default"].func), _defineProperty(_extends2, 'minWidth', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'minHeight', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'maxWidth', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _defineProperty(_extends2, 'maxHeight', _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])), _extends2));

	var defaultProps = _extends({}, _Modal2["default"].defaultProps, {
	  backdropClosable: true,
	  animation: true,
	  dialogComponentClass: _ModalDialog2["default"],
	  draggable: false,
	  resizable: false,
	  clsPrefix: 'u-modal'
	});

	var ModalFuncProps = {
	  prefixCls: _propTypes2["default"].string,
	  className: _propTypes2["default"].string,
	  show: _propTypes2["default"].bool,
	  title: _react2["default"].ReactNode,
	  content: _react2["default"].ReactNode,
	  onOk: _propTypes2["default"].func,
	  onCancel: _propTypes2["default"].func,
	  width: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	  okText: _propTypes2["default"].string,
	  okType: _propTypes2["default"].string,
	  cancelText: _propTypes2["default"].string,
	  icon: _react2["default"].ReactNode,
	  backdrop: _propTypes2["default"].oneOf(['static', true, false])
	};

	var ModalFunc = function ModalFunc(props) {
	  destroy = function destroy() {};
	  update = function update(newConfig) {};
	};

	var destroyFns = exports.destroyFns = [];

	var childContextTypes = {
	  $u_modal: _propTypes2["default"].shape({
	    onHide: _propTypes2["default"].func
	  })
	};

	var Modal$1 = function (_React$Component) {
	  _inherits(Modal, _React$Component);

	  function Modal(props, context) {
	    _classCallCheck(this, Modal);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.handleEntering = _this.handleEntering.bind(_this);
	    _this.handleExited = _this.handleExited.bind(_this);
	    _this.handleWindowResize = _this.handleWindowResize.bind(_this);
	    _this.handleDialogClick = _this.handleDialogClick.bind(_this);

	    _this.state = {
	      style: {}
	    };
	    return _this;
	  }

	  Modal.prototype.getChildContext = function getChildContext() {
	    return {
	      $u_modal: {
	        onHide: this.props.onHide
	      }
	    };
	  };

	  Modal.prototype.componentWillUnmount = function componentWillUnmount() {
	    // Clean up the listener if we need to.
	    this.handleExited();
	  };

	  Modal.prototype.handleEntering = function handleEntering() {
	    // FIXME: This should work even when animation is disabled.
	    _events2["default"].on(window, 'resize', this.handleWindowResize);
	    this.updateStyle();
	  };

	  Modal.prototype.handleExited = function handleExited() {
	    // FIXME: This should work even when animation is disabled.
	    _events2["default"].off(window, 'resize', this.handleWindowResize);
	  };

	  Modal.prototype.handleWindowResize = function handleWindowResize() {
	    this.updateStyle();
	  };

	  Modal.prototype.handleDialogClick = function handleDialogClick(e) {
	    if (e.target !== e.currentTarget) {
	      return;
	    }

	    this.props.onHide();
	  };

	  Modal.prototype.updateStyle = function updateStyle() {
	    if (!_inDOM2["default"] || !this._modal) {
	      return;
	    }

	    var dialogNode = this._modal.getDialogElement();
	    var dialogHeight = dialogNode.scrollHeight;

	    var document = (0, _ownerDocument2["default"])(dialogNode);
	    var bodyIsOverflowing = (0, _isOverflowing2["default"])(_reactDom2["default"].findDOMNode(this.props.container || document.body));
	    var modalIsOverflowing = dialogHeight > document.documentElement.clientHeight;

	    this.setState({
	      style: {
	        paddingRight: bodyIsOverflowing && !modalIsOverflowing ? (0, _scrollbarSize2["default"])() : undefined,
	        paddingLeft: !bodyIsOverflowing && modalIsOverflowing ? (0, _scrollbarSize2["default"])() : undefined
	      }
	    });
	  };

	  Modal.prototype.render = function render() {
	    var _this2 = this;

	    var _props = this.props,
	        backdrop = _props.backdrop,
	        backdropClosable = _props.backdropClosable,
	        animation = _props.animation,
	        show = _props.show,
	        Dialog = _props.dialogComponentClass,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        _props$style = _props.style,
	        style = _props$style === undefined ? {} : _props$style,
	        size = _props.size,
	        width = _props.width,
	        children = _props.children,
	        onEntering = _props.onEntering,
	        onExited = _props.onExited,
	        backdropClassName = _props.backdropClassName,
	        containerClassName = _props.containerClassName,
	        draggable = _props.draggable,
	        props = _objectWithoutProperties(_props, ['backdrop', 'backdropClosable', 'animation', 'show', 'dialogComponentClass', 'className', 'clsPrefix', 'style', 'size', 'width', 'children', 'onEntering', 'onExited', 'backdropClassName', 'containerClassName', 'draggable']);

	    var _splitComponent = (0, lib$1.splitComponent)(props, _Modal2["default"]),
	        _splitComponent2 = _slicedToArray(_splitComponent, 2),
	        baseModalProps = _splitComponent2[0],
	        dialogProps = _splitComponent2[1];

	    var inClassName = show && !animation && 'in';

	    var backdropClasses = _defineProperty({}, clsPrefix + '-backdrop', true);
	    var containerClasses = _defineProperty({}, clsPrefix + '-open', true);
	    if (Number(width)) width += 'px';

	    var styleRes = _extends({}, this.state.style, style);
	    if (width) {
	      _extends(styleRes, { width: width });
	    }
	    return _react2["default"].createElement(
	      _Modal2["default"],
	      _extends({}, baseModalProps, {
	        ref: function ref(c) {
	          _this2._modal = c;
	        },
	        show: show,
	        onEntering: (0, lib$1.createChainedFunction)(onEntering, this.handleEntering),
	        onExited: (0, lib$1.createChainedFunction)(onExited, this.handleExited),
	        backdrop: backdrop,
	        backdropClassName: (0, _classnames2["default"])(backdropClasses, inClassName),
	        containerClassName: (0, _classnames2["default"])(containerClasses, containerClassName),
	        transition: animation ? build$6.Fade : undefined,
	        dialogTransitionTimeout: Modal.TRANSITION_DURATION,
	        backdropTransitionTimeout: Modal.BACKDROP_TRANSITION_DURATION
	      }),
	      _react2["default"].createElement(
	        Dialog,
	        _extends({}, dialogProps, {
	          style: styleRes,
	          className: (0, _classnames2["default"])(className, inClassName, backdropClassName),
	          onClick: backdrop === true && !!backdropClosable ? this.handleDialogClick : null,
	          size: size,
	          draggable: draggable
	        }),
	        children
	      )
	    );
	  };

	  return Modal;
	}(_react2["default"].Component);

	Modal$1.info = ModalFunc;
	Modal$1.success = ModalFunc;
	Modal$1.error = ModalFunc;
	Modal$1.warn = ModalFunc;
	Modal$1.warning = ModalFunc;
	Modal$1.confirm = ModalFunc;

	Modal$1.destroyAll = function () {
	  return;
	};

	Modal$1.propTypes = propTypes$1;
	Modal$1.defaultProps = defaultProps;
	Modal$1.childContextTypes = childContextTypes;

	Modal$1.Body = _ModalBody2["default"];
	Modal$1.Header = _ModalHeader2["default"];
	Modal$1.Title = _ModalTitle2["default"];
	Modal$1.Footer = _ModalFooter2["default"];

	Modal$1.Dialog = _ModalDialog2["default"];

	Modal$1.TRANSITION_DURATION = 200000;
	Modal$1.BACKDROP_TRANSITION_DURATION = 10000;

	exports["default"] = Modal$1;
	});

	unwrapExports(Modal_1);
	var Modal_2 = Modal_1.destroyFns;

	var confirm_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = confirm;



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _Modal2 = _interopRequireDefault(Modal_1);



	var _beeButton2 = _interopRequireDefault(build);



	var _beeIcon2 = _interopRequireDefault(build$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var IS_REACT_16 = !!_reactDom2["default"].createPortal;

	var ConfirmDialog = function ConfirmDialog(props) {
	  var onCancel = props.onCancel,
	      onOk = props.onOk,
	      close = props.close,
	      onHide = props.onHide,
	      show = props.show,
	      keyboard = props.keyboard,
	      centered = props.centered,
	      getContainer = props.getContainer,
	      maskStyle = props.maskStyle,
	      okButtonProps = props.okButtonProps,
	      cancelButtonProps = props.cancelButtonProps,
	      _props$iconType = props.iconType,
	      iconType = _props$iconType === undefined ? 'uf-qm-c' : _props$iconType;

	  // 支持传入{ icon: null }来隐藏`Modal.confirm`默认的Icon

	  var icon = props.icon === undefined ? iconType : props.icon;
	  var okType = props.okType || 'primary';
	  var prefixCls = props.prefixCls || 'u-modal';
	  var contentPrefixCls = prefixCls + '-confirm';
	  // 默认为 true，保持向下兼容
	  var okCancel = 'okCancel' in props ? props.okCancel : true;
	  var width = props.width || 400;
	  var style = props.style || {};
	  var backdrop = props.backdrop === undefined ? true : props.backdrop;
	  // 默认为 false，保持旧版默认行为
	  var maskClosable = props.maskClosable === undefined ? false : props.maskClosable;
	  // const runtimeLocale = getConfirmLocale();
	  var okText = props.okText || (okCancel ? "确定" : "知道了");
	  var cancelText = props.cancelText || "取消";
	  var autoFocusButton = props.autoFocusButton === null ? false : props.autoFocusButton || 'ok';
	  var transitionName = props.transitionName || 'zoom';
	  var maskTransitionName = props.maskTransitionName || 'fade';

	  var classString = (0, _classnames2["default"])(contentPrefixCls, contentPrefixCls + '-' + props.type, props.className);

	  var cancelButton = okCancel && _react2["default"].createElement(
	    _beeButton2["default"],
	    {
	      onClick: function onClick() {
	        close();onCancel ? onCancel() : function () {
	          return;
	        };
	      },
	      colors: 'secondary',
	      style: { marginRight: 8 }
	    },
	    cancelText
	  );
	  var iconNode = typeof icon === 'string' ? _react2["default"].createElement(_beeIcon2["default"], { type: icon }) : icon;

	  return _react2["default"].createElement(
	    _Modal2["default"],
	    {
	      width: width,
	      className: classString,
	      show: show,
	      onHide: onHide,
	      backdrop: backdrop },
	    _react2["default"].createElement(
	      _Modal2["default"].Header,
	      null,
	      _react2["default"].createElement(
	        _Modal2["default"].Title,
	        null,
	        iconNode,
	        _react2["default"].createElement(
	          'span',
	          { className: contentPrefixCls + '-title' },
	          props.title
	        )
	      )
	    ),
	    _react2["default"].createElement(
	      _Modal2["default"].Body,
	      null,
	      _react2["default"].createElement(
	        'div',
	        { className: contentPrefixCls + '-content' },
	        props.content
	      )
	    ),
	    _react2["default"].createElement(
	      _Modal2["default"].Footer,
	      null,
	      cancelButton,
	      _react2["default"].createElement(
	        _beeButton2["default"],
	        {
	          onClick: function onClick() {
	            close();onOk ? onOk() : function () {
	              return;
	            };
	          },
	          colors: okType
	        },
	        okText
	      )
	    )
	  );
	};

	function confirm(config) {
	  var div = document.createElement('div');
	  document.body.appendChild(div);
	  var currentConfig = _extends({}, config, { close: close, show: true });

	  function close() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    currentConfig = _extends({}, currentConfig, {
	      show: false,
	      onHide: destroy.bind.apply(destroy, [this].concat(args))
	    });
	    if (IS_REACT_16) {
	      render(currentConfig);
	    } else {
	      destroy.apply(undefined, args);
	    }
	  }

	  function update(newConfig) {
	    currentConfig = _extends({}, currentConfig, newConfig);
	    render(currentConfig);
	  }

	  function destroy() {
	    var unmountResult = _reactDom2["default"].unmountComponentAtNode(div);
	    if (unmountResult && div.parentNode) {
	      div.parentNode.removeChild(div);
	    }

	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    var triggerCancel = args.some(function (param) {
	      return param && param.triggerCancel;
	    });
	    if (config.onCancel && triggerCancel) {
	      config.onCancel.apply(config, args);
	    }
	    for (var i = 0; i < Modal_1.destroyFns.length; i++) {
	      var fn = Modal_1.destroyFns[i];
	      if (fn === close) {
	        Modal_1.destroyFns.splice(i, 1);
	        break;
	      }
	    }
	  }

	  function render(props) {
	    _reactDom2["default"].render(_react2["default"].createElement(ConfirmDialog, props), div);
	  }

	  render(currentConfig);

	  Modal_1.destroyFns.push(close);

	  return {
	    destroy: close,
	    update: update
	  };
	}
	module.exports = exports['default'];
	});

	unwrapExports(confirm_1);

	var build$8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _Modal2 = _interopRequireDefault(Modal_1);



	var _confirm2 = _interopRequireDefault(confirm_1);



	var _beeIcon2 = _interopRequireDefault(build$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_Modal2["default"].info = function (props) {
	    var config = _extends({
	        type: 'info',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-i-c-2' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};

	_Modal2["default"].success = function (props) {
	    var config = _extends({
	        type: 'success',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-correct' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};

	_Modal2["default"].error = function (props) {
	    var config = _extends({
	        type: 'error',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-close-bold' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};

	_Modal2["default"].warning = function (props) {
	    var config = _extends({
	        type: 'warning',
	        icon: _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-exc-t' }),
	        okCancel: false
	    }, props);
	    return (0, _confirm2["default"])(config);
	};

	_Modal2["default"].confirm = function (props) {
	    var config = _extends({
	        type: 'confirm',
	        okCancel: true
	    }, props);
	    return (0, _confirm2["default"])(config);
	};

	_Modal2["default"].destroyAll = function () {
	    while (Modal_1.destroyFns.length) {
	        var close = Modal_1.destroyFns.pop();
	        if (close) {
	            close();
	        }
	    }
	};
	exports["default"] = _Modal2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$8);

	var PaginationButton_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  className: _propTypes2["default"].string,
	  eventKey: _propTypes2["default"].any,
	  onSelect: _propTypes2["default"].func,
	  disabled: _propTypes2["default"].bool,
	  active: _propTypes2["default"].bool,
	  onClick: _propTypes2["default"].func
	};

	var defaultProps = {
	  componentClass: 'a',
	  active: false,
	  disabled: false
	};

	var PaginationButton = function (_React$Component) {
	  _inherits(PaginationButton, _React$Component);

	  function PaginationButton(props, context) {
	    _classCallCheck(this, PaginationButton);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.handleClick = _this.handleClick.bind(_this);
	    return _this;
	  }

	  PaginationButton.prototype.handleClick = function handleClick(event) {
	    var _props = this.props,
	        disabled = _props.disabled,
	        onSelect = _props.onSelect,
	        eventKey = _props.eventKey;


	    if (disabled) {
	      return;
	    }

	    if (onSelect) {
	      onSelect(eventKey, event);
	    }
	  };

	  PaginationButton.prototype.render = function render() {
	    var _props2 = this.props,
	        Component = _props2.componentClass,
	        active = _props2.active,
	        disabled = _props2.disabled,
	        onClick = _props2.onClick,
	        eventKey = _props2.eventKey,
	        className = _props2.className,
	        style = _props2.style,
	        iconBtn = _props2.iconBtn,
	        props = _objectWithoutProperties(_props2, ['componentClass', 'active', 'disabled', 'onClick', 'eventKey', 'className', 'style', 'iconBtn']);

	    delete props.onSelect;
	    return _react2["default"].createElement(
	      'li',
	      {
	        className: (0, _classnames2["default"])(className, { active: active, disabled: disabled, iconBtn: iconBtn }),
	        style: style
	      },
	      _react2["default"].createElement(Component, _extends({}, props, {
	        disabled: disabled,
	        onClick: this.handleClick
	      }))
	    );
	  };

	  return PaginationButton;
	}(_react2["default"].Component);

	PaginationButton.propTypes = propTypes$1;
	PaginationButton.defaultProps = defaultProps;

	exports["default"] = PaginationButton;
	module.exports = exports['default'];
	});

	unwrapExports(PaginationButton_1);

	var Button_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    /**
	     * @title 尺寸
	     */
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'xg', 'lg']),
	    /**
	     * @title 样式
	     */
	    style: _propTypes2["default"].object,
	    /**
	     * @title 形状
	     */
	    shape: _propTypes2["default"].oneOf(['block', 'round', 'border', 'squared', 'floating', 'pillRight', 'pillLeft', 'icon']),

	    bordered: _propTypes2["default"].bool,
	    /**
	    * @title 类型
	    */
	    colors: _propTypes2["default"].oneOf(['primary', 'secondary', 'accent', 'success', 'info', 'warning', 'danger', 'dark', 'light', 'default']),
	    /**
	     * @title 是否禁用
	     * @veIgnore
	     */
	    disabled: _propTypes2["default"].bool,
	    /**
	     * @title 类名
	     * @veIgnore
	     */
	    className: _propTypes2["default"].string,

	    /**
	     * @title <button> 的 type
	     * @veIgnore
	     */
	    htmlType: _propTypes2["default"].oneOf(['submit', 'button', 'reset']),
	    isSubmit: _propTypes2["default"].bool //是否作为form的提交按钮
	};

	var defaultProps = {
	    disabled: false,
	    htmlType: 'button',
	    clsPrefix: 'u-button',
	    bordered: false,
	    isSubmit: false
	};

	var sizeMap = {
	    sm: 'sm',
	    md: 'md',
	    xg: 'xg',
	    lg: 'lg'
	},
	    colorsMap = {
	    primary: 'primary',
	    secondary: 'secondary',
	    accent: 'accent',
	    success: 'success',
	    info: 'info',
	    warning: 'warning',
	    danger: 'danger',
	    dark: 'dark',
	    light: 'light'
	},
	    shapeMap = {
	    block: 'block',
	    round: 'round',
	    border: 'border',
	    squared: 'squared',
	    floating: 'floating',
	    pillRight: 'pill-right',
	    pillLeft: 'pill-left',
	    icon: 'icon'
	};

	var Button = function (_Component) {
	    _inherits(Button, _Component);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }

	    Button.prototype.render = function render() {
	        var _props = this.props,
	            colors = _props.colors,
	            shape = _props.shape,
	            disabled = _props.disabled,
	            className = _props.className,
	            size = _props.size,
	            bordered = _props.bordered,
	            children = _props.children,
	            htmlType = _props.htmlType,
	            clsPrefix = _props.clsPrefix,
	            isSubmit = _props.isSubmit,
	            others = _objectWithoutProperties(_props, ['colors', 'shape', 'disabled', 'className', 'size', 'bordered', 'children', 'htmlType', 'clsPrefix', 'isSubmit']);

	        var clsObj = {};
	        if (className) {
	            clsObj[className] = true;
	        }
	        if (sizeMap[size]) {
	            clsObj[clsPrefix + '-' + sizeMap[size]] = true;
	        }

	        if (shapeMap[shape]) {
	            clsObj[clsPrefix + '-' + shapeMap[shape]] = true;
	        }
	        if (colorsMap[colors]) {
	            clsObj[clsPrefix + '-' + colorsMap[colors]] = true;
	        }
	        if (bordered) {
	            clsObj[clsPrefix + '-border'] = bordered;
	        }
	        var classes = (0, _classnames2["default"])(clsPrefix, clsObj);
	        return _react2["default"].createElement(
	            'button',
	            _extends({
	                type: htmlType,
	                className: classes,
	                disabled: disabled
	            }, others),
	            this.props.children
	        );
	    };

	    return Button;
	}(React__default.Component);

	Button.propTypes = propTypes$1;
	Button.defaultProps = defaultProps;

	exports["default"] = Button;
	module.exports = exports['default'];
	});

	unwrapExports(Button_1$1);

	var build$9 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Button2 = _interopRequireDefault(Button_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Button2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$9);

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	function componentWillMount() {
	  // Call this.constructor.gDSFP to support sub-classes.
	  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
	  if (state !== null && state !== undefined) {
	    this.setState(state);
	  }
	}

	function componentWillReceiveProps(nextProps) {
	  // Call this.constructor.gDSFP to support sub-classes.
	  // Use the setState() updater to ensure state isn't stale in certain edge cases.
	  function updater(prevState) {
	    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
	    return state !== null && state !== undefined ? state : null;
	  }
	  // Binding "this" is important for shallow renderer support.
	  this.setState(updater.bind(this));
	}

	function componentWillUpdate(nextProps, nextState) {
	  try {
	    var prevProps = this.props;
	    var prevState = this.state;
	    this.props = nextProps;
	    this.state = nextState;
	    this.__reactInternalSnapshotFlag = true;
	    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
	      prevProps,
	      prevState
	    );
	  } finally {
	    this.props = prevProps;
	    this.state = prevState;
	  }
	}

	// React may warn about cWM/cWRP/cWU methods being deprecated.
	// Add a flag to suppress these warnings for this special case.
	componentWillMount.__suppressDeprecationWarning = true;
	componentWillReceiveProps.__suppressDeprecationWarning = true;
	componentWillUpdate.__suppressDeprecationWarning = true;

	function polyfill$1(Component) {
	  var prototype = Component.prototype;

	  if (!prototype || !prototype.isReactComponent) {
	    throw new Error('Can only polyfill class components');
	  }

	  if (
	    typeof Component.getDerivedStateFromProps !== 'function' &&
	    typeof prototype.getSnapshotBeforeUpdate !== 'function'
	  ) {
	    return Component;
	  }

	  // If new component APIs are defined, "unsafe" lifecycles won't be called.
	  // Error if any of these lifecycles are present,
	  // Because they would work differently between older and newer (16.3+) versions of React.
	  var foundWillMountName = null;
	  var foundWillReceivePropsName = null;
	  var foundWillUpdateName = null;
	  if (typeof prototype.componentWillMount === 'function') {
	    foundWillMountName = 'componentWillMount';
	  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
	    foundWillMountName = 'UNSAFE_componentWillMount';
	  }
	  if (typeof prototype.componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'componentWillReceiveProps';
	  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	  }
	  if (typeof prototype.componentWillUpdate === 'function') {
	    foundWillUpdateName = 'componentWillUpdate';
	  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
	    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	  }
	  if (
	    foundWillMountName !== null ||
	    foundWillReceivePropsName !== null ||
	    foundWillUpdateName !== null
	  ) {
	    var componentName = Component.displayName || Component.name;
	    var newApiName =
	      typeof Component.getDerivedStateFromProps === 'function'
	        ? 'getDerivedStateFromProps()'
	        : 'getSnapshotBeforeUpdate()';

	    throw Error(
	      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
	        componentName +
	        ' uses ' +
	        newApiName +
	        ' but also contains the following legacy lifecycles:' +
	        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
	        (foundWillReceivePropsName !== null
	          ? '\n  ' + foundWillReceivePropsName
	          : '') +
	        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
	        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
	        'https://fb.me/react-async-component-lifecycle-hooks'
	    );
	  }

	  // React <= 16.2 does not support static getDerivedStateFromProps.
	  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
	  // Newer versions of React will ignore these lifecycles if gDSFP exists.
	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    prototype.componentWillMount = componentWillMount;
	    prototype.componentWillReceiveProps = componentWillReceiveProps;
	  }

	  // React <= 16.2 does not support getSnapshotBeforeUpdate.
	  // As a workaround, use cWU to invoke the new lifecycle.
	  // Newer versions of React will ignore that lifecycle if gSBU exists.
	  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
	    if (typeof prototype.componentDidUpdate !== 'function') {
	      throw new Error(
	        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
	      );
	    }

	    prototype.componentWillUpdate = componentWillUpdate;

	    var componentDidUpdate = prototype.componentDidUpdate;

	    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
	      prevProps,
	      prevState,
	      maybeSnapshot
	    ) {
	      // 16.3+ will not execute our will-update method;
	      // It will pass a snapshot value to did-update though.
	      // Older versions will require our polyfilled will-update value.
	      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
	      // Because for <= 15.x versions this might be a "prevContext" object.
	      // We also can't just check "__reactInternalSnapshot",
	      // Because get-snapshot might return a falsy value.
	      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
	      var snapshot = this.__reactInternalSnapshotFlag
	        ? this.__reactInternalSnapshot
	        : maybeSnapshot;

	      componentDidUpdate.call(this, prevProps, prevState, snapshot);
	    };
	  }

	  return Component;
	}

	var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
		polyfill: polyfill$1
	});

	var ChildrenUtils = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toArrayChildren = toArrayChildren;
	exports.findChildInChildrenByKey = findChildInChildrenByKey;
	exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
	exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
	exports.isSameChildren = isSameChildren;
	exports.mergeChildren = mergeChildren;



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function toArrayChildren(children) {
	  var ret = [];
	  _react2["default"].Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child && child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child && child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findHiddenChildInChildrenByKey(children, key, showProp) {
	  var found = 0;
	  if (children) {
	    children.forEach(function (child) {
	      if (found) {
	        return;
	      }
	      found = child && child.key === key && !child.props[showProp];
	    });
	  }
	  return found;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child && child2) {
	        if (child && !child2 || !child && child2) {
	          same = false;
	        } else if (child.key !== child2.key) {
	          same = false;
	        } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	          same = false;
	        }
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (child && findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (child && nextChildrenPending.hasOwnProperty(child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
	}
	});

	unwrapExports(ChildrenUtils);
	var ChildrenUtils_1 = ChildrenUtils.toArrayChildren;
	var ChildrenUtils_2 = ChildrenUtils.findChildInChildrenByKey;
	var ChildrenUtils_3 = ChildrenUtils.findShownChildInChildrenByKey;
	var ChildrenUtils_4 = ChildrenUtils.findHiddenChildInChildrenByKey;
	var ChildrenUtils_5 = ChildrenUtils.isSameChildren;
	var ChildrenUtils_6 = ChildrenUtils.mergeChildren;

	var util_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var util = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },
	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};
	exports["default"] = util;
	module.exports = exports["default"];
	});

	unwrapExports(util_1$1);

	var AnimateChild_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);





	var _util2 = _interopRequireDefault(util_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var propTypes$1 = {
	  children: _propTypes2["default"].any
	};

	var AnimateChild = function (_Component) {
	  _inherits(AnimateChild, _Component);

	  function AnimateChild(props) {
	    _classCallCheck(this, AnimateChild);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.transition = _this.transition.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }

	  AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.stop();
	  };

	  AnimateChild.prototype.componentWillEnter = function componentWillEnter(done) {
	    if (_util2["default"].isEnterSupported(this.props)) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  };

	  AnimateChild.prototype.componentWillAppear = function componentWillAppear(done) {
	    if (_util2["default"].isAppearSupported(this.props)) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  };

	  AnimateChild.prototype.componentWillLeave = function componentWillLeave(done) {
	    if (_util2["default"].isLeaveSupported(this.props)) {
	      this.transition('leave', done);
	    } else {
	      // always sync, do not interupt with react component life cycle
	      // update hidden -> animate hidden ->
	      // didUpdate -> animate leave -> unmount (if animate is none)
	      done();
	    }
	  };

	  AnimateChild.prototype.transition = function transition(animationType, finishCallback) {
	    var _this2 = this;

	    var node = _reactDom2["default"].findDOMNode(this);
	    var props = this.props;
	    var transitionName = props.transitionName;
	    var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
	    this.stop();
	    var end = function end() {
	      _this2.stopper = null;
	      finishCallback();
	    };
	    if ((lib$1.cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	      var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
	      var activeName = name + '-active';
	      if (nameIsObj && transitionName[animationType + 'Active']) {
	        activeName = transitionName[animationType + 'Active'];
	      }
	      this.stopper = (0, lib$1.cssAnimation)(node, {
	        name: name,
	        active: activeName
	      }, end);
	    } else {
	      this.stopper = props.animation[animationType](node, end);
	    }
	  };

	  AnimateChild.prototype.stop = function stop() {
	    var stopper = this.stopper;
	    if (stopper) {
	      this.stopper = null;
	      stopper.stop();
	    }
	  };

	  AnimateChild.prototype.render = function render() {
	    return this.props.children;
	  };

	  return AnimateChild;
	}(React__default.Component);

	AnimateChild.propTypes = propTypes$1;

	exports["default"] = AnimateChild;
	module.exports = exports['default'];
	});

	unwrapExports(AnimateChild_1);

	var Animate_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _AnimateChild2 = _interopRequireDefault(AnimateChild_1);



	var _util2 = _interopRequireDefault(util_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultKey = 'u_animate_' + Date.now();


	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (_react2["default"].isValidElement(children)) {
	    if (!children.key) {
	      return _react2["default"].cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop() {}

	var propTypes$1 = {
	  component: _propTypes2["default"].any,
	  animation: _propTypes2["default"].object,
	  transitionName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
	  transitionEnter: _propTypes2["default"].bool,
	  transitionAppear: _propTypes2["default"].bool,
	  exclusive: _propTypes2["default"].bool,
	  transitionLeave: _propTypes2["default"].bool,
	  onEnd: _propTypes2["default"].func,
	  onEnter: _propTypes2["default"].func,
	  onLeave: _propTypes2["default"].func,
	  onAppear: _propTypes2["default"].func,
	  showProp: _propTypes2["default"].string
	};

	var defaultProps = {
	  animation: {},
	  component: 'span',
	  transitionEnter: true,
	  transitionLeave: true,
	  transitionAppear: false,
	  onEnd: noop,
	  onEnter: noop,
	  onLeave: noop,
	  onAppear: noop
	};

	var Animate = function (_Component) {
	  _inherits(Animate, _Component);

	  function Animate(props) {
	    _classCallCheck(this, Animate);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.currentlyAnimatingKeys = {};
	    _this.keysToEnter = [];
	    _this.keysToLeave = [];
	    _this.state = {
	      children: (0, ChildrenUtils.toArrayChildren)(getChildrenFromProps(_this.props))
	    };

	    _this.performEnter = _this.performEnter.bind(_this);
	    _this.performAppear = _this.performAppear.bind(_this);
	    _this.handleDoneAdding = _this.handleDoneAdding.bind(_this);
	    _this.performLeave = _this.performLeave.bind(_this);

	    _this.performLeave = _this.performLeave.bind(_this);
	    _this.handleDoneLeaving = _this.handleDoneLeaving.bind(_this);
	    _this.isValidChildByKey = _this.isValidChildByKey.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }

	  Animate.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    this.mounted = true;
	    var showProp = this.props.showProp;
	    var children = this.state.children;
	    if (showProp) {
	      children = children.filter(function (child) {
	        return !!child.props[showProp];
	      });
	    }
	    children.forEach(function (child) {
	      if (child) {
	        _this2.performAppear(child.key);
	      }
	    });
	  };

	  Animate.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  Animate.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this3 = this;

	    this.nextProps = nextProps;
	    var nextChildren = (0, ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));
	    var props = this.props;
	    // exclusive needs immediate response
	    if (props.exclusive) {
	      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	        _this3.stop(key);
	      });
	    }
	    var showProp = props.showProp;
	    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	    // last props children if exclusive
	    var currentChildren = props.exclusive ? (0, ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
	    // in case destroy in showProp mode
	    var newChildren = [];
	    if (showProp) {
	      currentChildren.forEach(function (currentChild) {
	        var nextChild = currentChild && (0, ChildrenUtils.findChildInChildrenByKey)(nextChildren, currentChild.key);
	        var newChild = void 0;
	        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	          newChild = _react2["default"].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
	        } else {
	          newChild = nextChild;
	        }
	        if (newChild) {
	          newChildren.push(newChild);
	        }
	      });
	      nextChildren.forEach(function (nextChild) {
	        if (!nextChild || !(0, ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
	          newChildren.push(nextChild);
	        }
	      });
	    } else {
	      newChildren = (0, ChildrenUtils.mergeChildren)(currentChildren, nextChildren);
	    }

	    // need render to avoid update
	    this.setState({
	      children: newChildren
	    });

	    nextChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasPrev = child && (0, ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	      if (showProp) {
	        var showInNext = child.props[showProp];
	        if (hasPrev) {
	          var showInNow = (0, ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	          if (!showInNow && showInNext) {
	            _this3.keysToEnter.push(key);
	          }
	        } else if (showInNext) {
	          _this3.keysToEnter.push(key);
	        }
	      } else if (!hasPrev) {
	        _this3.keysToEnter.push(key);
	      }
	    });

	    currentChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasNext = child && (0, ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);
	      if (showProp) {
	        var showInNow = child.props[showProp];
	        if (hasNext) {
	          var showInNext = (0, ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, showProp);
	          if (!showInNext && showInNow) {
	            _this3.keysToLeave.push(key);
	          }
	        } else if (showInNow) {
	          _this3.keysToLeave.push(key);
	        }
	      } else if (!hasNext) {
	        _this3.keysToLeave.push(key);
	      }
	    });
	  };

	  Animate.prototype.componentDidUpdate = function componentDidUpdate() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  };

	  Animate.prototype.performEnter = function performEnter(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));
	    }
	  };

	  Animate.prototype.performAppear = function performAppear(key) {
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));
	    }
	  };

	  Animate.prototype.handleDoneAdding = function handleDoneAdding(key, type) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    if (!this.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      this.performLeave(key);
	    } else {
	      if (type === 'appear') {
	        if (_util2["default"].allowAppearCallback(props)) {
	          props.onAppear(key);
	          props.onEnd(key, true);
	        }
	      } else {
	        if (_util2["default"].allowEnterCallback(props)) {
	          props.onEnter(key);
	          props.onEnd(key, true);
	        }
	      }
	    }
	  };

	  Animate.prototype.performLeave = function performLeave(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillLeave(this.handleDoneLeaving.bind(this, key));
	    }
	  };

	  Animate.prototype.handleDoneLeaving = function handleDoneLeaving(key) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (this.isValidChildByKey(currentChildren, key)) {
	      this.performEnter(key);
	    } else {
	      var end = function end() {
	        if (_util2["default"].allowLeaveCallback(props)) {
	          props.onLeave(key);
	          props.onEnd(key, false);
	        }
	      };
	      /* eslint react/no-is-mounted:0 */
	      if (this.mounted && !(0, ChildrenUtils.isSameChildren)(this.state.children, currentChildren, props.showProp)) {
	        this.setState({
	          children: currentChildren
	        }, end);
	      } else {
	        end();
	      }
	    }
	  };

	  Animate.prototype.isValidChildByKey = function isValidChildByKey(currentChildren, key) {
	    var showProp = this.props.showProp;
	    if (showProp) {
	      return (0, ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	    }
	    return (0, ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	  };

	  Animate.prototype.stop = function stop(key) {
	    delete this.currentlyAnimatingKeys[key];
	    var component = this.refs[key];
	    if (component) {
	      component.stop();
	    }
	  };

	  Animate.prototype.render = function render() {
	    var props = this.props;
	    this.nextProps = props;
	    var stateChildren = this.state.children;
	    var children = null;
	    if (stateChildren) {
	      children = stateChildren.map(function (child) {
	        if (child === null || child === undefined) {
	          return child;
	        }
	        if (!child.key) {
	          throw new Error('must set key for <rc-animate> children');
	        }
	        return _react2["default"].createElement(
	          _AnimateChild2["default"],
	          {
	            key: child.key,
	            ref: child.key,
	            animation: props.animation,
	            transitionName: props.transitionName,
	            transitionEnter: props.transitionEnter,
	            transitionAppear: props.transitionAppear,
	            transitionLeave: props.transitionLeave
	          },
	          child
	        );
	      });
	    }
	    var Component = props.component;
	    if (Component) {
	      var passedProps = props;
	      if (typeof Component === 'string') {
	        passedProps = {
	          className: props.className,
	          style: props.style
	        };
	      }
	      return _react2["default"].createElement(
	        Component,
	        passedProps,
	        children
	      );
	    }
	    return children[0] || null;
	  };

	  return Animate;
	}(React__default.Component);
	Animate.defaultProps = defaultProps;
	Animate.propTypes = Animate.propTypes;

	exports["default"] = Animate;
	module.exports = exports['default'];
	});

	unwrapExports(Animate_1);

	var build$a = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Animate2 = _interopRequireDefault(Animate_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Animate2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$a);

	var _extends$4 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _assign2 = _interopRequireDefault(assign$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};
	});

	var _extends$5 = unwrapExports(_extends$4);

	var objectWithoutProperties = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	exports.default = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};
	});

	var _objectWithoutProperties = unwrapExports(objectWithoutProperties);

	var classCallCheck$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	});

	var _classCallCheck = unwrapExports(classCallCheck$1);

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _redefine = _hide;

	var _iterators = {};

	var _wks = createCommonjsModule(function (module) {
	var store = _shared('wks');

	var Symbol = _global.Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
	};

	$exports.store = store;
	});

	var def = _objectDp.f;

	var TAG = _wks('toStringTag');

	var _setToStringTag = function (it, tag, stat) {
	  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

	var _iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
	  _setToStringTag(Constructor, NAME + ' Iterator');
	};

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO$2 = _sharedKey('IE_PROTO');
	var ObjectProto = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = _toObject(O);
	  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

	var ITERATOR = _wks('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  _iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      _setToStringTag(IteratorPrototype, TAG, true);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    _hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  _iterators[NAME] = $default;
	  _iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) _redefine(proto, key, methods[key]);
	    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var $at = _stringAt(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	_iterDefine(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	var _iterStep = function (done, value) {
	  return { value: value, done: !!done };
	};

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
	  this._t = _toIobject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return _iterStep(1);
	  }
	  if (kind == 'keys') return _iterStep(0, index);
	  if (kind == 'values') return _iterStep(0, O[index]);
	  return _iterStep(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	_iterators.Arguments = _iterators.Array;

	var TO_STRING_TAG = _wks('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i$1 = 0; i$1 < DOMIterables.length; i$1++) {
	  var NAME = DOMIterables[i$1];
	  var Collection = _global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
	  _iterators[NAME] = _iterators.Array;
	}

	var f$6 = _wks;

	var _wksExt = {
		f: f$6
	};

	var iterator = _wksExt.f('iterator');

	var iterator$1 = createCommonjsModule(function (module) {
	module.exports = { "default": iterator, __esModule: true };
	});

	unwrapExports(iterator$1);

	var _meta = createCommonjsModule(function (module) {
	var META = _uid('meta');


	var setDesc = _objectDp.f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !_fails(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	});
	var _meta_1 = _meta.KEY;
	var _meta_2 = _meta.NEED;
	var _meta_3 = _meta.fastKey;
	var _meta_4 = _meta.getWeak;
	var _meta_5 = _meta.onFreeze;

	var defineProperty$3 = _objectDp.f;
	var _wksDefine = function (name) {
	  var $Symbol = _core.Symbol || (_core.Symbol = {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$3($Symbol, name, { value: _wksExt.f(name) });
	};

	// all enumerable object keys, includes symbols



	var _enumKeys = function (it) {
	  var result = _objectKeys(it);
	  var getSymbols = _objectGops.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = _objectPie.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};

	// 7.2.2 IsArray(argument)

	var _isArray = Array.isArray || function isArray(arg) {
	  return _cof(arg) == 'Array';
	};

	// ECMAScript 6 symbols shim





	var META = _meta.KEY;



















	var gOPD$1 = _objectGopd.f;
	var dP$1 = _objectDp.f;
	var gOPN$1 = _objectGopnExt.f;
	var $Symbol = _global.Symbol;
	var $JSON = _global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE$2 = 'prototype';
	var HIDDEN = _wks('_hidden');
	var TO_PRIMITIVE = _wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = _shared('symbol-registry');
	var AllSymbols = _shared('symbols');
	var OPSymbols = _shared('op-symbols');
	var ObjectProto$1 = Object[PROTOTYPE$2];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = _global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = _descriptors && _fails(function () {
	  return _objectCreate(dP$1({}, 'a', {
	    get: function () { return dP$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD$1(ObjectProto$1, key);
	  if (protoDesc) delete ObjectProto$1[key];
	  dP$1(it, key, D);
	  if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
	} : dP$1;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);
	  _anObject(it);
	  key = _toPrimitive(key, true);
	  _anObject(D);
	  if (_has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP$1(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  _anObject(it);
	  var keys = _enumKeys(P = _toIobject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = _toPrimitive(key, true));
	  if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
	  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor$1 = function getOwnPropertyDescriptor(it, key) {
	  it = _toIobject(it);
	  key = _toPrimitive(key, true);
	  if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
	  var D = gOPD$1(it, key);
	  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN$1(_toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto$1;
	  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto$1) $set.call(OPSymbols, value);
	      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, _propertyDesc(1, value));
	    };
	    if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
	    return this._k;
	  });

	  _objectGopd.f = $getOwnPropertyDescriptor$1;
	  _objectDp.f = $defineProperty;
	  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
	  _objectPie.f = $propertyIsEnumerable;
	  _objectGops.f = $getOwnPropertySymbols;

	  if (_descriptors && !_library) {
	    _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  _wksExt.f = function (name) {
	    return wrap(_wks(name));
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);

	for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);

	_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return _has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor$1,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!_isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	_setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	_setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	_setToStringTag(_global.JSON, 'JSON', true);

	_wksDefine('asyncIterator');

	_wksDefine('observable');

	var symbol = _core.Symbol;

	var symbol$1 = createCommonjsModule(function (module) {
	module.exports = { "default": symbol, __esModule: true };
	});

	unwrapExports(symbol$1);

	var _typeof_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _iterator2 = _interopRequireDefault(iterator$1);



	var _symbol2 = _interopRequireDefault(symbol$1);

	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};
	});

	var _typeof$1 = unwrapExports(_typeof_1);

	var possibleConstructorReturn$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _typeof3 = _interopRequireDefault(_typeof_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};
	});

	var _possibleConstructorReturn = unwrapExports(possibleConstructorReturn$1);

	var inherits$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);



	var _typeof3 = _interopRequireDefault(_typeof_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};
	});

	var _inherits = unwrapExports(inherits$1);

	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */

	var KeyCode$1 = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};

	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode$1.isTextModifyingKeyEvent = function isTextModifyingKeyEvent(e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	  // Function keys don't generate text
	  keyCode >= KeyCode$1.F1 && keyCode <= KeyCode$1.F12) {
	    return false;
	  }

	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode$1.ALT:
	    case KeyCode$1.CAPS_LOCK:
	    case KeyCode$1.CONTEXT_MENU:
	    case KeyCode$1.CTRL:
	    case KeyCode$1.DOWN:
	    case KeyCode$1.END:
	    case KeyCode$1.ESC:
	    case KeyCode$1.HOME:
	    case KeyCode$1.INSERT:
	    case KeyCode$1.LEFT:
	    case KeyCode$1.MAC_FF_META:
	    case KeyCode$1.META:
	    case KeyCode$1.NUMLOCK:
	    case KeyCode$1.NUM_CENTER:
	    case KeyCode$1.PAGE_DOWN:
	    case KeyCode$1.PAGE_UP:
	    case KeyCode$1.PAUSE:
	    case KeyCode$1.PRINT_SCREEN:
	    case KeyCode$1.RIGHT:
	    case KeyCode$1.SHIFT:
	    case KeyCode$1.UP:
	    case KeyCode$1.WIN_KEY:
	    case KeyCode$1.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};

	/*
	 whether character is entered.
	 */
	KeyCode$1.isCharacterKey = function isCharacterKey(keyCode) {
	  if (keyCode >= KeyCode$1.ZERO && keyCode <= KeyCode$1.NINE) {
	    return true;
	  }

	  if (keyCode >= KeyCode$1.NUM_ZERO && keyCode <= KeyCode$1.NUM_MULTIPLY) {
	    return true;
	  }

	  if (keyCode >= KeyCode$1.A && keyCode <= KeyCode$1.Z) {
	    return true;
	  }

	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }

	  switch (keyCode) {
	    case KeyCode$1.SPACE:
	    case KeyCode$1.QUESTION_MARK:
	    case KeyCode$1.NUM_PLUS:
	    case KeyCode$1.NUM_MINUS:
	    case KeyCode$1.NUM_PERIOD:
	    case KeyCode$1.NUM_DIVISION:
	    case KeyCode$1.SEMICOLON:
	    case KeyCode$1.DASH:
	    case KeyCode$1.EQUALS:
	    case KeyCode$1.COMMA:
	    case KeyCode$1.PERIOD:
	    case KeyCode$1.SLASH:
	    case KeyCode$1.APOSTROPHE:
	    case KeyCode$1.SINGLE_QUOTE:
	    case KeyCode$1.OPEN_SQUARE_BRACKET:
	    case KeyCode$1.BACKSLASH:
	    case KeyCode$1.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  var args = [].slice.call(arguments, 0);
	  if (args.length === 1) {
	    return args[0];
	  }

	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}

	var isMobile = require('ismobilejs');

	function noop$3() {}

	function getKeyFromChildrenIndex(child, menuEventKey, index) {
	  var prefix = menuEventKey || '';
	  return child.key || prefix + 'item_' + index;
	}

	function getMenuIdFromSubMenuEventKey(eventKey) {
	  return eventKey + '-menu-';
	}

	function loopMenuItem(children, cb) {
	  var index = -1;
	  React__default.Children.forEach(children, function (c) {
	    index++;
	    if (c && c.type && c.type.isMenuItemGroup) {
	      React__default.Children.forEach(c.props.children, function (c2) {
	        index++;
	        cb(c2, index);
	      });
	    } else {
	      cb(c, index);
	    }
	  });
	}

	function loopMenuItemRecursively(children, keys, ret) {
	  /* istanbul ignore if */
	  if (!children || ret.find) {
	    return;
	  }
	  React__default.Children.forEach(children, function (c) {
	    if (c) {
	      var construct = c.type;
	      if (!construct || !(construct.isSubMenu || construct.isMenuItem || construct.isMenuItemGroup)) {
	        return;
	      }
	      if (keys.indexOf(c.key) !== -1) {
	        ret.find = true;
	      } else if (c.props.children) {
	        loopMenuItemRecursively(c.props.children, keys, ret);
	      }
	    }
	  });
	}

	var menuAllProps = ['defaultSelectedKeys', 'selectedKeys', 'defaultOpenKeys', 'openKeys', 'mode', 'getPopupContainer', 'onSelect', 'onDeselect', 'onDestroy', 'openTransitionName', 'openAnimation', 'subMenuOpenDelay', 'subMenuCloseDelay', 'forceSubMenuRender', 'triggerSubMenuAction', 'level', 'selectable', 'multiple', 'onOpenChange', 'visible', 'focusable', 'defaultActiveFirst', 'prefixCls', 'inlineIndent', 'parentMenu', 'title', 'rootPrefixCls', 'eventKey', 'active', 'onItemHover', 'onTitleMouseEnter', 'onTitleMouseLeave', 'onTitleClick', 'popupAlign', 'popupOffset', 'isOpen', 'renderMenuItem', 'manualRef', 'subMenuKey', 'disabled', 'index', 'isSelected', 'store', 'activeKey', 'builtinPlacements', 'overflowedIndicator',

	// the following keys found need to be removed from test regression
	'attribute', 'value', 'popupClassName', 'inlineCollapsed', 'menu', 'theme', 'itemIcon', 'expandIcon'];

	// ref: https://github.com/ant-design/ant-design/issues/14007
	// ref: https://bugs.chromium.org/p/chromium/issues/detail?id=360889
	// getBoundingClientRect return the full precision value, which is
	// not the same behavior as on chrome. Set the precision to 6 to
	// unify their behavior
	var getWidth = function getWidth(elem) {
	  var width = elem && typeof elem.getBoundingClientRect === 'function' && elem.getBoundingClientRect().width;
	  if (width) {
	    width = +width.toFixed(6);
	  }
	  return width || 0;
	};

	var setStyle = function setStyle(elem, styleProperty, value) {
	  if (elem && typeof elem.style === 'object') {
	    elem.style[styleProperty] = value;
	  }
	};

	var isMobileDevice = function isMobileDevice() {
	  return isMobile.any;
	};

	/**
	 * A collection of shims that provide minimal functionality of the ES6 collections.
	 *
	 * These implementations are not meant to be used outside of the ResizeObserver
	 * modules as they cover only a limited range of use cases.
	 */
	/* eslint-disable require-jsdoc, valid-jsdoc */
	var MapShim = (function () {
	    if (typeof Map !== 'undefined') {
	        return Map;
	    }
	    /**
	     * Returns index in provided array that matches the specified key.
	     *
	     * @param {Array<Array>} arr
	     * @param {*} key
	     * @returns {number}
	     */
	    function getIndex(arr, key) {
	        var result = -1;
	        arr.some(function (entry, index) {
	            if (entry[0] === key) {
	                result = index;
	                return true;
	            }
	            return false;
	        });
	        return result;
	    }
	    return /** @class */ (function () {
	        function class_1() {
	            this.__entries__ = [];
	        }
	        Object.defineProperty(class_1.prototype, "size", {
	            /**
	             * @returns {boolean}
	             */
	            get: function () {
	                return this.__entries__.length;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {*} key
	         * @returns {*}
	         */
	        class_1.prototype.get = function (key) {
	            var index = getIndex(this.__entries__, key);
	            var entry = this.__entries__[index];
	            return entry && entry[1];
	        };
	        /**
	         * @param {*} key
	         * @param {*} value
	         * @returns {void}
	         */
	        class_1.prototype.set = function (key, value) {
	            var index = getIndex(this.__entries__, key);
	            if (~index) {
	                this.__entries__[index][1] = value;
	            }
	            else {
	                this.__entries__.push([key, value]);
	            }
	        };
	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        class_1.prototype.delete = function (key) {
	            var entries = this.__entries__;
	            var index = getIndex(entries, key);
	            if (~index) {
	                entries.splice(index, 1);
	            }
	        };
	        /**
	         * @param {*} key
	         * @returns {void}
	         */
	        class_1.prototype.has = function (key) {
	            return !!~getIndex(this.__entries__, key);
	        };
	        /**
	         * @returns {void}
	         */
	        class_1.prototype.clear = function () {
	            this.__entries__.splice(0);
	        };
	        /**
	         * @param {Function} callback
	         * @param {*} [ctx=null]
	         * @returns {void}
	         */
	        class_1.prototype.forEach = function (callback, ctx) {
	            if (ctx === void 0) { ctx = null; }
	            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
	                var entry = _a[_i];
	                callback.call(ctx, entry[1], entry[0]);
	            }
	        };
	        return class_1;
	    }());
	})();

	/**
	 * Detects whether window and document objects are available in current environment.
	 */
	var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

	// Returns global object of a current environment.
	var global$1 = (function () {
	    if (typeof global !== 'undefined' && global.Math === Math) {
	        return global;
	    }
	    if (typeof self !== 'undefined' && self.Math === Math) {
	        return self;
	    }
	    if (typeof window !== 'undefined' && window.Math === Math) {
	        return window;
	    }
	    // eslint-disable-next-line no-new-func
	    return Function('return this')();
	})();

	/**
	 * A shim for the requestAnimationFrame which falls back to the setTimeout if
	 * first one is not supported.
	 *
	 * @returns {number} Requests' identifier.
	 */
	var requestAnimationFrame$1 = (function () {
	    if (typeof requestAnimationFrame === 'function') {
	        // It's required to use a bounded function because IE sometimes throws
	        // an "Invalid calling object" error if rAF is invoked without the global
	        // object on the left hand side.
	        return requestAnimationFrame.bind(global$1);
	    }
	    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
	})();

	// Defines minimum timeout before adding a trailing call.
	var trailingTimeout = 2;
	/**
	 * Creates a wrapper function which ensures that provided callback will be
	 * invoked only once during the specified delay period.
	 *
	 * @param {Function} callback - Function to be invoked after the delay period.
	 * @param {number} delay - Delay after which to invoke callback.
	 * @returns {Function}
	 */
	function throttle (callback, delay) {
	    var leadingCall = false, trailingCall = false, lastCallTime = 0;
	    /**
	     * Invokes the original callback function and schedules new invocation if
	     * the "proxy" was called during current request.
	     *
	     * @returns {void}
	     */
	    function resolvePending() {
	        if (leadingCall) {
	            leadingCall = false;
	            callback();
	        }
	        if (trailingCall) {
	            proxy();
	        }
	    }
	    /**
	     * Callback invoked after the specified delay. It will further postpone
	     * invocation of the original function delegating it to the
	     * requestAnimationFrame.
	     *
	     * @returns {void}
	     */
	    function timeoutCallback() {
	        requestAnimationFrame$1(resolvePending);
	    }
	    /**
	     * Schedules invocation of the original function.
	     *
	     * @returns {void}
	     */
	    function proxy() {
	        var timeStamp = Date.now();
	        if (leadingCall) {
	            // Reject immediately following calls.
	            if (timeStamp - lastCallTime < trailingTimeout) {
	                return;
	            }
	            // Schedule new call to be in invoked when the pending one is resolved.
	            // This is important for "transitions" which never actually start
	            // immediately so there is a chance that we might miss one if change
	            // happens amids the pending invocation.
	            trailingCall = true;
	        }
	        else {
	            leadingCall = true;
	            trailingCall = false;
	            setTimeout(timeoutCallback, delay);
	        }
	        lastCallTime = timeStamp;
	    }
	    return proxy;
	}

	// Minimum delay before invoking the update of observers.
	var REFRESH_DELAY = 20;
	// A list of substrings of CSS properties used to find transition events that
	// might affect dimensions of observed elements.
	var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
	// Check if MutationObserver is available.
	var mutationObserverSupported = typeof MutationObserver !== 'undefined';
	/**
	 * Singleton controller class which handles updates of ResizeObserver instances.
	 */
	var ResizeObserverController = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserverController.
	     *
	     * @private
	     */
	    function ResizeObserverController() {
	        /**
	         * Indicates whether DOM listeners have been added.
	         *
	         * @private {boolean}
	         */
	        this.connected_ = false;
	        /**
	         * Tells that controller has subscribed for Mutation Events.
	         *
	         * @private {boolean}
	         */
	        this.mutationEventsAdded_ = false;
	        /**
	         * Keeps reference to the instance of MutationObserver.
	         *
	         * @private {MutationObserver}
	         */
	        this.mutationsObserver_ = null;
	        /**
	         * A list of connected observers.
	         *
	         * @private {Array<ResizeObserverSPI>}
	         */
	        this.observers_ = [];
	        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
	        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
	    }
	    /**
	     * Adds observer to observers list.
	     *
	     * @param {ResizeObserverSPI} observer - Observer to be added.
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.addObserver = function (observer) {
	        if (!~this.observers_.indexOf(observer)) {
	            this.observers_.push(observer);
	        }
	        // Add listeners if they haven't been added yet.
	        if (!this.connected_) {
	            this.connect_();
	        }
	    };
	    /**
	     * Removes observer from observers list.
	     *
	     * @param {ResizeObserverSPI} observer - Observer to be removed.
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.removeObserver = function (observer) {
	        var observers = this.observers_;
	        var index = observers.indexOf(observer);
	        // Remove observer if it's present in registry.
	        if (~index) {
	            observers.splice(index, 1);
	        }
	        // Remove listeners if controller has no connected observers.
	        if (!observers.length && this.connected_) {
	            this.disconnect_();
	        }
	    };
	    /**
	     * Invokes the update of observers. It will continue running updates insofar
	     * it detects changes.
	     *
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.refresh = function () {
	        var changesDetected = this.updateObservers_();
	        // Continue running updates if changes have been detected as there might
	        // be future ones caused by CSS transitions.
	        if (changesDetected) {
	            this.refresh();
	        }
	    };
	    /**
	     * Updates every observer from observers list and notifies them of queued
	     * entries.
	     *
	     * @private
	     * @returns {boolean} Returns "true" if any observer has detected changes in
	     *      dimensions of it's elements.
	     */
	    ResizeObserverController.prototype.updateObservers_ = function () {
	        // Collect observers that have active observations.
	        var activeObservers = this.observers_.filter(function (observer) {
	            return observer.gatherActive(), observer.hasActive();
	        });
	        // Deliver notifications in a separate cycle in order to avoid any
	        // collisions between observers, e.g. when multiple instances of
	        // ResizeObserver are tracking the same element and the callback of one
	        // of them changes content dimensions of the observed target. Sometimes
	        // this may result in notifications being blocked for the rest of observers.
	        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
	        return activeObservers.length > 0;
	    };
	    /**
	     * Initializes DOM listeners.
	     *
	     * @private
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.connect_ = function () {
	        // Do nothing if running in a non-browser environment or if listeners
	        // have been already added.
	        if (!isBrowser || this.connected_) {
	            return;
	        }
	        // Subscription to the "Transitionend" event is used as a workaround for
	        // delayed transitions. This way it's possible to capture at least the
	        // final state of an element.
	        document.addEventListener('transitionend', this.onTransitionEnd_);
	        window.addEventListener('resize', this.refresh);
	        if (mutationObserverSupported) {
	            this.mutationsObserver_ = new MutationObserver(this.refresh);
	            this.mutationsObserver_.observe(document, {
	                attributes: true,
	                childList: true,
	                characterData: true,
	                subtree: true
	            });
	        }
	        else {
	            document.addEventListener('DOMSubtreeModified', this.refresh);
	            this.mutationEventsAdded_ = true;
	        }
	        this.connected_ = true;
	    };
	    /**
	     * Removes DOM listeners.
	     *
	     * @private
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.disconnect_ = function () {
	        // Do nothing if running in a non-browser environment or if listeners
	        // have been already removed.
	        if (!isBrowser || !this.connected_) {
	            return;
	        }
	        document.removeEventListener('transitionend', this.onTransitionEnd_);
	        window.removeEventListener('resize', this.refresh);
	        if (this.mutationsObserver_) {
	            this.mutationsObserver_.disconnect();
	        }
	        if (this.mutationEventsAdded_) {
	            document.removeEventListener('DOMSubtreeModified', this.refresh);
	        }
	        this.mutationsObserver_ = null;
	        this.mutationEventsAdded_ = false;
	        this.connected_ = false;
	    };
	    /**
	     * "Transitionend" event handler.
	     *
	     * @private
	     * @param {TransitionEvent} event
	     * @returns {void}
	     */
	    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
	        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
	        // Detect whether transition may affect dimensions of an element.
	        var isReflowProperty = transitionKeys.some(function (key) {
	            return !!~propertyName.indexOf(key);
	        });
	        if (isReflowProperty) {
	            this.refresh();
	        }
	    };
	    /**
	     * Returns instance of the ResizeObserverController.
	     *
	     * @returns {ResizeObserverController}
	     */
	    ResizeObserverController.getInstance = function () {
	        if (!this.instance_) {
	            this.instance_ = new ResizeObserverController();
	        }
	        return this.instance_;
	    };
	    /**
	     * Holds reference to the controller's instance.
	     *
	     * @private {ResizeObserverController}
	     */
	    ResizeObserverController.instance_ = null;
	    return ResizeObserverController;
	}());

	/**
	 * Defines non-writable/enumerable properties of the provided target object.
	 *
	 * @param {Object} target - Object for which to define properties.
	 * @param {Object} props - Properties to be defined.
	 * @returns {Object} Target object.
	 */
	var defineConfigurable = (function (target, props) {
	    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
	        var key = _a[_i];
	        Object.defineProperty(target, key, {
	            value: props[key],
	            enumerable: false,
	            writable: false,
	            configurable: true
	        });
	    }
	    return target;
	});

	/**
	 * Returns the global object associated with provided element.
	 *
	 * @param {Object} target
	 * @returns {Object}
	 */
	var getWindowOf = (function (target) {
	    // Assume that the element is an instance of Node, which means that it
	    // has the "ownerDocument" property from which we can retrieve a
	    // corresponding global object.
	    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
	    // Return the local global object if it's not possible extract one from
	    // provided element.
	    return ownerGlobal || global$1;
	});

	// Placeholder of an empty content rectangle.
	var emptyRect = createRectInit(0, 0, 0, 0);
	/**
	 * Converts provided string to a number.
	 *
	 * @param {number|string} value
	 * @returns {number}
	 */
	function toFloat(value) {
	    return parseFloat(value) || 0;
	}
	/**
	 * Extracts borders size from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @param {...string} positions - Borders positions (top, right, ...)
	 * @returns {number}
	 */
	function getBordersSize(styles) {
	    var positions = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        positions[_i - 1] = arguments[_i];
	    }
	    return positions.reduce(function (size, position) {
	        var value = styles['border-' + position + '-width'];
	        return size + toFloat(value);
	    }, 0);
	}
	/**
	 * Extracts paddings sizes from provided styles.
	 *
	 * @param {CSSStyleDeclaration} styles
	 * @returns {Object} Paddings box.
	 */
	function getPaddings(styles) {
	    var positions = ['top', 'right', 'bottom', 'left'];
	    var paddings = {};
	    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
	        var position = positions_1[_i];
	        var value = styles['padding-' + position];
	        paddings[position] = toFloat(value);
	    }
	    return paddings;
	}
	/**
	 * Calculates content rectangle of provided SVG element.
	 *
	 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
	 *      to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getSVGContentRect(target) {
	    var bbox = target.getBBox();
	    return createRectInit(0, 0, bbox.width, bbox.height);
	}
	/**
	 * Calculates content rectangle of provided HTMLElement.
	 *
	 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
	 * @returns {DOMRectInit}
	 */
	function getHTMLElementContentRect(target) {
	    // Client width & height properties can't be
	    // used exclusively as they provide rounded values.
	    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
	    // By this condition we can catch all non-replaced inline, hidden and
	    // detached elements. Though elements with width & height properties less
	    // than 0.5 will be discarded as well.
	    //
	    // Without it we would need to implement separate methods for each of
	    // those cases and it's not possible to perform a precise and performance
	    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
	    // gives wrong results for elements with width & height less than 0.5.
	    if (!clientWidth && !clientHeight) {
	        return emptyRect;
	    }
	    var styles = getWindowOf(target).getComputedStyle(target);
	    var paddings = getPaddings(styles);
	    var horizPad = paddings.left + paddings.right;
	    var vertPad = paddings.top + paddings.bottom;
	    // Computed styles of width & height are being used because they are the
	    // only dimensions available to JS that contain non-rounded values. It could
	    // be possible to utilize the getBoundingClientRect if only it's data wasn't
	    // affected by CSS transformations let alone paddings, borders and scroll bars.
	    var width = toFloat(styles.width), height = toFloat(styles.height);
	    // Width & height include paddings and borders when the 'border-box' box
	    // model is applied (except for IE).
	    if (styles.boxSizing === 'border-box') {
	        // Following conditions are required to handle Internet Explorer which
	        // doesn't include paddings and borders to computed CSS dimensions.
	        //
	        // We can say that if CSS dimensions + paddings are equal to the "client"
	        // properties then it's either IE, and thus we don't need to subtract
	        // anything, or an element merely doesn't have paddings/borders styles.
	        if (Math.round(width + horizPad) !== clientWidth) {
	            width -= getBordersSize(styles, 'left', 'right') + horizPad;
	        }
	        if (Math.round(height + vertPad) !== clientHeight) {
	            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
	        }
	    }
	    // Following steps can't be applied to the document's root element as its
	    // client[Width/Height] properties represent viewport area of the window.
	    // Besides, it's as well not necessary as the <html> itself neither has
	    // rendered scroll bars nor it can be clipped.
	    if (!isDocumentElement(target)) {
	        // In some browsers (only in Firefox, actually) CSS width & height
	        // include scroll bars size which can be removed at this step as scroll
	        // bars are the only difference between rounded dimensions + paddings
	        // and "client" properties, though that is not always true in Chrome.
	        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
	        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
	        // Chrome has a rather weird rounding of "client" properties.
	        // E.g. for an element with content width of 314.2px it sometimes gives
	        // the client width of 315px and for the width of 314.7px it may give
	        // 314px. And it doesn't happen all the time. So just ignore this delta
	        // as a non-relevant.
	        if (Math.abs(vertScrollbar) !== 1) {
	            width -= vertScrollbar;
	        }
	        if (Math.abs(horizScrollbar) !== 1) {
	            height -= horizScrollbar;
	        }
	    }
	    return createRectInit(paddings.left, paddings.top, width, height);
	}
	/**
	 * Checks whether provided element is an instance of the SVGGraphicsElement.
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	var isSVGGraphicsElement = (function () {
	    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
	    // interface.
	    if (typeof SVGGraphicsElement !== 'undefined') {
	        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
	    }
	    // If it's so, then check that element is at least an instance of the
	    // SVGElement and that it has the "getBBox" method.
	    // eslint-disable-next-line no-extra-parens
	    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
	        typeof target.getBBox === 'function'); };
	})();
	/**
	 * Checks whether provided element is a document element (<html>).
	 *
	 * @param {Element} target - Element to be checked.
	 * @returns {boolean}
	 */
	function isDocumentElement(target) {
	    return target === getWindowOf(target).document.documentElement;
	}
	/**
	 * Calculates an appropriate content rectangle for provided html or svg element.
	 *
	 * @param {Element} target - Element content rectangle of which needs to be calculated.
	 * @returns {DOMRectInit}
	 */
	function getContentRect(target) {
	    if (!isBrowser) {
	        return emptyRect;
	    }
	    if (isSVGGraphicsElement(target)) {
	        return getSVGContentRect(target);
	    }
	    return getHTMLElementContentRect(target);
	}
	/**
	 * Creates rectangle with an interface of the DOMRectReadOnly.
	 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
	 *
	 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
	 * @returns {DOMRectReadOnly}
	 */
	function createReadOnlyRect(_a) {
	    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
	    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
	    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
	    var rect = Object.create(Constr.prototype);
	    // Rectangle's properties are not writable and non-enumerable.
	    defineConfigurable(rect, {
	        x: x, y: y, width: width, height: height,
	        top: y,
	        right: x + width,
	        bottom: height + y,
	        left: x
	    });
	    return rect;
	}
	/**
	 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
	 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
	 *
	 * @param {number} x - X coordinate.
	 * @param {number} y - Y coordinate.
	 * @param {number} width - Rectangle's width.
	 * @param {number} height - Rectangle's height.
	 * @returns {DOMRectInit}
	 */
	function createRectInit(x, y, width, height) {
	    return { x: x, y: y, width: width, height: height };
	}

	/**
	 * Class that is responsible for computations of the content rectangle of
	 * provided DOM element and for keeping track of it's changes.
	 */
	var ResizeObservation = /** @class */ (function () {
	    /**
	     * Creates an instance of ResizeObservation.
	     *
	     * @param {Element} target - Element to be observed.
	     */
	    function ResizeObservation(target) {
	        /**
	         * Broadcasted width of content rectangle.
	         *
	         * @type {number}
	         */
	        this.broadcastWidth = 0;
	        /**
	         * Broadcasted height of content rectangle.
	         *
	         * @type {number}
	         */
	        this.broadcastHeight = 0;
	        /**
	         * Reference to the last observed content rectangle.
	         *
	         * @private {DOMRectInit}
	         */
	        this.contentRect_ = createRectInit(0, 0, 0, 0);
	        this.target = target;
	    }
	    /**
	     * Updates content rectangle and tells whether it's width or height properties
	     * have changed since the last broadcast.
	     *
	     * @returns {boolean}
	     */
	    ResizeObservation.prototype.isActive = function () {
	        var rect = getContentRect(this.target);
	        this.contentRect_ = rect;
	        return (rect.width !== this.broadcastWidth ||
	            rect.height !== this.broadcastHeight);
	    };
	    /**
	     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
	     * from the corresponding properties of the last observed content rectangle.
	     *
	     * @returns {DOMRectInit} Last observed content rectangle.
	     */
	    ResizeObservation.prototype.broadcastRect = function () {
	        var rect = this.contentRect_;
	        this.broadcastWidth = rect.width;
	        this.broadcastHeight = rect.height;
	        return rect;
	    };
	    return ResizeObservation;
	}());

	var ResizeObserverEntry = /** @class */ (function () {
	    /**
	     * Creates an instance of ResizeObserverEntry.
	     *
	     * @param {Element} target - Element that is being observed.
	     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
	     */
	    function ResizeObserverEntry(target, rectInit) {
	        var contentRect = createReadOnlyRect(rectInit);
	        // According to the specification following properties are not writable
	        // and are also not enumerable in the native implementation.
	        //
	        // Property accessors are not being used as they'd require to define a
	        // private WeakMap storage which may cause memory leaks in browsers that
	        // don't support this type of collections.
	        defineConfigurable(this, { target: target, contentRect: contentRect });
	    }
	    return ResizeObserverEntry;
	}());

	var ResizeObserverSPI = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserver.
	     *
	     * @param {ResizeObserverCallback} callback - Callback function that is invoked
	     *      when one of the observed elements changes it's content dimensions.
	     * @param {ResizeObserverController} controller - Controller instance which
	     *      is responsible for the updates of observer.
	     * @param {ResizeObserver} callbackCtx - Reference to the public
	     *      ResizeObserver instance which will be passed to callback function.
	     */
	    function ResizeObserverSPI(callback, controller, callbackCtx) {
	        /**
	         * Collection of resize observations that have detected changes in dimensions
	         * of elements.
	         *
	         * @private {Array<ResizeObservation>}
	         */
	        this.activeObservations_ = [];
	        /**
	         * Registry of the ResizeObservation instances.
	         *
	         * @private {Map<Element, ResizeObservation>}
	         */
	        this.observations_ = new MapShim();
	        if (typeof callback !== 'function') {
	            throw new TypeError('The callback provided as parameter 1 is not a function.');
	        }
	        this.callback_ = callback;
	        this.controller_ = controller;
	        this.callbackCtx_ = callbackCtx;
	    }
	    /**
	     * Starts observing provided element.
	     *
	     * @param {Element} target - Element to be observed.
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.observe = function (target) {
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        // Do nothing if current environment doesn't have the Element interface.
	        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	            return;
	        }
	        if (!(target instanceof getWindowOf(target).Element)) {
	            throw new TypeError('parameter 1 is not of type "Element".');
	        }
	        var observations = this.observations_;
	        // Do nothing if element is already being observed.
	        if (observations.has(target)) {
	            return;
	        }
	        observations.set(target, new ResizeObservation(target));
	        this.controller_.addObserver(this);
	        // Force the update of observations.
	        this.controller_.refresh();
	    };
	    /**
	     * Stops observing provided element.
	     *
	     * @param {Element} target - Element to stop observing.
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.unobserve = function (target) {
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        // Do nothing if current environment doesn't have the Element interface.
	        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	            return;
	        }
	        if (!(target instanceof getWindowOf(target).Element)) {
	            throw new TypeError('parameter 1 is not of type "Element".');
	        }
	        var observations = this.observations_;
	        // Do nothing if element is not being observed.
	        if (!observations.has(target)) {
	            return;
	        }
	        observations.delete(target);
	        if (!observations.size) {
	            this.controller_.removeObserver(this);
	        }
	    };
	    /**
	     * Stops observing all elements.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.disconnect = function () {
	        this.clearActive();
	        this.observations_.clear();
	        this.controller_.removeObserver(this);
	    };
	    /**
	     * Collects observation instances the associated element of which has changed
	     * it's content rectangle.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.gatherActive = function () {
	        var _this = this;
	        this.clearActive();
	        this.observations_.forEach(function (observation) {
	            if (observation.isActive()) {
	                _this.activeObservations_.push(observation);
	            }
	        });
	    };
	    /**
	     * Invokes initial callback function with a list of ResizeObserverEntry
	     * instances collected from active resize observations.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.broadcastActive = function () {
	        // Do nothing if observer doesn't have active observations.
	        if (!this.hasActive()) {
	            return;
	        }
	        var ctx = this.callbackCtx_;
	        // Create ResizeObserverEntry instance for every active observation.
	        var entries = this.activeObservations_.map(function (observation) {
	            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
	        });
	        this.callback_.call(ctx, entries, ctx);
	        this.clearActive();
	    };
	    /**
	     * Clears the collection of active observations.
	     *
	     * @returns {void}
	     */
	    ResizeObserverSPI.prototype.clearActive = function () {
	        this.activeObservations_.splice(0);
	    };
	    /**
	     * Tells whether observer has active observations.
	     *
	     * @returns {boolean}
	     */
	    ResizeObserverSPI.prototype.hasActive = function () {
	        return this.activeObservations_.length > 0;
	    };
	    return ResizeObserverSPI;
	}());

	// Registry of internal observers. If WeakMap is not available use current shim
	// for the Map collection as it has all required methods and because WeakMap
	// can't be fully polyfilled anyway.
	var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
	/**
	 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
	 * exposing only those methods and properties that are defined in the spec.
	 */
	var ResizeObserver = /** @class */ (function () {
	    /**
	     * Creates a new instance of ResizeObserver.
	     *
	     * @param {ResizeObserverCallback} callback - Callback that is invoked when
	     *      dimensions of the observed elements change.
	     */
	    function ResizeObserver(callback) {
	        if (!(this instanceof ResizeObserver)) {
	            throw new TypeError('Cannot call a class as a function.');
	        }
	        if (!arguments.length) {
	            throw new TypeError('1 argument required, but only 0 present.');
	        }
	        var controller = ResizeObserverController.getInstance();
	        var observer = new ResizeObserverSPI(callback, controller, this);
	        observers.set(this, observer);
	    }
	    return ResizeObserver;
	}());
	// Expose public methods of ResizeObserver.
	[
	    'observe',
	    'unobserve',
	    'disconnect'
	].forEach(function (method) {
	    ResizeObserver.prototype[method] = function () {
	        var _a;
	        return (_a = observers.get(this))[method].apply(_a, arguments);
	    };
	});

	var index$3 = (function () {
	    // Export existing implementation if available.
	    if (typeof global$1.ResizeObserver !== 'undefined') {
	        return global$1.ResizeObserver;
	    }
	    return ResizeObserver;
	})();

	function contains$2(root, n) {
	  var node = n;
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }

	  return false;
	}

	function addEventListenerWrap(target, eventType, cb, option) {
	  /* eslint camelcase: 2 */
	  var callback = ReactDOM__default.unstable_batchedUpdates ? function run(e) {
	    ReactDOM__default.unstable_batchedUpdates(cb, e);
	  } : cb;
	  return addDOMEventListener(target, eventType, callback, option);
	}

	var createClass$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _defineProperty2 = _interopRequireDefault(defineProperty$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	});

	var _createClass = unwrapExports(createClass$1);

	var ContainerRender = function (_React$Component) {
	  _inherits(ContainerRender, _React$Component);

	  function ContainerRender() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, ContainerRender);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ContainerRender.__proto__ || Object.getPrototypeOf(ContainerRender)).call.apply(_ref, [this].concat(args))), _this), _this.removeContainer = function () {
	      if (_this.container) {
	        ReactDOM__default.unmountComponentAtNode(_this.container);
	        _this.container.parentNode.removeChild(_this.container);
	        _this.container = null;
	      }
	    }, _this.renderComponent = function (props, ready) {
	      var _this$props = _this.props,
	          visible = _this$props.visible,
	          getComponent = _this$props.getComponent,
	          forceRender = _this$props.forceRender,
	          getContainer = _this$props.getContainer,
	          parent = _this$props.parent;

	      if (visible || parent._component || forceRender) {
	        if (!_this.container) {
	          _this.container = getContainer();
	        }
	        ReactDOM__default.unstable_renderSubtreeIntoContainer(parent, getComponent(props), _this.container, function callback() {
	          if (ready) {
	            ready.call(this);
	          }
	        });
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(ContainerRender, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.autoMount) {
	        this.renderComponent();
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.props.autoMount) {
	        this.renderComponent();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.props.autoDestroy) {
	        this.removeContainer();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children({
	        renderComponent: this.renderComponent,
	        removeContainer: this.removeContainer
	      });
	    }
	  }]);

	  return ContainerRender;
	}(React__default.Component);

	ContainerRender.propTypes = {
	  autoMount: propTypes.bool,
	  autoDestroy: propTypes.bool,
	  visible: propTypes.bool,
	  forceRender: propTypes.bool,
	  parent: propTypes.any,
	  getComponent: propTypes.func.isRequired,
	  getContainer: propTypes.func.isRequired,
	  children: propTypes.func.isRequired
	};
	ContainerRender.defaultProps = {
	  autoMount: true,
	  autoDestroy: true,
	  forceRender: false
	};

	var Portal = function (_React$Component) {
	  _inherits(Portal, _React$Component);

	  function Portal() {
	    _classCallCheck(this, Portal);

	    return _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));
	  }

	  _createClass(Portal, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.createContainer();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      var didUpdate = this.props.didUpdate;

	      if (didUpdate) {
	        didUpdate(prevProps);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.removeContainer();
	    }
	  }, {
	    key: 'createContainer',
	    value: function createContainer() {
	      this._container = this.props.getContainer();
	      this.forceUpdate();
	    }
	  }, {
	    key: 'removeContainer',
	    value: function removeContainer() {
	      if (this._container) {
	        this._container.parentNode.removeChild(this._container);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this._container) {
	        return ReactDOM__default.createPortal(this.props.children, this._container);
	      }
	      return null;
	    }
	  }]);

	  return Portal;
	}(React__default.Component);

	Portal.propTypes = {
	  getContainer: propTypes.func.isRequired,
	  children: propTypes.node.isRequired,
	  didUpdate: propTypes.func
	};

	function isPointsEq(a1, a2, isAlignPoint) {
	  if (isAlignPoint) {
	    return a1[0] === a2[0];
	  }
	  return a1[0] === a2[0] && a1[1] === a2[1];
	}

	function getAlignFromPlacement(builtinPlacements, placementStr, align) {
	  var baseAlign = builtinPlacements[placementStr] || {};
	  return _extends$5({}, baseAlign, align);
	}

	function getAlignPopupClassName(builtinPlacements, prefixCls, align, isAlignPoint) {
	  var points = align.points;
	  for (var placement in builtinPlacements) {
	    if (builtinPlacements.hasOwnProperty(placement)) {
	      if (isPointsEq(builtinPlacements[placement].points, points, isAlignPoint)) {
	        return prefixCls + '-placement-' + placement;
	      }
	    }
	  }
	  return '';
	}

	function saveRef(name, component) {
	  this[name] = component;
	}

	function buffer(fn, ms) {
	  var timer = void 0;

	  function clear() {
	    if (timer) {
	      clearTimeout(timer);
	      timer = null;
	    }
	  }

	  function bufferFn() {
	    clear();
	    timer = setTimeout(fn, ms);
	  }

	  bufferFn.clear = clear;

	  return bufferFn;
	}

	function isSamePoint(prev, next) {
	  if (prev === next) return true;
	  if (!prev || !next) return false;

	  if ('pageX' in next && 'pageY' in next) {
	    return prev.pageX === next.pageX && prev.pageY === next.pageY;
	  }

	  if ('clientX' in next && 'clientY' in next) {
	    return prev.clientX === next.clientX && prev.clientY === next.clientY;
	  }

	  return false;
	}

	function isWindow$2(obj) {
	  return obj && typeof obj === 'object' && obj.window === obj;
	}

	function isSimilarValue(val1, val2) {
	  var int1 = Math.floor(val1);
	  var int2 = Math.floor(val2);
	  return Math.abs(int1 - int2) <= 1;
	}

	function restoreFocus(activeElement, container) {
	  // Focus back if is in the container
	  if (activeElement !== document.activeElement && contains$2(container, activeElement)) {
	    activeElement.focus();
	  }
	}

	function getElement(func) {
	  if (typeof func !== 'function' || !func) return null;
	  return func();
	}

	function getPoint(point) {
	  if (typeof point !== 'object' || !point) return null;
	  return point;
	}

	var Align = function (_Component) {
	  _inherits(Align, _Component);

	  function Align() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, Align);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Align.__proto__ || Object.getPrototypeOf(Align)).call.apply(_ref, [this].concat(args))), _this), _this.forceAlign = function () {
	      var _this$props = _this.props,
	          disabled = _this$props.disabled,
	          target = _this$props.target,
	          align = _this$props.align,
	          onAlign = _this$props.onAlign;

	      if (!disabled && target) {
	        var source = ReactDOM__default.findDOMNode(_this);

	        var result = void 0;
	        var element = getElement(target);
	        var point = getPoint(target);

	        // IE lose focus after element realign
	        // We should record activeElement and restore later
	        var activeElement = document.activeElement;

	        if (element) {
	          result = alignElement(source, element, align);
	        } else if (point) {
	          result = alignPoint(source, point, align);
	        }

	        restoreFocus(activeElement, source);

	        if (onAlign) {
	          onAlign(source, result);
	        }
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(Align, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var props = this.props;
	      // if parent ref not attached .... use document.getElementById
	      this.forceAlign();
	      if (!props.disabled && props.monitorWindowResize) {
	        this.startMonitorWindowResize();
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      var reAlign = false;
	      var props = this.props;

	      if (!props.disabled) {
	        var source = ReactDOM__default.findDOMNode(this);
	        var sourceRect = source ? source.getBoundingClientRect() : null;

	        if (prevProps.disabled) {
	          reAlign = true;
	        } else {
	          var lastElement = getElement(prevProps.target);
	          var currentElement = getElement(props.target);
	          var lastPoint = getPoint(prevProps.target);
	          var currentPoint = getPoint(props.target);

	          if (isWindow$2(lastElement) && isWindow$2(currentElement)) {
	            // Skip if is window
	            reAlign = false;
	          } else if (lastElement !== currentElement || // Element change
	          lastElement && !currentElement && currentPoint || // Change from element to point
	          lastPoint && currentPoint && currentElement || // Change from point to element
	          currentPoint && !isSamePoint(lastPoint, currentPoint)) {
	            reAlign = true;
	          }

	          // If source element size changed
	          var preRect = this.sourceRect || {};
	          if (!reAlign && source && (!isSimilarValue(preRect.width, sourceRect.width) || !isSimilarValue(preRect.height, sourceRect.height))) {
	            reAlign = true;
	          }
	        }

	        this.sourceRect = sourceRect;
	      }

	      if (reAlign) {
	        this.forceAlign();
	      }

	      if (props.monitorWindowResize && !props.disabled) {
	        this.startMonitorWindowResize();
	      } else {
	        this.stopMonitorWindowResize();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.stopMonitorWindowResize();
	    }
	  }, {
	    key: 'startMonitorWindowResize',
	    value: function startMonitorWindowResize() {
	      if (!this.resizeHandler) {
	        this.bufferMonitor = buffer(this.forceAlign, this.props.monitorBufferTime);
	        this.resizeHandler = addEventListenerWrap(window, 'resize', this.bufferMonitor);
	      }
	    }
	  }, {
	    key: 'stopMonitorWindowResize',
	    value: function stopMonitorWindowResize() {
	      if (this.resizeHandler) {
	        this.bufferMonitor.clear();
	        this.resizeHandler.remove();
	        this.resizeHandler = null;
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          childrenProps = _props.childrenProps,
	          children = _props.children;

	      var child = React__default.Children.only(children);
	      if (childrenProps) {
	        var newProps = {};
	        var propList = Object.keys(childrenProps);
	        propList.forEach(function (prop) {
	          newProps[prop] = _this2.props[childrenProps[prop]];
	        });

	        return React__default.cloneElement(child, newProps);
	      }
	      return child;
	    }
	  }]);

	  return Align;
	}(React.Component);

	Align.propTypes = {
	  childrenProps: propTypes.object,
	  align: propTypes.object.isRequired,
	  target: propTypes.oneOfType([propTypes.func, propTypes.shape({
	    clientX: propTypes.number,
	    clientY: propTypes.number,
	    pageX: propTypes.number,
	    pageY: propTypes.number
	  })]),
	  onAlign: propTypes.func,
	  monitorBufferTime: propTypes.number,
	  monitorWindowResize: propTypes.bool,
	  disabled: propTypes.bool,
	  children: propTypes.any
	};
	Align.defaultProps = {
	  target: function target() {
	    return window;
	  },
	  monitorBufferTime: 50,
	  monitorWindowResize: false,
	  disabled: false
	};

	// export this package's api

	var defineProperty$4 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _defineProperty2 = _interopRequireDefault(defineProperty$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};
	});

	var _defineProperty$1 = unwrapExports(defineProperty$4);

	function toArrayChildren(children) {
	  var ret = [];
	  React__default.Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child && child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child && child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child && child2) {
	        if (child && !child2 || !child && child2) {
	          same = false;
	        } else if (child.key !== child2.key) {
	          same = false;
	        } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	          same = false;
	        }
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (child && findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (child && Object.prototype.hasOwnProperty.call(nextChildrenPending, child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
	}

	var START_EVENT_NAME_MAP = {
	  transitionstart: {
	    transition: 'transitionstart',
	    WebkitTransition: 'webkitTransitionStart',
	    MozTransition: 'mozTransitionStart',
	    OTransition: 'oTransitionStart',
	    msTransition: 'MSTransitionStart'
	  },

	  animationstart: {
	    animation: 'animationstart',
	    WebkitAnimation: 'webkitAnimationStart',
	    MozAnimation: 'mozAnimationStart',
	    OAnimation: 'oAnimationStart',
	    msAnimation: 'MSAnimationStart'
	  }
	};

	var END_EVENT_NAME_MAP = {
	  transitionend: {
	    transition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'mozTransitionEnd',
	    OTransition: 'oTransitionEnd',
	    msTransition: 'MSTransitionEnd'
	  },

	  animationend: {
	    animation: 'animationend',
	    WebkitAnimation: 'webkitAnimationEnd',
	    MozAnimation: 'mozAnimationEnd',
	    OAnimation: 'oAnimationEnd',
	    msAnimation: 'MSAnimationEnd'
	  }
	};

	var startEvents = [];
	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  if (!('AnimationEvent' in window)) {
	    delete START_EVENT_NAME_MAP.animationstart.animation;
	    delete END_EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete START_EVENT_NAME_MAP.transitionstart.transition;
	    delete END_EVENT_NAME_MAP.transitionend.transition;
	  }

	  function process(EVENT_NAME_MAP, events) {
	    for (var baseEventName in EVENT_NAME_MAP) {
	      if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
	        var baseEvents = EVENT_NAME_MAP[baseEventName];
	        for (var styleName in baseEvents) {
	          if (styleName in style) {
	            events.push(baseEvents[styleName]);
	            break;
	          }
	        }
	      }
	    }
	  }

	  process(START_EVENT_NAME_MAP, startEvents);
	  process(END_EVENT_NAME_MAP, endEvents);
	}

	if (typeof window !== 'undefined' && typeof document !== 'undefined') {
	  detectEvents();
	}

	function addEventListener$2(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var TransitionEvents = {
	  // Start events
	  startEvents: startEvents,

	  addStartEventListener: function addStartEventListener(node, eventListener) {
	    if (startEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    startEvents.forEach(function (startEvent) {
	      addEventListener$2(node, startEvent, eventListener);
	    });
	  },
	  removeStartEventListener: function removeStartEventListener(node, eventListener) {
	    if (startEvents.length === 0) {
	      return;
	    }
	    startEvents.forEach(function (startEvent) {
	      removeEventListener(node, startEvent, eventListener);
	    });
	  },


	  // End events
	  endEvents: endEvents,

	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener$2(node, endEvent, eventListener);
	    });
	  },
	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	var isCssAnimationSupported = TransitionEvents.endEvents.length !== 0;
	var capitalPrefixes = ['Webkit', 'Moz', 'O',
	// ms is special .... !
	'ms'];
	var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

	function getStyleProperty(node, name) {
	  // old ff need null, https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle
	  var style = window.getComputedStyle(node, null);
	  var ret = '';
	  for (var i = 0; i < prefixes.length; i++) {
	    ret = style.getPropertyValue(prefixes[i] + name);
	    if (ret) {
	      break;
	    }
	  }
	  return ret;
	}

	function fixBrowserByTimeout(node) {
	  if (isCssAnimationSupported) {
	    var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
	    var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
	    var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
	    var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
	    var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
	    // sometimes, browser bug
	    node.rcEndAnimTimeout = setTimeout(function () {
	      node.rcEndAnimTimeout = null;
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }, time * 1000 + 200);
	  }
	}

	function clearBrowserBugTimeout(node) {
	  if (node.rcEndAnimTimeout) {
	    clearTimeout(node.rcEndAnimTimeout);
	    node.rcEndAnimTimeout = null;
	  }
	}

	var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
	  var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof$1(transitionName)) === 'object';
	  var className = nameIsObj ? transitionName.name : transitionName;
	  var activeClassName = nameIsObj ? transitionName.active : transitionName + '-active';
	  var end = endCallback;
	  var start = void 0;
	  var active = void 0;
	  var nodeClasses = componentClasses(node);

	  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
	    end = endCallback.end;
	    start = endCallback.start;
	    active = endCallback.active;
	  }

	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    nodeClasses.remove(className);
	    nodeClasses.remove(activeClassName);

	    TransitionEvents.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional end is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (end) {
	      end();
	    }
	  };

	  TransitionEvents.addEndEventListener(node, node.rcEndListener);

	  if (start) {
	    start();
	  }
	  nodeClasses.add(className);

	  node.rcAnimTimeout = setTimeout(function () {
	    node.rcAnimTimeout = null;
	    nodeClasses.add(activeClassName);
	    if (active) {
	      setTimeout(active, 0);
	    }
	    fixBrowserByTimeout(node);
	    // 30ms for firefox
	  }, 30);

	  return {
	    stop: function stop() {
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }
	  };
	};

	cssAnimation.style = function (node, style, callback) {
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    TransitionEvents.removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional callback is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (callback) {
	      callback();
	    }
	  };

	  TransitionEvents.addEndEventListener(node, node.rcEndListener);

	  node.rcAnimTimeout = setTimeout(function () {
	    for (var s in style) {
	      if (style.hasOwnProperty(s)) {
	        node.style[s] = style[s];
	      }
	    }
	    node.rcAnimTimeout = null;
	    fixBrowserByTimeout(node);
	  }, 0);
	};

	cssAnimation.setTransition = function (node, p, value) {
	  var property = p;
	  var v = value;
	  if (value === undefined) {
	    v = property;
	    property = '';
	  }
	  property = property || '';
	  capitalPrefixes.forEach(function (prefix) {
	    node.style[prefix + 'Transition' + property] = v;
	  });
	};

	cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

	var util$1 = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },
	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var AnimateChild = function (_React$Component) {
	  _inherits(AnimateChild, _React$Component);

	  function AnimateChild() {
	    _classCallCheck(this, AnimateChild);

	    return _possibleConstructorReturn(this, (AnimateChild.__proto__ || Object.getPrototypeOf(AnimateChild)).apply(this, arguments));
	  }

	  _createClass(AnimateChild, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.stop();
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(done) {
	      if (util$1.isEnterSupported(this.props)) {
	        this.transition('enter', done);
	      } else {
	        done();
	      }
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(done) {
	      if (util$1.isAppearSupported(this.props)) {
	        this.transition('appear', done);
	      } else {
	        done();
	      }
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(done) {
	      if (util$1.isLeaveSupported(this.props)) {
	        this.transition('leave', done);
	      } else {
	        // always sync, do not interupt with react component life cycle
	        // update hidden -> animate hidden ->
	        // didUpdate -> animate leave -> unmount (if animate is none)
	        done();
	      }
	    }
	  }, {
	    key: 'transition',
	    value: function transition(animationType, finishCallback) {
	      var _this2 = this;

	      var node = ReactDOM__default.findDOMNode(this);
	      var props = this.props;
	      var transitionName = props.transitionName;
	      var nameIsObj = typeof transitionName === 'object';
	      this.stop();
	      var end = function end() {
	        _this2.stopper = null;
	        finishCallback();
	      };
	      if ((isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	        var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
	        var activeName = name + '-active';
	        if (nameIsObj && transitionName[animationType + 'Active']) {
	          activeName = transitionName[animationType + 'Active'];
	        }
	        this.stopper = cssAnimation(node, {
	          name: name,
	          active: activeName
	        }, end);
	      } else {
	        this.stopper = props.animation[animationType](node, end);
	      }
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      var stopper = this.stopper;
	      if (stopper) {
	        this.stopper = null;
	        stopper.stop();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return AnimateChild;
	}(React__default.Component);

	AnimateChild.propTypes = {
	  children: propTypes.any
	};

	var defaultKey = 'rc_animate_' + Date.now();

	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (React__default.isValidElement(children)) {
	    if (!children.key) {
	      return React__default.cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop$4() {}

	var Animate = function (_React$Component) {
	  _inherits(Animate, _React$Component);

	  // eslint-disable-line

	  function Animate(props) {
	    _classCallCheck(this, Animate);

	    var _this = _possibleConstructorReturn(this, (Animate.__proto__ || Object.getPrototypeOf(Animate)).call(this, props));

	    _initialiseProps.call(_this);

	    _this.currentlyAnimatingKeys = {};
	    _this.keysToEnter = [];
	    _this.keysToLeave = [];

	    _this.state = {
	      children: toArrayChildren(getChildrenFromProps(props))
	    };

	    _this.childrenRefs = {};
	    return _this;
	  }

	  _createClass(Animate, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      var showProp = this.props.showProp;
	      var children = this.state.children;
	      if (showProp) {
	        children = children.filter(function (child) {
	          return !!child.props[showProp];
	        });
	      }
	      children.forEach(function (child) {
	        if (child) {
	          _this2.performAppear(child.key);
	        }
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var _this3 = this;

	      this.nextProps = nextProps;
	      var nextChildren = toArrayChildren(getChildrenFromProps(nextProps));
	      var props = this.props;
	      // exclusive needs immediate response
	      if (props.exclusive) {
	        Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	          _this3.stop(key);
	        });
	      }
	      var showProp = props.showProp;
	      var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	      // last props children if exclusive
	      var currentChildren = props.exclusive ? toArrayChildren(getChildrenFromProps(props)) : this.state.children;
	      // in case destroy in showProp mode
	      var newChildren = [];
	      if (showProp) {
	        currentChildren.forEach(function (currentChild) {
	          var nextChild = currentChild && findChildInChildrenByKey(nextChildren, currentChild.key);
	          var newChild = void 0;
	          if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	            newChild = React__default.cloneElement(nextChild || currentChild, _defineProperty$1({}, showProp, true));
	          } else {
	            newChild = nextChild;
	          }
	          if (newChild) {
	            newChildren.push(newChild);
	          }
	        });
	        nextChildren.forEach(function (nextChild) {
	          if (!nextChild || !findChildInChildrenByKey(currentChildren, nextChild.key)) {
	            newChildren.push(nextChild);
	          }
	        });
	      } else {
	        newChildren = mergeChildren(currentChildren, nextChildren);
	      }

	      // need render to avoid update
	      this.setState({
	        children: newChildren
	      });

	      nextChildren.forEach(function (child) {
	        var key = child && child.key;
	        if (child && currentlyAnimatingKeys[key]) {
	          return;
	        }
	        var hasPrev = child && findChildInChildrenByKey(currentChildren, key);
	        if (showProp) {
	          var showInNext = child.props[showProp];
	          if (hasPrev) {
	            var showInNow = findShownChildInChildrenByKey(currentChildren, key, showProp);
	            if (!showInNow && showInNext) {
	              _this3.keysToEnter.push(key);
	            }
	          } else if (showInNext) {
	            _this3.keysToEnter.push(key);
	          }
	        } else if (!hasPrev) {
	          _this3.keysToEnter.push(key);
	        }
	      });

	      currentChildren.forEach(function (child) {
	        var key = child && child.key;
	        if (child && currentlyAnimatingKeys[key]) {
	          return;
	        }
	        var hasNext = child && findChildInChildrenByKey(nextChildren, key);
	        if (showProp) {
	          var showInNow = child.props[showProp];
	          if (hasNext) {
	            var showInNext = findShownChildInChildrenByKey(nextChildren, key, showProp);
	            if (!showInNext && showInNow) {
	              _this3.keysToLeave.push(key);
	            }
	          } else if (showInNow) {
	            _this3.keysToLeave.push(key);
	          }
	        } else if (!hasNext) {
	          _this3.keysToLeave.push(key);
	        }
	      });
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      var keysToEnter = this.keysToEnter;
	      this.keysToEnter = [];
	      keysToEnter.forEach(this.performEnter);
	      var keysToLeave = this.keysToLeave;
	      this.keysToLeave = [];
	      keysToLeave.forEach(this.performLeave);
	    }
	  }, {
	    key: 'isValidChildByKey',
	    value: function isValidChildByKey(currentChildren, key) {
	      var showProp = this.props.showProp;
	      if (showProp) {
	        return findShownChildInChildrenByKey(currentChildren, key, showProp);
	      }
	      return findChildInChildrenByKey(currentChildren, key);
	    }
	  }, {
	    key: 'stop',
	    value: function stop(key) {
	      delete this.currentlyAnimatingKeys[key];
	      var component = this.childrenRefs[key];
	      if (component) {
	        component.stop();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this4 = this;

	      var props = this.props;
	      this.nextProps = props;
	      var stateChildren = this.state.children;
	      var children = null;
	      if (stateChildren) {
	        children = stateChildren.map(function (child) {
	          if (child === null || child === undefined) {
	            return child;
	          }
	          if (!child.key) {
	            throw new Error('must set key for <rc-animate> children');
	          }
	          return React__default.createElement(
	            AnimateChild,
	            {
	              key: child.key,
	              ref: function ref(node) {
	                _this4.childrenRefs[child.key] = node;
	              },
	              animation: props.animation,
	              transitionName: props.transitionName,
	              transitionEnter: props.transitionEnter,
	              transitionAppear: props.transitionAppear,
	              transitionLeave: props.transitionLeave
	            },
	            child
	          );
	        });
	      }
	      var Component = props.component;
	      if (Component) {
	        var passedProps = props;
	        if (typeof Component === 'string') {
	          passedProps = _extends$5({
	            className: props.className,
	            style: props.style
	          }, props.componentProps);
	        }
	        return React__default.createElement(
	          Component,
	          passedProps,
	          children
	        );
	      }
	      return children[0] || null;
	    }
	  }]);

	  return Animate;
	}(React__default.Component);

	Animate.isAnimate = true;
	Animate.propTypes = {
	  component: propTypes.any,
	  componentProps: propTypes.object,
	  animation: propTypes.object,
	  transitionName: propTypes.oneOfType([propTypes.string, propTypes.object]),
	  transitionEnter: propTypes.bool,
	  transitionAppear: propTypes.bool,
	  exclusive: propTypes.bool,
	  transitionLeave: propTypes.bool,
	  onEnd: propTypes.func,
	  onEnter: propTypes.func,
	  onLeave: propTypes.func,
	  onAppear: propTypes.func,
	  showProp: propTypes.string,
	  children: propTypes.node
	};
	Animate.defaultProps = {
	  animation: {},
	  component: 'span',
	  componentProps: {},
	  transitionEnter: true,
	  transitionLeave: true,
	  transitionAppear: false,
	  onEnd: noop$4,
	  onEnter: noop$4,
	  onLeave: noop$4,
	  onAppear: noop$4
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this5 = this;

	  this.performEnter = function (key) {
	    // may already remove by exclusive
	    if (_this5.childrenRefs[key]) {
	      _this5.currentlyAnimatingKeys[key] = true;
	      _this5.childrenRefs[key].componentWillEnter(_this5.handleDoneAdding.bind(_this5, key, 'enter'));
	    }
	  };

	  this.performAppear = function (key) {
	    if (_this5.childrenRefs[key]) {
	      _this5.currentlyAnimatingKeys[key] = true;
	      _this5.childrenRefs[key].componentWillAppear(_this5.handleDoneAdding.bind(_this5, key, 'appear'));
	    }
	  };

	  this.handleDoneAdding = function (key, type) {
	    var props = _this5.props;
	    delete _this5.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== _this5.nextProps) {
	      return;
	    }
	    var currentChildren = toArrayChildren(getChildrenFromProps(props));
	    if (!_this5.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      _this5.performLeave(key);
	    } else if (type === 'appear') {
	      if (util$1.allowAppearCallback(props)) {
	        props.onAppear(key);
	        props.onEnd(key, true);
	      }
	    } else if (util$1.allowEnterCallback(props)) {
	      props.onEnter(key);
	      props.onEnd(key, true);
	    }
	  };

	  this.performLeave = function (key) {
	    // may already remove by exclusive
	    if (_this5.childrenRefs[key]) {
	      _this5.currentlyAnimatingKeys[key] = true;
	      _this5.childrenRefs[key].componentWillLeave(_this5.handleDoneLeaving.bind(_this5, key));
	    }
	  };

	  this.handleDoneLeaving = function (key) {
	    var props = _this5.props;
	    delete _this5.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== _this5.nextProps) {
	      return;
	    }
	    var currentChildren = toArrayChildren(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (_this5.isValidChildByKey(currentChildren, key)) {
	      _this5.performEnter(key);
	    } else {
	      var end = function end() {
	        if (util$1.allowLeaveCallback(props)) {
	          props.onLeave(key);
	          props.onEnd(key, false);
	        }
	      };
	      if (!isSameChildren(_this5.state.children, currentChildren, props.showProp)) {
	        _this5.setState({
	          children: currentChildren
	        }, end);
	      } else {
	        end();
	      }
	    }
	  };
	};

	var LazyRenderBox = function (_Component) {
	  _inherits(LazyRenderBox, _Component);

	  function LazyRenderBox() {
	    _classCallCheck(this, LazyRenderBox);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return nextProps.hiddenClassName || nextProps.visible;
	  };

	  LazyRenderBox.prototype.render = function render() {
	    var _props = this.props,
	        hiddenClassName = _props.hiddenClassName,
	        visible = _props.visible,
	        props = _objectWithoutProperties(_props, ['hiddenClassName', 'visible']);

	    if (hiddenClassName || React__default.Children.count(props.children) > 1) {
	      if (!visible && hiddenClassName) {
	        props.className += ' ' + hiddenClassName;
	      }
	      return React__default.createElement('div', props);
	    }

	    return React__default.Children.only(props.children);
	  };

	  return LazyRenderBox;
	}(React.Component);

	LazyRenderBox.propTypes = {
	  children: propTypes.any,
	  className: propTypes.string,
	  visible: propTypes.bool,
	  hiddenClassName: propTypes.string
	};

	var PopupInner = function (_Component) {
	  _inherits(PopupInner, _Component);

	  function PopupInner() {
	    _classCallCheck(this, PopupInner);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  PopupInner.prototype.render = function render() {
	    var props = this.props;
	    var className = props.className;
	    if (!props.visible) {
	      className += ' ' + props.hiddenClassName;
	    }
	    return React__default.createElement(
	      'div',
	      {
	        className: className,
	        onMouseEnter: props.onMouseEnter,
	        onMouseLeave: props.onMouseLeave,
	        onMouseDown: props.onMouseDown,
	        onTouchStart: props.onTouchStart,
	        style: props.style
	      },
	      React__default.createElement(
	        LazyRenderBox,
	        { className: props.prefixCls + '-content', visible: props.visible },
	        props.children
	      )
	    );
	  };

	  return PopupInner;
	}(React.Component);

	PopupInner.propTypes = {
	  hiddenClassName: propTypes.string,
	  className: propTypes.string,
	  prefixCls: propTypes.string,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onMouseDown: propTypes.func,
	  onTouchStart: propTypes.func,
	  children: propTypes.any
	};

	var Popup = function (_Component) {
	  _inherits(Popup, _Component);

	  function Popup(props) {
	    _classCallCheck(this, Popup);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _initialiseProps$1.call(_this);

	    _this.state = {
	      // Used for stretch
	      stretchChecked: false,
	      targetWidth: undefined,
	      targetHeight: undefined
	    };

	    _this.savePopupRef = saveRef.bind(_this, 'popupInstance');
	    _this.saveAlignRef = saveRef.bind(_this, 'alignInstance');
	    return _this;
	  }

	  Popup.prototype.componentDidMount = function componentDidMount() {
	    this.rootNode = this.getPopupDomNode();
	    this.setStretchSize();
	  };

	  Popup.prototype.componentDidUpdate = function componentDidUpdate() {
	    this.setStretchSize();
	  };

	  // Record size if stretch needed


	  Popup.prototype.getPopupDomNode = function getPopupDomNode() {
	    return ReactDOM__default.findDOMNode(this.popupInstance);
	  };

	  // `target` on `rc-align` can accept as a function to get the bind element or a point.
	  // ref: https://www.npmjs.com/package/rc-align


	  Popup.prototype.getMaskTransitionName = function getMaskTransitionName() {
	    var props = this.props;
	    var transitionName = props.maskTransitionName;
	    var animation = props.maskAnimation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  };

	  Popup.prototype.getTransitionName = function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.prefixCls + '-' + props.animation;
	    }
	    return transitionName;
	  };

	  Popup.prototype.getClassName = function getClassName(currentAlignClassName) {
	    return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;
	  };

	  Popup.prototype.getPopupElement = function getPopupElement() {
	    var _this2 = this;

	    var savePopupRef = this.savePopupRef;
	    var _state = this.state,
	        stretchChecked = _state.stretchChecked,
	        targetHeight = _state.targetHeight,
	        targetWidth = _state.targetWidth;
	    var _props = this.props,
	        align = _props.align,
	        visible = _props.visible,
	        prefixCls = _props.prefixCls,
	        style = _props.style,
	        getClassNameFromAlign = _props.getClassNameFromAlign,
	        destroyPopupOnHide = _props.destroyPopupOnHide,
	        stretch = _props.stretch,
	        children = _props.children,
	        onMouseEnter = _props.onMouseEnter,
	        onMouseLeave = _props.onMouseLeave,
	        onMouseDown = _props.onMouseDown,
	        onTouchStart = _props.onTouchStart;

	    var className = this.getClassName(this.currentAlignClassName || getClassNameFromAlign(align));
	    var hiddenClassName = prefixCls + '-hidden';

	    if (!visible) {
	      this.currentAlignClassName = null;
	    }

	    var sizeStyle = {};
	    if (stretch) {
	      // Stretch with target
	      if (stretch.indexOf('height') !== -1) {
	        sizeStyle.height = targetHeight;
	      } else if (stretch.indexOf('minHeight') !== -1) {
	        sizeStyle.minHeight = targetHeight;
	      }
	      if (stretch.indexOf('width') !== -1) {
	        sizeStyle.width = targetWidth;
	      } else if (stretch.indexOf('minWidth') !== -1) {
	        sizeStyle.minWidth = targetWidth;
	      }

	      // Delay force align to makes ui smooth
	      if (!stretchChecked) {
	        sizeStyle.visibility = 'hidden';
	        setTimeout(function () {
	          if (_this2.alignInstance) {
	            _this2.alignInstance.forceAlign();
	          }
	        }, 0);
	      }
	    }

	    var newStyle = _extends$5({}, sizeStyle, style, this.getZIndexStyle());

	    var popupInnerProps = {
	      className: className,
	      prefixCls: prefixCls,
	      ref: savePopupRef,
	      onMouseEnter: onMouseEnter,
	      onMouseLeave: onMouseLeave,
	      onMouseDown: onMouseDown,
	      onTouchStart: onTouchStart,
	      style: newStyle
	    };
	    if (destroyPopupOnHide) {
	      return React__default.createElement(
	        Animate,
	        {
	          component: '',
	          exclusive: true,
	          transitionAppear: true,
	          transitionName: this.getTransitionName()
	        },
	        visible ? React__default.createElement(
	          Align,
	          {
	            target: this.getAlignTarget(),
	            key: 'popup',
	            ref: this.saveAlignRef,
	            monitorWindowResize: true,
	            align: align,
	            onAlign: this.onAlign
	          },
	          React__default.createElement(
	            PopupInner,
	            _extends$5({
	              visible: true
	            }, popupInnerProps),
	            children
	          )
	        ) : null
	      );
	    }

	    return React__default.createElement(
	      Animate,
	      {
	        component: '',
	        exclusive: true,
	        transitionAppear: true,
	        transitionName: this.getTransitionName(),
	        showProp: 'xVisible'
	      },
	      React__default.createElement(
	        Align,
	        {
	          target: this.getAlignTarget(),
	          key: 'popup',
	          ref: this.saveAlignRef,
	          monitorWindowResize: true,
	          xVisible: visible,
	          childrenProps: { visible: 'xVisible' },
	          disabled: !visible,
	          align: align,
	          onAlign: this.onAlign
	        },
	        React__default.createElement(
	          PopupInner,
	          _extends$5({
	            hiddenClassName: hiddenClassName
	          }, popupInnerProps),
	          children
	        )
	      )
	    );
	  };

	  Popup.prototype.getZIndexStyle = function getZIndexStyle() {
	    var style = {};
	    var props = this.props;
	    if (props.zIndex !== undefined) {
	      style.zIndex = props.zIndex;
	    }
	    return style;
	  };

	  Popup.prototype.getMaskElement = function getMaskElement() {
	    var props = this.props;
	    var maskElement = void 0;
	    if (props.mask) {
	      var maskTransition = this.getMaskTransitionName();
	      maskElement = React__default.createElement(LazyRenderBox, {
	        style: this.getZIndexStyle(),
	        key: 'mask',
	        className: props.prefixCls + '-mask',
	        hiddenClassName: props.prefixCls + '-mask-hidden',
	        visible: props.visible
	      });
	      if (maskTransition) {
	        maskElement = React__default.createElement(
	          Animate,
	          {
	            key: 'mask',
	            showProp: 'visible',
	            transitionAppear: true,
	            component: '',
	            transitionName: maskTransition
	          },
	          maskElement
	        );
	      }
	    }
	    return maskElement;
	  };

	  Popup.prototype.render = function render() {
	    return React__default.createElement(
	      'div',
	      null,
	      this.getMaskElement(),
	      this.getPopupElement()
	    );
	  };

	  return Popup;
	}(React.Component);

	Popup.propTypes = {
	  visible: propTypes.bool,
	  style: propTypes.object,
	  getClassNameFromAlign: propTypes.func,
	  onAlign: propTypes.func,
	  getRootDomNode: propTypes.func,
	  align: propTypes.any,
	  destroyPopupOnHide: propTypes.bool,
	  className: propTypes.string,
	  prefixCls: propTypes.string,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onMouseDown: propTypes.func,
	  onTouchStart: propTypes.func,
	  stretch: propTypes.string,
	  children: propTypes.node,
	  point: propTypes.shape({
	    pageX: propTypes.number,
	    pageY: propTypes.number
	  })
	};

	var _initialiseProps$1 = function _initialiseProps() {
	  var _this3 = this;

	  this.onAlign = function (popupDomNode, align) {
	    var props = _this3.props;
	    var currentAlignClassName = props.getClassNameFromAlign(align);
	    // FIX: https://github.com/react-component/trigger/issues/56
	    // FIX: https://github.com/react-component/tooltip/issues/79
	    if (_this3.currentAlignClassName !== currentAlignClassName) {
	      _this3.currentAlignClassName = currentAlignClassName;
	      popupDomNode.className = _this3.getClassName(currentAlignClassName);
	    }
	    props.onAlign(popupDomNode, align);
	  };

	  this.setStretchSize = function () {
	    var _props2 = _this3.props,
	        stretch = _props2.stretch,
	        getRootDomNode = _props2.getRootDomNode,
	        visible = _props2.visible;
	    var _state2 = _this3.state,
	        stretchChecked = _state2.stretchChecked,
	        targetHeight = _state2.targetHeight,
	        targetWidth = _state2.targetWidth;


	    if (!stretch || !visible) {
	      if (stretchChecked) {
	        _this3.setState({ stretchChecked: false });
	      }
	      return;
	    }

	    var $ele = getRootDomNode();
	    if (!$ele) return;

	    var height = $ele.offsetHeight;
	    var width = $ele.offsetWidth;

	    if (targetHeight !== height || targetWidth !== width || !stretchChecked) {
	      _this3.setState({
	        stretchChecked: true,
	        targetHeight: height,
	        targetWidth: width
	      });
	    }
	  };

	  this.getTargetElement = function () {
	    return _this3.props.getRootDomNode();
	  };

	  this.getAlignTarget = function () {
	    var point = _this3.props.point;

	    if (point) {
	      return point;
	    }
	    return _this3.getTargetElement;
	  };
	};

	function noop$5() {}

	function returnEmptyString() {
	  return '';
	}

	function returnDocument() {
	  return window.document;
	}

	var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur', 'onContextMenu'];

	var IS_REACT_16 = !!ReactDOM.createPortal;

	var contextTypes = {
	  rcTrigger: propTypes.shape({
	    onPopupMouseDown: propTypes.func
	  })
	};

	var Trigger = function (_React$Component) {
	  _inherits(Trigger, _React$Component);

	  function Trigger(props) {
	    _classCallCheck(this, Trigger);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps$2.call(_this);

	    var popupVisible = void 0;
	    if ('popupVisible' in props) {
	      popupVisible = !!props.popupVisible;
	    } else {
	      popupVisible = !!props.defaultPopupVisible;
	    }

	    _this.prevPopupVisible = popupVisible;

	    _this.state = {
	      popupVisible: popupVisible
	    };
	    return _this;
	  }

	  Trigger.prototype.getChildContext = function getChildContext() {
	    return {
	      rcTrigger: {
	        onPopupMouseDown: this.onPopupMouseDown
	      }
	    };
	  };

	  Trigger.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    ALL_HANDLERS.forEach(function (h) {
	      _this2['fire' + h] = function (e) {
	        _this2.fireEvents(h, e);
	      };
	    });
	  };

	  Trigger.prototype.componentDidMount = function componentDidMount() {
	    this.componentDidUpdate({}, {
	      popupVisible: this.state.popupVisible
	    });
	  };

	  Trigger.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	    var popupVisible = _ref.popupVisible;

	    if (popupVisible !== undefined) {
	      this.setState({
	        popupVisible: popupVisible
	      });
	    }
	  };

	  Trigger.prototype.componentDidUpdate = function componentDidUpdate(_, prevState) {
	    var props = this.props;
	    var state = this.state;
	    var triggerAfterPopupVisibleChange = function triggerAfterPopupVisibleChange() {
	      if (prevState.popupVisible !== state.popupVisible) {
	        props.afterPopupVisibleChange(state.popupVisible);
	      }
	    };
	    if (!IS_REACT_16) {
	      this.renderComponent(null, triggerAfterPopupVisibleChange);
	    }

	    this.prevPopupVisible = prevState.popupVisible;

	    // We must listen to `mousedown` or `touchstart`, edge case:
	    // https://github.com/ant-design/ant-design/issues/5804
	    // https://github.com/react-component/calendar/issues/250
	    // https://github.com/react-component/trigger/issues/50
	    if (state.popupVisible) {
	      var currentDocument = void 0;
	      if (!this.clickOutsideHandler && (this.isClickToHide() || this.isContextMenuToShow())) {
	        currentDocument = props.getDocument();
	        this.clickOutsideHandler = addEventListenerWrap(currentDocument, 'mousedown', this.onDocumentClick);
	      }
	      // always hide on mobile
	      if (!this.touchOutsideHandler) {
	        currentDocument = currentDocument || props.getDocument();
	        this.touchOutsideHandler = addEventListenerWrap(currentDocument, 'touchstart', this.onDocumentClick);
	      }
	      // close popup when trigger type contains 'onContextMenu' and document is scrolling.
	      if (!this.contextMenuOutsideHandler1 && this.isContextMenuToShow()) {
	        currentDocument = currentDocument || props.getDocument();
	        this.contextMenuOutsideHandler1 = addEventListenerWrap(currentDocument, 'scroll', this.onContextMenuClose);
	      }
	      // close popup when trigger type contains 'onContextMenu' and window is blur.
	      if (!this.contextMenuOutsideHandler2 && this.isContextMenuToShow()) {
	        this.contextMenuOutsideHandler2 = addEventListenerWrap(window, 'blur', this.onContextMenuClose);
	      }
	      return;
	    }

	    this.clearOutsideHandler();
	  };

	  Trigger.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.clearDelayTimer();
	    this.clearOutsideHandler();
	    clearTimeout(this.mouseDownTimeout);
	  };

	  Trigger.prototype.getPopupDomNode = function getPopupDomNode() {
	    // for test
	    if (this._component && this._component.getPopupDomNode) {
	      return this._component.getPopupDomNode();
	    }
	    return null;
	  };

	  Trigger.prototype.getPopupAlign = function getPopupAlign() {
	    var props = this.props;
	    var popupPlacement = props.popupPlacement,
	        popupAlign = props.popupAlign,
	        builtinPlacements = props.builtinPlacements;

	    if (popupPlacement && builtinPlacements) {
	      return getAlignFromPlacement(builtinPlacements, popupPlacement, popupAlign);
	    }
	    return popupAlign;
	  };

	  /**
	   * @param popupVisible    Show or not the popup element
	   * @param event           SyntheticEvent, used for `pointAlign`
	   */
	  Trigger.prototype.setPopupVisible = function setPopupVisible(popupVisible, event) {
	    var alignPoint = this.props.alignPoint;


	    this.clearDelayTimer();

	    if (this.state.popupVisible !== popupVisible) {
	      if (!('popupVisible' in this.props)) {
	        this.setState({ popupVisible: popupVisible });
	      }
	      this.props.onPopupVisibleChange(popupVisible);
	    }

	    // Always record the point position since mouseEnterDelay will delay the show
	    if (alignPoint && event) {
	      this.setPoint(event);
	    }
	  };

	  Trigger.prototype.delaySetPopupVisible = function delaySetPopupVisible(visible, delayS, event) {
	    var _this3 = this;

	    var delay = delayS * 1000;
	    this.clearDelayTimer();
	    if (delay) {
	      var point = event ? { pageX: event.pageX, pageY: event.pageY } : null;
	      this.delayTimer = setTimeout(function () {
	        _this3.setPopupVisible(visible, point);
	        _this3.clearDelayTimer();
	      }, delay);
	    } else {
	      this.setPopupVisible(visible, event);
	    }
	  };

	  Trigger.prototype.clearDelayTimer = function clearDelayTimer() {
	    if (this.delayTimer) {
	      clearTimeout(this.delayTimer);
	      this.delayTimer = null;
	    }
	  };

	  Trigger.prototype.clearOutsideHandler = function clearOutsideHandler() {
	    if (this.clickOutsideHandler) {
	      this.clickOutsideHandler.remove();
	      this.clickOutsideHandler = null;
	    }

	    if (this.contextMenuOutsideHandler1) {
	      this.contextMenuOutsideHandler1.remove();
	      this.contextMenuOutsideHandler1 = null;
	    }

	    if (this.contextMenuOutsideHandler2) {
	      this.contextMenuOutsideHandler2.remove();
	      this.contextMenuOutsideHandler2 = null;
	    }

	    if (this.touchOutsideHandler) {
	      this.touchOutsideHandler.remove();
	      this.touchOutsideHandler = null;
	    }
	  };

	  Trigger.prototype.createTwoChains = function createTwoChains(event) {
	    var childPros = this.props.children.props;
	    var props = this.props;
	    if (childPros[event] && props[event]) {
	      return this['fire' + event];
	    }
	    return childPros[event] || props[event];
	  };

	  Trigger.prototype.isClickToShow = function isClickToShow() {
	    var _props = this.props,
	        action = _props.action,
	        showAction = _props.showAction;

	    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
	  };

	  Trigger.prototype.isContextMenuToShow = function isContextMenuToShow() {
	    var _props2 = this.props,
	        action = _props2.action,
	        showAction = _props2.showAction;

	    return action.indexOf('contextMenu') !== -1 || showAction.indexOf('contextMenu') !== -1;
	  };

	  Trigger.prototype.isClickToHide = function isClickToHide() {
	    var _props3 = this.props,
	        action = _props3.action,
	        hideAction = _props3.hideAction;

	    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
	  };

	  Trigger.prototype.isMouseEnterToShow = function isMouseEnterToShow() {
	    var _props4 = this.props,
	        action = _props4.action,
	        showAction = _props4.showAction;

	    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
	  };

	  Trigger.prototype.isMouseLeaveToHide = function isMouseLeaveToHide() {
	    var _props5 = this.props,
	        action = _props5.action,
	        hideAction = _props5.hideAction;

	    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
	  };

	  Trigger.prototype.isFocusToShow = function isFocusToShow() {
	    var _props6 = this.props,
	        action = _props6.action,
	        showAction = _props6.showAction;

	    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
	  };

	  Trigger.prototype.isBlurToHide = function isBlurToHide() {
	    var _props7 = this.props,
	        action = _props7.action,
	        hideAction = _props7.hideAction;

	    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
	  };

	  Trigger.prototype.forcePopupAlign = function forcePopupAlign() {
	    if (this.state.popupVisible && this._component && this._component.alignInstance) {
	      this._component.alignInstance.forceAlign();
	    }
	  };

	  Trigger.prototype.fireEvents = function fireEvents(type, e) {
	    var childCallback = this.props.children.props[type];
	    if (childCallback) {
	      childCallback(e);
	    }
	    var callback = this.props[type];
	    if (callback) {
	      callback(e);
	    }
	  };

	  Trigger.prototype.close = function close() {
	    this.setPopupVisible(false);
	  };

	  Trigger.prototype.render = function render() {
	    var _this4 = this;

	    var popupVisible = this.state.popupVisible;
	    var _props8 = this.props,
	        children = _props8.children,
	        forceRender = _props8.forceRender,
	        alignPoint = _props8.alignPoint,
	        className = _props8.className;

	    var child = React__default.Children.only(children);
	    var newChildProps = { key: 'trigger' };

	    if (this.isContextMenuToShow()) {
	      newChildProps.onContextMenu = this.onContextMenu;
	    } else {
	      newChildProps.onContextMenu = this.createTwoChains('onContextMenu');
	    }

	    if (this.isClickToHide() || this.isClickToShow()) {
	      newChildProps.onClick = this.onClick;
	      newChildProps.onMouseDown = this.onMouseDown;
	      newChildProps.onTouchStart = this.onTouchStart;
	    } else {
	      newChildProps.onClick = this.createTwoChains('onClick');
	      newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
	      newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
	    }
	    if (this.isMouseEnterToShow()) {
	      newChildProps.onMouseEnter = this.onMouseEnter;
	      if (alignPoint) {
	        newChildProps.onMouseMove = this.onMouseMove;
	      }
	    } else {
	      newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
	    }
	    if (this.isMouseLeaveToHide()) {
	      newChildProps.onMouseLeave = this.onMouseLeave;
	    } else {
	      newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
	    }
	    if (this.isFocusToShow() || this.isBlurToHide()) {
	      newChildProps.onFocus = this.onFocus;
	      newChildProps.onBlur = this.onBlur;
	    } else {
	      newChildProps.onFocus = this.createTwoChains('onFocus');
	      newChildProps.onBlur = this.createTwoChains('onBlur');
	    }

	    var childrenClassName = classnames(child && child.props && child.props.className, className);
	    if (childrenClassName) {
	      newChildProps.className = childrenClassName;
	    }
	    var trigger = React__default.cloneElement(child, newChildProps);

	    if (!IS_REACT_16) {
	      return React__default.createElement(
	        ContainerRender,
	        {
	          parent: this,
	          visible: popupVisible,
	          autoMount: false,
	          forceRender: forceRender,
	          getComponent: this.getComponent,
	          getContainer: this.getContainer
	        },
	        function (_ref2) {
	          var renderComponent = _ref2.renderComponent;

	          _this4.renderComponent = renderComponent;
	          return trigger;
	        }
	      );
	    }

	    var portal = void 0;
	    // prevent unmounting after it's rendered
	    if (popupVisible || this._component || forceRender) {
	      portal = React__default.createElement(
	        Portal,
	        {
	          key: 'portal',
	          getContainer: this.getContainer,
	          didUpdate: this.handlePortalUpdate
	        },
	        this.getComponent()
	      );
	    }

	    return [trigger, portal];
	  };

	  return Trigger;
	}(React__default.Component);

	Trigger.propTypes = {
	  children: propTypes.any,
	  action: propTypes.oneOfType([propTypes.string, propTypes.arrayOf(propTypes.string)]),
	  showAction: propTypes.any,
	  hideAction: propTypes.any,
	  getPopupClassNameFromAlign: propTypes.any,
	  onPopupVisibleChange: propTypes.func,
	  afterPopupVisibleChange: propTypes.func,
	  popup: propTypes.oneOfType([propTypes.node, propTypes.func]).isRequired,
	  popupStyle: propTypes.object,
	  prefixCls: propTypes.string,
	  popupClassName: propTypes.string,
	  className: propTypes.string,
	  popupPlacement: propTypes.string,
	  builtinPlacements: propTypes.object,
	  popupTransitionName: propTypes.oneOfType([propTypes.string, propTypes.object]),
	  popupAnimation: propTypes.any,
	  mouseEnterDelay: propTypes.number,
	  mouseLeaveDelay: propTypes.number,
	  zIndex: propTypes.number,
	  focusDelay: propTypes.number,
	  blurDelay: propTypes.number,
	  getPopupContainer: propTypes.func,
	  getDocument: propTypes.func,
	  forceRender: propTypes.bool,
	  destroyPopupOnHide: propTypes.bool,
	  mask: propTypes.bool,
	  maskClosable: propTypes.bool,
	  onPopupAlign: propTypes.func,
	  popupAlign: propTypes.object,
	  popupVisible: propTypes.bool,
	  defaultPopupVisible: propTypes.bool,
	  maskTransitionName: propTypes.oneOfType([propTypes.string, propTypes.object]),
	  maskAnimation: propTypes.string,
	  stretch: propTypes.string,
	  alignPoint: propTypes.bool // Maybe we can support user pass position in the future
	};
	Trigger.contextTypes = contextTypes;
	Trigger.childContextTypes = contextTypes;
	Trigger.defaultProps = {
	  prefixCls: 'rc-trigger-popup',
	  getPopupClassNameFromAlign: returnEmptyString,
	  getDocument: returnDocument,
	  onPopupVisibleChange: noop$5,
	  afterPopupVisibleChange: noop$5,
	  onPopupAlign: noop$5,
	  popupClassName: '',
	  mouseEnterDelay: 0,
	  mouseLeaveDelay: 0.1,
	  focusDelay: 0,
	  blurDelay: 0.15,
	  popupStyle: {},
	  destroyPopupOnHide: false,
	  popupAlign: {},
	  defaultPopupVisible: false,
	  mask: false,
	  maskClosable: true,
	  action: [],
	  showAction: [],
	  hideAction: []
	};

	var _initialiseProps$2 = function _initialiseProps() {
	  var _this5 = this;

	  this.onMouseEnter = function (e) {
	    var mouseEnterDelay = _this5.props.mouseEnterDelay;

	    _this5.fireEvents('onMouseEnter', e);
	    _this5.delaySetPopupVisible(true, mouseEnterDelay, mouseEnterDelay ? null : e);
	  };

	  this.onMouseMove = function (e) {
	    _this5.fireEvents('onMouseMove', e);
	    _this5.setPoint(e);
	  };

	  this.onMouseLeave = function (e) {
	    _this5.fireEvents('onMouseLeave', e);
	    _this5.delaySetPopupVisible(false, _this5.props.mouseLeaveDelay);
	  };

	  this.onPopupMouseEnter = function () {
	    _this5.clearDelayTimer();
	  };

	  this.onPopupMouseLeave = function (e) {
	    // https://github.com/react-component/trigger/pull/13
	    // react bug?
	    if (e.relatedTarget && !e.relatedTarget.setTimeout && _this5._component && _this5._component.getPopupDomNode && contains$2(_this5._component.getPopupDomNode(), e.relatedTarget)) {
	      return;
	    }
	    _this5.delaySetPopupVisible(false, _this5.props.mouseLeaveDelay);
	  };

	  this.onFocus = function (e) {
	    _this5.fireEvents('onFocus', e);
	    // incase focusin and focusout
	    _this5.clearDelayTimer();
	    if (_this5.isFocusToShow()) {
	      _this5.focusTime = Date.now();
	      _this5.delaySetPopupVisible(true, _this5.props.focusDelay);
	    }
	  };

	  this.onMouseDown = function (e) {
	    _this5.fireEvents('onMouseDown', e);
	    _this5.preClickTime = Date.now();
	  };

	  this.onTouchStart = function (e) {
	    _this5.fireEvents('onTouchStart', e);
	    _this5.preTouchTime = Date.now();
	  };

	  this.onBlur = function (e) {
	    _this5.fireEvents('onBlur', e);
	    _this5.clearDelayTimer();
	    if (_this5.isBlurToHide()) {
	      _this5.delaySetPopupVisible(false, _this5.props.blurDelay);
	    }
	  };

	  this.onContextMenu = function (e) {
	    e.preventDefault();
	    _this5.fireEvents('onContextMenu', e);
	    _this5.setPopupVisible(true, e);
	  };

	  this.onContextMenuClose = function () {
	    if (_this5.isContextMenuToShow()) {
	      _this5.close();
	    }
	  };

	  this.onClick = function (event) {
	    _this5.fireEvents('onClick', event);
	    // focus will trigger click
	    if (_this5.focusTime) {
	      var preTime = void 0;
	      if (_this5.preClickTime && _this5.preTouchTime) {
	        preTime = Math.min(_this5.preClickTime, _this5.preTouchTime);
	      } else if (_this5.preClickTime) {
	        preTime = _this5.preClickTime;
	      } else if (_this5.preTouchTime) {
	        preTime = _this5.preTouchTime;
	      }
	      if (Math.abs(preTime - _this5.focusTime) < 20) {
	        return;
	      }
	      _this5.focusTime = 0;
	    }
	    _this5.preClickTime = 0;
	    _this5.preTouchTime = 0;
	    if (event && event.preventDefault) {
	      event.preventDefault();
	    }
	    var nextVisible = !_this5.state.popupVisible;
	    if (_this5.isClickToHide() && !nextVisible || nextVisible && _this5.isClickToShow()) {
	      _this5.setPopupVisible(!_this5.state.popupVisible, event);
	    }
	  };

	  this.onPopupMouseDown = function () {
	    var _context$rcTrigger = _this5.context.rcTrigger,
	        rcTrigger = _context$rcTrigger === undefined ? {} : _context$rcTrigger;

	    _this5.hasPopupMouseDown = true;

	    clearTimeout(_this5.mouseDownTimeout);
	    _this5.mouseDownTimeout = setTimeout(function () {
	      _this5.hasPopupMouseDown = false;
	    }, 0);

	    if (rcTrigger.onPopupMouseDown) {
	      rcTrigger.onPopupMouseDown.apply(rcTrigger, arguments);
	    }
	  };

	  this.onDocumentClick = function (event) {
	    if (_this5.props.mask && !_this5.props.maskClosable) {
	      return;
	    }

	    var target = event.target;
	    var root = ReactDOM.findDOMNode(_this5);
	    if (!contains$2(root, target) && !_this5.hasPopupMouseDown) {
	      _this5.close();
	    }
	  };

	  this.getRootDomNode = function () {
	    return ReactDOM.findDOMNode(_this5);
	  };

	  this.getPopupClassNameFromAlign = function (align) {
	    var className = [];
	    var _props9 = _this5.props,
	        popupPlacement = _props9.popupPlacement,
	        builtinPlacements = _props9.builtinPlacements,
	        prefixCls = _props9.prefixCls,
	        alignPoint = _props9.alignPoint,
	        getPopupClassNameFromAlign = _props9.getPopupClassNameFromAlign;

	    if (popupPlacement && builtinPlacements) {
	      className.push(getAlignPopupClassName(builtinPlacements, prefixCls, align, alignPoint));
	    }
	    if (getPopupClassNameFromAlign) {
	      className.push(getPopupClassNameFromAlign(align));
	    }
	    return className.join(' ');
	  };

	  this.getComponent = function () {
	    var _props10 = _this5.props,
	        prefixCls = _props10.prefixCls,
	        destroyPopupOnHide = _props10.destroyPopupOnHide,
	        popupClassName = _props10.popupClassName,
	        action = _props10.action,
	        onPopupAlign = _props10.onPopupAlign,
	        popupAnimation = _props10.popupAnimation,
	        popupTransitionName = _props10.popupTransitionName,
	        popupStyle = _props10.popupStyle,
	        mask = _props10.mask,
	        maskAnimation = _props10.maskAnimation,
	        maskTransitionName = _props10.maskTransitionName,
	        zIndex = _props10.zIndex,
	        popup = _props10.popup,
	        stretch = _props10.stretch,
	        alignPoint = _props10.alignPoint;
	    var _state = _this5.state,
	        popupVisible = _state.popupVisible,
	        point = _state.point;


	    var align = _this5.getPopupAlign();

	    var mouseProps = {};
	    if (_this5.isMouseEnterToShow()) {
	      mouseProps.onMouseEnter = _this5.onPopupMouseEnter;
	    }
	    if (_this5.isMouseLeaveToHide()) {
	      mouseProps.onMouseLeave = _this5.onPopupMouseLeave;
	    }

	    mouseProps.onMouseDown = _this5.onPopupMouseDown;
	    mouseProps.onTouchStart = _this5.onPopupMouseDown;

	    return React__default.createElement(
	      Popup,
	      _extends$5({
	        prefixCls: prefixCls,
	        destroyPopupOnHide: destroyPopupOnHide,
	        visible: popupVisible,
	        point: alignPoint && point,
	        className: popupClassName,
	        action: action,
	        align: align,
	        onAlign: onPopupAlign,
	        animation: popupAnimation,
	        getClassNameFromAlign: _this5.getPopupClassNameFromAlign
	      }, mouseProps, {
	        stretch: stretch,
	        getRootDomNode: _this5.getRootDomNode,
	        style: popupStyle,
	        mask: mask,
	        zIndex: zIndex,
	        transitionName: popupTransitionName,
	        maskAnimation: maskAnimation,
	        maskTransitionName: maskTransitionName,
	        ref: _this5.savePopup
	      }),
	      typeof popup === 'function' ? popup() : popup
	    );
	  };

	  this.getContainer = function () {
	    var props = _this5.props;

	    var popupContainer = document.createElement('div');
	    // Make sure default popup container will never cause scrollbar appearing
	    // https://github.com/react-component/trigger/issues/41
	    popupContainer.style.position = 'absolute';
	    popupContainer.style.top = '0';
	    popupContainer.style.left = '0';
	    popupContainer.style.width = '100%';
	    var mountNode = props.getPopupContainer ? props.getPopupContainer(ReactDOM.findDOMNode(_this5)) : props.getDocument().body;
	    mountNode.appendChild(popupContainer);
	    return popupContainer;
	  };

	  this.setPoint = function (point) {
	    var alignPoint = _this5.props.alignPoint;

	    if (!alignPoint || !point) return;

	    _this5.setState({
	      point: {
	        pageX: point.pageX,
	        pageY: point.pageY
	      }
	    });
	  };

	  this.handlePortalUpdate = function () {
	    if (_this5.prevPopupVisible !== _this5.state.popupVisible) {
	      _this5.props.afterPopupVisibleChange(_this5.state.popupVisible);
	    }
	  };

	  this.savePopup = function (node) {
	    _this5._component = node;
	  };
	};

	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var placements = {
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -7]
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 7]
	  },
	  leftTop: {
	    points: ['tr', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0]
	  },
	  rightTop: {
	    points: ['tl', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0]
	  }
	};

	var guid = 0;

	var popupPlacementMap = {
	  horizontal: 'bottomLeft',
	  vertical: 'rightTop',
	  'vertical-left': 'rightTop',
	  'vertical-right': 'leftTop'
	};

	var updateDefaultActiveFirst = function updateDefaultActiveFirst(store, eventKey, defaultActiveFirst) {
	  var _extends2;

	  var menuId = getMenuIdFromSubMenuEventKey(eventKey);
	  var state = store.getState();
	  store.setState({
	    defaultActiveFirst: _extends$5({}, state.defaultActiveFirst, (_extends2 = {}, _extends2[menuId] = defaultActiveFirst, _extends2))
	  });
	};

	var SubMenu = function (_React$Component) {
	  _inherits(SubMenu, _React$Component);

	  function SubMenu(props) {
	    _classCallCheck(this, SubMenu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps$3.call(_this);

	    var store = props.store;
	    var eventKey = props.eventKey;
	    var defaultActiveFirst = store.getState().defaultActiveFirst;

	    _this.isRootMenu = false;

	    var value = false;

	    if (defaultActiveFirst) {
	      value = defaultActiveFirst[eventKey];
	    }

	    updateDefaultActiveFirst(store, eventKey, value);
	    return _this;
	  }

	  SubMenu.prototype.componentDidMount = function componentDidMount() {
	    this.componentDidUpdate();
	  };

	  SubMenu.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _this2 = this;

	    var _props = this.props,
	        mode = _props.mode,
	        parentMenu = _props.parentMenu,
	        manualRef = _props.manualRef;

	    // invoke customized ref to expose component to mixin

	    if (manualRef) {
	      manualRef(this);
	    }

	    if (mode !== 'horizontal' || !parentMenu.isRootMenu || !this.props.isOpen) {
	      return;
	    }

	    this.minWidthTimeout = setTimeout(function () {
	      return _this2.adjustWidth();
	    }, 0);
	  };

	  SubMenu.prototype.componentWillUnmount = function componentWillUnmount() {
	    var _props2 = this.props,
	        onDestroy = _props2.onDestroy,
	        eventKey = _props2.eventKey;

	    if (onDestroy) {
	      onDestroy(eventKey);
	    }

	    /* istanbul ignore if */
	    if (this.minWidthTimeout) {
	      clearTimeout(this.minWidthTimeout);
	    }

	    /* istanbul ignore if */
	    if (this.mouseenterTimeout) {
	      clearTimeout(this.mouseenterTimeout);
	    }
	  };

	  SubMenu.prototype.renderChildren = function renderChildren(children) {
	    var props = this.props;
	    var baseProps = {
	      mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
	      visible: this.props.isOpen,
	      level: props.level + 1,
	      inlineIndent: props.inlineIndent,
	      focusable: false,
	      onClick: this.onSubMenuClick,
	      onSelect: this.onSelect,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      selectedKeys: props.selectedKeys,
	      eventKey: props.eventKey + '-menu-',
	      openKeys: props.openKeys,
	      openTransitionName: props.openTransitionName,
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      subMenuOpenDelay: props.subMenuOpenDelay,
	      parentMenu: this,
	      subMenuCloseDelay: props.subMenuCloseDelay,
	      forceSubMenuRender: props.forceSubMenuRender,
	      triggerSubMenuAction: props.triggerSubMenuAction,
	      builtinPlacements: props.builtinPlacements,
	      defaultActiveFirst: props.store.getState().defaultActiveFirst[getMenuIdFromSubMenuEventKey(props.eventKey)],
	      multiple: props.multiple,
	      prefixCls: props.rootPrefixCls,
	      id: this._menuId,
	      manualRef: this.saveMenuInstance,
	      itemIcon: props.itemIcon,
	      expandIcon: props.expandIcon
	    };

	    var haveRendered = this.haveRendered;
	    this.haveRendered = true;

	    this.haveOpened = this.haveOpened || baseProps.visible || baseProps.forceSubMenuRender;
	    // never rendered not planning to, don't render
	    if (!this.haveOpened) {
	      return React__default.createElement('div', null);
	    }

	    // don't show transition on first rendering (no animation for opened menu)
	    // show appear transition if it's not visible (not sure why)
	    // show appear transition if it's not inline mode
	    var transitionAppear = haveRendered || !baseProps.visible || baseProps.mode !== 'inline';

	    baseProps.className = ' ' + baseProps.prefixCls + '-sub';
	    var animProps = {};

	    if (baseProps.openTransitionName) {
	      animProps.transitionName = baseProps.openTransitionName;
	    } else if (typeof baseProps.openAnimation === 'object') {
	      animProps.animation = _extends$5({}, baseProps.openAnimation);
	      if (!transitionAppear) {
	        delete animProps.animation.appear;
	      }
	    }

	    return React__default.createElement(
	      Animate,
	      _extends$5({}, animProps, {
	        showProp: 'visible',
	        component: '',
	        transitionAppear: transitionAppear
	      }),
	      React__default.createElement(
	        connected$1,
	        _extends$5({}, baseProps, { id: this._menuId }),
	        children
	      )
	    );
	  };

	  SubMenu.prototype.render = function render() {
	    var _classNames;

	    var props = _extends$5({}, this.props);
	    var isOpen = props.isOpen;
	    var prefixCls = this.getPrefixCls();
	    var isInlineMode = props.mode === 'inline';
	    var className = classnames(prefixCls, prefixCls + '-' + props.mode, (_classNames = {}, _classNames[props.className] = !!props.className, _classNames[this.getOpenClassName()] = isOpen, _classNames[this.getActiveClassName()] = props.active || isOpen && !isInlineMode, _classNames[this.getDisabledClassName()] = props.disabled, _classNames[this.getSelectedClassName()] = this.isChildrenSelected(), _classNames));

	    if (!this._menuId) {
	      if (props.eventKey) {
	        this._menuId = props.eventKey + '$Menu';
	      } else {
	        this._menuId = '$__$' + ++guid + '$Menu';
	      }
	    }

	    var mouseEvents = {};
	    var titleClickEvents = {};
	    var titleMouseEvents = {};
	    if (!props.disabled) {
	      mouseEvents = {
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onMouseEnter
	      };

	      // only works in title, not outer li
	      titleClickEvents = {
	        onClick: this.onTitleClick
	      };
	      titleMouseEvents = {
	        onMouseEnter: this.onTitleMouseEnter,
	        onMouseLeave: this.onTitleMouseLeave
	      };
	    }

	    var style = {};
	    if (isInlineMode) {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }

	    var ariaOwns = {};
	    // only set aria-owns when menu is open
	    // otherwise it would be an invalid aria-owns value
	    // since corresponding node cannot be found
	    if (this.props.isOpen) {
	      ariaOwns = {
	        'aria-owns': this._menuId
	      };
	    }

	    // expand custom icon should NOT be displayed in menu with horizontal mode.
	    var icon = null;
	    if (props.mode !== 'horizontal') {
	      icon = this.props.expandIcon; // ReactNode
	      if (typeof this.props.expandIcon === 'function') {
	        icon = React__default.createElement(this.props.expandIcon, _extends$5({}, this.props));
	      }
	    }

	    var title = React__default.createElement(
	      'div',
	      _extends$5({
	        ref: this.saveSubMenuTitle,
	        style: style,
	        className: prefixCls + '-title'
	      }, titleMouseEvents, titleClickEvents, {
	        'aria-expanded': isOpen
	      }, ariaOwns, {
	        'aria-haspopup': 'true',
	        title: typeof props.title === 'string' ? props.title : undefined
	      }),
	      props.title,
	      icon || React__default.createElement('i', { className: prefixCls + '-arrow' })
	    );
	    var children = this.renderChildren(props.children);

	    var getPopupContainer = props.parentMenu.isRootMenu ? props.parentMenu.props.getPopupContainer : function (triggerNode) {
	      return triggerNode.parentNode;
	    };
	    var popupPlacement = popupPlacementMap[props.mode];
	    var popupAlign = props.popupOffset ? { offset: props.popupOffset } : {};
	    var popupClassName = props.mode === 'inline' ? '' : props.popupClassName;
	    var disabled = props.disabled,
	        triggerSubMenuAction = props.triggerSubMenuAction,
	        subMenuOpenDelay = props.subMenuOpenDelay,
	        forceSubMenuRender = props.forceSubMenuRender,
	        subMenuCloseDelay = props.subMenuCloseDelay,
	        builtinPlacements = props.builtinPlacements;

	    menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });
	    // Set onClick to null, to ignore propagated onClick event
	    delete props.onClick;

	    return React__default.createElement(
	      'li',
	      _extends$5({}, props, mouseEvents, {
	        className: className,
	        role: 'menuitem'
	      }),
	      isInlineMode && title,
	      isInlineMode && children,
	      !isInlineMode && React__default.createElement(
	        Trigger,
	        {
	          prefixCls: prefixCls,
	          popupClassName: prefixCls + '-popup ' + popupClassName,
	          getPopupContainer: getPopupContainer,
	          builtinPlacements: _extends$5({}, placements, builtinPlacements),
	          popupPlacement: popupPlacement,
	          popupVisible: isOpen,
	          popupAlign: popupAlign,
	          popup: children,
	          action: disabled ? [] : [triggerSubMenuAction],
	          mouseEnterDelay: subMenuOpenDelay,
	          mouseLeaveDelay: subMenuCloseDelay,
	          onPopupVisibleChange: this.onPopupVisibleChange,
	          forceRender: forceSubMenuRender
	        },
	        title
	      )
	    );
	  };

	  return SubMenu;
	}(React__default.Component);

	SubMenu.propTypes = {
	  parentMenu: propTypes.object,
	  title: propTypes.node,
	  children: propTypes.any,
	  selectedKeys: propTypes.array,
	  openKeys: propTypes.array,
	  onClick: propTypes.func,
	  onOpenChange: propTypes.func,
	  rootPrefixCls: propTypes.string,
	  eventKey: propTypes.string,
	  multiple: propTypes.bool,
	  active: propTypes.bool, // TODO: remove
	  onItemHover: propTypes.func,
	  onSelect: propTypes.func,
	  triggerSubMenuAction: propTypes.string,
	  onDeselect: propTypes.func,
	  onDestroy: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  onTitleMouseEnter: propTypes.func,
	  onTitleMouseLeave: propTypes.func,
	  onTitleClick: propTypes.func,
	  popupOffset: propTypes.array,
	  isOpen: propTypes.bool,
	  store: propTypes.object,
	  mode: propTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  manualRef: propTypes.func,
	  itemIcon: propTypes.oneOfType([propTypes.func, propTypes.node]),
	  expandIcon: propTypes.oneOfType([propTypes.func, propTypes.node])
	};
	SubMenu.defaultProps = {
	  onMouseEnter: noop$3,
	  onMouseLeave: noop$3,
	  onTitleMouseEnter: noop$3,
	  onTitleMouseLeave: noop$3,
	  onTitleClick: noop$3,
	  manualRef: noop$3,
	  mode: 'vertical',
	  title: ''
	};

	var _initialiseProps$3 = function _initialiseProps() {
	  var _this3 = this;

	  this.onDestroy = function (key) {
	    _this3.props.onDestroy(key);
	  };

	  this.onKeyDown = function (e) {
	    var keyCode = e.keyCode;
	    var menu = _this3.menuInstance;
	    var _props3 = _this3.props,
	        isOpen = _props3.isOpen,
	        store = _props3.store;


	    if (keyCode === KeyCode$1.ENTER) {
	      _this3.onTitleClick(e);
	      updateDefaultActiveFirst(store, _this3.props.eventKey, true);
	      return true;
	    }

	    if (keyCode === KeyCode$1.RIGHT) {
	      if (isOpen) {
	        menu.onKeyDown(e);
	      } else {
	        _this3.triggerOpenChange(true);
	        // need to update current menu's defaultActiveFirst value
	        updateDefaultActiveFirst(store, _this3.props.eventKey, true);
	      }
	      return true;
	    }
	    if (keyCode === KeyCode$1.LEFT) {
	      var handled = void 0;
	      if (isOpen) {
	        handled = menu.onKeyDown(e);
	      } else {
	        return undefined;
	      }
	      if (!handled) {
	        _this3.triggerOpenChange(false);
	        handled = true;
	      }
	      return handled;
	    }

	    if (isOpen && (keyCode === KeyCode$1.UP || keyCode === KeyCode$1.DOWN)) {
	      return menu.onKeyDown(e);
	    }
	  };

	  this.onOpenChange = function (e) {
	    _this3.props.onOpenChange(e);
	  };

	  this.onPopupVisibleChange = function (visible) {
	    _this3.triggerOpenChange(visible, visible ? 'mouseenter' : 'mouseleave');
	  };

	  this.onMouseEnter = function (e) {
	    var _props4 = _this3.props,
	        key = _props4.eventKey,
	        onMouseEnter = _props4.onMouseEnter,
	        store = _props4.store;

	    updateDefaultActiveFirst(store, _this3.props.eventKey, false);
	    onMouseEnter({
	      key: key,
	      domEvent: e
	    });
	  };

	  this.onMouseLeave = function (e) {
	    var _props5 = _this3.props,
	        parentMenu = _props5.parentMenu,
	        eventKey = _props5.eventKey,
	        onMouseLeave = _props5.onMouseLeave;

	    parentMenu.subMenuInstance = _this3;
	    onMouseLeave({
	      key: eventKey,
	      domEvent: e
	    });
	  };

	  this.onTitleMouseEnter = function (domEvent) {
	    var _props6 = _this3.props,
	        key = _props6.eventKey,
	        onItemHover = _props6.onItemHover,
	        onTitleMouseEnter = _props6.onTitleMouseEnter;

	    onItemHover({
	      key: key,
	      hover: true
	    });
	    onTitleMouseEnter({
	      key: key,
	      domEvent: domEvent
	    });
	  };

	  this.onTitleMouseLeave = function (e) {
	    var _props7 = _this3.props,
	        parentMenu = _props7.parentMenu,
	        eventKey = _props7.eventKey,
	        onItemHover = _props7.onItemHover,
	        onTitleMouseLeave = _props7.onTitleMouseLeave;

	    parentMenu.subMenuInstance = _this3;
	    onItemHover({
	      key: eventKey,
	      hover: false
	    });
	    onTitleMouseLeave({
	      key: eventKey,
	      domEvent: e
	    });
	  };

	  this.onTitleClick = function (e) {
	    var props = _this3.props;

	    props.onTitleClick({
	      key: props.eventKey,
	      domEvent: e
	    });
	    if (props.triggerSubMenuAction === 'hover') {
	      return;
	    }
	    _this3.triggerOpenChange(!props.isOpen, 'click');
	    updateDefaultActiveFirst(props.store, _this3.props.eventKey, false);
	  };

	  this.onSubMenuClick = function (info) {
	    // in the case of overflowed submenu
	    // onClick is not copied over
	    if (typeof _this3.props.onClick === 'function') {
	      _this3.props.onClick(_this3.addKeyPath(info));
	    }
	  };

	  this.onSelect = function (info) {
	    _this3.props.onSelect(info);
	  };

	  this.onDeselect = function (info) {
	    _this3.props.onDeselect(info);
	  };

	  this.getPrefixCls = function () {
	    return _this3.props.rootPrefixCls + '-submenu';
	  };

	  this.getActiveClassName = function () {
	    return _this3.getPrefixCls() + '-active';
	  };

	  this.getDisabledClassName = function () {
	    return _this3.getPrefixCls() + '-disabled';
	  };

	  this.getSelectedClassName = function () {
	    return _this3.getPrefixCls() + '-selected';
	  };

	  this.getOpenClassName = function () {
	    return _this3.props.rootPrefixCls + '-submenu-open';
	  };

	  this.saveMenuInstance = function (c) {
	    // children menu instance
	    _this3.menuInstance = c;
	  };

	  this.addKeyPath = function (info) {
	    return _extends$5({}, info, {
	      keyPath: (info.keyPath || []).concat(_this3.props.eventKey)
	    });
	  };

	  this.triggerOpenChange = function (open, type) {
	    var key = _this3.props.eventKey;
	    var openChange = function openChange() {
	      _this3.onOpenChange({
	        key: key,
	        item: _this3,
	        trigger: type,
	        open: open
	      });
	    };
	    if (type === 'mouseenter') {
	      // make sure mouseenter happen after other menu item's mouseleave
	      _this3.mouseenterTimeout = setTimeout(function () {
	        openChange();
	      }, 0);
	    } else {
	      openChange();
	    }
	  };

	  this.isChildrenSelected = function () {
	    var ret = { find: false };
	    loopMenuItemRecursively(_this3.props.children, _this3.props.selectedKeys, ret);
	    return ret.find;
	  };

	  this.isOpen = function () {
	    return _this3.props.openKeys.indexOf(_this3.props.eventKey) !== -1;
	  };

	  this.adjustWidth = function () {
	    /* istanbul ignore if */
	    if (!_this3.subMenuTitle || !_this3.menuInstance) {
	      return;
	    }
	    var popupMenu = ReactDOM__default.findDOMNode(_this3.menuInstance);
	    if (popupMenu.offsetWidth >= _this3.subMenuTitle.offsetWidth) {
	      return;
	    }

	    /* istanbul ignore next */
	    popupMenu.style.minWidth = _this3.subMenuTitle.offsetWidth + 'px';
	  };

	  this.saveSubMenuTitle = function (subMenuTitle) {
	    _this3.subMenuTitle = subMenuTitle;
	  };
	};

	var connected = miniStore.connect(function (_ref, _ref2) {
	  var openKeys = _ref.openKeys,
	      activeKey = _ref.activeKey,
	      selectedKeys = _ref.selectedKeys;
	  var eventKey = _ref2.eventKey,
	      subMenuKey = _ref2.subMenuKey;
	  return {
	    isOpen: openKeys.indexOf(eventKey) > -1,
	    active: activeKey[subMenuKey] === eventKey,
	    selectedKeys: selectedKeys
	  };
	})(SubMenu);

	connected.isSubMenu = true;

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var MENUITEM_OVERFLOWED_CLASSNAME = 'menuitem-overflowed';
	var FLOAT_PRECISION_ADJUST = 0.5;

	// Fix ssr
	if (canUseDOM) {
	  require('mutationobserver-shim');
	}

	var DOMWrap = function (_React$Component) {
	  _inherits(DOMWrap, _React$Component);

	  function DOMWrap() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, DOMWrap);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      lastVisibleIndex: undefined
	    }, _this.getMenuItemNodes = function () {
	      var prefixCls = _this.props.prefixCls;

	      var ul = ReactDOM__default.findDOMNode(_this);
	      if (!ul) {
	        return [];
	      }

	      // filter out all overflowed indicator placeholder
	      return [].slice.call(ul.children).filter(function (node) {
	        return node.className.split(' ').indexOf(prefixCls + '-overflowed-submenu') < 0;
	      });
	    }, _this.getOverflowedSubMenuItem = function (keyPrefix, overflowedItems, renderPlaceholder) {
	      var _this$props = _this.props,
	          overflowedIndicator = _this$props.overflowedIndicator,
	          level = _this$props.level,
	          mode = _this$props.mode,
	          prefixCls = _this$props.prefixCls,
	          theme = _this$props.theme,
	          propStyle = _this$props.style;

	      if (level !== 1 || mode !== 'horizontal') {
	        return null;
	      }
	      // put all the overflowed item inside a submenu
	      // with a title of overflow indicator ('...')
	      var copy = _this.props.children[0];

	      var _copy$props = copy.props,
	          throwAway = _copy$props.children,
	          title = _copy$props.title,
	          rest = _objectWithoutProperties(_copy$props, ['children', 'title']);

	      var style = _extends$5({}, propStyle);
	      var key = keyPrefix + '-overflowed-indicator';
	      var eventKey = keyPrefix + '-overflowed-indicator';

	      if (overflowedItems.length === 0 && renderPlaceholder !== true) {
	        style = _extends$5({}, style, {
	          display: 'none'
	        });
	      } else if (renderPlaceholder) {
	        style = _extends$5({}, style, {
	          visibility: 'hidden',
	          // prevent from taking normal dom space
	          position: 'absolute'
	        });
	        key = key + '-placeholder';
	        eventKey = eventKey + '-placeholder';
	      }

	      var popupClassName = theme ? prefixCls + '-' + theme : '';
	      var props = {};
	      menuAllProps.forEach(function (k) {
	        if (rest[k] !== undefined) {
	          props[k] = rest[k];
	        }
	      });

	      return React__default.createElement(
	        connected,
	        _extends$5({
	          title: overflowedIndicator,
	          className: prefixCls + '-overflowed-submenu',
	          popupClassName: popupClassName
	        }, props, {
	          key: key,
	          eventKey: eventKey,
	          disabled: false,
	          style: style
	        }),
	        overflowedItems
	      );
	    }, _this.setChildrenWidthAndResize = function () {
	      if (_this.props.mode !== 'horizontal') {
	        return;
	      }
	      var ul = ReactDOM__default.findDOMNode(_this);

	      if (!ul) {
	        return;
	      }

	      var ulChildrenNodes = ul.children;

	      if (!ulChildrenNodes || ulChildrenNodes.length === 0) {
	        return;
	      }

	      var lastOverflowedIndicatorPlaceholder = ul.children[ulChildrenNodes.length - 1];

	      // need last overflowed indicator for calculating length;
	      setStyle(lastOverflowedIndicatorPlaceholder, 'display', 'inline-block');

	      var menuItemNodes = _this.getMenuItemNodes();

	      // reset display attribute for all hidden elements caused by overflow to calculate updated width
	      // and then reset to original state after width calculation

	      var overflowedItems = menuItemNodes.filter(function (c) {
	        return c.className.split(' ').indexOf(MENUITEM_OVERFLOWED_CLASSNAME) >= 0;
	      });

	      overflowedItems.forEach(function (c) {
	        setStyle(c, 'display', 'inline-block');
	      });

	      _this.menuItemSizes = menuItemNodes.map(function (c) {
	        return getWidth(c);
	      });

	      overflowedItems.forEach(function (c) {
	        setStyle(c, 'display', 'none');
	      });
	      _this.overflowedIndicatorWidth = getWidth(ul.children[ul.children.length - 1]);
	      _this.originalTotalWidth = _this.menuItemSizes.reduce(function (acc, cur) {
	        return acc + cur;
	      }, 0);
	      _this.handleResize();
	      // prevent the overflowed indicator from taking space;
	      setStyle(lastOverflowedIndicatorPlaceholder, 'display', 'none');
	    }, _this.resizeObserver = null, _this.mutationObserver = null, _this.originalTotalWidth = 0, _this.overflowedItems = [], _this.menuItemSizes = [], _this.handleResize = function () {
	      if (_this.props.mode !== 'horizontal') {
	        return;
	      }

	      var ul = ReactDOM__default.findDOMNode(_this);
	      if (!ul) {
	        return;
	      }
	      var width = getWidth(ul);

	      _this.overflowedItems = [];
	      var currentSumWidth = 0;

	      // index for last visible child in horizontal mode
	      var lastVisibleIndex = undefined;

	      // float number comparison could be problematic
	      // e.g. 0.1 + 0.2 > 0.3 =====> true
	      // thus using FLOAT_PRECISION_ADJUST as buffer to help the situation
	      if (_this.originalTotalWidth > width + FLOAT_PRECISION_ADJUST) {
	        lastVisibleIndex = -1;

	        _this.menuItemSizes.forEach(function (liWidth) {
	          currentSumWidth += liWidth;
	          if (currentSumWidth + _this.overflowedIndicatorWidth <= width) {
	            lastVisibleIndex++;
	          }
	        });
	      }

	      _this.setState({ lastVisibleIndex: lastVisibleIndex });
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  DOMWrap.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    this.setChildrenWidthAndResize();
	    if (this.props.level === 1 && this.props.mode === 'horizontal') {
	      var menuUl = ReactDOM__default.findDOMNode(this);
	      if (!menuUl) {
	        return;
	      }
	      this.resizeObserver = new index$3(function (entries) {
	        entries.forEach(_this2.setChildrenWidthAndResize);
	      });

	      [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
	        _this2.resizeObserver.observe(el);
	      });

	      if (typeof MutationObserver !== 'undefined') {
	        this.mutationObserver = new MutationObserver(function () {
	          _this2.resizeObserver.disconnect();
	          [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
	            _this2.resizeObserver.observe(el);
	          });
	          _this2.setChildrenWidthAndResize();
	        });
	        this.mutationObserver.observe(menuUl, { attributes: false, childList: true, subTree: false });
	      }
	    }
	  };

	  DOMWrap.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.resizeObserver) {
	      this.resizeObserver.disconnect();
	    }
	    if (this.mutationObserver) {
	      this.resizeObserver.disconnect();
	    }
	  };

	  // get all valid menuItem nodes


	  // memorize rendered menuSize


	  // original scroll size of the list


	  // copy of overflowed items


	  // cache item of the original items (so we can track the size and order)


	  DOMWrap.prototype.renderChildren = function renderChildren(children) {
	    var _this3 = this;

	    // need to take care of overflowed items in horizontal mode
	    var lastVisibleIndex = this.state.lastVisibleIndex;

	    return (children || []).reduce(function (acc, childNode, index) {
	      var item = childNode;
	      if (_this3.props.mode === 'horizontal') {
	        var overflowed = _this3.getOverflowedSubMenuItem(childNode.props.eventKey, []);
	        if (lastVisibleIndex !== undefined && _this3.props.className.indexOf(_this3.props.prefixCls + '-root') !== -1) {
	          if (index > lastVisibleIndex) {
	            item = React__default.cloneElement(childNode,
	            // 这里修改 eventKey 是为了防止隐藏状态下还会触发 openkeys 事件
	            {
	              style: { display: 'none' },
	              eventKey: childNode.props.eventKey + '-hidden',
	              className: childNode.className + ' ' + MENUITEM_OVERFLOWED_CLASSNAME
	            });
	          }
	          if (index === lastVisibleIndex + 1) {
	            _this3.overflowedItems = children.slice(lastVisibleIndex + 1).map(function (c) {
	              return React__default.cloneElement(c,
	              // children[index].key will become '.$key' in clone by default,
	              // we have to overwrite with the correct key explicitly
	              { key: c.props.eventKey, mode: 'vertical-left' });
	            });

	            overflowed = _this3.getOverflowedSubMenuItem(childNode.props.eventKey, _this3.overflowedItems);
	          }
	        }

	        var ret = [].concat(acc, [overflowed, item]);

	        if (index === children.length - 1) {
	          // need a placeholder for calculating overflowed indicator width
	          ret.push(_this3.getOverflowedSubMenuItem(childNode.props.eventKey, [], true));
	        }
	        return ret;
	      }
	      return [].concat(acc, [item]);
	    }, []);
	  };

	  DOMWrap.prototype.render = function render() {
	    var _props = this.props,
	        hiddenClassName = _props.hiddenClassName,
	        visible = _props.visible,
	        prefixCls = _props.prefixCls,
	        overflowedIndicator = _props.overflowedIndicator,
	        mode = _props.mode,
	        level = _props.level,
	        Tag = _props.tag,
	        children = _props.children,
	        theme = _props.theme,
	        rest = _objectWithoutProperties(_props, ['hiddenClassName', 'visible', 'prefixCls', 'overflowedIndicator', 'mode', 'level', 'tag', 'children', 'theme']);

	    if (!visible) {
	      rest.className += ' ' + hiddenClassName;
	    }

	    return React__default.createElement(
	      Tag,
	      rest,
	      this.renderChildren(this.props.children)
	    );
	  };

	  return DOMWrap;
	}(React__default.Component);

	DOMWrap.propTypes = {
	  className: propTypes.string,
	  children: propTypes.node,
	  mode: propTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  prefixCls: propTypes.string,
	  level: propTypes.number,
	  theme: propTypes.string,
	  overflowedIndicator: propTypes.node,
	  visible: propTypes.bool,
	  hiddenClassName: propTypes.string,
	  tag: propTypes.string,
	  style: propTypes.object
	};

	DOMWrap.defaultProps = {
	  tag: 'div',
	  className: ''
	};

	function allDisabled(arr) {
	  if (!arr.length) {
	    return true;
	  }
	  return arr.every(function (c) {
	    return !!c.props.disabled;
	  });
	}

	function updateActiveKey(store, menuId, activeKey) {
	  var _extends2;

	  var state = store.getState();
	  store.setState({
	    activeKey: _extends$5({}, state.activeKey, (_extends2 = {}, _extends2[menuId] = activeKey, _extends2))
	  });
	}

	function getEventKey(props) {
	  // when eventKey not available ,it's menu and return menu id '0-menu-'
	  return props.eventKey || '0-menu-';
	}

	function getActiveKey(props, originalActiveKey) {
	  var activeKey = originalActiveKey;
	  var children = props.children,
	      eventKey = props.eventKey;

	  if (activeKey) {
	    var found = void 0;
	    loopMenuItem(children, function (c, i) {
	      if (c && c.props && !c.props.disabled && activeKey === getKeyFromChildrenIndex(c, eventKey, i)) {
	        found = true;
	      }
	    });
	    if (found) {
	      return activeKey;
	    }
	  }
	  activeKey = null;
	  if (props.defaultActiveFirst) {
	    loopMenuItem(children, function (c, i) {
	      if (!activeKey && c && !c.props.disabled) {
	        activeKey = getKeyFromChildrenIndex(c, eventKey, i);
	      }
	    });
	    return activeKey;
	  }
	  return activeKey;
	}

	function saveRef$1(c) {
	  if (c) {
	    var index = this.instanceArray.indexOf(c);
	    if (index !== -1) {
	      // update component if it's already inside instanceArray
	      this.instanceArray[index] = c;
	    } else {
	      // add component if it's not in instanceArray yet;
	      this.instanceArray.push(c);
	    }
	  }
	}

	var SubPopupMenu = function (_React$Component) {
	  _inherits(SubPopupMenu, _React$Component);

	  function SubPopupMenu(props) {
	    var _extends3;

	    _classCallCheck(this, SubPopupMenu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps$4.call(_this);

	    props.store.setState({
	      activeKey: _extends$5({}, props.store.getState().activeKey, (_extends3 = {}, _extends3[props.eventKey] = getActiveKey(props, props.activeKey), _extends3))
	    });

	    _this.instanceArray = [];
	    return _this;
	  }

	  SubPopupMenu.prototype.componentDidMount = function componentDidMount() {
	    // invoke customized ref to expose component to mixin
	    if (this.props.manualRef) {
	      this.props.manualRef(this);
	    }
	  };

	  SubPopupMenu.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return this.props.visible || nextProps.visible;
	  };

	  SubPopupMenu.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var props = this.props;
	    var originalActiveKey = 'activeKey' in props ? props.activeKey : props.store.getState().activeKey[getEventKey(props)];
	    var activeKey = getActiveKey(props, originalActiveKey);
	    if (activeKey !== originalActiveKey) {
	      updateActiveKey(props.store, getEventKey(props), activeKey);
	    } else if ('activeKey' in prevProps) {
	      // If prev activeKey is not same as current activeKey,
	      // we should set it.
	      var prevActiveKey = getActiveKey(prevProps, prevProps.activeKey);
	      if (activeKey !== prevActiveKey) {
	        updateActiveKey(props.store, getEventKey(props), activeKey);
	      }
	    }
	  };

	  // all keyboard events callbacks run from here at first


	  SubPopupMenu.prototype.render = function render() {
	    var _this2 = this;

	    var props = _objectWithoutProperties(this.props, []);

	    this.instanceArray = [];
	    var className = classnames(props.prefixCls, props.className, props.prefixCls + '-' + props.mode);
	    var domProps = {
	      className: className,
	      // role could be 'select' and by default set to menu
	      role: props.role || 'menu'
	    };
	    if (props.id) {
	      domProps.id = props.id;
	    }
	    if (props.focusable) {
	      domProps.tabIndex = '0';
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    var prefixCls = props.prefixCls,
	        eventKey = props.eventKey,
	        visible = props.visible,
	        level = props.level,
	        mode = props.mode,
	        overflowedIndicator = props.overflowedIndicator,
	        theme = props.theme;

	    menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });

	    // Otherwise, the propagated click event will trigger another onClick
	    delete props.onClick;

	    return React__default.createElement(
	      DOMWrap,
	      _extends$5({}, props, {
	        prefixCls: prefixCls,
	        mode: mode,
	        tag: 'ul',
	        level: level,
	        theme: theme,
	        hiddenClassName: prefixCls + '-hidden',
	        visible: visible,
	        overflowedIndicator: overflowedIndicator
	      }, domProps),
	      React__default.Children.map(props.children, function (c, i) {
	        return _this2.renderMenuItem(c, i, eventKey || '0-menu-');
	      })
	    );
	  };

	  return SubPopupMenu;
	}(React__default.Component);
	SubPopupMenu.propTypes = {
	  onSelect: propTypes.func,
	  onClick: propTypes.func,
	  onDeselect: propTypes.func,
	  onOpenChange: propTypes.func,
	  onDestroy: propTypes.func,
	  openTransitionName: propTypes.string,
	  openAnimation: propTypes.oneOfType([propTypes.string, propTypes.object]),
	  openKeys: propTypes.arrayOf(propTypes.string),
	  visible: propTypes.bool,
	  children: propTypes.any,
	  parentMenu: propTypes.object,
	  eventKey: propTypes.string,
	  store: propTypes.shape({
	    getState: propTypes.func,
	    setState: propTypes.func
	  }),

	  // adding in refactor
	  focusable: propTypes.bool,
	  multiple: propTypes.bool,
	  style: propTypes.object,
	  defaultActiveFirst: propTypes.bool,
	  activeKey: propTypes.string,
	  selectedKeys: propTypes.arrayOf(propTypes.string),
	  defaultSelectedKeys: propTypes.arrayOf(propTypes.string),
	  defaultOpenKeys: propTypes.arrayOf(propTypes.string),
	  level: propTypes.number,
	  mode: propTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  triggerSubMenuAction: propTypes.oneOf(['click', 'hover']),
	  inlineIndent: propTypes.oneOfType([propTypes.number, propTypes.string]),
	  manualRef: propTypes.func,
	  itemIcon: propTypes.oneOfType([propTypes.func, propTypes.node]),
	  expandIcon: propTypes.oneOfType([propTypes.func, propTypes.node])
	};
	SubPopupMenu.defaultProps = {
	  prefixCls: 'rc-menu',
	  className: '',
	  mode: 'vertical',
	  level: 1,
	  inlineIndent: 24,
	  visible: true,
	  focusable: true,
	  style: {},
	  manualRef: noop$3
	};

	var _initialiseProps$4 = function _initialiseProps() {
	  var _this3 = this;

	  this.onKeyDown = function (e, callback) {
	    var keyCode = e.keyCode;
	    var handled = void 0;
	    _this3.getFlatInstanceArray().forEach(function (obj) {
	      if (obj && obj.props.active && obj.onKeyDown) {
	        handled = obj.onKeyDown(e);
	      }
	    });
	    if (handled) {
	      return 1;
	    }
	    var activeItem = null;
	    if (keyCode === KeyCode$1.UP || keyCode === KeyCode$1.DOWN) {
	      activeItem = _this3.step(keyCode === KeyCode$1.UP ? -1 : 1);
	    }
	    if (activeItem) {
	      e.preventDefault();
	      updateActiveKey(_this3.props.store, getEventKey(_this3.props), activeItem.props.eventKey);

	      if (typeof callback === 'function') {
	        callback(activeItem);
	      }

	      return 1;
	    }
	  };

	  this.onItemHover = function (e) {
	    var key = e.key,
	        hover = e.hover;

	    updateActiveKey(_this3.props.store, getEventKey(_this3.props), hover ? key : null);
	  };

	  this.onDeselect = function (selectInfo) {
	    _this3.props.onDeselect(selectInfo);
	  };

	  this.onSelect = function (selectInfo) {
	    _this3.props.onSelect(selectInfo);
	  };

	  this.onClick = function (e) {
	    _this3.props.onClick(e);
	  };

	  this.onOpenChange = function (e) {
	    _this3.props.onOpenChange(e);
	  };

	  this.onDestroy = function (key) {
	    /* istanbul ignore next */
	    _this3.props.onDestroy(key);
	  };

	  this.getFlatInstanceArray = function () {
	    return _this3.instanceArray;
	  };

	  this.getOpenTransitionName = function () {
	    return _this3.props.openTransitionName;
	  };

	  this.step = function (direction) {
	    var children = _this3.getFlatInstanceArray();
	    var activeKey = _this3.props.store.getState().activeKey[getEventKey(_this3.props)];
	    var len = children.length;
	    if (!len) {
	      return null;
	    }
	    if (direction < 0) {
	      children = children.concat().reverse();
	    }
	    // find current activeIndex
	    var activeIndex = -1;
	    children.every(function (c, ci) {
	      if (c && c.props.eventKey === activeKey) {
	        activeIndex = ci;
	        return false;
	      }
	      return true;
	    });
	    if (!_this3.props.defaultActiveFirst && activeIndex !== -1 && allDisabled(children.slice(activeIndex, len - 1))) {
	      return undefined;
	    }
	    var start = (activeIndex + 1) % len;
	    var i = start;

	    do {
	      var child = children[i];
	      if (!child || child.props.disabled) {
	        i = (i + 1) % len;
	      } else {
	        return child;
	      }
	    } while (i !== start);

	    return null;
	  };

	  this.renderCommonMenuItem = function (child, i, extraProps) {
	    var state = _this3.props.store.getState();
	    var props = _this3.props;
	    var key = getKeyFromChildrenIndex(child, props.eventKey, i);
	    var childProps = child.props;
	    // https://github.com/ant-design/ant-design/issues/11517#issuecomment-477403055
	    if (!childProps || typeof child.type === 'string') {
	      return child;
	    }
	    var isActive = key === state.activeKey;
	    var newChildProps = _extends$5({
	      mode: childProps.mode || props.mode,
	      level: props.level,
	      inlineIndent: props.inlineIndent,
	      renderMenuItem: _this3.renderMenuItem,
	      rootPrefixCls: props.prefixCls,
	      index: i,
	      parentMenu: props.parentMenu,
	      // customized ref function, need to be invoked manually in child's componentDidMount
	      manualRef: childProps.disabled ? undefined : createChainedFunction(child.ref, saveRef$1.bind(_this3)),
	      eventKey: key,
	      active: !childProps.disabled && isActive,
	      multiple: props.multiple,
	      onClick: function onClick(e) {
	        (childProps.onClick || noop$3)(e);
	        _this3.onClick(e);
	      },
	      onItemHover: _this3.onItemHover,
	      openTransitionName: _this3.getOpenTransitionName(),
	      openAnimation: props.openAnimation,
	      subMenuOpenDelay: props.subMenuOpenDelay,
	      subMenuCloseDelay: props.subMenuCloseDelay,
	      forceSubMenuRender: props.forceSubMenuRender,
	      onOpenChange: _this3.onOpenChange,
	      onDeselect: _this3.onDeselect,
	      onSelect: _this3.onSelect,
	      builtinPlacements: props.builtinPlacements,
	      itemIcon: childProps.itemIcon || _this3.props.itemIcon,
	      expandIcon: childProps.expandIcon || _this3.props.expandIcon
	    }, extraProps);
	    // ref: https://github.com/ant-design/ant-design/issues/13943
	    if (props.mode === 'inline' || isMobileDevice()) {
	      newChildProps.triggerSubMenuAction = 'click';
	    }
	    return React__default.cloneElement(child, newChildProps);
	  };

	  this.renderMenuItem = function (c, i, subMenuKey) {
	    /* istanbul ignore if */
	    if (!c) {
	      return null;
	    }
	    var state = _this3.props.store.getState();
	    var extraProps = {
	      openKeys: state.openKeys,
	      selectedKeys: state.selectedKeys,
	      triggerSubMenuAction: _this3.props.triggerSubMenuAction,
	      subMenuKey: subMenuKey
	    };
	    return _this3.renderCommonMenuItem(c, i, extraProps);
	  };
	};

	var connected$1 = miniStore.connect()(SubPopupMenu);

	var Menu = function (_React$Component) {
	  _inherits(Menu, _React$Component);

	  function Menu(props) {
	    _classCallCheck(this, Menu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps$5.call(_this);

	    _this.isRootMenu = true;

	    var selectedKeys = props.defaultSelectedKeys;
	    var openKeys = props.defaultOpenKeys;
	    if ('selectedKeys' in props) {
	      selectedKeys = props.selectedKeys || [];
	    }
	    if ('openKeys' in props) {
	      openKeys = props.openKeys || [];
	    }

	    _this.store = miniStore.create({
	      selectedKeys: selectedKeys,
	      openKeys: openKeys,
	      activeKey: { '0-menu-': getActiveKey(props, props.activeKey) }
	    });
	    return _this;
	  }

	  Menu.prototype.componentDidMount = function componentDidMount() {
	    this.updateMiniStore();
	  };

	  Menu.prototype.componentDidUpdate = function componentDidUpdate() {
	    this.updateMiniStore();
	  };

	  // onKeyDown needs to be exposed as a instance method
	  // e.g., in rc-select, we need to navigate menu item while
	  // current active item is rc-select input box rather than the menu itself


	  Menu.prototype.updateMiniStore = function updateMiniStore() {
	    if ('selectedKeys' in this.props) {
	      this.store.setState({
	        selectedKeys: this.props.selectedKeys || []
	      });
	    }
	    if ('openKeys' in this.props) {
	      this.store.setState({
	        openKeys: this.props.openKeys || []
	      });
	    }
	  };

	  Menu.prototype.render = function render() {
	    var _this2 = this;

	    var props = _objectWithoutProperties(this.props, []);

	    props.className += ' ' + props.prefixCls + '-root';
	    props = _extends$5({}, props, {
	      onClick: this.onClick,
	      onOpenChange: this.onOpenChange,
	      onDeselect: this.onDeselect,
	      onSelect: this.onSelect,
	      openTransitionName: this.getOpenTransitionName(),
	      parentMenu: this
	    });
	    return React__default.createElement(
	      miniStore.Provider,
	      { store: this.store },
	      React__default.createElement(
	        connected$1,
	        _extends$5({}, props, { ref: function ref(c) {
	            return _this2.innerMenu = c;
	          } }),
	        this.props.children
	      )
	    );
	  };

	  return Menu;
	}(React__default.Component);

	Menu.propTypes = {
	  defaultSelectedKeys: propTypes.arrayOf(propTypes.string),
	  defaultActiveFirst: propTypes.bool,
	  selectedKeys: propTypes.arrayOf(propTypes.string),
	  defaultOpenKeys: propTypes.arrayOf(propTypes.string),
	  openKeys: propTypes.arrayOf(propTypes.string),
	  mode: propTypes.oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  getPopupContainer: propTypes.func,
	  onClick: propTypes.func,
	  onSelect: propTypes.func,
	  onDeselect: propTypes.func,
	  onDestroy: propTypes.func,
	  openTransitionName: propTypes.string,
	  openAnimation: propTypes.oneOfType([propTypes.string, propTypes.object]),
	  subMenuOpenDelay: propTypes.number,
	  subMenuCloseDelay: propTypes.number,
	  forceSubMenuRender: propTypes.bool,
	  triggerSubMenuAction: propTypes.string,
	  level: propTypes.number,
	  selectable: propTypes.bool,
	  multiple: propTypes.bool,
	  children: propTypes.any,
	  className: propTypes.string,
	  style: propTypes.object,
	  activeKey: propTypes.string,
	  prefixCls: propTypes.string,
	  builtinPlacements: propTypes.object,
	  itemIcon: propTypes.oneOfType([propTypes.func, propTypes.node]),
	  expandIcon: propTypes.oneOfType([propTypes.func, propTypes.node]),
	  overflowedIndicator: propTypes.node
	};
	Menu.defaultProps = {
	  selectable: true,
	  onClick: noop$3,
	  onSelect: noop$3,
	  onOpenChange: noop$3,
	  onDeselect: noop$3,
	  defaultSelectedKeys: [],
	  defaultOpenKeys: [],
	  subMenuOpenDelay: 0.1,
	  subMenuCloseDelay: 0.1,
	  triggerSubMenuAction: 'hover',
	  prefixCls: 'rc-menu',
	  className: '',
	  mode: 'vertical',
	  style: {},
	  builtinPlacements: {},
	  overflowedIndicator: React__default.createElement(
	    'span',
	    null,
	    '\xB7\xB7\xB7'
	  )
	};

	var _initialiseProps$5 = function _initialiseProps() {
	  var _this3 = this;

	  this.onSelect = function (selectInfo) {
	    var props = _this3.props;
	    if (props.selectable) {
	      // root menu
	      var selectedKeys = _this3.store.getState().selectedKeys;
	      var selectedKey = selectInfo.key;
	      if (props.multiple) {
	        selectedKeys = selectedKeys.concat([selectedKey]);
	      } else {
	        selectedKeys = [selectedKey];
	      }
	      if (!('selectedKeys' in props)) {
	        _this3.store.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onSelect(_extends$5({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  };

	  this.onClick = function (e) {
	    _this3.props.onClick(e);
	  };

	  this.onKeyDown = function (e, callback) {
	    _this3.innerMenu.getWrappedInstance().onKeyDown(e, callback);
	  };

	  this.onOpenChange = function (event) {
	    var props = _this3.props;
	    var openKeys = _this3.store.getState().openKeys.concat();
	    var changed = false;
	    var processSingle = function processSingle(e) {
	      var oneChanged = false;
	      if (e.open) {
	        oneChanged = openKeys.indexOf(e.key) === -1;
	        if (oneChanged) {
	          openKeys.push(e.key);
	        }
	      } else {
	        var index = openKeys.indexOf(e.key);
	        oneChanged = index !== -1;
	        if (oneChanged) {
	          openKeys.splice(index, 1);
	        }
	      }
	      changed = changed || oneChanged;
	    };
	    if (Array.isArray(event)) {
	      // batch change call
	      event.forEach(processSingle);
	    } else {
	      processSingle(event);
	    }
	    if (changed) {
	      if (!('openKeys' in _this3.props)) {
	        _this3.store.setState({ openKeys: openKeys });
	      }
	      props.onOpenChange(openKeys);
	    }
	  };

	  this.onDeselect = function (selectInfo) {
	    var props = _this3.props;
	    if (props.selectable) {
	      var selectedKeys = _this3.store.getState().selectedKeys.concat();
	      var selectedKey = selectInfo.key;
	      var index = selectedKeys.indexOf(selectedKey);
	      if (index !== -1) {
	        selectedKeys.splice(index, 1);
	      }
	      if (!('selectedKeys' in props)) {
	        _this3.store.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onDeselect(_extends$5({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  };

	  this.getOpenTransitionName = function () {
	    var props = _this3.props;
	    var transitionName = props.openTransitionName;
	    var animationName = props.openAnimation;
	    if (!transitionName && typeof animationName === 'string') {
	      transitionName = props.prefixCls + '-open-' + animationName;
	    }
	    return transitionName;
	  };
	};

	var _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var RE_NUM$1 = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	function getClientPosition$1(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll$2(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft$1(w) {
	  return getScroll$2(w);
	}

	function getScrollTop$1(w) {
	  return getScroll$2(w, true);
	}

	function getOffset$1(el) {
	  var pos = getClientPosition$1(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft$1(w);
	  pos.top += getScrollTop$1(w);
	  return pos;
	}
	function _getComputedStyle$1(elem, name, computedStyle_) {
	  var val = '';
	  var d = elem.ownerDocument;
	  var computedStyle = computedStyle_ || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX$1 = new RegExp('^(' + RE_NUM$1 + ')(?!px)[a-z%]+$', 'i');
	var RE_POS$1 = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE$1 = 'currentStyle';
	var RUNTIME_STYLE$1 = 'runtimeStyle';
	var LEFT$1 = 'left';
	var PX$1 = 'px';

	function _getComputedStyleIE$1(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE$1] && elem[CURRENT_STYLE$1][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX$1.test(ret) && !RE_POS$1.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT$1];
	    var rsLeft = elem[RUNTIME_STYLE$1][LEFT$1];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE$1][LEFT$1] = elem[CURRENT_STYLE$1][LEFT$1];

	    // Put in the new values to get a computed value out
	    style[LEFT$1] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX$1;

	    // Revert the changed values
	    style[LEFT$1] = left;

	    elem[RUNTIME_STYLE$1][LEFT$1] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	var getComputedStyleX$1 = undefined;
	if (typeof window !== 'undefined') {
	  getComputedStyleX$1 = window.getComputedStyle ? _getComputedStyle$1 : _getComputedStyleIE$1;
	}

	function each$1(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn$1(elem) {
	  return getComputedStyleX$1(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS$1 = ['margin', 'border', 'padding'];
	var CONTENT_INDEX$1 = -1;
	var PADDING_INDEX$1 = 2;
	var BORDER_INDEX$1 = 1;
	var MARGIN_INDEX$1 = 0;

	function swap$1(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth$1(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX$1(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow$3(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj != null && obj == obj.window;
	}

	var domUtils$1 = {};

	each$1(['Width', 'Height'], function (name) {
	  domUtils$1['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils$1['viewport' + name](d));
	  };

	  domUtils$1['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH$1(elem, name, extra) {
	  if (isWindow$3(elem)) {
	    return name === 'width' ? domUtils$1.viewportWidth(elem) : domUtils$1.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils$1.docWidth(elem) : domUtils$1.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX$1(elem);
	  var isBorderBox = isBorderBoxFn$1(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue == null || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX$1(elem, name);
	    if (cssBoxValue == null || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX$1 : CONTENT_INDEX$1;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX$1) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth$1(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  }
	  if (borderBoxValueOrIsBorderBox) {
	    var padding = extra === PADDING_INDEX$1 ? -getPBMWidth$1(elem, ['border'], which, computedStyle) : getPBMWidth$1(elem, ['margin'], which, computedStyle);
	    return val + (extra === BORDER_INDEX$1 ? 0 : padding);
	  }
	  return cssBoxValue + getPBMWidth$1(elem, BOX_MODELS$1.slice(extra), which, computedStyle);
	}

	var cssShow$1 = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay$1(elem) {
	  var val = undefined;
	  var args = arguments;
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH$1.apply(undefined, args);
	  } else {
	    swap$1(elem, cssShow$1, function () {
	      val = getWH$1.apply(undefined, args);
	    });
	  }
	  return val;
	}

	function css$2(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof$2(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css$2(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value += 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX$1(el, name);
	}

	each$1(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils$1['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay$1(el, name, includeMargin ? MARGIN_INDEX$1 : BORDER_INDEX$1);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils$1[name] = function (elem, val) {
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX$1(elem);
	        var isBorderBox = isBorderBoxFn$1(elem);
	        if (isBorderBox) {
	          val += getPBMWidth$1(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css$2(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay$1(elem, name, CONTENT_INDEX$1);
	  };
	});

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset$1(elem, offset) {
	  // set position first, in-case top/left are set even on static elem
	  if (css$2(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }

	  var old = getOffset$1(elem);
	  var ret = {};
	  var current = undefined;
	  var key = undefined;

	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      current = parseFloat(css$2(elem, key)) || 0;
	      ret[key] = current + offset[key] - old[key];
	    }
	  }
	  css$2(elem, ret);
	}

	var util$2 = _extends$6({
	  getWindow: function getWindow(node) {
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value) {
	    if (typeof value !== 'undefined') {
	      setOffset$1(el, value);
	    } else {
	      return getOffset$1(el);
	    }
	  },

	  isWindow: isWindow$3,
	  each: each$1,
	  css: css$2,
	  clone: function clone(obj) {
	    var ret = {};
	    for (var i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (var i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  scrollLeft: function scrollLeft(w, v) {
	    if (isWindow$3(w)) {
	      if (v === undefined) {
	        return getScrollLeft$1(w);
	      }
	      window.scrollTo(v, getScrollTop$1(w));
	    } else {
	      if (v === undefined) {
	        return w.scrollLeft;
	      }
	      w.scrollLeft = v;
	    }
	  },
	  scrollTop: function scrollTop(w, v) {
	    if (isWindow$3(w)) {
	      if (v === undefined) {
	        return getScrollTop$1(w);
	      }
	      window.scrollTo(getScrollLeft$1(w), v);
	    } else {
	      if (v === undefined) {
	        return w.scrollTop;
	      }
	      w.scrollTop = v;
	    }
	  },

	  viewportWidth: 0,
	  viewportHeight: 0
	}, domUtils$1);

	function scrollIntoView(elem, container, config) {
	  config = config || {};
	  // document 归一化到 window
	  if (container.nodeType === 9) {
	    container = util$2.getWindow(container);
	  }

	  var allowHorizontalScroll = config.allowHorizontalScroll;
	  var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
	  var alignWithTop = config.alignWithTop;
	  var alignWithLeft = config.alignWithLeft;
	  var offsetTop = config.offsetTop || 0;
	  var offsetLeft = config.offsetLeft || 0;
	  var offsetBottom = config.offsetBottom || 0;
	  var offsetRight = config.offsetRight || 0;

	  allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;

	  var isWin = util$2.isWindow(container);
	  var elemOffset = util$2.offset(elem);
	  var eh = util$2.outerHeight(elem);
	  var ew = util$2.outerWidth(elem);
	  var containerOffset = undefined;
	  var ch = undefined;
	  var cw = undefined;
	  var containerScroll = undefined;
	  var diffTop = undefined;
	  var diffBottom = undefined;
	  var win = undefined;
	  var winScroll = undefined;
	  var ww = undefined;
	  var wh = undefined;

	  if (isWin) {
	    win = container;
	    wh = util$2.height(win);
	    ww = util$2.width(win);
	    winScroll = {
	      left: util$2.scrollLeft(win),
	      top: util$2.scrollTop(win)
	    };
	    // elem 相对 container 可视视窗的距离
	    diffTop = {
	      left: elemOffset.left - winScroll.left - offsetLeft,
	      top: elemOffset.top - winScroll.top - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
	      top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
	    };
	    containerScroll = winScroll;
	  } else {
	    containerOffset = util$2.offset(container);
	    ch = container.clientHeight;
	    cw = container.clientWidth;
	    containerScroll = {
	      left: container.scrollLeft,
	      top: container.scrollTop
	    };
	    // elem 相对 container 可视视窗的距离
	    // 注意边框, offset 是边框到根节点
	    diffTop = {
	      left: elemOffset.left - (containerOffset.left + (parseFloat(util$2.css(container, 'borderLeftWidth')) || 0)) - offsetLeft,
	      top: elemOffset.top - (containerOffset.top + (parseFloat(util$2.css(container, 'borderTopWidth')) || 0)) - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util$2.css(container, 'borderRightWidth')) || 0)) + offsetRight,
	      top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util$2.css(container, 'borderBottomWidth')) || 0)) + offsetBottom
	    };
	  }

	  if (diffTop.top < 0 || diffBottom.top > 0) {
	    // 强制向上
	    if (alignWithTop === true) {
	      util$2.scrollTop(container, containerScroll.top + diffTop.top);
	    } else if (alignWithTop === false) {
	      util$2.scrollTop(container, containerScroll.top + diffBottom.top);
	    } else {
	      // 自动调整
	      if (diffTop.top < 0) {
	        util$2.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util$2.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  } else {
	    if (!onlyScrollIfNeeded) {
	      alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;
	      if (alignWithTop) {
	        util$2.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util$2.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  }

	  if (allowHorizontalScroll) {
	    if (diffTop.left < 0 || diffBottom.left > 0) {
	      // 强制向上
	      if (alignWithLeft === true) {
	        util$2.scrollLeft(container, containerScroll.left + diffTop.left);
	      } else if (alignWithLeft === false) {
	        util$2.scrollLeft(container, containerScroll.left + diffBottom.left);
	      } else {
	        // 自动调整
	        if (diffTop.left < 0) {
	          util$2.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util$2.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    } else {
	      if (!onlyScrollIfNeeded) {
	        alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;
	        if (alignWithLeft) {
	          util$2.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util$2.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    }
	  }
	}

	var domScrollIntoView = scrollIntoView;

	var lib$2 = domScrollIntoView;

	/* eslint react/no-is-mounted:0 */

	var MenuItem = function (_React$Component) {
	  _inherits(MenuItem, _React$Component);

	  function MenuItem(props) {
	    _classCallCheck(this, MenuItem);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.onKeyDown = function (e) {
	      var keyCode = e.keyCode;
	      if (keyCode === KeyCode$1.ENTER) {
	        _this.onClick(e);
	        return true;
	      }
	    };

	    _this.onMouseLeave = function (e) {
	      var _this$props = _this.props,
	          eventKey = _this$props.eventKey,
	          onItemHover = _this$props.onItemHover,
	          onMouseLeave = _this$props.onMouseLeave;

	      onItemHover({
	        key: eventKey,
	        hover: false
	      });
	      onMouseLeave({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onMouseEnter = function (e) {
	      var _this$props2 = _this.props,
	          eventKey = _this$props2.eventKey,
	          onItemHover = _this$props2.onItemHover,
	          onMouseEnter = _this$props2.onMouseEnter;

	      onItemHover({
	        key: eventKey,
	        hover: true
	      });
	      onMouseEnter({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onClick = function (e) {
	      var _this$props3 = _this.props,
	          eventKey = _this$props3.eventKey,
	          multiple = _this$props3.multiple,
	          onClick = _this$props3.onClick,
	          onSelect = _this$props3.onSelect,
	          onDeselect = _this$props3.onDeselect,
	          isSelected = _this$props3.isSelected;

	      var info = {
	        key: eventKey,
	        keyPath: [eventKey],
	        item: _this,
	        domEvent: e
	      };
	      onClick(info);
	      if (multiple) {
	        if (isSelected) {
	          onDeselect(info);
	        } else {
	          onSelect(info);
	        }
	      } else if (!isSelected) {
	        onSelect(info);
	      }
	    };

	    return _this;
	  }

	  MenuItem.prototype.componentDidMount = function componentDidMount() {
	    // invoke customized ref to expose component to mixin
	    this.callRef();
	  };

	  MenuItem.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (this.props.active) {
	      lib$2(ReactDOM__default.findDOMNode(this), ReactDOM__default.findDOMNode(this.props.parentMenu), {
	        onlyScrollIfNeeded: true
	      });
	    }
	    this.callRef();
	  };

	  MenuItem.prototype.componentWillUnmount = function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	  };

	  MenuItem.prototype.getPrefixCls = function getPrefixCls() {
	    return this.props.rootPrefixCls + '-item';
	  };

	  MenuItem.prototype.getActiveClassName = function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  };

	  MenuItem.prototype.getSelectedClassName = function getSelectedClassName() {
	    return this.getPrefixCls() + '-selected';
	  };

	  MenuItem.prototype.getDisabledClassName = function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  };

	  MenuItem.prototype.callRef = function callRef() {
	    if (this.props.manualRef) {
	      this.props.manualRef(this);
	    }
	  };

	  MenuItem.prototype.render = function render() {
	    var _classNames;

	    var props = _extends$5({}, this.props);
	    var className = classnames(this.getPrefixCls(), props.className, (_classNames = {}, _classNames[this.getActiveClassName()] = !props.disabled && props.active, _classNames[this.getSelectedClassName()] = props.isSelected, _classNames[this.getDisabledClassName()] = props.disabled, _classNames));
	    var attrs = _extends$5({}, props.attribute, {
	      title: props.title,
	      className: className,
	      // set to menuitem by default
	      role: props.role || 'menuitem',
	      'aria-disabled': props.disabled
	    });

	    if (props.role === 'option') {
	      // overwrite to option
	      attrs = _extends$5({}, attrs, {
	        role: 'option',
	        'aria-selected': props.isSelected
	      });
	    } else if (props.role === null || props.role === 'none') {
	      // sometimes we want to specify role inside <li/> element
	      // <li><a role='menuitem'>Link</a></li> would be a good example
	      // in this case the role on <li/> should be "none" to
	      // remove the implied listitem role.
	      // https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html
	      attrs.role = 'none';
	    }
	    // In case that onClick/onMouseLeave/onMouseEnter is passed down from owner
	    var mouseEvent = {
	      onClick: props.disabled ? null : this.onClick,
	      onMouseLeave: props.disabled ? null : this.onMouseLeave,
	      onMouseEnter: props.disabled ? null : this.onMouseEnter
	    };
	    var style = _extends$5({}, props.style);
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });
	    var icon = this.props.itemIcon;
	    if (typeof this.props.itemIcon === 'function') {
	      icon = React__default.createElement(this.props.itemIcon, this.props);
	    }
	    return React__default.createElement(
	      'li',
	      _extends$5({}, props, attrs, mouseEvent, {
	        style: style
	      }),
	      props.children,
	      icon
	    );
	  };

	  return MenuItem;
	}(React__default.Component);

	MenuItem.propTypes = {
	  attribute: propTypes.object,
	  rootPrefixCls: propTypes.string,
	  eventKey: propTypes.string,
	  active: propTypes.bool,
	  children: propTypes.any,
	  selectedKeys: propTypes.array,
	  disabled: propTypes.bool,
	  title: propTypes.string,
	  onItemHover: propTypes.func,
	  onSelect: propTypes.func,
	  onClick: propTypes.func,
	  onDeselect: propTypes.func,
	  parentMenu: propTypes.object,
	  onDestroy: propTypes.func,
	  onMouseEnter: propTypes.func,
	  onMouseLeave: propTypes.func,
	  multiple: propTypes.bool,
	  isSelected: propTypes.bool,
	  manualRef: propTypes.func,
	  itemIcon: propTypes.oneOfType([propTypes.func, propTypes.node])
	};
	MenuItem.defaultProps = {
	  onSelect: noop$3,
	  onMouseEnter: noop$3,
	  onMouseLeave: noop$3,
	  manualRef: noop$3
	};
	MenuItem.isMenuItem = true;

	var connected$2 = miniStore.connect(function (_ref, _ref2) {
	  var activeKey = _ref.activeKey,
	      selectedKeys = _ref.selectedKeys;
	  var eventKey = _ref2.eventKey,
	      subMenuKey = _ref2.subMenuKey;
	  return {
	    active: activeKey[subMenuKey] === eventKey,
	    isSelected: selectedKeys.indexOf(eventKey) !== -1
	  };
	})(MenuItem);

	var MenuItemGroup = function (_React$Component) {
	  _inherits(MenuItemGroup, _React$Component);

	  function MenuItemGroup() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MenuItemGroup);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.renderInnerMenuItem = function (item) {
	      var _this$props = _this.props,
	          renderMenuItem = _this$props.renderMenuItem,
	          index = _this$props.index;

	      return renderMenuItem(item, index, _this.props.subMenuKey);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MenuItemGroup.prototype.render = function render() {
	    var props = _objectWithoutProperties(this.props, []);

	    var _props$className = props.className,
	        className = _props$className === undefined ? '' : _props$className,
	        rootPrefixCls = props.rootPrefixCls;

	    var titleClassName = rootPrefixCls + '-item-group-title';
	    var listClassName = rootPrefixCls + '-item-group-list';
	    var title = props.title,
	        children = props.children;

	    menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });

	    // Set onClick to null, to ignore propagated onClick event
	    delete props.onClick;

	    return React__default.createElement(
	      'li',
	      _extends$5({}, props, { className: className + ' ' + rootPrefixCls + '-item-group' }),
	      React__default.createElement(
	        'div',
	        {
	          className: titleClassName,
	          title: typeof title === 'string' ? title : undefined
	        },
	        title
	      ),
	      React__default.createElement(
	        'ul',
	        { className: listClassName },
	        React__default.Children.map(children, this.renderInnerMenuItem)
	      )
	    );
	  };

	  return MenuItemGroup;
	}(React__default.Component);

	MenuItemGroup.propTypes = {
	  renderMenuItem: propTypes.func,
	  index: propTypes.number,
	  className: propTypes.string,
	  subMenuKey: propTypes.string,
	  rootPrefixCls: propTypes.string
	};
	MenuItemGroup.defaultProps = {
	  disabled: true
	};


	MenuItemGroup.isMenuItemGroup = true;

	var Divider = function (_React$Component) {
	  _inherits(Divider, _React$Component);

	  function Divider() {
	    _classCallCheck(this, Divider);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Divider.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        rootPrefixCls = _props.rootPrefixCls,
	        style = _props.style;

	    return React__default.createElement('li', {
	      className: className + ' ' + rootPrefixCls + '-item-divider',
	      style: style
	    });
	  };

	  return Divider;
	}(React__default.Component);

	Divider.propTypes = {
	  className: propTypes.string,
	  rootPrefixCls: propTypes.string,
	  style: propTypes.object
	};
	Divider.defaultProps = {
	  // To fix keyboard UX.
	  disabled: true,
	  className: '',
	  style: {}
	};

	var Option_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-select.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/select
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var Option = function (_React$Component) {
	  _inherits(Option, _React$Component);

	  function Option() {
	    _classCallCheck(this, Option);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  return Option;
	}(_react2["default"].Component);

	Option.propTypes = {
	  value: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number])
	};
	Option.isSelectOption = true;
	exports["default"] = Option;
	module.exports = exports['default'];
	});

	unwrapExports(Option_1);

	var util$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_STYLE = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.toTitle = toTitle;
	exports.getValuePropValue = getValuePropValue;
	exports.getPropValue = getPropValue;
	exports.isMultiple = isMultiple;
	exports.isCombobox = isCombobox;
	exports.isMultipleOrTags = isMultipleOrTags;
	exports.isMultipleOrTagsOrCombobox = isMultipleOrTagsOrCombobox;
	exports.isSingleMode = isSingleMode;
	exports.toArray = toArray;
	exports.getMapKey = getMapKey;
	exports.preventDefaultEvent = preventDefaultEvent;
	exports.findIndexInValueBySingleValue = findIndexInValueBySingleValue;
	exports.getLabelFromPropsValue = getLabelFromPropsValue;
	exports.getSelectKeys = getSelectKeys;
	exports.findFirstMenuItem = findFirstMenuItem;
	exports.includesSeparators = includesSeparators;
	exports.splitBySeparators = splitBySeparators;
	exports.defaultFilterFn = defaultFilterFn;
	exports.validateOptionValue = validateOptionValue;
	exports.saveRef = saveRef;



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function toTitle(title) {
	  if (typeof title === 'string') {
	    return title;
	  }
	  return null;
	}

	function getValuePropValue(child) {
	  if (!child) {
	    return null;
	  }

	  var props = child.props;
	  if ('value' in props) {
	    return props.value;
	  }
	  if (child.key) {
	    return child.key;
	  }
	  if (child.type && child.type.isSelectOptGroup && props.label) {
	    return props.label;
	  }
	  throw new Error('Need at least a key or a value or a label (only for OptGroup) for ' + child);
	}

	function getPropValue(child, prop) {
	  if (prop === 'value') {
	    return getValuePropValue(child);
	  }
	  return child.props[prop];
	}

	function isMultiple(props) {
	  return props.multiple;
	}

	function isCombobox(props) {
	  return props.combobox;
	}

	function isMultipleOrTags(props) {
	  return props.multiple || props.tags;
	}

	function isMultipleOrTagsOrCombobox(props) {
	  return isMultipleOrTags(props) || isCombobox(props);
	}

	function isSingleMode(props) {
	  return !isMultipleOrTagsOrCombobox(props);
	}

	function toArray(value) {
	  var ret = value;
	  if (value === undefined) {
	    ret = [];
	  } else if (!Array.isArray(value)) {
	    ret = [value];
	  }
	  return ret;
	}

	function getMapKey(value) {
	  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '-' + value;
	}

	function preventDefaultEvent(e) {
	  e.preventDefault();
	}

	function findIndexInValueBySingleValue(value, singleValue) {
	  var index = -1;
	  for (var i = 0; i < value.length; i++) {
	    if (value[i] === singleValue) {
	      index = i;
	      break;
	    }
	  }
	  return index;
	}

	function getLabelFromPropsValue(value, key) {
	  var label = void 0;
	  value = toArray(value);
	  for (var i = 0; i < value.length; i++) {
	    if (value[i].key === key) {
	      label = value[i].label;
	      break;
	    }
	  }
	  return label;
	}

	function getSelectKeys(menuItems, value) {
	  if (value === null || value === undefined) {
	    return [];
	  }
	  var selectedKeys = [];
	  _react2["default"].Children.forEach(menuItems, function (item) {
	    if (item.type.isMenuItemGroup) {
	      selectedKeys = selectedKeys.concat(getSelectKeys(item.props.children, value));
	    } else {
	      var itemValue = getValuePropValue(item);
	      var itemKey = item.key;
	      if (findIndexInValueBySingleValue(value, itemValue) !== -1 && itemKey) {
	        selectedKeys.push(itemKey);
	      }
	    }
	  });
	  return selectedKeys;
	}

	var UNSELECTABLE_STYLE = exports.UNSELECTABLE_STYLE = {
	  userSelect: 'none',
	  WebkitUserSelect: 'none'
	};

	var UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_ATTRIBUTE = {
	  unselectable: 'on'
	};

	function findFirstMenuItem(children) {
	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];
	    if (child.type.isMenuItemGroup) {
	      var found = findFirstMenuItem(child.props.children);
	      if (found) {
	        return found;
	      }
	    } else if (!child.props.disabled) {
	      return child;
	    }
	  }
	  return null;
	}

	function includesSeparators(string, separators) {
	  for (var i = 0; i < separators.length; ++i) {
	    if (string.lastIndexOf(separators[i]) > 0) {
	      return true;
	    }
	  }
	  return false;
	}

	function splitBySeparators(string, separators) {
	  var reg = new RegExp('[' + separators.join() + ']');
	  return string.split(reg).filter(function (token) {
	    return token;
	  });
	}

	function defaultFilterFn(input, child) {
	  if (child.props.disabled) {
	    return false;
	  }
	  var value = toArray(getPropValue(child, this.props.optionFilterProp)).join('');
	  return value.toLowerCase().indexOf(input.toLowerCase()) > -1;
	}

	function validateOptionValue(value, props) {
	  if (isSingleMode(props) || isMultiple(props)) {
	    return;
	  }
	  if (typeof value !== 'string') {
	    throw new Error('Invalid `value` of type `' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + '` supplied to Option, ' + 'expected `string` when `tags/combobox` is `true`.');
	  }
	}

	function saveRef(instance, name) {
	  return function (node) {
	    instance[name] = node;
	  };
	}
	});

	unwrapExports(util$3);
	var util_1$2 = util$3.UNSELECTABLE_ATTRIBUTE;
	var util_2 = util$3.UNSELECTABLE_STYLE;
	var util_3 = util$3.toTitle;
	var util_4 = util$3.getValuePropValue;
	var util_5 = util$3.getPropValue;
	var util_6 = util$3.isMultiple;
	var util_7 = util$3.isCombobox;
	var util_8 = util$3.isMultipleOrTags;
	var util_9 = util$3.isMultipleOrTagsOrCombobox;
	var util_10 = util$3.isSingleMode;
	var util_11 = util$3.toArray;
	var util_12 = util$3.getMapKey;
	var util_13 = util$3.preventDefaultEvent;
	var util_14 = util$3.findIndexInValueBySingleValue;
	var util_15 = util$3.getLabelFromPropsValue;
	var util_16 = util$3.getSelectKeys;
	var util_17 = util$3.findFirstMenuItem;
	var util_18 = util$3.includesSeparators;
	var util_19 = util$3.splitBySeparators;
	var util_20 = util$3.defaultFilterFn;
	var util_21 = util$3.validateOptionValue;
	var util_22 = util$3.saveRef;

	var ChildrenUtils$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toArrayChildren = toArrayChildren;
	exports.findChildInChildrenByKey = findChildInChildrenByKey;
	exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
	exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
	exports.isSameChildren = isSameChildren;
	exports.mergeChildren = mergeChildren;



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function toArrayChildren(children) {
	  var ret = [];
	  _react2["default"].Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child && child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child && child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findHiddenChildInChildrenByKey(children, key, showProp) {
	  var found = 0;
	  if (children) {
	    children.forEach(function (child) {
	      if (found) {
	        return;
	      }
	      found = child && child.key === key && !child.props[showProp];
	    });
	  }
	  return found;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child && child2) {
	        if (child && !child2 || !child && child2) {
	          same = false;
	        } else if (child.key !== child2.key) {
	          same = false;
	        } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	          same = false;
	        }
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (child && findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (child && nextChildrenPending.hasOwnProperty(child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
	}
	});

	unwrapExports(ChildrenUtils$1);
	var ChildrenUtils_1$1 = ChildrenUtils$1.toArrayChildren;
	var ChildrenUtils_2$1 = ChildrenUtils$1.findChildInChildrenByKey;
	var ChildrenUtils_3$1 = ChildrenUtils$1.findShownChildInChildrenByKey;
	var ChildrenUtils_4$1 = ChildrenUtils$1.findHiddenChildInChildrenByKey;
	var ChildrenUtils_5$1 = ChildrenUtils$1.isSameChildren;
	var ChildrenUtils_6$1 = ChildrenUtils$1.mergeChildren;

	var util_1$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var util = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },
	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};
	exports["default"] = util;
	module.exports = exports["default"];
	});

	unwrapExports(util_1$3);

	var AnimateChild_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);





	var _util2 = _interopRequireDefault(util_1$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var propTypes$1 = {
	  children: _propTypes2["default"].any
	};

	var AnimateChild = function (_Component) {
	  _inherits(AnimateChild, _Component);

	  function AnimateChild(props) {
	    _classCallCheck(this, AnimateChild);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.transition = _this.transition.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }

	  AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.stop();
	  };

	  AnimateChild.prototype.componentWillEnter = function componentWillEnter(done) {
	    if (_util2["default"].isEnterSupported(this.props)) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  };

	  AnimateChild.prototype.componentWillAppear = function componentWillAppear(done) {
	    if (_util2["default"].isAppearSupported(this.props)) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  };

	  AnimateChild.prototype.componentWillLeave = function componentWillLeave(done) {
	    if (_util2["default"].isLeaveSupported(this.props)) {
	      this.transition('leave', done);
	    } else {
	      // always sync, do not interupt with react component life cycle
	      // update hidden -> animate hidden ->
	      // didUpdate -> animate leave -> unmount (if animate is none)
	      done();
	    }
	  };

	  AnimateChild.prototype.transition = function transition(animationType, finishCallback) {
	    var _this2 = this;

	    var node = _reactDom2["default"].findDOMNode(this);
	    var props = this.props;
	    var transitionName = props.transitionName;
	    var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
	    this.stop();
	    var end = function end() {
	      _this2.stopper = null;
	      finishCallback();
	    };
	    if ((lib$1.cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	      var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
	      var activeName = name + '-active';
	      if (nameIsObj && transitionName[animationType + 'Active']) {
	        activeName = transitionName[animationType + 'Active'];
	      }
	      this.stopper = (0, lib$1.cssAnimation)(node, {
	        name: name,
	        active: activeName
	      }, end);
	    } else {
	      this.stopper = props.animation[animationType](node, end);
	    }
	  };

	  AnimateChild.prototype.stop = function stop() {
	    var stopper = this.stopper;
	    if (stopper) {
	      this.stopper = null;
	      stopper.stop();
	    }
	  };

	  AnimateChild.prototype.render = function render() {
	    return this.props.children;
	  };

	  return AnimateChild;
	}(React__default.Component);

	AnimateChild.propTypes = propTypes$1;

	exports["default"] = AnimateChild;
	module.exports = exports['default'];
	});

	unwrapExports(AnimateChild_1$1);

	var Animate_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _AnimateChild2 = _interopRequireDefault(AnimateChild_1$1);



	var _util2 = _interopRequireDefault(util_1$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultKey = 'u_animate_' + Date.now();


	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (_react2["default"].isValidElement(children)) {
	    if (!children.key) {
	      return _react2["default"].cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop() {}

	var propTypes$1 = {
	  component: _propTypes2["default"].any,
	  animation: _propTypes2["default"].object,
	  transitionName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
	  transitionEnter: _propTypes2["default"].bool,
	  transitionAppear: _propTypes2["default"].bool,
	  exclusive: _propTypes2["default"].bool,
	  transitionLeave: _propTypes2["default"].bool,
	  onEnd: _propTypes2["default"].func,
	  onEnter: _propTypes2["default"].func,
	  onLeave: _propTypes2["default"].func,
	  onAppear: _propTypes2["default"].func,
	  showProp: _propTypes2["default"].string
	};

	var defaultProps = {
	  animation: {},
	  component: 'span',
	  transitionEnter: true,
	  transitionLeave: true,
	  transitionAppear: false,
	  onEnd: noop,
	  onEnter: noop,
	  onLeave: noop,
	  onAppear: noop
	};

	var Animate = function (_Component) {
	  _inherits(Animate, _Component);

	  function Animate(props) {
	    _classCallCheck(this, Animate);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.currentlyAnimatingKeys = {};
	    _this.keysToEnter = [];
	    _this.keysToLeave = [];
	    _this.state = {
	      children: (0, ChildrenUtils$1.toArrayChildren)(getChildrenFromProps(_this.props))
	    };

	    _this.performEnter = _this.performEnter.bind(_this);
	    _this.performAppear = _this.performAppear.bind(_this);
	    _this.handleDoneAdding = _this.handleDoneAdding.bind(_this);
	    _this.performLeave = _this.performLeave.bind(_this);

	    _this.performLeave = _this.performLeave.bind(_this);
	    _this.handleDoneLeaving = _this.handleDoneLeaving.bind(_this);
	    _this.isValidChildByKey = _this.isValidChildByKey.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }

	  Animate.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    this.mounted = true;
	    var showProp = this.props.showProp;
	    var children = this.state.children;
	    if (showProp) {
	      children = children.filter(function (child) {
	        return !!child.props[showProp];
	      });
	    }
	    children.forEach(function (child) {
	      if (child) {
	        _this2.performAppear(child.key);
	      }
	    });
	  };

	  Animate.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  Animate.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this3 = this;

	    this.nextProps = nextProps;
	    var nextChildren = (0, ChildrenUtils$1.toArrayChildren)(getChildrenFromProps(nextProps));
	    var props = this.props;
	    // exclusive needs immediate response
	    if (props.exclusive) {
	      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	        _this3.stop(key);
	      });
	    }
	    var showProp = props.showProp;
	    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	    // last props children if exclusive
	    var currentChildren = props.exclusive ? (0, ChildrenUtils$1.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
	    // in case destroy in showProp mode
	    var newChildren = [];
	    if (showProp) {
	      currentChildren.forEach(function (currentChild) {
	        var nextChild = currentChild && (0, ChildrenUtils$1.findChildInChildrenByKey)(nextChildren, currentChild.key);
	        var newChild = void 0;
	        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	          newChild = _react2["default"].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
	        } else {
	          newChild = nextChild;
	        }
	        if (newChild) {
	          newChildren.push(newChild);
	        }
	      });
	      nextChildren.forEach(function (nextChild) {
	        if (!nextChild || !(0, ChildrenUtils$1.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
	          newChildren.push(nextChild);
	        }
	      });
	    } else {
	      newChildren = (0, ChildrenUtils$1.mergeChildren)(currentChildren, nextChildren);
	    }

	    // need render to avoid update
	    this.setState({
	      children: newChildren
	    });

	    nextChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasPrev = child && (0, ChildrenUtils$1.findChildInChildrenByKey)(currentChildren, key);
	      if (showProp) {
	        var showInNext = child.props[showProp];
	        if (hasPrev) {
	          var showInNow = (0, ChildrenUtils$1.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	          if (!showInNow && showInNext) {
	            _this3.keysToEnter.push(key);
	          }
	        } else if (showInNext) {
	          _this3.keysToEnter.push(key);
	        }
	      } else if (!hasPrev) {
	        _this3.keysToEnter.push(key);
	      }
	    });

	    currentChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasNext = child && (0, ChildrenUtils$1.findChildInChildrenByKey)(nextChildren, key);
	      if (showProp) {
	        var showInNow = child.props[showProp];
	        if (hasNext) {
	          var showInNext = (0, ChildrenUtils$1.findShownChildInChildrenByKey)(nextChildren, key, showProp);
	          if (!showInNext && showInNow) {
	            _this3.keysToLeave.push(key);
	          }
	        } else if (showInNow) {
	          _this3.keysToLeave.push(key);
	        }
	      } else if (!hasNext) {
	        _this3.keysToLeave.push(key);
	      }
	    });
	  };

	  Animate.prototype.componentDidUpdate = function componentDidUpdate() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  };

	  Animate.prototype.performEnter = function performEnter(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));
	    }
	  };

	  Animate.prototype.performAppear = function performAppear(key) {
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));
	    }
	  };

	  Animate.prototype.handleDoneAdding = function handleDoneAdding(key, type) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, ChildrenUtils$1.toArrayChildren)(getChildrenFromProps(props));
	    if (!this.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      this.performLeave(key);
	    } else {
	      if (type === 'appear') {
	        if (_util2["default"].allowAppearCallback(props)) {
	          props.onAppear(key);
	          props.onEnd(key, true);
	        }
	      } else {
	        if (_util2["default"].allowEnterCallback(props)) {
	          props.onEnter(key);
	          props.onEnd(key, true);
	        }
	      }
	    }
	  };

	  Animate.prototype.performLeave = function performLeave(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillLeave(this.handleDoneLeaving.bind(this, key));
	    }
	  };

	  Animate.prototype.handleDoneLeaving = function handleDoneLeaving(key) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, ChildrenUtils$1.toArrayChildren)(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (this.isValidChildByKey(currentChildren, key)) {
	      this.performEnter(key);
	    } else {
	      var end = function end() {
	        if (_util2["default"].allowLeaveCallback(props)) {
	          props.onLeave(key);
	          props.onEnd(key, false);
	        }
	      };
	      /* eslint react/no-is-mounted:0 */
	      if (this.mounted && !(0, ChildrenUtils$1.isSameChildren)(this.state.children, currentChildren, props.showProp)) {
	        this.setState({
	          children: currentChildren
	        }, end);
	      } else {
	        end();
	      }
	    }
	  };

	  Animate.prototype.isValidChildByKey = function isValidChildByKey(currentChildren, key) {
	    var showProp = this.props.showProp;
	    if (showProp) {
	      return (0, ChildrenUtils$1.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	    }
	    return (0, ChildrenUtils$1.findChildInChildrenByKey)(currentChildren, key);
	  };

	  Animate.prototype.stop = function stop(key) {
	    delete this.currentlyAnimatingKeys[key];
	    var component = this.refs[key];
	    if (component) {
	      component.stop();
	    }
	  };

	  Animate.prototype.render = function render() {
	    var props = this.props;
	    this.nextProps = props;
	    var stateChildren = this.state.children;
	    var children = null;
	    if (stateChildren) {
	      children = stateChildren.map(function (child) {
	        if (child === null || child === undefined) {
	          return child;
	        }
	        if (!child.key) {
	          throw new Error('must set key for <rc-animate> children');
	        }
	        return _react2["default"].createElement(
	          _AnimateChild2["default"],
	          {
	            key: child.key,
	            ref: child.key,
	            animation: props.animation,
	            transitionName: props.transitionName,
	            transitionEnter: props.transitionEnter,
	            transitionAppear: props.transitionAppear,
	            transitionLeave: props.transitionLeave
	          },
	          child
	        );
	      });
	    }
	    var Component = props.component;
	    if (Component) {
	      var passedProps = props;
	      if (typeof Component === 'string') {
	        passedProps = {
	          className: props.className,
	          style: props.style
	        };
	      }
	      return _react2["default"].createElement(
	        Component,
	        passedProps,
	        children
	      );
	    }
	    return children[0] || null;
	  };

	  return Animate;
	}(React__default.Component);
	Animate.defaultProps = defaultProps;
	Animate.propTypes = Animate.propTypes;

	exports["default"] = Animate;
	module.exports = exports['default'];
	});

	unwrapExports(Animate_1$1);

	var build$b = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Animate2 = _interopRequireDefault(Animate_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Animate2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$b);

	var LazyRenderBox_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-trigger.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/trigger
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var propTypes$1 = {
	  children: _propTypes2["default"].any,
	  className: _propTypes2["default"].string,
	  visible: _propTypes2["default"].bool,
	  hiddenClassName: _propTypes2["default"].string
	};

	var LazyRenderBox = function (_Component) {
	  _inherits(LazyRenderBox, _Component);

	  function LazyRenderBox() {
	    _classCallCheck(this, LazyRenderBox);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  LazyRenderBox.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return nextProps.hiddenClassName || nextProps.visible;
	  };

	  LazyRenderBox.prototype.render = function render() {
	    var _props = this.props,
	        hiddenClassName = _props.hiddenClassName,
	        visible = _props.visible,
	        props = _objectWithoutProperties(_props, ['hiddenClassName', 'visible']);

	    if (hiddenClassName || _react2["default"].Children.count(props.children) > 1) {
	      if (!visible && hiddenClassName) {
	        props.className += ' ' + hiddenClassName;
	      }
	      return _react2["default"].createElement('div', props);
	    }

	    return _react2["default"].Children.only(props.children);
	  };

	  return LazyRenderBox;
	}(React__default.Component);
	LazyRenderBox.propTypes = propTypes$1;

	exports["default"] = LazyRenderBox;
	module.exports = exports['default'];
	});

	unwrapExports(LazyRenderBox_1);

	var PopupInner_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _LazyRenderBox2 = _interopRequireDefault(LazyRenderBox_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-trigger.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/trigger
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var propTypes$1 = {
	  hiddenClassName: _propTypes2["default"].string,
	  className: _propTypes2["default"].string,
	  clsPrefix: _propTypes2["default"].string,
	  onMouseEnter: _propTypes2["default"].func,
	  onMouseLeave: _propTypes2["default"].func,
	  children: _propTypes2["default"].any
	};

	var PopupInner = function (_Component) {
	  _inherits(PopupInner, _Component);

	  function PopupInner() {
	    _classCallCheck(this, PopupInner);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  PopupInner.prototype.render = function render() {
	    var props = this.props;
	    var className = props.className;
	    if (!props.visible) {
	      className += ' ' + props.hiddenClassName;
	    }
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, props.popData, {
	        className: className,
	        onMouseEnter: props.onMouseEnter,
	        onMouseLeave: props.onMouseLeave,
	        style: props.style
	      }),
	      _react2["default"].createElement(
	        _LazyRenderBox2["default"],
	        { className: props.clsPrefix + '-content', visible: props.visible },
	        props.children
	      )
	    );
	  };

	  return PopupInner;
	}(React__default.Component);

	PopupInner.propTypes = propTypes$1;
	exports["default"] = PopupInner;
	module.exports = exports['default'];
	});

	unwrapExports(PopupInner_1);

	var Popup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _Align2 = _interopRequireDefault(Align_1);



	var _beeAnimate2 = _interopRequireDefault(build$b);



	var _PopupInner2 = _interopRequireDefault(PopupInner_1);



	var _LazyRenderBox2 = _interopRequireDefault(LazyRenderBox_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-trigger.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/trigger
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var propTypes$1 = {
	  visible: _propTypes2["default"].bool,
	  style: _propTypes2["default"].object,
	  getClassNameFromAlign: _propTypes2["default"].func,
	  onAlign: _propTypes2["default"].func,
	  getRootDomNode: _propTypes2["default"].func,
	  onMouseEnter: _propTypes2["default"].func,
	  align: _propTypes2["default"].any,
	  destroyPopupOnHide: _propTypes2["default"].bool,
	  className: _propTypes2["default"].string,
	  clsPrefix: _propTypes2["default"].string,
	  onMouseLeave: _propTypes2["default"].func
	};

	var Popup = function (_Component) {
	  _inherits(Popup, _Component);

	  function Popup() {
	    _classCallCheck(this, Popup);

	    var _this = _possibleConstructorReturn(this, _Component.call(this));

	    _this.onAlign = _this.onAlign.bind(_this);
	    _this.getPopupDomNode = _this.getPopupDomNode.bind(_this);
	    _this.getTarget = _this.getTarget.bind(_this);
	    _this.getMaskTransitionName = _this.getMaskTransitionName.bind(_this);
	    _this.getTransitionName = _this.getTransitionName.bind(_this);
	    _this.getClassName = _this.getClassName.bind(_this);
	    _this.getPopupElement = _this.getPopupElement.bind(_this);
	    _this.getZIndexStyle = _this.getZIndexStyle.bind(_this);
	    _this.getMaskElement = _this.getMaskElement.bind(_this);
	    _this.saveAlign = _this.saveAlign.bind(_this);
	    return _this;
	  }

	  Popup.prototype.componentDidMount = function componentDidMount() {
	    this.rootNode = this.getPopupDomNode();
	  };

	  Popup.prototype.onAlign = function onAlign(popupDomNode, align) {
	    var props = this.props;
	    var alignClassName = props.getClassNameFromAlign(props.align);
	    var currentAlignClassName = props.getClassNameFromAlign(align);
	    if (alignClassName !== currentAlignClassName) {
	      this.currentAlignClassName = currentAlignClassName;
	      popupDomNode.className = this.getClassName(currentAlignClassName);
	    }
	    props.onAlign(popupDomNode, align);
	  };

	  Popup.prototype.getPopupDomNode = function getPopupDomNode() {
	    return _reactDom2["default"].findDOMNode(this.refs.popup);
	  };

	  Popup.prototype.getTarget = function getTarget() {
	    return this.props.getRootDomNode();
	  };

	  Popup.prototype.getMaskTransitionName = function getMaskTransitionName() {
	    var props = this.props;
	    var transitionName = props.maskTransitionName;
	    var animation = props.maskAnimation;
	    if (!transitionName && animation) {
	      transitionName = props.clsPrefix + '-' + animation;
	    }
	    return transitionName;
	  };

	  Popup.prototype.getTransitionName = function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.clsPrefix + '-' + props.animation;
	    }
	    return transitionName;
	  };

	  Popup.prototype.getClassName = function getClassName(currentAlignClassName) {
	    return this.props.clsPrefix + ' ' + this.props.className + ' ' + currentAlignClassName;
	  };

	  Popup.prototype.getPopupElement = function getPopupElement() {
	    var props = this.props;
	    var align = props.align,
	        style = props.style,
	        visible = props.visible,
	        clsPrefix = props.clsPrefix,
	        destroyPopupOnHide = props.destroyPopupOnHide;

	    var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));
	    var hiddenClassName = clsPrefix + '-hidden';
	    if (!visible) {
	      this.currentAlignClassName = null;
	    }
	    var newStyle = _extends({}, style, this.getZIndexStyle());
	    var popupInnerProps = {
	      className: className,
	      clsPrefix: clsPrefix,
	      ref: 'popup',
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      style: newStyle,
	      popData: props.popData
	    };
	    if (destroyPopupOnHide) {
	      return _react2["default"].createElement(
	        _beeAnimate2["default"],
	        {
	          component: '',
	          exclusive: true,
	          transitionAppear: true,
	          transitionName: this.getTransitionName()
	        },
	        visible ? _react2["default"].createElement(
	          _Align2["default"],
	          {
	            target: this.getTarget,
	            key: 'popup',
	            ref: this.saveAlign,
	            monitorWindowResize: true,
	            align: align,
	            onAlign: this.onAlign
	          },
	          _react2["default"].createElement(
	            _PopupInner2["default"],
	            _extends({
	              visible: true
	            }, popupInnerProps),
	            props.children
	          )
	        ) : null
	      );
	    }
	    return _react2["default"].createElement(
	      _beeAnimate2["default"],
	      {
	        component: '',
	        exclusive: true,
	        transitionAppear: true,
	        transitionName: this.getTransitionName(),
	        showProp: 'xVisible'
	      },
	      _react2["default"].createElement(
	        _Align2["default"],
	        {
	          target: this.getTarget,
	          key: 'popup',
	          ref: this.saveAlign,
	          monitorWindowResize: true,
	          xVisible: visible,
	          childrenProps: { visible: 'xVisible' },
	          disabled: !visible,
	          align: align,
	          onAlign: this.onAlign
	        },
	        _react2["default"].createElement(
	          _PopupInner2["default"],
	          _extends({
	            hiddenClassName: hiddenClassName
	          }, popupInnerProps),
	          props.children
	        )
	      )
	    );
	  };

	  Popup.prototype.getZIndexStyle = function getZIndexStyle() {
	    var style = {};
	    var props = this.props;
	    if (props.zIndex !== undefined) {
	      style.zIndex = props.zIndex;
	    }
	    return style;
	  };

	  Popup.prototype.getMaskElement = function getMaskElement() {
	    var props = this.props;
	    var maskElement = void 0;
	    if (props.mask) {
	      var maskTransition = this.getMaskTransitionName();
	      maskElement = _react2["default"].createElement(_LazyRenderBox2["default"], {
	        style: this.getZIndexStyle(),
	        key: 'mask',
	        className: props.clsPrefix + '-mask',
	        hiddenClassName: props.clsPrefix + '-mask-hidden',
	        visible: props.visible
	      });
	      if (maskTransition) {
	        maskElement = _react2["default"].createElement(
	          _beeAnimate2["default"],
	          {
	            key: 'mask',
	            showProp: 'visible',
	            transitionAppear: true,
	            component: '',
	            transitionName: maskTransition
	          },
	          maskElement
	        );
	      }
	    }
	    return maskElement;
	  };

	  Popup.prototype.saveAlign = function saveAlign(align) {
	    this.alignInstance = align;
	  };

	  Popup.prototype.render = function render() {
	    return _react2["default"].createElement(
	      'div',
	      null,
	      this.getMaskElement(),
	      this.getPopupElement()
	    );
	  };

	  return Popup;
	}(React__default.Component);

	Popup.propTypes = propTypes$1;
	exports["default"] = Popup;
	module.exports = exports['default'];
	});

	unwrapExports(Popup_1);

	var utils$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.getAlignFromPlacement = getAlignFromPlacement;
	exports.getPopupClassNameFromAlign = getPopupClassNameFromAlign;
	function isPointsEq(a1, a2) {
	  return a1[0] === a2[0] && a1[1] === a2[1];
	}

	function getAlignFromPlacement(builtinPlacements, placementStr, align) {
	  var baseAlign = builtinPlacements[placementStr] || {};
	  return _extends({}, baseAlign, align);
	}

	function getPopupClassNameFromAlign(builtinPlacements, clsPrefix, align) {
	  var points = align.points;
	  for (var placement in builtinPlacements) {
	    if (builtinPlacements.hasOwnProperty(placement)) {
	      if (isPointsEq(builtinPlacements[placement].points, points)) {
	        return clsPrefix + '-placement-' + placement;
	      }
	    }
	  }
	  return '';
	}
	});

	unwrapExports(utils$1);
	var utils_1 = utils$1.getAlignFromPlacement;
	var utils_2 = utils$1.getPopupClassNameFromAlign;

	var Trigger_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _contains2 = _interopRequireDefault(contains$1);





	var _Popup2 = _interopRequireDefault(Popup_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-trigger.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/trigger
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	//import getContainerRenderMixin from './getContainerRenderMixin';

	function noop() {}

	function returnEmptyString() {
	  return '';
	}

	var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur'];

	var propTypes$1 = {
	  children: _propTypes2["default"].any,
	  action: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].arrayOf(_propTypes2["default"].string)]),
	  showAction: _propTypes2["default"].any,
	  hideAction: _propTypes2["default"].any,
	  getPopupClassNameFromAlign: _propTypes2["default"].any,
	  onPopupVisibleChange: _propTypes2["default"].func,
	  afterPopupVisibleChange: _propTypes2["default"].func,
	  popup: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].func]).isRequired,
	  popupStyle: _propTypes2["default"].object,
	  clsPrefix: _propTypes2["default"].string,
	  popupClassName: _propTypes2["default"].string,
	  popupPlacement: _propTypes2["default"].string,
	  builtinPlacements: _propTypes2["default"].object,
	  popupTransitionName: _propTypes2["default"].string,
	  popupAnimation: _propTypes2["default"].any,
	  mouseEnterDelay: _propTypes2["default"].number,
	  mouseLeaveDelay: _propTypes2["default"].number,
	  zIndex: _propTypes2["default"].number,
	  focusDelay: _propTypes2["default"].number,
	  blurDelay: _propTypes2["default"].number,
	  getPopupContainer: _propTypes2["default"].func,
	  destroyPopupOnHide: _propTypes2["default"].bool,
	  mask: _propTypes2["default"].bool,
	  maskClosable: _propTypes2["default"].bool,
	  onPopupAlign: _propTypes2["default"].func,
	  popupAlign: _propTypes2["default"].object,
	  popupVisible: _propTypes2["default"].bool,
	  maskTransitionName: _propTypes2["default"].string,
	  maskAnimation: _propTypes2["default"].string,
	  getDocument: _propTypes2["default"].func, //获得点击消失的document对象，适用于getPopupContainer渲染到非当前document情况，例如iframe
	  popData: _propTypes2["default"].object //弹窗层自定义属性
	};

	var defaultProps = {
	  clsPrefix: 'rc-trigger-popup',
	  getPopupClassNameFromAlign: returnEmptyString,
	  onPopupVisibleChange: noop,
	  afterPopupVisibleChange: noop,
	  onPopupAlign: noop,
	  popupClassName: '',
	  mouseEnterDelay: 0,
	  mouseLeaveDelay: 0.1,
	  focusDelay: 0,
	  blurDelay: 0.15,
	  popupStyle: {},
	  destroyPopupOnHide: false,
	  popupAlign: {},
	  defaultPopupVisible: false,
	  mask: false,
	  maskClosable: true,
	  action: [],
	  showAction: [],
	  hideAction: [],
	  getDocument: function getDocument() {
	    return document;
	  },
	  popData: {}
	};

	var Trigger = function (_Component) {
	  _inherits(Trigger, _Component);

	  function Trigger(props) {
	    _classCallCheck(this, Trigger);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.getDocument = function () {
	      var doc = document;
	      if (_this.props.getDocument) doc = _this.props.getDocument();
	      return doc;
	    };

	    _this.state = {
	      popupVisible: !!_this.props.popupVisible || _this.props.defaultPopupVisible
	      //this.removeContainer = this.removeContainer.bind(this);
	    };_this.getContainer = _this.getContainer.bind(_this);
	    _this.renderComponent = _this.renderComponent.bind(_this);
	    _this.isVisible = _this.isVisible.bind(_this);

	    _this.onMouseEnter = _this.onMouseEnter.bind(_this);
	    _this.onMouseLeave = _this.onMouseLeave.bind(_this);
	    _this.onPopupMouseEnter = _this.onPopupMouseEnter.bind(_this);
	    _this.onPopupMouseLeave = _this.onPopupMouseLeave.bind(_this);
	    _this.onFocus = _this.onFocus.bind(_this);

	    _this.onMouseDown = _this.onMouseDown.bind(_this);
	    _this.onTouchStart = _this.onTouchStart.bind(_this);
	    _this.onBlur = _this.onBlur.bind(_this);
	    _this.onDocumentClick = _this.onDocumentClick.bind(_this);
	    _this.getPopupDomNode = _this.getPopupDomNode.bind(_this);

	    _this.getRootDomNode = _this.getRootDomNode.bind(_this);
	    _this.getPopupClassNameFromAlign = _this.getPopupClassNameFromAlign.bind(_this);
	    _this.getPopupAlign = _this.getPopupAlign.bind(_this);
	    _this.getComponent = _this.getComponent.bind(_this);
	    _this.setPopupVisible = _this.setPopupVisible.bind(_this);

	    _this.delaySetPopupVisible = _this.delaySetPopupVisible.bind(_this);
	    _this.clearDelayTimer = _this.clearDelayTimer.bind(_this);
	    _this.createTwoChains = _this.createTwoChains.bind(_this);
	    _this.isClickToShow = _this.isClickToShow.bind(_this);
	    _this.isClickToHide = _this.isClickToHide.bind(_this);

	    _this.isMouseEnterToShow = _this.isMouseEnterToShow.bind(_this);
	    _this.isMouseLeaveToHide = _this.isMouseLeaveToHide.bind(_this);
	    _this.isFocusToShow = _this.isFocusToShow.bind(_this);
	    _this.isBlurToHide = _this.isBlurToHide.bind(_this);
	    _this.forcePopupAlign = _this.forcePopupAlign.bind(_this);

	    _this.fireEvents = _this.fireEvents.bind(_this);
	    _this.close = _this.close.bind(_this);
	    _this.onClick = _this.onClick.bind(_this);
	    return _this;
	  }

	  Trigger.prototype.isVisible = function isVisible(instance) {
	    return instance.state.popupVisible;
	  };

	  Trigger.prototype.getContainer = function getContainer(instance) {
	    var popupContainer = document.createElement('div');
	    var mountNode = instance.props.getPopupContainer ? instance.props.getPopupContainer((0, ReactDOM__default.findDOMNode)(instance)) : document.body;
	    mountNode.appendChild(popupContainer);
	    return popupContainer;
	  };

	  Trigger.prototype.renderComponent = function renderComponent(instance, componentArg, ready) {
	    if (instance._component || this.isVisible(instance)) {
	      if (!instance._container) {
	        instance._container = this.getContainer(instance);
	      }
	      var component = instance.getComponent(componentArg);
	      _reactDom2["default"].unstable_renderSubtreeIntoContainer(instance, component, instance._container, function callback() {
	        instance._component = this;
	        if (ready) {
	          ready.call(this);
	        }
	      });
	    }
	  };

	  Trigger.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    this.mounted = false;
	    ALL_HANDLERS.forEach(function (h) {
	      _this2['fire' + h] = function (e) {
	        _this2.fireEvents(h, e);
	      };
	    });
	  };

	  Trigger.prototype.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.componentDidUpdate({}, {
	      popupVisible: this.state.popupVisible
	    });
	  };

	  Trigger.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	    var popupVisible = _ref.popupVisible;

	    if (popupVisible !== undefined) {
	      this.setState({
	        popupVisible: popupVisible
	      });
	    }
	  };

	  Trigger.prototype.componentDidUpdate = function componentDidUpdate(_, prevState) {
	    var props = this.props;
	    var state = this.state;
	    this.renderComponent(this, null, function () {
	      if (prevState.popupVisible !== state.popupVisible) {
	        props.afterPopupVisibleChange(state.popupVisible);
	      }
	    });
	    if (this.isClickToHide()) {
	      if (state.popupVisible) {
	        if (!this.clickOutsideHandler) {
	          this.clickOutsideHandler = (0, lib$1.addEventListener)(this.getDocument(), 'mousedown', this.onDocumentClick);
	          this.touchOutsideHandler = (0, lib$1.addEventListener)(this.getDocument(), 'touchstart', this.onDocumentClick);
	          this.mouseWheelOutsideHandler = (0, lib$1.addEventListener)(this.getDocument(), 'mousewheel', this.onDocumentClick);
	        }
	        return;
	      }
	    }
	    if (this.clickOutsideHandler) {
	      this.clickOutsideHandler.remove();
	      this.touchOutsideHandler.remove();
	      this.mouseWheelOutsideHandler.remove();
	      this.clickOutsideHandler = null;
	      this.touchOutsideHandler = null;
	      this.mouseWheelOutsideHandler = null;
	    }
	  };

	  Trigger.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.clearDelayTimer();
	    if (this.clickOutsideHandler) {
	      this.clickOutsideHandler.remove();
	      this.touchOutsideHandler.remove();
	      this.mouseWheelOutsideHandler.remove();
	      this.clickOutsideHandler = null;
	      this.touchOutsideHandler = null;
	      this.mouseWheelOutsideHandler = null;
	    }
	    if (this._container) {
	      _reactDom2["default"].unmountComponentAtNode(this._container);
	    }

	    //this.removeContainer();
	  };

	  Trigger.prototype.onMouseEnter = function onMouseEnter(e) {
	    this.fireEvents('onMouseEnter', e);
	    this.delaySetPopupVisible(true, this.props.mouseEnterDelay);
	  };

	  Trigger.prototype.onMouseLeave = function onMouseLeave(e) {
	    this.fireEvents('onMouseLeave', e);
	    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
	  };

	  Trigger.prototype.onPopupMouseEnter = function onPopupMouseEnter() {
	    this.clearDelayTimer();
	  };

	  Trigger.prototype.onPopupMouseLeave = function onPopupMouseLeave(e) {
	    // https://github.com/react-component/trigger/pull/13
	    // react bug?
	    if (e.relatedTarget && !e.relatedTarget.setTimeout && this._component && (0, _contains2["default"])(this._component.getPopupDomNode(), e.relatedTarget)) {
	      return;
	    }
	    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
	  };

	  Trigger.prototype.onFocus = function onFocus(e) {
	    this.fireEvents('onFocus', e);
	    // incase focusin and focusout
	    this.clearDelayTimer();
	    if (this.isFocusToShow()) {
	      this.focusTime = Date.now();
	      this.delaySetPopupVisible(true, this.props.focusDelay);
	    }
	  };

	  Trigger.prototype.onMouseDown = function onMouseDown(e) {
	    this.fireEvents('onMouseDown', e);
	    this.preClickTime = Date.now();
	  };

	  Trigger.prototype.onTouchStart = function onTouchStart(e) {
	    this.fireEvents('onTouchStart', e);
	    this.preTouchTime = Date.now();
	  };

	  Trigger.prototype.onBlur = function onBlur(e) {
	    this.fireEvents('onBlur', e);
	    this.clearDelayTimer();
	    if (this.isBlurToHide()) {
	      this.delaySetPopupVisible(false, this.props.blurDelay);
	    }
	  };

	  Trigger.prototype.onClick = function onClick(event) {
	    this.fireEvents('onClick', event);
	    // focus will trigger click
	    if (this.focusTime) {
	      var preTime = void 0;
	      if (this.preClickTime && this.preTouchTime) {
	        preTime = Math.min(this.preClickTime, this.preTouchTime);
	      } else if (this.preClickTime) {
	        preTime = this.preClickTime;
	      } else if (this.preTouchTime) {
	        preTime = this.preTouchTime;
	      }
	      if (Math.abs(preTime - this.focusTime) < 20) {
	        return;
	      }
	      this.focusTime = 0;
	    }
	    this.preClickTime = 0;
	    this.preTouchTime = 0;
	    event.preventDefault();
	    var nextVisible = !this.state.popupVisible;
	    if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
	      this.setPopupVisible(!this.state.popupVisible);
	    }
	  };

	  Trigger.prototype.onDocumentClick = function onDocumentClick(event) {
	    if (this.props.mask && !this.props.maskClosable) {
	      return;
	    }
	    var target = event.target;
	    var root = (0, ReactDOM__default.findDOMNode)(this);
	    var popupNode = this.getPopupDomNode();
	    if (!(0, _contains2["default"])(root, target) && !(0, _contains2["default"])(popupNode, target)) {
	      this.close();
	    }
	  };

	  Trigger.prototype.getPopupDomNode = function getPopupDomNode() {
	    // for test
	    if (this._component) {
	      return this.mounted ? this._component.getPopupDomNode() : null;
	    }
	    return null;
	  };

	  Trigger.prototype.getRootDomNode = function getRootDomNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  };

	  Trigger.prototype.getPopupClassNameFromAlign = function getPopupClassNameFromAlign(align) {
	    var className = [];
	    var props = this.props;
	    var popupPlacement = props.popupPlacement,
	        builtinPlacements = props.builtinPlacements,
	        clsPrefix = props.clsPrefix;

	    if (popupPlacement && builtinPlacements) {
	      className.push((0, utils$1.getPopupClassNameFromAlign)(builtinPlacements, clsPrefix, align));
	    }
	    if (props.getPopupClassNameFromAlign) {
	      className.push(props.getPopupClassNameFromAlign(align));
	    }
	    return className.join(' ');
	  };

	  Trigger.prototype.getPopupAlign = function getPopupAlign() {
	    var props = this.props;
	    var popupPlacement = props.popupPlacement,
	        popupAlign = props.popupAlign,
	        builtinPlacements = props.builtinPlacements;

	    if (popupPlacement && builtinPlacements) {
	      return (0, utils$1.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);
	    }
	    return popupAlign;
	  };

	  Trigger.prototype.getComponent = function getComponent() {
	    var props = this.props,
	        state = this.state;

	    var mouseProps = {};
	    if (this.isMouseEnterToShow()) {
	      mouseProps.onMouseEnter = this.onPopupMouseEnter;
	    }
	    if (this.isMouseLeaveToHide()) {
	      mouseProps.onMouseLeave = this.onPopupMouseLeave;
	    }
	    return _react2["default"].createElement(
	      _Popup2["default"],
	      _extends({
	        clsPrefix: props.clsPrefix,
	        destroyPopupOnHide: props.destroyPopupOnHide,
	        visible: state.popupVisible,
	        className: props.popupClassName,
	        action: props.action,
	        align: this.getPopupAlign(),
	        onAlign: props.onPopupAlign,
	        animation: props.popupAnimation,
	        getClassNameFromAlign: this.getPopupClassNameFromAlign
	      }, mouseProps, {
	        getRootDomNode: this.getRootDomNode,
	        style: props.popupStyle,
	        mask: props.mask,
	        zIndex: props.zIndex,
	        transitionName: props.popupTransitionName,
	        maskAnimation: props.maskAnimation,
	        maskTransitionName: props.maskTransitionName,
	        popData: props.popData
	      }),
	      typeof props.popup === 'function' ? props.popup() : props.popup
	    );
	  };

	  Trigger.prototype.setPopupVisible = function setPopupVisible(popupVisible) {
	    this.clearDelayTimer();
	    if (this.state.popupVisible !== popupVisible) {
	      if (!('popupVisible' in this.props)) {
	        this.setState({
	          popupVisible: popupVisible
	        });
	      }
	      this.props.onPopupVisibleChange(popupVisible);
	    }
	  };

	  Trigger.prototype.delaySetPopupVisible = function delaySetPopupVisible(visible, delayS) {
	    var _this3 = this;

	    var delay = delayS * 1000;
	    this.clearDelayTimer();
	    if (delay) {
	      this.delayTimer = setTimeout(function () {
	        _this3.setPopupVisible(visible);
	        _this3.clearDelayTimer();
	      }, delay);
	    } else {
	      this.setPopupVisible(visible);
	    }
	  };

	  Trigger.prototype.clearDelayTimer = function clearDelayTimer() {
	    if (this.delayTimer) {
	      clearTimeout(this.delayTimer);
	      this.delayTimer = null;
	    }
	  };

	  Trigger.prototype.createTwoChains = function createTwoChains(event) {
	    var childPros = this.props.children.props;
	    var props = this.props;
	    if (childPros[event] && props[event]) {
	      return this['fire' + event];
	    }
	    return childPros[event] || props[event];
	  };

	  Trigger.prototype.isClickToShow = function isClickToShow() {
	    var _props = this.props,
	        action = _props.action,
	        showAction = _props.showAction;

	    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
	  };

	  Trigger.prototype.isClickToHide = function isClickToHide() {
	    var _props2 = this.props,
	        action = _props2.action,
	        hideAction = _props2.hideAction;

	    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
	  };

	  Trigger.prototype.isMouseEnterToShow = function isMouseEnterToShow() {
	    var _props3 = this.props,
	        action = _props3.action,
	        showAction = _props3.showAction;

	    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
	  };

	  Trigger.prototype.isMouseLeaveToHide = function isMouseLeaveToHide() {
	    var _props4 = this.props,
	        action = _props4.action,
	        hideAction = _props4.hideAction;

	    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
	  };

	  Trigger.prototype.isFocusToShow = function isFocusToShow() {
	    var _props5 = this.props,
	        action = _props5.action,
	        showAction = _props5.showAction;

	    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
	  };

	  Trigger.prototype.isBlurToHide = function isBlurToHide() {
	    var _props6 = this.props,
	        action = _props6.action,
	        hideAction = _props6.hideAction;

	    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
	  };

	  Trigger.prototype.forcePopupAlign = function forcePopupAlign() {
	    if (this.state.popupVisible && this.popupInstance && this.popupInstance.alignInstance) {
	      this.popupInstance.alignInstance.forceAlign();
	    }
	  };

	  Trigger.prototype.fireEvents = function fireEvents(type, e) {
	    var childCallback = this.props.children.props[type];
	    if (childCallback) {
	      childCallback(e);
	    }
	    var callback = this.props[type];
	    if (callback) {
	      callback(e);
	    }
	  };

	  Trigger.prototype.close = function close() {
	    this.setPopupVisible(false);
	  };

	  Trigger.prototype.render = function render() {
	    var props = this.props;
	    var children = props.children;
	    var child = _react2["default"].Children.only(children);
	    var newChildProps = {};

	    if (this.isClickToHide() || this.isClickToShow()) {
	      newChildProps.onClick = this.onClick;
	      newChildProps.onMouseDown = this.onMouseDown;
	      newChildProps.onTouchStart = this.onTouchStart;
	    } else {
	      newChildProps.onClick = this.createTwoChains('onClick');
	      newChildProps.onMouseDown = this.createTwoChains('onMouseDown');
	      newChildProps.onTouchStart = this.createTwoChains('onTouchStart');
	    }
	    if (this.isMouseEnterToShow()) {
	      newChildProps.onMouseEnter = this.onMouseEnter;
	    } else {
	      newChildProps.onMouseEnter = this.createTwoChains('onMouseEnter');
	    }
	    if (this.isMouseLeaveToHide()) {
	      newChildProps.onMouseLeave = this.onMouseLeave;
	    } else {
	      newChildProps.onMouseLeave = this.createTwoChains('onMouseLeave');
	    }
	    if (this.isFocusToShow() || this.isBlurToHide()) {
	      newChildProps.onFocus = this.onFocus;
	      newChildProps.onBlur = this.onBlur;
	    } else {
	      newChildProps.onFocus = this.createTwoChains('onFocus');
	      newChildProps.onBlur = this.createTwoChains('onBlur');
	    }
	    return _react2["default"].cloneElement(child, newChildProps);
	  };

	  return Trigger;
	}(React__default.Component);

	Trigger.propTypes = propTypes$1;
	Trigger.defaultProps = defaultProps;
	exports["default"] = Trigger;
	module.exports = exports['default'];
	});

	unwrapExports(Trigger_1);

	var trigger = Trigger_1;

	var DropdownMenu_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);





	var _propTypes2 = _interopRequireDefault(propTypes);





	var _rcMenu2 = _interopRequireDefault(Menu);



	var _domScrollIntoView2 = _interopRequireDefault(lib$2);



	var _raf2 = _interopRequireDefault(raf_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-select.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/select
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var DropdownMenu = function (_React$Component) {
	  _inherits(DropdownMenu, _React$Component);

	  function DropdownMenu(props) {
	    _classCallCheck(this, DropdownMenu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.scrollActiveItemToView = function () {
	      // scroll into view
	      var itemComponent = (0, ReactDOM__default.findDOMNode)(_this.firstActiveItem);
	      var _this$props = _this.props,
	          value = _this$props.value,
	          visible = _this$props.visible,
	          firstActiveValue = _this$props.firstActiveValue;


	      if (!itemComponent || !visible) {
	        return;
	      }
	      var scrollIntoViewOpts = {
	        onlyScrollIfNeeded: true
	      };
	      if ((!value || value.length === 0) && firstActiveValue) {
	        scrollIntoViewOpts.alignWithTop = true;
	      }

	      // Delay to scroll since current frame item position is not ready when pre view is by filter
	      // https://github.com/ant-design/ant-design/issues/11268#issuecomment-406634462
	      _this.rafInstance = (0, _raf2["default"])(function () {
	        (0, _domScrollIntoView2["default"])(itemComponent, (0, ReactDOM__default.findDOMNode)(_this.menuRef), scrollIntoViewOpts);
	      });
	    };

	    _this.lastInputValue = props.inputValue;
	    _this.saveMenuRef = (0, util$3.saveRef)(_this, 'menuRef');
	    return _this;
	  }

	  DropdownMenu.prototype.componentDidMount = function componentDidMount() {
	    this.scrollActiveItemToView();
	    this.lastVisible = this.props.visible;
	  };

	  DropdownMenu.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    if (!nextProps.visible) {
	      this.lastVisible = false;
	    }
	    // freeze when hide
	    return nextProps.visible || nextProps.inputValue !== this.props.inputValue;
	  };

	  DropdownMenu.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (!prevProps.visible && props.visible) {
	      this.scrollActiveItemToView();
	    }
	    this.lastVisible = props.visible;
	    this.lastInputValue = props.inputValue;
	  };

	  DropdownMenu.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.rafInstance && this.rafInstance.cancel) {
	      this.rafInstance.cancel();
	    }
	  };

	  DropdownMenu.prototype.renderMenu = function renderMenu() {
	    var _this2 = this;

	    var props = this.props;
	    var menuItems = props.menuItems,
	        menuItemSelectedIcon = props.menuItemSelectedIcon,
	        defaultActiveFirstOption = props.defaultActiveFirstOption,
	        value = props.value,
	        prefixCls = props.prefixCls,
	        multiple = props.multiple,
	        onMenuSelect = props.onMenuSelect,
	        inputValue = props.inputValue,
	        firstActiveValue = props.firstActiveValue,
	        backfillValue = props.backfillValue,
	        clsPrefix = props.clsPrefix;

	    if (menuItems && menuItems.length) {
	      var menuProps = {};
	      if (multiple) {
	        menuProps.onDeselect = props.onMenuDeselect;
	        menuProps.onSelect = onMenuSelect;
	      } else {
	        menuProps.onClick = onMenuSelect;
	      }

	      var selectedKeys = (0, util$3.getSelectKeys)(menuItems, value);
	      var activeKeyProps = {};

	      var clonedMenuItems = menuItems;
	      if (selectedKeys.length || firstActiveValue) {
	        if (props.visible && !this.lastVisible) {
	          activeKeyProps.activeKey = selectedKeys[0] || firstActiveValue;
	        }
	        var foundFirst = false;
	        // set firstActiveItem via cloning menus
	        // for scroll into view
	        var clone = function clone(item) {
	          if (!foundFirst && selectedKeys.indexOf(item.key) !== -1 || !foundFirst && !selectedKeys.length && firstActiveValue.indexOf(item.key) !== -1) {
	            foundFirst = true;
	            return (0, React__default.cloneElement)(item, {
	              ref: function ref(_ref) {
	                _this2.firstActiveItem = _ref;
	              }
	            });
	          }
	          return item;
	        };

	        clonedMenuItems = menuItems.map(function (item) {
	          if (item.type.isMenuItemGroup) {
	            var children = (0, lib$1.toArray)(item.props.children).map(clone);
	            return (0, React__default.cloneElement)(item, {}, children);
	          }
	          return clone(item);
	        });
	      } else {
	        // Clear firstActiveItem when dropdown menu items was empty
	        // Avoid `Unable to find node on an unmounted component`
	        // https://github.com/ant-design/ant-design/issues/10774
	        this.firstActiveItem = null;
	      }

	      // clear activeKey when inputValue change
	      var lastValue = value && value[value.length - 1];
	      if (inputValue !== this.lastInputValue && (!lastValue || lastValue !== backfillValue)) {
	        activeKeyProps.activeKey = '';
	      }
	      return _react2["default"].createElement(
	        _rcMenu2["default"],
	        _extends({
	          ref: this.saveMenuRef,
	          style: this.props.dropdownMenuStyle,
	          defaultActiveFirst: defaultActiveFirstOption,
	          role: 'listbox',
	          itemIcon: multiple ? menuItemSelectedIcon : null
	        }, activeKeyProps, {
	          multiple: multiple
	        }, menuProps, {
	          selectedKeys: selectedKeys,
	          prefixCls: clsPrefix + '-menu'
	        }),
	        clonedMenuItems
	      );
	    }
	    return null;
	  };

	  DropdownMenu.prototype.render = function render() {
	    var renderMenu = this.renderMenu();
	    return renderMenu ? _react2["default"].createElement(
	      'div',
	      {
	        style: {
	          overflow: 'auto',
	          transform: 'translateZ(0)'
	        },
	        onFocus: this.props.onPopupFocus,
	        onMouseDown: util$3.preventDefaultEvent,
	        onScroll: this.props.onPopupScroll
	      },
	      renderMenu
	    ) : null;
	  };

	  return DropdownMenu;
	}(_react2["default"].Component);

	DropdownMenu.displayName = 'DropdownMenu';
	DropdownMenu.propTypes = {
	  defaultActiveFirstOption: _propTypes2["default"].bool,
	  value: _propTypes2["default"].any,
	  dropdownMenuStyle: _propTypes2["default"].object,
	  multiple: _propTypes2["default"].bool,
	  onPopupFocus: _propTypes2["default"].func,
	  onPopupScroll: _propTypes2["default"].func,
	  onMenuDeSelect: _propTypes2["default"].func,
	  onMenuSelect: _propTypes2["default"].func,
	  prefixCls: _propTypes2["default"].string,
	  menuItems: _propTypes2["default"].any,
	  inputValue: _propTypes2["default"].string,
	  visible: _propTypes2["default"].bool,
	  firstActiveValue: _propTypes2["default"].string,
	  menuItemSelectedIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node])
	};
	exports["default"] = DropdownMenu;
	module.exports = exports['default'];
	});

	unwrapExports(DropdownMenu_1);

	var SelectTrigger_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _trigger2 = _interopRequireDefault(trigger);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);





	var _DropdownMenu2 = _interopRequireDefault(DropdownMenu_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-select.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/select
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	_trigger2["default"].displayName = 'Trigger';

	var BUILT_IN_PLACEMENTS = {
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    offset: [0, 4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    offset: [0, -4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  }
	};

	var SelectTrigger = function (_React$Component) {
	  _inherits(SelectTrigger, _React$Component);

	  function SelectTrigger(props) {
	    _classCallCheck(this, SelectTrigger);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    _this.saveDropdownMenuRef = (0, util$3.saveRef)(_this, 'dropdownMenuRef');
	    _this.saveTriggerRef = (0, util$3.saveRef)(_this, 'triggerRef');

	    _this.state = {
	      dropdownWidth: null
	    };
	    return _this;
	  }

	  SelectTrigger.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.open) {
	      //宽度计算时机修改
	      this.setDropdownWidth();
	    }
	  };

	  SelectTrigger.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (this.props.visible) {
	      //宽度计算时机修改
	      this.setDropdownWidth();
	    }
	  };

	  SelectTrigger.prototype.render = function render() {
	    var _popupClassName;

	    var _props = this.props,
	        onPopupFocus = _props.onPopupFocus,
	        props = _objectWithoutProperties(_props, ['onPopupFocus']);

	    var multiple = props.multiple,
	        visible = props.visible,
	        inputValue = props.inputValue,
	        dropdownAlign = props.dropdownAlign,
	        disabled = props.disabled,
	        showSearch = props.showSearch,
	        dropdownClassName = props.dropdownClassName,
	        dropdownStyle = props.dropdownStyle,
	        dropdownMatchSelectWidth = props.dropdownMatchSelectWidth;

	    var dropdownPrefixCls = this.getDropdownPrefixCls();
	    var popupClassName = (_popupClassName = {}, _defineProperty(_popupClassName, dropdownClassName, !!dropdownClassName), _defineProperty(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
	    var popupElement = this.getDropdownElement({
	      menuItems: props.options,
	      onPopupFocus: onPopupFocus,
	      multiple: multiple,
	      inputValue: inputValue,
	      visible: visible
	    });
	    var hideAction = void 0;
	    if (disabled) {
	      hideAction = [];
	    } else if ((0, util$3.isSingleMode)(props) && !showSearch) {
	      hideAction = ['click'];
	    } else {
	      hideAction = ['blur'];
	    }
	    var popupStyle = _extends({}, dropdownStyle);
	    var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
	    if (this.state.dropdownWidth) {
	      popupStyle[widthProp] = this.state.dropdownWidth + 'px';
	    }

	    return _react2["default"].createElement(
	      _trigger2["default"],
	      _extends({}, props, {
	        showAction: disabled ? [] : this.props.showAction,
	        hideAction: hideAction,
	        ref: this.saveTriggerRef,
	        popupPlacement: 'bottomLeft',
	        builtinPlacements: BUILT_IN_PLACEMENTS,
	        prefixCls: dropdownPrefixCls,
	        popupTransitionName: this.getDropdownTransitionName(),
	        onPopupVisibleChange: props.onDropdownVisibleChange,
	        popup: popupElement,
	        popupAlign: dropdownAlign,
	        popupVisible: visible,
	        getPopupContainer: props.getPopupContainer,
	        popupClassName: (0, _classnames2["default"])(popupClassName),
	        popupStyle: popupStyle
	      }),
	      props.children
	    );
	  };

	  return SelectTrigger;
	}(_react2["default"].Component);

	SelectTrigger.propTypes = {
	  onPopupFocus: _propTypes2["default"].func,
	  onPopupScroll: _propTypes2["default"].func,
	  dropdownMatchSelectWidth: _propTypes2["default"].bool,
	  dropdownAlign: _propTypes2["default"].object,
	  visible: _propTypes2["default"].bool,
	  disabled: _propTypes2["default"].bool,
	  showSearch: _propTypes2["default"].bool,
	  dropdownClassName: _propTypes2["default"].string,
	  multiple: _propTypes2["default"].bool,
	  inputValue: _propTypes2["default"].string,
	  filterOption: _propTypes2["default"].any,
	  options: _propTypes2["default"].any,
	  prefixCls: _propTypes2["default"].string,
	  popupClassName: _propTypes2["default"].string,
	  children: _propTypes2["default"].any,
	  showAction: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  menuItemSelectedIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node])
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.setDropdownWidth = function () {
	    if (!_this2.props.dropdownMatchSelectWidth) {
	      return;
	    }
	    var width = _reactDom2["default"].findDOMNode(_this2).offsetWidth;
	    if (width !== _this2.state.dropdownWidth) {
	      _this2.setState({ dropdownWidth: width });
	    }
	  };

	  this.getInnerMenu = function () {
	    return _this2.dropdownMenuRef && _this2.dropdownMenuRef.menuRef;
	  };

	  this.getPopupDOMNode = function () {
	    return _this2.triggerRef.getPopupDomNode();
	  };

	  this.getDropdownElement = function (newProps) {
	    var props = _this2.props;
	    return _react2["default"].createElement(_DropdownMenu2["default"], _extends({
	      ref: _this2.saveDropdownMenuRef
	    }, newProps, {
	      clsPrefix: _this2.getDropdownPrefixCls(),
	      onMenuSelect: props.onMenuSelect,
	      onMenuDeselect: props.onMenuDeselect,
	      onPopupScroll: props.onPopupScroll,
	      value: props.value,
	      backfillValue: props.backfillValue,
	      firstActiveValue: props.firstActiveValue,
	      defaultActiveFirstOption: props.defaultActiveFirstOption,
	      dropdownMenuStyle: props.dropdownMenuStyle,
	      menuItemSelectedIcon: props.menuItemSelectedIcon
	    }));
	  };

	  this.getDropdownTransitionName = function () {
	    var props = _this2.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = _this2.getDropdownPrefixCls() + '-' + props.animation;
	    }
	    return transitionName;
	  };

	  this.getDropdownPrefixCls = function () {
	    return _this2.props.prefixCls + '-dropdown';
	  };
	};

	exports["default"] = SelectTrigger;


	SelectTrigger.displayName = 'SelectTrigger';
	module.exports = exports['default'];
	});

	unwrapExports(SelectTrigger_1);

	var PropTypes = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SelectPropTypes = undefined;



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function valueType(props, propName, componentName) {
	  var basicType = _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]);

	  var labelInValueShape = _propTypes2["default"].shape({
	    key: basicType.isRequired,
	    label: _propTypes2["default"].node
	  });
	  if (props.labelInValue) {
	    var validate = _propTypes2["default"].oneOfType([_propTypes2["default"].arrayOf(labelInValueShape), labelInValueShape]);
	    var error = validate.apply(undefined, arguments);
	    if (error) {
	      return new Error('Invalid prop `' + propName + '` supplied to `' + componentName + '`, ' + ('when you set `labelInValue` to `true`, `' + propName + '` should in ') + 'shape of `{ key: string | number, label?: ReactNode }`.');
	    }
	  } else if ((props.mode === 'multiple' || props.mode === 'tags' || props.multiple || props.tags) && props[propName] === '') {
	    return new Error('Invalid prop `' + propName + '` of type `string` supplied to `' + componentName + '`, ' + 'expected `array` when `multiple` or `tags` is `true`.');
	  } else {
	    var _validate = _propTypes2["default"].oneOfType([_propTypes2["default"].arrayOf(basicType), basicType]);
	    return _validate.apply(undefined, arguments);
	  }
	} /**
	  * This source code is quoted from rc-select.
	  * homepage: https://github.com/react-component/select
	  */
	var SelectPropTypes = exports.SelectPropTypes = {
	  id: _propTypes2["default"].string,
	  defaultActiveFirstOption: _propTypes2["default"].bool,
	  multiple: _propTypes2["default"].bool,
	  filterOption: _propTypes2["default"].any,
	  children: _propTypes2["default"].any,
	  showSearch: _propTypes2["default"].bool,
	  disabled: _propTypes2["default"].bool,
	  allowClear: _propTypes2["default"].bool,
	  showArrow: _propTypes2["default"].bool,
	  tags: _propTypes2["default"].bool,
	  prefixCls: _propTypes2["default"].string,
	  className: _propTypes2["default"].string,
	  transitionName: _propTypes2["default"].string,
	  optionLabelProp: _propTypes2["default"].string,
	  optionFilterProp: _propTypes2["default"].string,
	  animation: _propTypes2["default"].string,
	  choiceTransitionName: _propTypes2["default"].string,
	  open: _propTypes2["default"].bool,
	  defaultOpen: _propTypes2["default"].bool,
	  onChange: _propTypes2["default"].func,
	  onBlur: _propTypes2["default"].func,
	  onFocus: _propTypes2["default"].func,
	  onSelect: _propTypes2["default"].func,
	  onSearch: _propTypes2["default"].func,
	  onPopupScroll: _propTypes2["default"].func,
	  onMouseEnter: _propTypes2["default"].func,
	  onMouseLeave: _propTypes2["default"].func,
	  onInputKeyDown: _propTypes2["default"].func,
	  placeholder: _propTypes2["default"].any,
	  onDeselect: _propTypes2["default"].func,
	  labelInValue: _propTypes2["default"].bool,
	  value: valueType,
	  defaultValue: valueType,
	  dropdownStyle: _propTypes2["default"].object,
	  maxTagTextLength: _propTypes2["default"].number,
	  maxTagCount: _propTypes2["default"].number,
	  maxTagPlaceholder: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].func]),
	  tokenSeparators: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  getInputElement: _propTypes2["default"].func,
	  showAction: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  clearIcon: _propTypes2["default"].node,
	  inputIcon: _propTypes2["default"].node,
	  removeIcon: _propTypes2["default"].node,
	  menuItemSelectedIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node])
	};
	});

	unwrapExports(PropTypes);
	var PropTypes_1 = PropTypes.SelectPropTypes;

	var RcSelect = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);







	var _classnames3 = _interopRequireDefault(classnames);



	var _beeAnimate2 = _interopRequireDefault(build$a);



	var _componentClasses2 = _interopRequireDefault(componentClasses);





	var _warning2 = _interopRequireDefault(warning_1);



	var _Option2 = _interopRequireDefault(Option_1);





	var _SelectTrigger2 = _interopRequireDefault(SelectTrigger_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-select.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/select
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	function noop() {}

	function chaining() {
	  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
	    fns[_key] = arguments[_key];
	  }

	  return function () {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    // eslint-disable-line
	    // eslint-disable-line
	    for (var i = 0; i < fns.length; i++) {
	      if (fns[i] && typeof fns[i] === 'function') {
	        fns[i].apply(this, args);
	      }
	    }
	  };
	}

	var Select = function (_React$Component) {
	  _inherits(Select, _React$Component);

	  function Select(props) {
	    _classCallCheck(this, Select);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    var optionsInfo = Select.getOptionsInfoFromProps(props);
	    _this.state = {
	      value: Select.getValueFromProps(props, true), // true: use default value
	      inputValue: props.combobox ? Select.getInputValueForCombobox(props, optionsInfo, true // use default value
	      ) : '',
	      open: props.defaultOpen,
	      optionsInfo: optionsInfo,
	      // a flag for aviod redundant getOptionsInfoFromProps call
	      skipBuildOptionsInfo: true
	    };

	    _this.saveInputRef = (0, util$3.saveRef)(_this, 'inputRef');
	    _this.saveInputMirrorRef = (0, util$3.saveRef)(_this, 'inputMirrorRef');
	    _this.saveTopCtrlRef = (0, util$3.saveRef)(_this, 'topCtrlRef');
	    _this.saveSelectTriggerRef = (0, util$3.saveRef)(_this, 'selectTriggerRef');
	    _this.saveRootRef = (0, util$3.saveRef)(_this, 'rootRef');
	    _this.saveSelectionRef = (0, util$3.saveRef)(_this, 'selectionRef');
	    return _this;
	  }

	  Select.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.autoFocus) {
	      this.focus();
	    }
	  };

	  Select.prototype.componentDidUpdate = function componentDidUpdate() {
	    if ((0, util$3.isMultipleOrTags)(this.props)) {
	      var inputNode = this.getInputDOMNode();
	      var mirrorNode = this.getInputMirrorDOMNode();
	      if (inputNode.value) {
	        inputNode.style.width = '';
	        inputNode.style.width = mirrorNode.clientWidth + 'px';
	      } else {
	        inputNode.style.width = '';
	      }
	    }
	    this.forcePopupAlign();
	  };

	  Select.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.clearFocusTime();
	    this.clearBlurTime();
	    if (this.dropdownContainer) {
	      _reactDom2["default"].unmountComponentAtNode(this.dropdownContainer);
	      document.body.removeChild(this.dropdownContainer);
	      this.dropdownContainer = null;
	    }
	  };

	  // combobox ignore


	  Select.prototype.focus = function focus() {
	    if ((0, util$3.isSingleMode)(this.props)) {
	      this.selectionRef.focus();
	    } else {
	      this.getInputDOMNode().focus();
	    }
	  };

	  Select.prototype.blur = function blur() {
	    if ((0, util$3.isSingleMode)(this.props)) {
	      this.selectionRef.blur();
	    } else {
	      this.getInputDOMNode().blur();
	    }
	  };

	  Select.prototype.renderClear = function renderClear() {
	    var _props = this.props,
	        prefixCls = _props.prefixCls,
	        allowClear = _props.allowClear,
	        clearIcon = _props.clearIcon;
	    var _state = this.state,
	        value = _state.value,
	        inputValue = _state.inputValue;

	    var clear = _react2["default"].createElement(
	      'span',
	      _extends({
	        key: 'clear',
	        className: prefixCls + '-selection-clear',
	        onMouseDown: util$3.preventDefaultEvent,
	        style: util$3.UNSELECTABLE_STYLE
	      }, util$3.UNSELECTABLE_ATTRIBUTE, {
	        onClick: this.onClearSelection
	      }),
	      clearIcon || _react2["default"].createElement(
	        'i',
	        { className: prefixCls + '-selection-clear-icon' },
	        '\xD7'
	      )
	    );
	    if (!allowClear) {
	      return null;
	    }
	    if ((0, util$3.isCombobox)(this.props)) {
	      if (inputValue) {
	        return clear;
	      }
	      return null;
	    }
	    if (inputValue || value.length) {
	      return clear;
	    }
	    return null;
	  };

	  Select.prototype.render = function render() {
	    var _rootCls;

	    var props = this.props;
	    var multiple = (0, util$3.isMultipleOrTags)(props);
	    var state = this.state;
	    var className = props.className,
	        disabled = props.disabled,
	        prefixCls = props.prefixCls,
	        inputIcon = props.inputIcon;

	    var ctrlNode = this.renderTopControlNode();
	    var open = this.state.open;

	    if (open) {
	      this._options = this.renderFilterOptions();
	    }
	    var realOpen = this.getRealOpenState();
	    var options = this._options || [];
	    var dataOrAriaAttributeProps = {};
	    for (var key in props) {
	      if (Object.prototype.hasOwnProperty.call(props, key) && (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-' || key === 'role')) {
	        dataOrAriaAttributeProps[key] = props[key];
	      }
	    }
	    var extraSelectionProps = _extends({}, dataOrAriaAttributeProps);
	    if (!(0, util$3.isMultipleOrTagsOrCombobox)(props)) {
	      extraSelectionProps = _extends({}, extraSelectionProps, {
	        onKeyDown: this.onKeyDown,
	        tabIndex: props.disabled ? -1 : 0
	      });
	    }
	    var rootCls = (_rootCls = {}, _defineProperty(_rootCls, className, !!className), _defineProperty(_rootCls, prefixCls, 1), _defineProperty(_rootCls, prefixCls + '-open', open), _defineProperty(_rootCls, prefixCls + '-focused', open || !!this._focused), _defineProperty(_rootCls, prefixCls + '-combobox', (0, util$3.isCombobox)(props)), _defineProperty(_rootCls, prefixCls + '-disabled', disabled), _defineProperty(_rootCls, prefixCls + '-enabled', !disabled), _defineProperty(_rootCls, prefixCls + '-allow-clear', !!props.allowClear), _defineProperty(_rootCls, prefixCls + '-no-arrow', !props.showArrow), _rootCls);
	    return _react2["default"].createElement(
	      _SelectTrigger2["default"],
	      {
	        open: props.open,
	        onPopupFocus: this.onPopupFocus,
	        onMouseEnter: this.props.onMouseEnter,
	        onMouseLeave: this.props.onMouseLeave,
	        dropdownAlign: props.dropdownAlign,
	        dropdownClassName: props.dropdownClassName,
	        dropdownMatchSelectWidth: props.dropdownMatchSelectWidth,
	        defaultActiveFirstOption: props.defaultActiveFirstOption,
	        dropdownMenuStyle: props.dropdownMenuStyle,
	        transitionName: props.transitionName,
	        animation: props.animation,
	        prefixCls: props.prefixCls,
	        dropdownStyle: props.dropdownStyle,
	        combobox: props.combobox,
	        showSearch: props.showSearch,
	        options: options,
	        multiple: multiple,
	        disabled: disabled,
	        visible: realOpen,
	        inputValue: state.inputValue,
	        value: state.value,
	        backfillValue: state.backfillValue,
	        firstActiveValue: props.firstActiveValue,
	        onDropdownVisibleChange: this.onDropdownVisibleChange,
	        getPopupContainer: props.getPopupContainer,
	        onMenuSelect: this.onMenuSelect,
	        onMenuDeselect: this.onMenuDeselect,
	        onPopupScroll: props.onPopupScroll,
	        showAction: props.showAction,
	        ref: this.saveSelectTriggerRef,
	        clsPrefix: props.clsPrefix + '-dropdown',
	        menuItemSelectedIcon: props.menuItemSelectedIcon,
	        popData: props.popData
	      },
	      _react2["default"].createElement(
	        'div',
	        {
	          id: props.id,
	          style: props.style,
	          ref: this.saveRootRef,
	          onBlur: this.onOuterBlur,
	          onFocus: this.onOuterFocus,
	          onClick: this.onOuterClick //sp
	          , className: (0, _classnames3["default"])(rootCls),
	          onMouseDown: this.markMouseDown,
	          onMouseUp: this.markMouseLeave,
	          onMouseOut: this.markMouseLeave
	        },
	        _react2["default"].createElement(
	          'div',
	          _extends({
	            ref: this.saveSelectionRef,
	            key: 'selection',
	            className: prefixCls + '-selection\n            ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),
	            role: 'combobox',
	            'aria-autocomplete': 'list',
	            'aria-haspopup': 'true',
	            'aria-expanded': realOpen
	          }, extraSelectionProps),
	          ctrlNode,
	          this.renderClear(),
	          !props.showArrow ? null : //sp
	          _react2["default"].createElement(
	            'span',
	            _extends({
	              key: 'arrow',
	              className: prefixCls + '-arrow',
	              style: util$3.UNSELECTABLE_STYLE
	            }, util$3.UNSELECTABLE_ATTRIBUTE, {
	              onClick: this.onArrowClick
	            }),
	            inputIcon || _react2["default"].createElement('i', { className: prefixCls + '-arrow-icon' })
	          )
	        )
	      )
	    );
	  };

	  return Select;
	}(_react2["default"].Component);

	Select.propTypes = PropTypes.SelectPropTypes;
	Select.defaultProps = {
	  prefixCls: 'u-select',
	  defaultOpen: false,
	  labelInValue: false,
	  defaultActiveFirstOption: true,
	  showSearch: true,
	  allowClear: false,
	  placeholder: '',
	  onChange: noop,
	  onFocus: noop,
	  onBlur: noop,
	  onSelect: noop,
	  onSearch: noop,
	  onDeselect: noop,
	  onInputKeyDown: noop,
	  showArrow: true,
	  dropdownMatchSelectWidth: true,
	  dropdownStyle: {},
	  dropdownMenuStyle: {},
	  optionFilterProp: 'value',
	  optionLabelProp: 'value',
	  notFoundContent: 'Not Found',
	  backfill: false,
	  showAction: ['click'],
	  tokenSeparators: [],
	  autoClearSearchValue: true,
	  onKeyDown: noop
	};

	Select.getDerivedStateFromProps = function (nextProps, prevState) {
	  var optionsInfo = prevState.skipBuildOptionsInfo ? prevState.optionsInfo : Select.getOptionsInfoFromProps(nextProps, prevState);

	  var newState = {
	    optionsInfo: optionsInfo,
	    skipBuildOptionsInfo: false
	  };

	  if ('open' in nextProps) {
	    newState.open = nextProps.open;
	  }

	  if ('value' in nextProps) {
	    var value = Select.getValueFromProps(nextProps);
	    newState.value = value;
	    if (nextProps.combobox) {
	      newState.inputValue = Select.getInputValueForCombobox(nextProps, optionsInfo);
	    }
	  }
	  return newState;
	};

	Select.getOptionsFromChildren = function (children) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	  _react2["default"].Children.forEach(children, function (child) {
	    if (!child) {
	      return;
	    }
	    if (child.type.isSelectOptGroup) {
	      Select.getOptionsFromChildren(child.props.children, options);
	    } else {
	      options.push(child);
	    }
	  });
	  return options;
	};

	Select.getInputValueForCombobox = function (props, optionsInfo, useDefaultValue) {
	  var value = [];
	  if ('value' in props && !useDefaultValue) {
	    value = (0, util$3.toArray)(props.value);
	  }
	  if ('defaultValue' in props && useDefaultValue) {
	    value = (0, util$3.toArray)(props.defaultValue);
	  }
	  if (value.length) {
	    value = value[0];
	  } else {
	    return '';
	  }
	  var label = value;
	  if (props.labelInValue) {
	    label = value.label;
	  } else if (optionsInfo[(0, util$3.getMapKey)(value)]) {
	    label = optionsInfo[(0, util$3.getMapKey)(value)].label;
	  }
	  if (label === undefined) {
	    label = '';
	  }
	  return label;
	};

	Select.getLabelFromOption = function (props, option) {
	  return (0, util$3.getPropValue)(option, props.optionLabelProp);
	};

	Select.getOptionsInfoFromProps = function (props, preState) {
	  var options = Select.getOptionsFromChildren(props.children);
	  var optionsInfo = {};
	  options.forEach(function (option) {
	    var singleValue = (0, util$3.getValuePropValue)(option);
	    optionsInfo[(0, util$3.getMapKey)(singleValue)] = {
	      option: option,
	      value: singleValue,
	      label: Select.getLabelFromOption(props, option),
	      title: option.props.title
	    };
	  });
	  if (preState) {
	    // keep option info in pre state value.
	    var oldOptionsInfo = preState.optionsInfo;
	    var value = preState.value;
	    value.forEach(function (v) {
	      var key = (0, util$3.getMapKey)(v);
	      if (!optionsInfo[key] && oldOptionsInfo[key] !== undefined) {
	        optionsInfo[key] = oldOptionsInfo[key];
	      }
	    });
	  }
	  return optionsInfo;
	};

	Select.getValueFromProps = function (props, useDefaultValue) {
	  var value = [];
	  if ('value' in props && !useDefaultValue) {
	    value = (0, util$3.toArray)(props.value);
	  }
	  if ('defaultValue' in props && useDefaultValue) {
	    value = (0, util$3.toArray)(props.defaultValue);
	  }
	  if (props.labelInValue) {
	    value = value.map(function (v) {
	      return v.key;
	    });
	  }
	  return value;
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.onInputChange = function (event) {
	    var tokenSeparators = _this2.props.tokenSeparators;

	    var val = event.target.value;
	    if ((0, util$3.isMultipleOrTags)(_this2.props) && tokenSeparators.length && (0, util$3.includesSeparators)(val, tokenSeparators)) {
	      var nextValue = _this2.getValueByInput(val);
	      if (nextValue !== undefined) {
	        _this2.fireChange(nextValue);
	      }
	      _this2.setOpenState(false, true);
	      _this2.setInputValue('', false);
	      return;
	    }
	    _this2.setInputValue(val);
	    _this2.setState({
	      open: true
	    });
	    if ((0, util$3.isCombobox)(_this2.props)) {
	      _this2.fireChange([val]);
	    }
	  };

	  this.onDropdownVisibleChange = function (open) {
	    if (open && !_this2._focused) {
	      _this2.clearBlurTime();
	      _this2.timeoutFocus();
	      _this2._focused = true;
	      _this2.updateFocusClassName();
	    }
	    _this2.setOpenState(open);
	  };

	  this.onKeyDown = function (event) {
	    var open = _this2.state.open;
	    var _props2 = _this2.props,
	        disabled = _props2.disabled,
	        onKeyDown = _props2.onKeyDown,
	        enterKeyDown = _props2.enterKeyDown;

	    if (disabled) {
	      return;
	    }
	    var keyCode = event.keyCode;
	    if (open && !_this2.getInputDOMNode()) {
	      _this2.onInputKeyDown(event);
	    } else if (keyCode === lib$1.KeyCode.DOWN) {
	      if (!open) _this2.setOpenState(true);
	      event.preventDefault();
	    } else if (keyCode === lib$1.KeyCode.ENTER || keyCode === lib$1.KeyCode.SPACE) {
	      if (!open && enterKeyDown) _this2.setOpenState(true);
	      event.preventDefault();
	    }
	    onKeyDown(event); //sp
	  };

	  this.onInputKeyDown = function (event) {
	    var props = _this2.props;
	    if (props.disabled) {
	      return;
	    }
	    var state = _this2.state;
	    var keyCode = event.keyCode;
	    if ((0, util$3.isMultipleOrTags)(props) && !event.target.value && keyCode === lib$1.KeyCode.BACKSPACE) {
	      event.preventDefault();
	      var value = state.value;

	      if (value.length) {
	        _this2.removeSelected(value[value.length - 1]);
	      }
	      return;
	    }
	    if (keyCode === lib$1.KeyCode.DOWN) {
	      if (!state.open) {
	        _this2.openIfHasChildren();
	        event.preventDefault();
	        event.stopPropagation();
	        return;
	      }
	    } else if (keyCode === lib$1.KeyCode.ENTER && state.open) {
	      // Aviod trigger form submit when select item
	      // https://github.com/ant-design/ant-design/issues/10861
	      event.preventDefault();
	    } else if (keyCode === lib$1.KeyCode.ESC) {
	      if (state.open) {
	        _this2.setOpenState(false);
	        event.preventDefault();
	        event.stopPropagation();
	      }
	      if (props.showSearch) props.onKeyDown(event); //sp
	      return;
	    }

	    if (_this2.getRealOpenState(state)) {
	      var menu = _this2.selectTriggerRef.getInnerMenu();
	      if (menu && menu.onKeyDown(event, _this2.handleBackfill)) {
	        event.preventDefault();
	        event.stopPropagation();
	      }
	    }
	  };

	  this.onMenuSelect = function (_ref) {
	    var item = _ref.item;

	    if (!item) {
	      return;
	    }

	    var value = _this2.state.value;
	    var props = _this2.props;
	    var selectedValue = (0, util$3.getValuePropValue)(item);
	    var lastValue = value[value.length - 1];
	    _this2.fireSelect(selectedValue);
	    if ((0, util$3.isMultipleOrTags)(props)) {
	      if ((0, util$3.findIndexInValueBySingleValue)(value, selectedValue) !== -1) {
	        return;
	      }
	      value = value.concat([selectedValue]);
	    } else {
	      if (lastValue !== undefined && lastValue === selectedValue && selectedValue !== _this2.state.backfillValue) {
	        _this2.setOpenState(false, true);
	        return;
	      }
	      value = [selectedValue];
	      _this2.setOpenState(false, true);
	    }
	    _this2.fireChange(value);
	    var inputValue = void 0;
	    if ((0, util$3.isCombobox)(props)) {
	      inputValue = (0, util$3.getPropValue)(item, props.optionLabelProp);
	    } else {
	      inputValue = '';
	    }
	    if (props.autoClearSearchValue) {
	      _this2.setInputValue(inputValue, false);
	    }
	  };

	  this.onMenuDeselect = function (_ref2) {
	    var item = _ref2.item,
	        domEvent = _ref2.domEvent;

	    if (domEvent.type === 'keydown' && domEvent.keyCode === lib$1.KeyCode.ENTER) {
	      _this2.removeSelected((0, util$3.getValuePropValue)(item));
	      return;
	    }
	    if (domEvent.type === 'click') {
	      _this2.removeSelected((0, util$3.getValuePropValue)(item));
	    }
	    var props = _this2.props;

	    if (props.autoClearSearchValue) {
	      _this2.setInputValue('', false);
	    }
	  };

	  this.onArrowClick = function (e) {
	    e.stopPropagation();
	    e.preventDefault();
	    _this2.props.onFocus(_this2.state.value);
	    if (!_this2.props.disabled) {
	      _this2.setOpenState(!_this2.state.open, !_this2.state.open);
	    }
	  };

	  this.onPlaceholderClick = function () {
	    if (_this2.getInputDOMNode()) {
	      _this2.getInputDOMNode().focus();
	    }
	  };

	  this.onOuterFocus = function (e) {
	    if (_this2.props.disabled) {
	      e.preventDefault();
	      return;
	    }
	    _this2.clearBlurTime();
	    if (!(0, util$3.isMultipleOrTagsOrCombobox)(_this2.props) && e.target === _this2.getInputDOMNode()) {
	      return;
	    }
	    if (_this2._focused) {
	      return;
	    }
	    _this2._focused = true;
	    _this2.updateFocusClassName();
	    if (!_this2._mouseDown) {
	      _this2.timeoutFocus();
	    }
	  };

	  this.onPopupFocus = function () {
	    // fix ie scrollbar, focus element again
	    _this2.maybeFocus(true, true);
	  };

	  this.onOuterBlur = function (e) {
	    if (_this2.props.disabled) {
	      e.preventDefault();
	      return;
	    }
	    _this2.blurTimer = setTimeout(function () {
	      _this2._focused = false;
	      _this2.updateFocusClassName();
	      var props = _this2.props;
	      var value = _this2.state.value;
	      var inputValue = _this2.state.inputValue;

	      if ((0, util$3.isSingleMode)(props) && props.showSearch && inputValue && props.defaultActiveFirstOption) {
	        var options = _this2._options || [];
	        if (options.length) {
	          var firstOption = (0, util$3.findFirstMenuItem)(options);
	          if (firstOption) {
	            value = [(0, util$3.getValuePropValue)(firstOption)];
	            _this2.fireChange(value);
	          }
	        }
	      } else if ((0, util$3.isMultipleOrTags)(props) && inputValue) {
	        if (_this2._mouseDown) {
	          // need update dropmenu when not blur
	          _this2.setInputValue('');
	        } else {
	          // why not use setState?
	          _this2.state.inputValue = _this2.getInputDOMNode().value = '';
	        }

	        value = _this2.getValueByInput(inputValue);
	        if (value !== undefined) {
	          _this2.fireChange(value);
	        }
	      }

	      // if click the rest space of Select in multiple mode
	      if ((0, util$3.isMultipleOrTags)(props) && _this2._mouseDown) {
	        _this2.maybeFocus(true, true);
	        _this2._mouseDown = false;
	        return;
	      }
	      _this2.setOpenState(false);
	      props.onBlur(_this2.getVLForOnChange(value));
	    }, 10);
	  };

	  this.onClearSelection = function (event) {
	    var props = _this2.props;
	    var state = _this2.state;
	    if (props.disabled) {
	      return;
	    }
	    var inputValue = state.inputValue,
	        value = state.value;

	    event.stopPropagation();
	    if (inputValue || value.length) {
	      if (value.length) {
	        _this2.fireChange([]);
	      }
	      _this2.setOpenState(false, true);
	      if (inputValue) {
	        _this2.setInputValue('');
	      }
	    }
	  };

	  this.onChoiceAnimationLeave = function () {
	    _this2.forcePopupAlign();
	  };

	  this.getOptionInfoBySingleValue = function (value, optionsInfo) {
	    var info = void 0;
	    optionsInfo = optionsInfo || _this2.state.optionsInfo;
	    if (optionsInfo[(0, util$3.getMapKey)(value)]) {
	      info = optionsInfo[(0, util$3.getMapKey)(value)];
	    }
	    if (info) {
	      return info;
	    }
	    var defaultLabel = value;
	    if (_this2.props.labelInValue) {
	      var label = (0, util$3.getLabelFromPropsValue)(_this2.props.value, value);
	      if (label !== undefined) {
	        defaultLabel = label;
	      }
	    }
	    var defaultInfo = {
	      option: _react2["default"].createElement(
	        _Option2["default"],
	        { value: value, key: value },
	        value
	      ),
	      value: value,
	      label: defaultLabel
	    };
	    return defaultInfo;
	  };

	  this.getOptionBySingleValue = function (value) {
	    var _getOptionInfoBySingl = _this2.getOptionInfoBySingleValue(value),
	        option = _getOptionInfoBySingl.option;

	    return option;
	  };

	  this.getOptionsBySingleValue = function (values) {
	    return values.map(function (value) {
	      return _this2.getOptionBySingleValue(value);
	    });
	  };

	  this.getValueByLabel = function (label) {
	    if (label === undefined) {
	      return null;
	    }
	    var value = null;
	    Object.keys(_this2.state.optionsInfo).forEach(function (key) {
	      var info = _this2.state.optionsInfo[key];
	      if ((0, util$3.toArray)(info.label).join('') === label) {
	        value = info.value;
	      }
	    });
	    return value;
	  };

	  this.getVLBySingleValue = function (value) {
	    if (_this2.props.labelInValue) {
	      return {
	        key: value,
	        label: _this2.getLabelBySingleValue(value)
	      };
	    }
	    return value;
	  };

	  this.getVLForOnChange = function (vls_) {
	    var vls = vls_;
	    if (vls !== undefined) {
	      if (!_this2.props.labelInValue) {
	        vls = vls.map(function (v) {
	          return v;
	        });
	      } else {
	        vls = vls.map(function (vl) {
	          return {
	            key: vl,
	            label: _this2.getLabelBySingleValue(vl)
	          };
	        });
	      }
	      return (0, util$3.isMultipleOrTags)(_this2.props) ? vls : vls[0];
	    }
	    return vls;
	  };

	  this.getLabelBySingleValue = function (value, optionsInfo) {
	    var _getOptionInfoBySingl2 = _this2.getOptionInfoBySingleValue(value, optionsInfo),
	        label = _getOptionInfoBySingl2.label;

	    return label;
	  };

	  this.getDropdownContainer = function () {
	    if (!_this2.dropdownContainer) {
	      _this2.dropdownContainer = document.createElement('div');
	      document.body.appendChild(_this2.dropdownContainer);
	    }
	    return _this2.dropdownContainer;
	  };

	  this.getPlaceholderElement = function () {
	    var props = _this2.props,
	        state = _this2.state;

	    var hidden = false;
	    if (state.inputValue) {
	      hidden = true;
	    }
	    if (state.value.length) {
	      hidden = true;
	    }
	    if ((0, util$3.isCombobox)(props) && state.value.length === 1 && !state.value[0]) {
	      hidden = false;
	    }
	    var placeholder = props.placeholder;
	    if (placeholder) {
	      return _react2["default"].createElement(
	        'div',
	        _extends({
	          onMouseDown: util$3.preventDefaultEvent,
	          style: _extends({
	            display: hidden ? 'none' : 'block'
	          }, util$3.UNSELECTABLE_STYLE)
	        }, util$3.UNSELECTABLE_ATTRIBUTE, {
	          onClick: _this2.onPlaceholderClick,
	          className: props.prefixCls + '-selection-placeholder'
	        }),
	        placeholder
	      );
	    }
	    return null;
	  };

	  this.getInputElement = function () {
	    var props = _this2.props;
	    var inputElement = props.getInputElement ? props.getInputElement() : _react2["default"].createElement('input', { id: props.id, autoComplete: 'off' });
	    var inputCls = (0, _classnames3["default"])(inputElement.props.className, _defineProperty({}, props.prefixCls + '-search-field', true));
	    // https://github.com/ant-design/ant-design/issues/4992#issuecomment-281542159
	    // Add space to the end of the inputValue as the width measurement tolerance
	    return _react2["default"].createElement(
	      'div',
	      { className: props.prefixCls + '-search-field-wrap' },
	      _react2["default"].cloneElement(inputElement, {
	        ref: _this2.saveInputRef,
	        onChange: _this2.onInputChange,
	        onKeyDown: chaining(_this2.onInputKeyDown, inputElement.props.onKeyDown, _this2.props.onInputKeyDown),
	        value: _this2.state.inputValue,
	        disabled: props.disabled,
	        className: inputCls
	      }),
	      _react2["default"].createElement(
	        'span',
	        {
	          ref: _this2.saveInputMirrorRef,
	          className: props.prefixCls + '-search-field-mirror'
	        },
	        _this2.state.inputValue,
	        '\xA0'
	      )
	    );
	  };

	  this.getInputDOMNode = function () {
	    return _this2.topCtrlRef ? _this2.topCtrlRef.querySelector('input,textarea,div[contentEditable]') : _this2.inputRef;
	  };

	  this.getInputMirrorDOMNode = function () {
	    return _this2.inputMirrorRef;
	  };

	  this.getPopupDOMNode = function () {
	    return _this2.selectTriggerRef.getPopupDOMNode();
	  };

	  this.getPopupMenuComponent = function () {
	    return _this2.selectTriggerRef.getInnerMenu();
	  };

	  this.setOpenState = function (open, needFocus) {
	    var props = _this2.props,
	        state = _this2.state;

	    if (state.open === open) {
	      _this2.maybeFocus(open, needFocus);
	      return;
	    }

	    if (_this2.props.onDropdownVisibleChange) {
	      _this2.props.onDropdownVisibleChange(open);
	    }

	    var nextState = {
	      open: open,
	      backfillValue: undefined
	    };
	    // clear search input value when open is false in singleMode.
	    if (!open && (0, util$3.isSingleMode)(props) && props.showSearch) {
	      _this2.setInputValue('', false);
	    }
	    if (!open) {
	      _this2.maybeFocus(open, needFocus);
	    }
	    _this2.setState(nextState, function () {
	      if (open) {
	        _this2.maybeFocus(open, needFocus);
	      }
	    });
	  };

	  this.setInputValue = function (inputValue) {
	    var fireSearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	    if (inputValue !== _this2.state.inputValue) {
	      _this2.setState({
	        inputValue: inputValue
	      }, _this2.forcePopupAlign);
	      if (fireSearch) {
	        _this2.props.onSearch(inputValue);
	      }
	    }
	  };

	  this.getValueByInput = function (string) {
	    var _props3 = _this2.props,
	        multiple = _props3.multiple,
	        tokenSeparators = _props3.tokenSeparators;

	    var nextValue = _this2.state.value;
	    var hasNewValue = false;
	    (0, util$3.splitBySeparators)(string, tokenSeparators).forEach(function (label) {
	      var selectedValue = [label];
	      if (multiple) {
	        var value = _this2.getValueByLabel(label);
	        if (value && (0, util$3.findIndexInValueBySingleValue)(nextValue, value) === -1) {
	          nextValue = nextValue.concat(value);
	          hasNewValue = true;
	          _this2.fireSelect(value);
	        }
	      } else {
	        // tag
	        if ((0, util$3.findIndexInValueBySingleValue)(nextValue, label) === -1) {
	          nextValue = nextValue.concat(selectedValue);
	          hasNewValue = true;
	          _this2.fireSelect(label);
	        }
	      }
	    });
	    return hasNewValue ? nextValue : undefined;
	  };

	  this.getRealOpenState = function (state) {
	    var _open = _this2.props.open;

	    if (typeof _open === 'boolean') {
	      return _open;
	    }
	    var open = (state || _this2.state).open;
	    var options = _this2._options || [];
	    if ((0, util$3.isMultipleOrTagsOrCombobox)(_this2.props) || !_this2.props.showSearch) {
	      if (open && !options.length) {
	        open = false;
	      }
	    }
	    return open;
	  };

	  this.markMouseDown = function () {
	    _this2._mouseDown = true;
	  };

	  this.markMouseLeave = function () {
	    _this2._mouseDown = false;
	  };

	  this.handleBackfill = function (item) {
	    if (!_this2.props.backfill || !((0, util$3.isSingleMode)(_this2.props) || (0, util$3.isCombobox)(_this2.props))) {
	      return;
	    }

	    var key = (0, util$3.getValuePropValue)(item);

	    if ((0, util$3.isCombobox)(_this2.props)) {
	      _this2.setInputValue(key, false);
	    }

	    _this2.setState({
	      value: [key],
	      backfillValue: key
	    });
	  };

	  this.filterOption = function (input, child) {
	    var defaultFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : util$3.defaultFilterFn;
	    var value = _this2.state.value;

	    var lastValue = value[value.length - 1];
	    if (!input || lastValue && lastValue === _this2.state.backfillValue) {
	      return true;
	    }
	    var filterFn = _this2.props.filterOption;
	    if ('filterOption' in _this2.props) {
	      if (_this2.props.filterOption === true) {
	        filterFn = defaultFilter;
	      }
	    } else {
	      filterFn = defaultFilter;
	    }

	    if (!filterFn) {
	      return true;
	    } else if (typeof filterFn === 'function') {
	      return filterFn.call(_this2, input, child);
	    } else if (child.props.disabled) {
	      return false;
	    }
	    return true;
	  };

	  this.timeoutFocus = function () {
	    if (_this2.focusTimer) {
	      _this2.clearFocusTime();
	    }
	    _this2.focusTimer = setTimeout(function () {
	      _this2.props.onFocus();
	    }, 10);
	  };

	  this.clearFocusTime = function () {
	    if (_this2.focusTimer) {
	      clearTimeout(_this2.focusTimer);
	      _this2.focusTimer = null;
	    }
	  };

	  this.clearBlurTime = function () {
	    if (_this2.blurTimer) {
	      clearTimeout(_this2.blurTimer);
	      _this2.blurTimer = null;
	    }
	  };

	  this.updateFocusClassName = function () {
	    var rootRef = _this2.rootRef,
	        props = _this2.props;
	    // avoid setState and its side effect

	    if (_this2._focused) {
	      (0, _componentClasses2["default"])(rootRef).add(props.prefixCls + '-focused');
	    } else {
	      (0, _componentClasses2["default"])(rootRef).remove(props.prefixCls + '-focused');
	    }
	  };

	  this.maybeFocus = function (open, needFocus) {
	    if (needFocus || open) {
	      var input = _this2.getInputDOMNode();
	      var _document = document,
	          activeElement = _document.activeElement;

	      if (input && (open || (0, util$3.isMultipleOrTagsOrCombobox)(_this2.props))) {
	        if (activeElement !== input) {
	          input.focus();
	          _this2._focused = true;
	        }
	      } else if (activeElement !== _this2.selectionRef) {
	        _this2.selectionRef.focus();
	        _this2._focused = true;
	      }
	    }
	  };

	  this.removeSelected = function (selectedKey, e) {
	    var props = _this2.props;
	    if (props.disabled || _this2.isChildDisabled(selectedKey)) {
	      return;
	    }

	    // Do not trigger Trigger popup
	    if (e && e.stopPropagation) {
	      e.stopPropagation();
	    }

	    var value = _this2.state.value.filter(function (singleValue) {
	      return singleValue !== selectedKey;
	    });
	    var canMultiple = (0, util$3.isMultipleOrTags)(props);

	    if (canMultiple) {
	      var event = selectedKey;
	      if (props.labelInValue) {
	        event = {
	          key: selectedKey,
	          label: _this2.getLabelBySingleValue(selectedKey)
	        };
	      }
	      props.onDeselect(event, _this2.getOptionBySingleValue(selectedKey));
	    }
	    _this2.fireChange(value);
	  };

	  this.openIfHasChildren = function () {
	    var props = _this2.props;
	    if (_react2["default"].Children.count(props.children) || (0, util$3.isSingleMode)(props)) {
	      _this2.setOpenState(true);
	    }
	  };

	  this.fireSelect = function (value) {
	    _this2.props.onSelect(_this2.getVLBySingleValue(value), _this2.getOptionBySingleValue(value));
	  };

	  this.fireChange = function (value) {
	    var props = _this2.props;
	    if (!('value' in props)) {
	      _this2.setState({
	        value: value
	      }, _this2.forcePopupAlign);
	    }
	    var vls = _this2.getVLForOnChange(value);
	    var options = _this2.getOptionsBySingleValue(value);
	    props.onChange(vls, (0, util$3.isMultipleOrTags)(_this2.props) ? options : options[0]);
	  };

	  this.isChildDisabled = function (key) {
	    return (0, lib$1.toArray)(_this2.props.children).some(function (child) {
	      var childValue = (0, util$3.getValuePropValue)(child);
	      return childValue === key && child.props && child.props.disabled;
	    });
	  };

	  this.forcePopupAlign = function () {
	    if (!_this2.state.open) {
	      return;
	    }
	    _this2.selectTriggerRef.triggerRef.forcePopupAlign();
	  };

	  this.renderFilterOptions = function () {
	    var inputValue = _this2.state.inputValue;
	    var _props4 = _this2.props,
	        children = _props4.children,
	        tags = _props4.tags,
	        filterOption = _props4.filterOption,
	        notFoundContent = _props4.notFoundContent;

	    var menuItems = [];
	    var childrenKeys = [];
	    var options = _this2.renderFilterOptionsFromChildren(children, childrenKeys, menuItems);
	    if (tags) {
	      // tags value must be string
	      var value = _this2.state.value;
	      value = value.filter(function (singleValue) {
	        return childrenKeys.indexOf(singleValue) === -1 && (!inputValue || String(singleValue).indexOf(String(inputValue)) > -1);
	      });
	      value.forEach(function (singleValue) {
	        var key = singleValue;
	        var menuItem = _react2["default"].createElement(
	          Menu.Item,
	          {
	            style: util$3.UNSELECTABLE_STYLE,
	            role: 'option',
	            attribute: util$3.UNSELECTABLE_ATTRIBUTE,
	            value: key,
	            key: key
	          },
	          key
	        );
	        options.push(menuItem);
	        menuItems.push(menuItem);
	      });
	      if (inputValue) {
	        var notFindInputItem = menuItems.every(function (option) {
	          // this.filterOption return true has two meaning,
	          // 1, some one exists after filtering
	          // 2, filterOption is set to false
	          // condition 2 does not mean the option has same value with inputValue
	          var filterFn = function filterFn() {
	            return (0, util$3.getValuePropValue)(option) === inputValue;
	          };
	          if (filterOption !== false) {
	            return !_this2.filterOption.call(_this2, inputValue, option, filterFn);
	          }
	          return !filterFn();
	        });
	        if (notFindInputItem) {
	          options.unshift(_react2["default"].createElement(
	            Menu.Item,
	            {
	              style: util$3.UNSELECTABLE_STYLE,
	              role: 'option',
	              attribute: util$3.UNSELECTABLE_ATTRIBUTE,
	              value: inputValue,
	              key: inputValue
	            },
	            inputValue
	          ));
	        }
	      }
	    }

	    if (!options.length && notFoundContent) {
	      options = [_react2["default"].createElement(
	        Menu.Item,
	        {
	          style: util$3.UNSELECTABLE_STYLE,
	          attribute: util$3.UNSELECTABLE_ATTRIBUTE,
	          disabled: true,
	          role: 'option',
	          value: 'NOT_FOUND',
	          key: 'NOT_FOUND'
	        },
	        notFoundContent
	      )];
	    }
	    return options;
	  };

	  this.renderFilterOptionsFromChildren = function (children, childrenKeys, menuItems) {
	    var sel = [];
	    var props = _this2.props;
	    var inputValue = _this2.state.inputValue;

	    var tags = props.tags;
	    _react2["default"].Children.forEach(children, function (child) {
	      if (!child) {
	        return;
	      }
	      if (child.type.isSelectOptGroup) {
	        var innerItems = _this2.renderFilterOptionsFromChildren(child.props.children, childrenKeys, menuItems);
	        if (innerItems.length) {
	          var label = child.props.label;
	          var key = child.key;
	          if (!key && typeof label === 'string') {
	            key = label;
	          } else if (!label && key) {
	            label = key;
	          }
	          sel.push(_react2["default"].createElement(
	            Menu.ItemGroup,
	            { key: key, title: label },
	            innerItems
	          ));
	        }
	        return;
	      }

	      (0, _warning2["default"])(child.type.isSelectOption, 'the children of `Select` should be `Select.Option` or `Select.OptGroup`, ' + ('instead of `' + (child.type.name || child.type.displayName || child.type) + '`.'));

	      var childValue = (0, util$3.getValuePropValue)(child);

	      (0, util$3.validateOptionValue)(childValue, _this2.props);

	      if (_this2.filterOption(inputValue, child)) {
	        var menuItem = _react2["default"].createElement(Menu.Item, _extends({
	          style: util$3.UNSELECTABLE_STYLE,
	          attribute: util$3.UNSELECTABLE_ATTRIBUTE,
	          value: childValue,
	          key: childValue,
	          role: 'option'
	        }, child.props));
	        sel.push(menuItem);
	        menuItems.push(menuItem);
	      }

	      if (tags) {
	        childrenKeys.push(childValue);
	      }
	    });

	    return sel;
	  };

	  this.renderTopControlNode = function () {
	    var _state2 = _this2.state,
	        value = _state2.value,
	        open = _state2.open,
	        inputValue = _state2.inputValue;

	    var props = _this2.props;
	    var choiceTransitionName = props.choiceTransitionName,
	        prefixCls = props.prefixCls,
	        maxTagTextLength = props.maxTagTextLength,
	        maxTagCount = props.maxTagCount,
	        maxTagPlaceholder = props.maxTagPlaceholder,
	        showSearch = props.showSearch,
	        removeIcon = props.removeIcon;

	    var className = prefixCls + '-selection-rendered';
	    // search input is inside topControlNode in single, multiple & combobox. 2016/04/13
	    var innerNode = null;
	    if ((0, util$3.isSingleMode)(props)) {
	      var selectedValue = null;
	      if (value.length) {
	        var showSelectedValue = false;
	        var opacity = 1;
	        if (!showSearch) {
	          showSelectedValue = true;
	        } else if (open) {
	          showSelectedValue = !inputValue;
	          if (showSelectedValue) {
	            opacity = 0.4;
	          }
	        } else {
	          showSelectedValue = true;
	        }
	        var singleValue = value[0];

	        var _getOptionInfoBySingl3 = _this2.getOptionInfoBySingleValue(singleValue),
	            label = _getOptionInfoBySingl3.label,
	            title = _getOptionInfoBySingl3.title;

	        selectedValue = _react2["default"].createElement(
	          'div',
	          {
	            key: 'value',
	            className: prefixCls + '-selection-selected-value',
	            title: (0, util$3.toTitle)(title || label),
	            style: {
	              display: showSelectedValue ? 'block' : 'none',
	              opacity: opacity
	            }
	          },
	          label
	        );
	      }
	      if (!showSearch) {
	        innerNode = [selectedValue];
	      } else {
	        innerNode = [selectedValue, _react2["default"].createElement(
	          'div',
	          {
	            className: prefixCls + '-search ' + prefixCls + '-search--inline',
	            key: 'input',
	            style: {
	              display: open ? 'block' : 'none'
	            }
	          },
	          _this2.getInputElement()
	        )];
	      }
	    } else {
	      var selectedValueNodes = [];
	      var limitedCountValue = value;
	      var maxTagPlaceholderEl = void 0;
	      if (maxTagCount !== undefined && value.length > maxTagCount) {
	        limitedCountValue = limitedCountValue.slice(0, maxTagCount);
	        var omittedValues = _this2.getVLForOnChange(value.slice(maxTagCount, value.length));
	        var content = '+ ' + (value.length - maxTagCount) + ' ...';
	        if (maxTagPlaceholder) {
	          content = typeof maxTagPlaceholder === 'function' ? maxTagPlaceholder(omittedValues) : maxTagPlaceholder;
	        }
	        maxTagPlaceholderEl = _react2["default"].createElement(
	          'li',
	          _extends({
	            style: util$3.UNSELECTABLE_STYLE
	          }, util$3.UNSELECTABLE_ATTRIBUTE, {
	            onMouseDown: util$3.preventDefaultEvent,
	            className: prefixCls + '-selection-choice ' + prefixCls + '-selection-choice-disabled',
	            key: 'maxTagPlaceholder',
	            title: (0, util$3.toTitle)(content)
	          }),
	          _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-selection-choice-content' },
	            content
	          )
	        );
	      }
	      if ((0, util$3.isMultipleOrTags)(props)) {
	        selectedValueNodes = limitedCountValue.map(function (singleValue, index) {
	          var key = singleValue || index;
	          var info = _this2.getOptionInfoBySingleValue(singleValue);
	          var content = info.label;
	          var title = info.title || content;
	          if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
	            content = content.slice(0, maxTagTextLength) + '...';
	          }
	          var disabled = _this2.isChildDisabled(singleValue);
	          var choiceClassName = disabled ? prefixCls + '-selection-choice ' + prefixCls + '-selection-choice-disabled' : prefixCls + '-selection-choice';
	          return _react2["default"].createElement(
	            'li',
	            _extends({
	              style: util$3.UNSELECTABLE_STYLE
	            }, util$3.UNSELECTABLE_ATTRIBUTE, {
	              onMouseDown: util$3.preventDefaultEvent,
	              className: choiceClassName,
	              key: key,
	              title: (0, util$3.toTitle)(title)
	            }),
	            _react2["default"].createElement(
	              'div',
	              { className: prefixCls + '-selection-choice-content' },
	              content
	            ),
	            disabled ? null : _react2["default"].createElement(
	              'span',
	              {
	                onClick: function onClick(event) {
	                  _this2.removeSelected(singleValue, event);
	                },
	                className: prefixCls + '-selection-choice-remove'
	              },
	              removeIcon || _react2["default"].createElement(
	                'i',
	                { className: prefixCls + '-selection-choice-remove-icon' },
	                '\xD7'
	              )
	            )
	          );
	        });
	      }
	      if (maxTagPlaceholderEl) {
	        selectedValueNodes.push(maxTagPlaceholderEl);
	      }
	      selectedValueNodes.push(_react2["default"].createElement(
	        'li',
	        {
	          className: prefixCls + '-search ' + prefixCls + '-search--inline',
	          key: '-input'
	        },
	        _this2.getInputElement()
	      ));

	      if ((0, util$3.isMultipleOrTags)(props) && choiceTransitionName) {
	        innerNode = _react2["default"].createElement(
	          _beeAnimate2["default"],
	          {
	            onLeave: _this2.onChoiceAnimationLeave,
	            component: 'ul',
	            transitionName: choiceTransitionName
	          },
	          selectedValueNodes
	        );
	      } else {
	        innerNode = _react2["default"].createElement(
	          'ul',
	          null,
	          selectedValueNodes
	        );
	      }
	    }
	    return _react2["default"].createElement(
	      'div',
	      { className: className, ref: _this2.saveTopCtrlRef },
	      _this2.getPlaceholderElement(),
	      innerNode
	    );
	  };

	  this.onOuterClick = function (event) {
	    //sp:在不能输入的情况下，点击事件触发focus
	    _this2._focused = true;
	    _this2.updateFocusClassName();
	    _this2.props.onFocus(_this2.state.value);
	  };
	};

	Select.displayName = 'Select';

	(0, reactLifecyclesCompat_es.polyfill)(Select);

	exports["default"] = Select;
	module.exports = exports['default'];
	});

	unwrapExports(RcSelect);

	var OptGroup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var OptGroup = function (_React$Component) {
	  _inherits(OptGroup, _React$Component);

	  function OptGroup() {
	    _classCallCheck(this, OptGroup);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  return OptGroup;
	}(_react2["default"].Component);

	OptGroup.isSelectOptGroup = true;
	exports["default"] = OptGroup;
	module.exports = exports['default'];
	});

	unwrapExports(OptGroup_1);

	var Select_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _RcSelect2 = _interopRequireDefault(RcSelect);



	var _Option2 = _interopRequireDefault(Option_1);



	var _OptGroup2 = _interopRequireDefault(OptGroup_1);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-select.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/select
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var SelectContext = {
	  antLocale: {
	    Select: _propTypes2["default"].any
	  }
	};

	var defaultProps = {
	  clsPrefix: "u-select",
	  showSearch: false,
	  transitionName: "slide-up",
	  choiceTransitionName: "zoom",
	  enterKeyDown: true
	};

	var propTypes$1 = {
	  clsPrefix: _propTypes2["default"].string,
	  className: _propTypes2["default"].string,
	  value: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].any]),
	  defaultValue: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].array, _propTypes2["default"].any]),
	  size: _propTypes2["default"].oneOf(["default", "lg", "sm"]),
	  combobox: _propTypes2["default"].bool,
	  notFoundContent: _propTypes2["default"].oneOfType([_propTypes2["default"].node, _propTypes2["default"].array, _propTypes2["default"].any]),
	  showSearch: _propTypes2["default"].bool,
	  open: _propTypes2["default"].bool,
	  transitionName: _propTypes2["default"].string,
	  choiceTransitionName: _propTypes2["default"].string,
	  multiple: _propTypes2["default"].bool,
	  allowClear: _propTypes2["default"].bool,
	  filterOption: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].func]),
	  tags: _propTypes2["default"].bool,
	  onSelect: _propTypes2["default"].func,
	  onDeselect: _propTypes2["default"].func,
	  onSearch: _propTypes2["default"].func,
	  placeholder: _propTypes2["default"].string,
	  dropdownMatchSelectWidth: _propTypes2["default"].bool,
	  optionFilterProp: _propTypes2["default"].string,
	  optionLabelProp: _propTypes2["default"].string,
	  disabled: _propTypes2["default"].bool,
	  defaultActiveFirstOption: _propTypes2["default"].bool,
	  labelInValue: _propTypes2["default"].bool,
	  getPopupContainer: _propTypes2["default"].func,
	  style: _propTypes2["default"].object,
	  dropdownStyle: _propTypes2["default"].object,
	  dropdownMenuStyle: _propTypes2["default"].object,
	  onChange: _propTypes2["default"].func,
	  scrollToEnd: _propTypes2["default"].func,
	  onKeyDown: _propTypes2["default"].func,
	  enterKeyDown: _propTypes2["default"].bool //是否启用 enter 和 space 键
	};

	var Select = function (_Component) {
	  _inherits(Select, _Component);

	  function Select(props) {
	    _classCallCheck(this, Select);

	    return _possibleConstructorReturn(this, _Component.call(this, props));
	  }

	  Select.prototype.render = function render() {
	    var _classNames;

	    var _props = this.props,
	        clsPrefix = _props.clsPrefix,
	        _props$className = _props.className,
	        className = _props$className === undefined ? "" : _props$className,
	        size = _props.size,
	        data = _props.data,
	        showSearch = _props.showSearch,
	        combobox = _props.combobox;
	    var _props2 = this.props,
	        _props2$notFoundConte = _props2.notFoundContent,
	        notFoundContent = _props2$notFoundConte === undefined ? "Not Found" : _props2$notFoundConte,
	        optionLabelProp = _props2.optionLabelProp;


	    var cls = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, clsPrefix + "-lg", size === "lg"), _defineProperty(_classNames, clsPrefix + "-sm", size === "sm"), _defineProperty(_classNames, clsPrefix + "-show-search", showSearch), _classNames), className);

	    var antLocale = this.context.antLocale;

	    if (antLocale && antLocale.Select) {
	      notFoundContent = "notFoundContent" in this.props ? notFoundContent : antLocale.Select.notFoundContent;
	    }

	    if (combobox) {
	      notFoundContent = null;
	      // children 带 dom 结构时，无法填入输入框
	      optionLabelProp = optionLabelProp || "value";
	    }
	    if (data) {
	      data.map(function (item) {
	        return _react2["default"].createElement(
	          _Option2["default"],
	          { value: item.value },
	          item.key
	        );
	      });
	    }
	    return data ? _react2["default"].createElement(
	      _RcSelect2["default"],
	      _extends({}, this.props, {
	        className: cls,
	        optionLabelProp: optionLabelProp || "children",
	        notFoundContent: notFoundContent
	      }),
	      data.map(function (item) {
	        return _react2["default"].createElement(
	          _Option2["default"],
	          { key: item.value, value: item.value, disabled: item.disabled ? true : false },
	          item.key
	        );
	      })
	    ) : _react2["default"].createElement(_RcSelect2["default"], _extends({}, this.props, {
	      className: cls,
	      optionLabelProp: optionLabelProp || "children",
	      notFoundContent: notFoundContent
	    }));
	  };

	  return Select;
	}(React__default.Component);

	Select.context = SelectContext;
	Select.propTypes = propTypes$1;
	Select.defaultProps = defaultProps;
	Select.Option = _Option2["default"];
	Select.OptGroup = _OptGroup2["default"];

	exports["default"] = Select;
	module.exports = exports["default"];
	});

	unwrapExports(Select_1);

	var build$c = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Select2 = _interopRequireDefault(Select_1);



	var _Option2 = _interopRequireDefault(Option_1);





	var _OptGroup2 = _interopRequireDefault(OptGroup_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_Select2["default"].Option = _Option2["default"];
	_Select2["default"].OptGroup = _OptGroup2["default"];
	exports["default"] = _Select2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$c);

	var Icon_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
		type: _propTypes2["default"].string

	};
	/**
	 *  badge 默认显示内容1
	 */
	var defaultProps = {
		clsPrefix: 'uf'
	};

	var Icon = function (_Component) {
		_inherits(Icon, _Component);

		function Icon(props) {
			_classCallCheck(this, Icon);

			return _possibleConstructorReturn(this, _Component.call(this, props));
		}

		Icon.prototype.render = function render() {
			var _props = this.props,
			    type = _props.type,
			    className = _props.className,
			    clsPrefix = _props.clsPrefix,
			    others = _objectWithoutProperties(_props, ['type', 'className', 'clsPrefix']);

			var classNames = (0, _classnames2["default"])(clsPrefix, type);

			return _react2["default"].createElement('i', _extends({}, others, { className: (0, _classnames2["default"])(classNames, className) }));
		};

		return Icon;
	}(React__default.Component);

	Icon.defaultProps = defaultProps;
	Icon.propTypes = propTypes$1;

	exports["default"] = Icon;
	module.exports = exports['default'];
	});

	unwrapExports(Icon_1$1);

	var build$d = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Icon2 = _interopRequireDefault(Icon_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Icon2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$d);

	var i18n = {
	    'lang': 'zh-cn',
	    'total': '共',
	    'items': '条',
	    'show': '显示',
	    'goto': '跳至',
	    'page': '页',
	    'ok': '确认',
	    'en-us': {
	        'total': 'total',
	        'items': 'items',
	        'show': 'page',
	        'goto': 'goto',
	        'ok': 'ok'
	    },
	    'zh-tw': {
	        'total': '共',
	        'items': '條',
	        'show': '顯示',
	        'goto': '跳至',
	        'ok': '確認'
	    }
	};

	var tool = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.getComponentLocale = getComponentLocale;
	exports.getLocaleCode = getLocaleCode;
	function getComponentLocale(props, context, componentName, getDefaultLocale) {
	    var locale = {};
	    if (context && context.beeLocale && context.beeLocale[componentName]) {
	        locale = context.beeLocale[componentName];
	    } else {
	        var defaultLocale = getDefaultLocale();

	        locale = defaultLocale["default"] || defaultLocale;
	    }

	    var result = _extends({}, locale, props.locale);
	    result.lang = _extends({}, locale.lang, props.locale.lang);
	    return result;
	}

	function getLocaleCode(context) {
	    var localeCode = context.beeLocale && context.beeLocale.lang;
	    // Had use LocaleProvide but didn't set locale
	    if (context.beeLocale && context.beeLocale.exist && !localeCode) {
	        return 'zh-cn';
	    }
	    return localeCode;
	}
	});

	unwrapExports(tool);
	var tool_1 = tool.getComponentLocale;
	var tool_2 = tool.getLocaleCode;

	var Pagination_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames3 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _PaginationButton2 = _interopRequireDefault(PaginationButton_1);



	var _beeButton2 = _interopRequireDefault(build$9);



	var _beeSelect2 = _interopRequireDefault(build$c);



	var _beeIcon2 = _interopRequireDefault(build$d);



	var _objectAssign2 = _interopRequireDefault(objectAssign);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _i18n2 = _interopRequireDefault(i18n);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var Option = _beeSelect2["default"].Option;

	var propTypes$1 = {
	    /**
	     * 当前激活状态页
	     */
	    activePage: _propTypes2["default"].number,
	    /**
	     * 总页数
	     */
	    items: _propTypes2["default"].number,
	    /**
	     * 显示按钮从1到maxButton的按钮数
	     */
	    maxButtons: _propTypes2["default"].number,

	    /**
	     * 当为true,不管切换到多少页都显示第一页和最后一页的按钮
	     */
	    boundaryLinks: _propTypes2["default"].bool,

	    /**
	     * 当为true,显示省略号，否则
	     *
	     */
	    ellipsis: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].node]),

	    /**
	     *  当为true,显示点击到第一页的按钮
	     */
	    first: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].node]),

	    /**
	     *  当为true,显示点击到最后一页的按钮
	     */
	    last: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].node]),

	    /**
	     * 当为true,显示前一页按钮
	     */
	    prev: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].node]),

	    /**
	     * 当为true,显示下一页按钮
	     */
	    next: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].node]),

	    /**
	     * 暴露给用户的切换页的方法
	     */
	    onSelect: _propTypes2["default"].func,

	    /**
	     * You can use a custom element for the buttons
	     */
	    buttonComponentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),
	    /**
	     * 每页多少条的选择
	     */
	    dataNumSelect: _propTypes2["default"].array,
	    /**
	     * 每页多少条选择哪一个
	     */
	    dataNum: _propTypes2["default"].number,
	    /**
	     * 显示跳页
	     */
	    showJump: _propTypes2["default"].bool,
	    /**
	     * 显示总共条数
	     */
	    total: _propTypes2["default"].number,
	    /** 
	     *  pagiantion不可点
	     */
	    disabled: _propTypes2["default"].bool,
	    /**
	     *  确认按钮的样式集合
	     */
	    btnType: _propTypes2["default"].object,
	    /**
	     *  渲染确认按钮的dom
	     */
	    confirmBtn: _propTypes2["default"].func
	};

	var defaultProps = {
	    activePage: 1,
	    maxButtons: 0,
	    first: false,
	    last: false,
	    prev: false,
	    next: false,
	    ellipsis: true,
	    boundaryLinks: false,
	    clsPrefix: "u-pagination",
	    gap: false,
	    noBorder: false,
	    dataNumSelect: ['5', '10', '15', '20'],
	    dataNum: 1,
	    showJump: false,
	    locale: {},
	    disabled: false,
	    btnType: { shape: 'border' },
	    confirmBtn: function confirmBtn() {}
	};

	var Pagination = function (_React$Component) {
	    _inherits(Pagination, _React$Component);

	    function Pagination(props, context) {
	        _classCallCheck(this, Pagination);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	        _this.onKeyup = function (e) {
	            e.keyCode === 13 && _this.handleEnsurePageJump();
	        };

	        _this.setPageJump = function (e) {
	            var value = e.target.value;
	            // 20181129跳转内容可以清空
	            if (value !== '' && (isNaN(Number(value)) || value > _this.state.items || value <= 0)) {
	                return false;
	            } else {
	                _this.setState({
	                    jumpPageState: value
	                });
	            }
	        };

	        _this.handleEnsurePageJump = function () {
	            var jumpPageState = _this.state.jumpPageState;
	            var onSelect = _this.props.onSelect;

	            if (jumpPageState === '') {
	                return;
	            }
	            _this.setState({
	                activePage: jumpPageState * 1,
	                jumpPageState: ''
	            });
	            if (typeof onSelect === 'function') {
	                onSelect(jumpPageState * 1);
	            }
	        };

	        _this.dataNumSelect = function (value) {
	            // console.log(value);
	            var _this$props = _this.props,
	                onDataNumSelect = _this$props.onDataNumSelect,
	                total = _this$props.total;

	            var dataNumValue = _this.props.dataNumSelect[value];
	            // console.log("dataNumValue", dataNumValue);
	            if (total) {
	                _this.setState({
	                    // 20181210因为dataNumSelect的某项不是数字或者数字字符串
	                    items: Number.isNaN(parseInt(dataNumValue)) ? 1 : Math.ceil(total / dataNumValue)
	                });
	            }
	            _this.setState({
	                dataNum: value
	            });
	            if (typeof onDataNumSelect === 'function') {
	                onDataNumSelect(value, dataNumValue);
	            }
	        };

	        _this.state = {
	            activePage: _this.props.activePage, //当前的页码
	            dataNum: props.dataNum,
	            items: props.items ? props.items : props.total ? Math.ceil(props.total / props.dataNumSelect[props.dataNum]) : 1,
	            jumpPageState: ''
	        };
	        return _this;
	    }

	    Pagination.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (this.state.activePage !== nextProps.activePage) {
	            this.setState({
	                activePage: nextProps.activePage
	            });
	        }
	        if ((nextProps.dataNum === 0 || nextProps.dataNum) && this.props.dataNum !== nextProps.dataNum) {
	            this.setState({
	                dataNum: nextProps.dataNum,
	                // 20181210因为dataNumSelect的某项不是数字或者数字字符串
	                items: Number.isNaN(parseInt(nextProps.dataNumSelect[nextProps.dataNum])) ? 1 : Math.ceil(nextProps.total / nextProps.dataNumSelect[nextProps.dataNum])
	            });
	        }
	        if (nextProps.items && this.props.items !== nextProps.items) {
	            this.setState({
	                items: nextProps.items
	            });
	        }
	    };

	    /**
	     * 确认跳页
	     */


	    /**
	     * 每页多少条的选择
	     * @param e
	     */


	    /**
	     * 渲染page的按钮
	     * @param activePage
	     * @param items
	     * @param maxButtons
	     * @param boundaryLinks
	     * @param ellipsis
	     * @param buttonProps
	     * @returns {Array}
	     */
	    Pagination.prototype.renderPageButtons = function renderPageButtons(activePage, items, maxButtons, boundaryLinks, ellipsis, buttonProps) {
	        var pageButtons = [];

	        var startPage = void 0;
	        var endPage = void 0;
	        var hasHiddenPagesAfter = void 0;

	        if (maxButtons) {
	            //根据max很当前activepage计算出应隐藏activeButton之前的页数
	            var hiddenPagesBefore = activePage - parseInt(maxButtons / 2, 10);
	            startPage = hiddenPagesBefore > 2 ? hiddenPagesBefore : 1;
	            //计算出是否存在隐藏activeButton之后的页数
	            hasHiddenPagesAfter = startPage + maxButtons < items + 1;

	            if (!hasHiddenPagesAfter) {
	                endPage = items;
	                startPage = items - maxButtons + 1;
	                if (startPage < 1) {
	                    startPage = 1;
	                }
	            } else {
	                endPage = startPage + maxButtons - 1;
	            }
	        } else {
	            startPage = 1;
	            endPage = items;
	        }
	        //将所有的button循环渲染出来
	        for (var pagenumber = startPage; pagenumber <= endPage; pagenumber++) {
	            pageButtons.push(_react2["default"].createElement(
	                _PaginationButton2["default"],
	                _extends({}, buttonProps, {
	                    key: pagenumber,
	                    eventKey: pagenumber,
	                    active: pagenumber === activePage
	                }),
	                pagenumber
	            ));
	        }
	        //如果boundaryLinks和eclipsis且startPage!=1 需要加上before More Button
	        if (boundaryLinks && ellipsis && startPage !== 1) {
	            if (startPage > 2) {
	                pageButtons.unshift(_react2["default"].createElement(
	                    _PaginationButton2["default"],
	                    {
	                        key: "ellipsisFirst",
	                        disabled: true,
	                        componentClass: buttonProps.componentClass
	                    },
	                    _react2["default"].createElement(
	                        "span",
	                        { "aria-label": "More" },
	                        ellipsis === true ? "\u2026" : ellipsis
	                    )
	                ));
	            }
	            //加上最小边界 Button
	            pageButtons.unshift(_react2["default"].createElement(
	                _PaginationButton2["default"],
	                _extends({}, buttonProps, { key: 1, eventKey: 1, active: false }),
	                "1"
	            ));
	        }
	        //如果maxButtons和eclipsis且hasHiddenPagesAfter 需加上after More Button
	        if (maxButtons && hasHiddenPagesAfter && ellipsis) {
	            if (!boundaryLinks || boundaryLinks && items > 1 + endPage) {
	                pageButtons.push(_react2["default"].createElement(
	                    _PaginationButton2["default"],
	                    {
	                        key: "ellipsis",
	                        disabled: true,
	                        componentClass: buttonProps.componentClass
	                    },
	                    _react2["default"].createElement(
	                        "span",
	                        { "aria-label": "More" },
	                        ellipsis === true ? "\u2026" : ellipsis
	                    )
	                ));
	            }
	            //如果最后一个页数按钮不等于总页数 且 边界为true 需加上最大边界按钮
	            if (boundaryLinks && endPage !== items) {
	                pageButtons.push(_react2["default"].createElement(
	                    _PaginationButton2["default"],
	                    _extends({}, buttonProps, {
	                        key: items,
	                        eventKey: items,
	                        active: false
	                    }),
	                    items
	                ));
	            }
	        }

	        return pageButtons;
	    };

	    Pagination.prototype.render = function render() {
	        var local = (0, tool.getComponentLocale)(this.props, this.context, 'Pagination', function () {
	            return _i18n2["default"];
	        });

	        var _props = this.props,
	            items = _props.items,
	            maxButtons = _props.maxButtons,
	            boundaryLinks = _props.boundaryLinks,
	            ellipsis = _props.ellipsis,
	            first = _props.first,
	            last = _props.last,
	            prev = _props.prev,
	            next = _props.next,
	            onSelect = _props.onSelect,
	            buttonComponentClass = _props.buttonComponentClass,
	            noBorder = _props.noBorder,
	            className = _props.className,
	            clsPrefix = _props.clsPrefix,
	            size = _props.size,
	            gap = _props.gap,
	            onDataNumSelect = _props.onDataNumSelect,
	            dataNumSelect = _props.dataNumSelect,
	            dataNum = _props.dataNum,
	            activePage = _props.activePage,
	            showJump = _props.showJump,
	            total = _props.total,
	            disabled = _props.disabled,
	            btnType = _props.btnType,
	            confirmBtn = _props.confirmBtn,
	            others = _objectWithoutProperties(_props, ["items", "maxButtons", "boundaryLinks", "ellipsis", "first", "last", "prev", "next", "onSelect", "buttonComponentClass", "noBorder", "className", "clsPrefix", "size", "gap", "onDataNumSelect", "dataNumSelect", "dataNum", "activePage", "showJump", "total", "disabled", "btnType", "confirmBtn"]);

	        var activePageState = this.state.activePage;
	        var jumpPageState = this.state.jumpPageState;

	        var btnDom = confirmBtn((0, _objectAssign2["default"])({}, this.props));

	        var classes = {};
	        if (noBorder) {
	            classes[clsPrefix + "-no-border"] = true;
	        }
	        if (size) {
	            classes[clsPrefix + "-" + size] = true;
	        }
	        if (gap) {
	            classes[clsPrefix + "-gap"] = true;
	        }
	        if (!!btnDom) {
	            classes[clsPrefix + "-with-jumpbtn"] = true;
	        }

	        var classNames = (0, _classnames3["default"])(clsPrefix + "-list", classes);
	        var wrapperClass = (0, _classnames3["default"])(clsPrefix, _defineProperty({}, clsPrefix + "-disabled", disabled));
	        /**
	         *  页按钮属性
	         *  onSelect:暴露在外层交互动作，也是与父组件Pagination的交流接口
	         *  componentClass: 用户定义的按钮dom元素类型
	         */
	        var buttonProps = {
	            onSelect: onSelect,
	            componentClass: buttonComponentClass
	        };
	        var jumpBtn = btnDom ? _react2["default"].createElement(
	            "div",
	            { className: "page_jump_btn", onClick: this.handleEnsurePageJump },
	            btnDom
	        ) : null;
	        return _react2["default"].createElement(
	            "div",
	            { className: (0, _classnames3["default"])(wrapperClass, className) },
	            disabled && _react2["default"].createElement("div", { className: clsPrefix + "-disabled-mask" }),
	            _react2["default"].createElement(
	                "ul",
	                _extends({}, others, { className: classNames }),
	                first && _react2["default"].createElement(
	                    _PaginationButton2["default"],
	                    _extends({}, buttonProps, {
	                        eventKey: 1,
	                        disabled: activePageState === 1,
	                        iconBtn: true

	                    }),
	                    _react2["default"].createElement(_beeIcon2["default"], { type: "uf-2arrow-left" })
	                ),
	                prev && _react2["default"].createElement(
	                    _PaginationButton2["default"],
	                    _extends({}, buttonProps, {
	                        eventKey: activePageState - 1,
	                        disabled: activePageState === 1,
	                        iconBtn: true

	                    }),
	                    _react2["default"].createElement(_beeIcon2["default"], { type: "uf-arrow-left" })
	                ),
	                this.renderPageButtons(activePageState, this.state.items, maxButtons, boundaryLinks, ellipsis, buttonProps),
	                next && _react2["default"].createElement(
	                    _PaginationButton2["default"],
	                    _extends({}, buttonProps, {
	                        eventKey: activePageState + 1,
	                        disabled: activePageState >= this.state.items,
	                        iconBtn: true
	                    }),
	                    _react2["default"].createElement(_beeIcon2["default"], { type: "uf-arrow-right" })
	                ),
	                last && _react2["default"].createElement(
	                    _PaginationButton2["default"],
	                    _extends({}, buttonProps, {
	                        eventKey: this.state.items,
	                        disabled: activePageState >= this.state.items,
	                        iconBtn: true
	                    }),
	                    _react2["default"].createElement(_beeIcon2["default"], { type: "uf-2arrow-right" })
	                )
	            ),
	            total != null ? _react2["default"].createElement(
	                "div",
	                { className: clsPrefix + "-total" },
	                local['total'],
	                _react2["default"].createElement(
	                    "span",
	                    null,
	                    total
	                ),
	                local['items']
	            ) : null,
	            showJump ? _react2["default"].createElement(
	                "div",
	                { className: "data_per_select" },
	                _react2["default"].createElement(
	                    "span",
	                    null,
	                    local['show']
	                ),
	                _react2["default"].createElement(
	                    _beeSelect2["default"]
	                    // className="data_select"
	                    ,
	                    { value: this.state.dataNum,
	                        onChange: this.dataNumSelect },
	                    dataNumSelect.length > 0 && dataNumSelect.map(function (item, i) {
	                        return _react2["default"].createElement(
	                            Option,
	                            { key: i, value: i },
	                            item
	                        );
	                    })
	                ),
	                _react2["default"].createElement(
	                    "span",
	                    null,
	                    local['items']
	                )
	            ) : null,
	            showJump ? _react2["default"].createElement(
	                "div",
	                { className: "page_jump" },
	                _react2["default"].createElement(
	                    "span",
	                    null,
	                    local['goto']
	                ),
	                _react2["default"].createElement("input", {
	                    className: "page_jump_value",
	                    value: jumpPageState,
	                    onKeyDown: this.onKeyup,
	                    onChange: this.setPageJump
	                }),
	                _react2["default"].createElement(
	                    "span",
	                    null,
	                    local['page']
	                ),
	                jumpBtn
	            ) : null
	        );
	    };

	    return Pagination;
	}(_react2["default"].Component);

	Pagination.propTypes = propTypes$1;
	Pagination.defaultProps = defaultProps;
	Pagination.contextTypes = {
	    beeLocale: _propTypes2["default"].object
	};
	exports["default"] = Pagination;
	module.exports = exports["default"];
	});

	unwrapExports(Pagination_1);

	var build$e = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Pagination2 = _interopRequireDefault(Pagination_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Pagination2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$e);

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$2 = _freeGlobal || freeSelf || Function('return this')();

	var _root = root$2;

	/** Built-in value references. */
	var Symbol$1 = _root.Symbol;

	var _Symbol = Symbol$1;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	var _arrayMap = arrayMap;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	var isArray_1 = isArray;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty$2.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	var _objectToString = objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$1(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
	}

	var isSymbol_1 = isSymbol$1;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray_1(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return _arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol_1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	var _baseToString = baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$3(value) {
	  return value == null ? '' : _baseToString(value);
	}

	var toString_1 = toString$3;

	/** Used to match leading and trailing whitespace. */
	var reTrimStart = /^\s+/;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeParseInt = _root.parseInt;

	/**
	 * Converts `string` to an integer of the specified radix. If `radix` is
	 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	 * hexadecimal, in which case a `radix` of `16` is used.
	 *
	 * **Note:** This method aligns with the
	 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category String
	 * @param {string} string The string to convert.
	 * @param {number} [radix=10] The radix to interpret `value` by.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.parseInt('08');
	 * // => 8
	 *
	 * _.map(['6', '08', '10'], _.parseInt);
	 * // => [6, 8, 10]
	 */
	function parseInt$1(string, radix, guard) {
	  if (guard || radix == null) {
	    radix = 0;
	  } else if (radix) {
	    radix = +radix;
	  }
	  return nativeParseInt(toString_1(string).replace(reTrimStart, ''), radix || 0);
	}

	var _parseInt = parseInt$1;

	var utils$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Event = exports.EventUtil = exports.tryParseInt = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.measureScrollbar = measureScrollbar;
	exports.debounce = debounce;
	exports.warningOnce = warningOnce;
	exports.getOffset = getOffset;
	exports.addClass = addClass;
	exports.removeClass = removeClass;
	exports.ObjectAssign = ObjectAssign;
	exports.closest = closest;
	exports.getMaxColChildrenLength = getMaxColChildrenLength;
	exports.getColChildrenLength = getColChildrenLength;
	exports.DicimalFormater = DicimalFormater;
	exports.checkDicimalInvalid = checkDicimalInvalid;



	var _warning2 = _interopRequireDefault(warning_1);



	var _parseInt2 = _interopRequireDefault(_parseInt);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var scrollbarSize = void 0;

	// Measure scrollbar width for padding body during modal show/hide
	var scrollbarMeasure = {
	  position: 'absolute',
	  top: '-9999px',
	  width: '50px',
	  height: '50px',
	  overflow: 'scroll'
	};

	function measureScrollbar() {
	  var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'vertical';


	  if (typeof document === 'undefined' || typeof window === 'undefined') {
	    return 0;
	  }
	  var tableDom = document.querySelector('.u-table');
	  var currentDom = tableDom ? tableDom : document.body;

	  if (scrollbarSize) {
	    return scrollbarSize;
	  }
	  var scrollDiv = document.createElement('div');
	  Object.keys(scrollbarMeasure).forEach(function (scrollProp) {
	    scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
	  });
	  currentDom.appendChild(scrollDiv);
	  var size = 0;
	  if (direction === 'vertical') {
	    size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	  } else if (direction === 'horizontal') {
	    size = scrollDiv.offsetHeight - scrollDiv.clientHeight;
	  }

	  currentDom.removeChild(scrollDiv);
	  scrollbarSize = size;
	  return scrollbarSize;
	}

	function debounce(func, wait, immediate) {
	  var timeout = void 0;
	  return function debounceFunc() {
	    var context = this;
	    var args = arguments;
	    // https://fb.me/react-event-pooling
	    if (args[0] && args[0].persist) {
	      args[0].persist();
	    }
	    var later = function later() {
	      timeout = null;
	      if (!immediate) {
	        func.apply(context, args);
	      }
	    };
	    var callNow = immediate && !timeout;
	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	    if (callNow) {
	      func.apply(context, args);
	    }
	  };
	}

	var warned = {};
	function warningOnce(condition, format, args) {
	  if (!warned[format]) {
	    (0, _warning2["default"])(condition, format, args);
	    warned[format] = true;
	  }
	}
	function getOffset(Node, offset) {
	  if (!offset) {
	    offset = {};
	    offset.top = 0;
	    offset.left = 0;
	  }
	  if (Node == document.body) {
	    return offset;
	  }
	  offset.top += Node.offsetTop;
	  offset.left += Node.offsetLeft;
	  if (Node.offsetParent) return getOffset(Node.offsetParent, offset);else return offset;
	}
	var tryParseInt = exports.tryParseInt = function tryParseInt(value) {
	  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	  var resultValue = (0, _parseInt2["default"])(value);

	  if (isNaN(resultValue)) {
	    return defaultValue;
	  }
	  return resultValue;
	};

	function addClass(elm, className) {
	  if (!className) return;

	  var els = Array.isArray(elm) ? elm : [elm];

	  els.forEach(function (el) {
	    if (el.classList) {
	      el.classList.add(className.split(' '));
	    } else {
	      el.className += ' ' + className;
	    }
	  });
	}

	function removeClass(elm, className) {
	  if (!className) return;

	  var els = Array.isArray(elm) ? elm : [elm];

	  els.forEach(function (el) {
	    if (el.classList) {
	      el.classList.remove(className.split(' '));
	    } else {
	      el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
	    }
	  });
	}

	/**
	 * 简单数组数据对象拷贝
	 * @param {*} obj 要拷贝的对象 
	 */
	function ObjectAssign(obj) {
	  var b = obj instanceof Array;
	  var tagObj = b ? [] : {};
	  if (b) {
	    //数组
	    obj.forEach(function (da) {
	      var _da = {};
	      _extends(_da, da);
	      tagObj.push(_da);
	    });
	  } else {
	    _extends(tagObj, obj);
	  }
	  return tagObj;
	}
	/**
	 * 获取某个父元素
	 * */

	function closest(ele, selector) {
	  var matches = ele.matches || ele.webkitMatchesSelector || ele.mozMatchesSelector || ele.msMatchesSelector;
	  if (matches) {
	    while (ele) {
	      if (matches.call(ele, selector)) {
	        return ele;
	      } else {
	        ele = ele.parentElement;
	      }
	    }
	  }
	  return null;
	}

	function getMaxColChildrenLength(columns) {
	  var arr = [];
	  arr = columns.map(function (item, index) {
	    var chilrenLen = 0;
	    if (item.children) {
	      chilrenLen = getColChildrenLength(item.children, chilrenLen + 1);
	    }
	    return chilrenLen;
	  });
	  var max = Math.max.apply(null, arr);
	  return max;
	}

	function getColChildrenLength(columns, chilrenLen) {
	  columns.forEach(function (item, index) {
	    if (item.children) {
	      chilrenLen = getColChildrenLength(item.children, chilrenLen + 1);
	    }
	  });
	  return chilrenLen;
	}

	function addHandler(element, type, handler) {
	  var event = null;
	  if (element.addEventListener) {
	    //检测是否为DOM2级方法
	    event = element.addEventListener(type, handler, false);
	  } else if (element.attachEvent) {
	    //检测是否为IE级方法
	    event = element.attachEvent("on" + type, handler);
	  } else {
	    //检测是否为DOM0级方法
	    event = element["on" + type] = handler;
	  }
	  return event;
	}

	function removeHandler(element, type, handler) {
	  if (element.removeEventListener) {
	    element.removeEventListener(type, handler, false);
	  } else if (element.detachEvent) {
	    element.detachEvent("on" + type, handler);
	  } else {
	    element["on" + type] = null;
	  }
	}

	//获取事件对象的兼容性写法
	function getEvent(event) {
	  return event ? event : window.event;
	}

	//获取事件对象目标的兼容性写法
	function getTarget(event) {
	  return event.target || event.srcElement;
	}

	function preventDefault(event) {
	  if (event.preventDefault) {
	    event.preventDefault();
	  } else {
	    event.returnValue = false;
	  }
	}

	function stopPropagation(event) {
	  if (event.stopPropagation) {
	    event.stopPropagation();
	  } else {
	    event.cancelBubble = true;
	  }
	}

	//用事件冒泡方式，如果想兼容事件捕获只需要添加个bool参数
	var EventUtil = exports.EventUtil = {
	  addHandler: function addHandler(element, type, handler) {
	    if (element.addEventListener) {
	      element.addEventListener(type, handler, false);
	    } else if (element.attachEvent) {
	      element.attachEvent('on' + type, handler);
	    } else {
	      element['on' + type] = handler;
	    }
	  },

	  removeHandler: function removeHandler(element, type, handler) {
	    if (element.removeEventListener) {
	      element.removeEventListener(type, handler, false);
	    } else if (element.detachEvent) {
	      element.detachEvent('on' + type, handler);
	    } else {
	      element['on' + type] = null;
	    }
	  }

	  /*
	   * 处理精度
	   */
	};function DicimalFormater(value, precision) {
	  var value = value + '',
	      precision = precision ? precision : 0;
	  for (var i = 0; i < value.length; i++) {
	    if ("-0123456789.".indexOf(value.charAt(i)) == -1) return "";
	  }
	  return checkDicimalInvalid(value, precision);
	}function checkDicimalInvalid(value, precision) {
	  if (value == null || isNaN(value)) return "";
	  // 浮点数总位数不能超过10位
	  var digit = parseFloat(value);
	  var result = (digit * Math.pow(10, precision) / Math.pow(10, precision)).toFixed(precision);
	  if (result == "NaN") return "";
	  return result;
	}
	var Event = exports.Event = {
	  addHandler: addHandler,
	  removeHandler: removeHandler,
	  getEvent: getEvent,
	  getTarget: getTarget,
	  preventDefault: preventDefault,
	  stopPropagation: stopPropagation
	};
	});

	unwrapExports(utils$2);
	var utils_1$1 = utils$2.Event;
	var utils_2$1 = utils$2.EventUtil;
	var utils_3 = utils$2.tryParseInt;
	var utils_4 = utils$2.measureScrollbar;
	var utils_5 = utils$2.debounce;
	var utils_6 = utils$2.warningOnce;
	var utils_7 = utils$2.getOffset;
	var utils_8 = utils$2.addClass;
	var utils_9 = utils$2.removeClass;
	var utils_10 = utils$2.ObjectAssign;
	var utils_11 = utils$2.closest;
	var utils_12 = utils$2.getMaxColChildrenLength;
	var utils_13 = utils$2.getColChildrenLength;
	var utils_14 = utils$2.DicimalFormater;
	var utils_15 = utils$2.checkDicimalInvalid;

	var objectPath = createCommonjsModule(function (module) {
	(function (root, factory){

	  /*istanbul ignore next:cant test*/
	  {
	    module.exports = factory();
	  }
	})(commonjsGlobal, function(){

	  var toStr = Object.prototype.toString;
	  function hasOwnProperty(obj, prop) {
	    if(obj == null) {
	      return false
	    }
	    //to handle objects with null prototypes (too edge case?)
	    return Object.prototype.hasOwnProperty.call(obj, prop)
	  }

	  function isEmpty(value){
	    if (!value) {
	      return true;
	    }
	    if (isArray(value) && value.length === 0) {
	        return true;
	    } else if (typeof value !== 'string') {
	        for (var i in value) {
	            if (hasOwnProperty(value, i)) {
	                return false;
	            }
	        }
	        return true;
	    }
	    return false;
	  }

	  function toString(type){
	    return toStr.call(type);
	  }

	  function isObject(obj){
	    return typeof obj === 'object' && toString(obj) === "[object Object]";
	  }

	  var isArray = Array.isArray || function(obj){
	    /*istanbul ignore next:cant test*/
	    return toStr.call(obj) === '[object Array]';
	  };

	  function isBoolean(obj){
	    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
	  }

	  function getKey(key){
	    var intKey = parseInt(key);
	    if (intKey.toString() === key) {
	      return intKey;
	    }
	    return key;
	  }

	  function factory(options) {
	    options = options || {};

	    var objectPath = function(obj) {
	      return Object.keys(objectPath).reduce(function(proxy, prop) {
	        if(prop === 'create') {
	          return proxy;
	        }

	        /*istanbul ignore else*/
	        if (typeof objectPath[prop] === 'function') {
	          proxy[prop] = objectPath[prop].bind(objectPath, obj);
	        }

	        return proxy;
	      }, {});
	    };

	    function hasShallowProperty(obj, prop) {
	      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
	    }

	    function getShallowProperty(obj, prop) {
	      if (hasShallowProperty(obj, prop)) {
	        return obj[prop];
	      }
	    }

	    function set(obj, path, value, doNotReplace){
	      if (typeof path === 'number') {
	        path = [path];
	      }
	      if (!path || path.length === 0) {
	        return obj;
	      }
	      if (typeof path === 'string') {
	        return set(obj, path.split('.').map(getKey), value, doNotReplace);
	      }
	      var currentPath = path[0];
	      var currentValue = getShallowProperty(obj, currentPath);
	      if (path.length === 1) {
	        if (currentValue === void 0 || !doNotReplace) {
	          obj[currentPath] = value;
	        }
	        return currentValue;
	      }

	      if (currentValue === void 0) {
	        //check if we assume an array
	        if(typeof path[1] === 'number') {
	          obj[currentPath] = [];
	        } else {
	          obj[currentPath] = {};
	        }
	      }

	      return set(obj[currentPath], path.slice(1), value, doNotReplace);
	    }

	    objectPath.has = function (obj, path) {
	      if (typeof path === 'number') {
	        path = [path];
	      } else if (typeof path === 'string') {
	        path = path.split('.');
	      }

	      if (!path || path.length === 0) {
	        return !!obj;
	      }

	      for (var i = 0; i < path.length; i++) {
	        var j = getKey(path[i]);

	        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
	          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
	          obj = obj[j];
	        } else {
	          return false;
	        }
	      }

	      return true;
	    };

	    objectPath.ensureExists = function (obj, path, value){
	      return set(obj, path, value, true);
	    };

	    objectPath.set = function (obj, path, value, doNotReplace){
	      return set(obj, path, value, doNotReplace);
	    };

	    objectPath.insert = function (obj, path, value, at){
	      var arr = objectPath.get(obj, path);
	      at = ~~at;
	      if (!isArray(arr)) {
	        arr = [];
	        objectPath.set(obj, path, arr);
	      }
	      arr.splice(at, 0, value);
	    };

	    objectPath.empty = function(obj, path) {
	      if (isEmpty(path)) {
	        return void 0;
	      }
	      if (obj == null) {
	        return void 0;
	      }

	      var value, i;
	      if (!(value = objectPath.get(obj, path))) {
	        return void 0;
	      }

	      if (typeof value === 'string') {
	        return objectPath.set(obj, path, '');
	      } else if (isBoolean(value)) {
	        return objectPath.set(obj, path, false);
	      } else if (typeof value === 'number') {
	        return objectPath.set(obj, path, 0);
	      } else if (isArray(value)) {
	        value.length = 0;
	      } else if (isObject(value)) {
	        for (i in value) {
	          if (hasShallowProperty(value, i)) {
	            delete value[i];
	          }
	        }
	      } else {
	        return objectPath.set(obj, path, null);
	      }
	    };

	    objectPath.push = function (obj, path /*, values */){
	      var arr = objectPath.get(obj, path);
	      if (!isArray(arr)) {
	        arr = [];
	        objectPath.set(obj, path, arr);
	      }

	      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
	    };

	    objectPath.coalesce = function (obj, paths, defaultValue) {
	      var value;

	      for (var i = 0, len = paths.length; i < len; i++) {
	        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
	          return value;
	        }
	      }

	      return defaultValue;
	    };

	    objectPath.get = function (obj, path, defaultValue){
	      if (typeof path === 'number') {
	        path = [path];
	      }
	      if (!path || path.length === 0) {
	        return obj;
	      }
	      if (obj == null) {
	        return defaultValue;
	      }
	      if (typeof path === 'string') {
	        return objectPath.get(obj, path.split('.'), defaultValue);
	      }

	      var currentPath = getKey(path[0]);
	      var nextObj = getShallowProperty(obj, currentPath);
	      if (nextObj === void 0) {
	        return defaultValue;
	      }

	      if (path.length === 1) {
	        return nextObj;
	      }

	      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
	    };

	    objectPath.del = function del(obj, path) {
	      if (typeof path === 'number') {
	        path = [path];
	      }

	      if (obj == null) {
	        return obj;
	      }

	      if (isEmpty(path)) {
	        return obj;
	      }
	      if(typeof path === 'string') {
	        return objectPath.del(obj, path.split('.'));
	      }

	      var currentPath = getKey(path[0]);
	      if (!hasShallowProperty(obj, currentPath)) {
	        return obj;
	      }

	      if(path.length === 1) {
	        if (isArray(obj)) {
	          obj.splice(currentPath, 1);
	        } else {
	          delete obj[currentPath];
	        }
	      } else {
	        return objectPath.del(obj[currentPath], path.slice(1));
	      }

	      return obj;
	    };

	    return objectPath;
	  }

	  var mod = factory();
	  mod.create = factory;
	  mod.withInheritedProps = factory({includeInheritedProps: true});
	  return mod;
	});
	});

	var TableCell_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _objectPath2 = _interopRequireDefault(objectPath);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  record: _propTypes2["default"].object,
	  clsPrefix: _propTypes2["default"].string,
	  index: _propTypes2["default"].number,
	  indent: _propTypes2["default"].number,
	  indentSize: _propTypes2["default"].number,
	  column: _propTypes2["default"].object,
	  expandIcon: _propTypes2["default"].node
	};

	var TableCell = function (_Component) {
	  _inherits(TableCell, _Component);

	  function TableCell(props) {
	    _classCallCheck(this, TableCell);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.isInvalidRenderCellText = _this.isInvalidRenderCellText.bind(_this);
	    _this.handleClick = _this.handleClick.bind(_this);
	    return _this;
	  }

	  TableCell.prototype.isInvalidRenderCellText = function isInvalidRenderCellText(text) {
	    return text && !_react2["default"].isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
	  };

	  TableCell.prototype.handleClick = function handleClick(e) {
	    var _props = this.props,
	        record = _props.record,
	        onCellClick = _props.column.onCellClick;

	    if (onCellClick) {
	      onCellClick(record, e);
	    }
	  };

	  TableCell.prototype.render = function render() {
	    var _props2 = this.props,
	        record = _props2.record,
	        indentSize = _props2.indentSize,
	        clsPrefix = _props2.clsPrefix,
	        indent = _props2.indent,
	        index = _props2.index,
	        expandIcon = _props2.expandIcon,
	        column = _props2.column,
	        fixed = _props2.fixed,
	        showSum = _props2.showSum,
	        bodyDisplayInRow = _props2.bodyDisplayInRow;
	    var dataIndex = column.dataIndex,
	        render = column.render;
	    var _column$className = column.className,
	        className = _column$className === undefined ? '' : _column$className;


	    var text = _objectPath2["default"].get(record, dataIndex);
	    var tdProps = void 0;
	    var colSpan = void 0;
	    var rowSpan = void 0,
	        title = void 0;

	    if (render && !showSum) {
	      text = render(text, record, index);
	      if (this.isInvalidRenderCellText(text)) {
	        tdProps = text.props || {};
	        rowSpan = tdProps.rowSpan;
	        colSpan = tdProps.colSpan;
	        text = text.children;
	      }
	    }

	    if (this.isInvalidRenderCellText(text)) {
	      text = null;
	    }

	    var indentText = expandIcon ? _react2["default"].createElement('span', {
	      style: { paddingLeft: indentSize * indent + 'px' },
	      className: clsPrefix + '-indent indent-level-' + indent
	    }) : null;

	    if (rowSpan === 0 || colSpan === 0) {
	      return null;
	    }
	    //不是固定表格并且当前列是固定，则隐藏当前列
	    if (column.fixed && !fixed) {
	      className = className + (' ' + clsPrefix + '-fixed-columns-in-body');
	    }
	    if (column.textAlign) {
	      className = className + (' text-' + column.textAlign);
	    }
	    if (typeof text == 'string' && bodyDisplayInRow) {
	      title = text;
	    }
	    return _react2["default"].createElement(
	      'td',
	      {
	        colSpan: colSpan,
	        rowSpan: rowSpan,
	        className: className,
	        onClick: this.handleClick,
	        title: title
	      },
	      indentText,
	      expandIcon,
	      text
	    );
	  };

	  return TableCell;
	}(React__default.Component);

	TableCell.propTypes = propTypes$1;

	exports["default"] = TableCell;
	module.exports = exports['default'];
	});

	unwrapExports(TableCell_1);

	var ExpandIcon_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _shallowequal2 = _interopRequireDefault(shallowequal);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  record: _propTypes2["default"].object,
	  clsPrefix: _propTypes2["default"].string,
	  expandable: _propTypes2["default"].any,
	  expanded: _propTypes2["default"].bool,
	  needIndentSpaced: _propTypes2["default"].bool,
	  onExpand: _propTypes2["default"].func
	};

	var ExpandIcon = function (_Component) {
	  _inherits(ExpandIcon, _Component);

	  function ExpandIcon(props) {
	    _classCallCheck(this, ExpandIcon);

	    return _possibleConstructorReturn(this, _Component.call(this, props));
	  }

	  ExpandIcon.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return !(0, _shallowequal2["default"])(nextProps, this.props);
	  };

	  ExpandIcon.prototype.render = function render() {
	    var _props = this.props,
	        expandable = _props.expandable,
	        clsPrefix = _props.clsPrefix,
	        onExpand = _props.onExpand,
	        needIndentSpaced = _props.needIndentSpaced,
	        expanded = _props.expanded,
	        record = _props.record,
	        isHiddenExpandIcon = _props.isHiddenExpandIcon;

	    if (expandable && !isHiddenExpandIcon) {
	      var expandClassName = expanded ? 'expanded' : 'collapsed';
	      return _react2["default"].createElement('span', {
	        className: clsPrefix + '-expand-icon ' + clsPrefix + '-' + expandClassName,
	        onClick: function onClick(e) {
	          return onExpand(!expanded, record, e);
	        }
	      });
	    } else if (needIndentSpaced || isHiddenExpandIcon) {
	      return _react2["default"].createElement('span', { className: clsPrefix + '-expand-icon ' + clsPrefix + '-spaced' });
	    }
	    return null;
	  };

	  return ExpandIcon;
	}(React__default.Component);

	ExpandIcon.propTypes = propTypes$1;

	exports["default"] = ExpandIcon;
	module.exports = exports['default'];
	});

	unwrapExports(ExpandIcon_1);

	var TableRow_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _TableCell2 = _interopRequireDefault(TableCell_1);



	var _ExpandIcon2 = _interopRequireDefault(ExpandIcon_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  onDestroy: _propTypes2["default"].func,
	  onRowClick: _propTypes2["default"].func,
	  onRowDoubleClick: _propTypes2["default"].func,
	  record: _propTypes2["default"].object,
	  clsPrefix: _propTypes2["default"].string,
	  expandIconColumnIndex: _propTypes2["default"].number,
	  onHover: _propTypes2["default"].func,
	  columns: _propTypes2["default"].array,
	  height: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
	  visible: _propTypes2["default"].bool,
	  index: _propTypes2["default"].number,
	  hoverKey: _propTypes2["default"].any,
	  expanded: _propTypes2["default"].bool,
	  expandable: _propTypes2["default"].any,
	  onExpand: _propTypes2["default"].func,
	  needIndentSpaced: _propTypes2["default"].bool,
	  className: _propTypes2["default"].string,
	  indent: _propTypes2["default"].number,
	  indentSize: _propTypes2["default"].number,
	  expandIconAsCell: _propTypes2["default"].bool,
	  expandRowByClick: _propTypes2["default"].bool,
	  store: _propTypes2["default"].object.isRequired,
	  rowDraggAble: _propTypes2["default"].bool,
	  onDragRow: _propTypes2["default"].func
	};

	var defaultProps = {
	  onRowClick: function onRowClick() {},
	  onRowDoubleClick: function onRowDoubleClick() {},
	  onDestroy: function onDestroy() {},

	  expandIconColumnIndex: 0,
	  expandRowByClick: false,
	  onHover: function onHover() {},

	  className: '',
	  setRowParentIndex: function setRowParentIndex() {},
	  rowDraggAble: false
	  // onDragRow:()=>{}
	};

	var TableRow = function (_Component) {
	  _inherits(TableRow, _Component);

	  function TableRow(props) {
	    _classCallCheck(this, TableRow);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.initEvent = function () {
	      var events = [{ key: 'dragstart', fun: _this.onDragStart }, //用户开始拖动元素时触发
	      { key: 'dragover', fun: _this.onDragOver }, //当某被拖动的对象在另一对象容器范围内拖动时触发此事件
	      { key: 'drop', fun: _this.onDrop }, //在一个拖动过程中，释放鼠标键时触发此事件 

	      { key: 'dragenter', fun: _this.onDragEnter }, { key: 'dragleave', fun: _this.onDragLeave }];
	      _this.eventListen(events, '', _this.element);
	    };

	    _this.removeDragAbleEvent = function () {
	      var events = [{ key: 'dragstart', fun: _this.onDragStart }, { key: 'dragover', fun: _this.onDragOver }, { key: 'drop', fun: _this.onDrop }, { key: 'dragenter', fun: _this.onDragEnter }, { key: 'dragleave', fun: _this.onDragLeave }];
	      _this.eventListen(events, 'remove', _this.element);
	    };

	    _this.onDragStart = function (e) {
	      if (!_this.props.rowDraggAble) return;
	      var event = utils$2.Event.getEvent(e),
	          target = utils$2.Event.getTarget(event);
	      _this.currentIndex = target.getAttribute("data-row-key");
	      _this._dragCurrent = target;

	      //TODO 自定义图像后续需要增加。
	      //  let crt = this.synchronizeTableTrShadow(); 
	      //  document.getElementById(this.props.tableUid).appendChild(crt);
	      // event.dataTransfer.setDragImage(crt, 0, 0);
	      event.dataTransfer.effectAllowed = "move";
	      event.dataTransfer.setData("Text", _this.currentIndex);
	    };

	    _this.onDragOver = function (e) {
	      var event = utils$2.Event.getEvent(e);
	      event.preventDefault();
	    };

	    _this.onDrop = function (e) {
	      var _this$props = _this.props,
	          rowDraggAble = _this$props.rowDraggAble,
	          onDragRow = _this$props.onDragRow;

	      var event = utils$2.Event.getEvent(e),
	          _target = utils$2.Event.getTarget(event),
	          target = _target.parentNode;

	      var currentKey = event.dataTransfer.getData("text");
	      var targetKey = target.getAttribute("data-row-key");

	      if (!targetKey || targetKey === currentKey) return;
	      if (target.nodeName.toUpperCase() === "TR") {
	        _this.synchronizeTableTr(currentKey, null);
	        _this.synchronizeTableTr(targetKey, null);
	        // target.setAttribute("style","");
	        // this.synchronizeTrStyle(this.currentIndex,false);
	      }
	      onDragRow && onDragRow(currentKey, targetKey);
	    };

	    _this.synchronizeTableTrShadow = function () {
	      var _this$props2 = _this.props,
	          contentTable = _this$props2.contentTable,
	          index = _this$props2.index;


	      var _table_cont = contentTable.querySelector('.u-table-scroll table tbody').getElementsByTagName("tr")[index],
	          _table_trs = _table_cont.getBoundingClientRect(),
	          _table_fixed_left_trs = contentTable.querySelector('.u-table-fixed-left table tbody').getElementsByTagName("tr")[index].getBoundingClientRect(),
	          _table_fixed_right_trs = contentTable.querySelector('.u-table-fixed-right table tbody').getElementsByTagName("tr")[index].getBoundingClientRect();

	      var div = document.createElement("div");
	      var style = "wdith:" + (_table_trs.width + _table_fixed_left_trs.width + _table_fixed_right_trs.width) + "px";
	      style += "height:" + _table_trs.height + "px";
	      style += "classname:" + _table_cont.className;
	      div.setAttribute("style", style);
	      return div;
	    };

	    _this.synchronizeTableTr = function (currentIndex, type) {
	      var contentTable = _this.props.contentTable;

	      var _table_trs = contentTable.querySelector('.u-table-scroll table tbody'),
	          _table_fixed_left_trs = contentTable.querySelector('.u-table-fixed-left table tbody'),
	          _table_fixed_right_trs = contentTable.querySelector('.u-table-fixed-right table tbody');

	      _this.synchronizeTrStyle(_table_trs, currentIndex, type);
	      if (_table_fixed_left_trs) {
	        _this.synchronizeTrStyle(_table_fixed_left_trs, currentIndex, type);
	      }
	      if (_table_fixed_right_trs) {
	        _this.synchronizeTrStyle(_table_fixed_right_trs, currentIndex, type);
	      }
	    };

	    _this.synchronizeTrStyle = function (_elementBody, id, type) {
	      var contentTable = _this.props.contentTable,
	          trs = _elementBody.getElementsByTagName("tr"),
	          currentObj = void 0;

	      for (var index = 0; index < trs.length; index++) {
	        var element = trs[index];
	        if (element.getAttribute("data-row-key") == id) {
	          currentObj = element;
	        }
	      }
	      if (type) {
	        currentObj && currentObj.setAttribute("style", "border-bottom:2px dashed rgba(5,0,0,0.25)");
	      } else {
	        currentObj && currentObj.setAttribute("style", "");
	      }
	    };

	    _this.onDragEnter = function (e) {
	      var event = utils$2.Event.getEvent(e),
	          _target = utils$2.Event.getTarget(event),
	          target = _target.parentNode;
	      var currentIndex = target.getAttribute("data-row-key");
	      if (!currentIndex || currentIndex === _this.currentIndex) return;
	      if (target.nodeName.toUpperCase() === "TR") {
	        _this.synchronizeTableTr(currentIndex, true);
	        // target.setAttribute("style","border-bottom:2px dashed rgba(5,0,0,0.25)");
	        // // target.style.backgroundColor = 'rgb(235, 236, 240)'; 
	      }
	    };

	    _this.onDragLeave = function (e) {
	      var event = utils$2.Event.getEvent(e),
	          _target = utils$2.Event.getTarget(event),
	          target = _target.parentNode;
	      var currentIndex = target.getAttribute("data-row-key");
	      if (!currentIndex || currentIndex === _this.currentIndex) return;
	      if (target.nodeName.toUpperCase() === "TR") {
	        _this.synchronizeTableTr(currentIndex, null);
	      }
	    };

	    _this.set = function (fn) {
	      _this.clear();
	      _this._timeout = window.setTimeout(fn, 300);
	    };

	    _this.clear = function (event) {
	      if (_this._timeout) {
	        window.clearTimeout(_this._timeout);
	      }
	    };

	    _this.bindElement = function (el) {
	      _this.element = el;
	    };

	    _this._timeout = null;
	    _this.state = {
	      hovered: false
	    };
	    _this.onRowClick = _this.onRowClick.bind(_this);
	    _this.onRowDoubleClick = _this.onRowDoubleClick.bind(_this);
	    _this.onMouseEnter = _this.onMouseEnter.bind(_this);
	    _this.onMouseLeave = _this.onMouseLeave.bind(_this);
	    _this.expandHeight = 0;
	    _this.event = false;
	    return _this;
	  }

	  TableRow.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    var _props = this.props,
	        store = _props.store,
	        hoverKey = _props.hoverKey,
	        treeType = _props.treeType,
	        rowDraggAble = _props.rowDraggAble;

	    this.unsubscribe = store.subscribe(function () {
	      if (store.getState().currentHoverKey === hoverKey) {
	        _this2.setState({ hovered: true });
	      } else if (_this2.state.hovered === true) {
	        _this2.setState({ hovered: false });
	      }
	    });

	    this.setRowHeight();
	    if (treeType) {
	      this.setRowParentIndex();
	    }
	  };

	  /**
	   * 事件初始化
	   */


	  /**
	   * 事件移除，提供性能以及内存泄漏等问题。
	   */


	  /**
	   * 事件绑定和移除函数
	   */
	  TableRow.prototype.eventListen = function eventListen(events, type, eventSource) {
	    for (var i = 0; i < events.length; i++) {
	      var _event = events[i];
	      if (type === "remove") {
	        utils$2.EventUtil.removeHandler(eventSource, _event.key, _event.fun);
	      } else {
	        utils$2.EventUtil.addHandler(eventSource, _event.key, _event.fun);
	      }
	    }
	  };

	  /**
	   * 开始调整交换列的事件
	   */


	  /**
	   * 在一个拖动过程中，释放鼠标键时触发此事件。【目标事件】
	   * @memberof TableHeader
	   */


	  /**
	   *同步当前拖拽到阴影
	   * @memberof TableRow
	   */


	  /**
	   * 同步自己,也需要同步当前行的行显示
	   */


	  /**
	   * 设置同步的style
	   */


	  TableRow.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var rowDraggAble = this.props.rowDraggAble;

	    if (!this.event) {
	      this.event = true;
	      if (rowDraggAble) {
	        this.initEvent();
	      }
	    }

	    if (this.props.treeType) {
	      this.setRowParentIndex();
	    }
	    this.setRowHeight();
	  };

	  TableRow.prototype.componentWillUnmount = function componentWillUnmount() {
	    var _props2 = this.props,
	        record = _props2.record,
	        onDestroy = _props2.onDestroy,
	        index = _props2.index,
	        rowDraggAble = _props2.rowDraggAble;

	    onDestroy(record, index);
	    if (this.unsubscribe) {
	      this.unsubscribe();
	    }
	    if (rowDraggAble) {
	      this.removeDragAbleEvent();
	    }
	  };

	  TableRow.prototype.setRowHeight = function setRowHeight() {
	    var _props3 = this.props,
	        setRowHeight = _props3.setRowHeight,
	        _props3$expandedConte = _props3.expandedContentHeight,
	        expandedContentHeight = _props3$expandedConte === undefined ? 0 : _props3$expandedConte,
	        fixed = _props3.fixed,
	        fixedIndex = _props3.fixedIndex;

	    if (!setRowHeight || !this.element || fixed) return;
	    setRowHeight(this.element.clientHeight + expandedContentHeight, fixedIndex);
	  };

	  TableRow.prototype.setRowParentIndex = function setRowParentIndex() {
	    var _props4 = this.props,
	        index = _props4.index,
	        setRowParentIndex = _props4.setRowParentIndex,
	        fixedIndex = _props4.fixedIndex,
	        rootIndex = _props4.rootIndex;

	    setRowParentIndex(rootIndex < 0 ? index : rootIndex, fixedIndex);
	  };

	  TableRow.prototype.onRowClick = function onRowClick(event) {
	    var _props5 = this.props,
	        record = _props5.record,
	        index = _props5.index,
	        onRowClick = _props5.onRowClick,
	        expandable = _props5.expandable,
	        expandRowByClick = _props5.expandRowByClick,
	        expanded = _props5.expanded,
	        onExpand = _props5.onExpand,
	        fixedIndex = _props5.fixedIndex;

	    if (expandable && expandRowByClick) {
	      onExpand(!expanded, record, fixedIndex, event);
	    }
	    this.set(function (e) {
	      onRowClick(record, fixedIndex, event);
	    });
	  };

	  TableRow.prototype.onRowDoubleClick = function onRowDoubleClick(event) {
	    var _props6 = this.props,
	        record = _props6.record,
	        index = _props6.index,
	        onRowDoubleClick = _props6.onRowDoubleClick,
	        fixedIndex = _props6.fixedIndex;

	    this.clear();
	    onRowDoubleClick(record, fixedIndex, event);
	  };

	  TableRow.prototype.onMouseEnter = function onMouseEnter(e) {
	    var _props7 = this.props,
	        onHover = _props7.onHover,
	        hoverKey = _props7.hoverKey,
	        fixedIndex = _props7.fixedIndex,
	        syncHover = _props7.syncHover;

	    if (syncHover) {
	      this.setState({ hovered: true });
	    }
	    onHover(true, hoverKey, e, fixedIndex);
	  };

	  TableRow.prototype.onMouseLeave = function onMouseLeave(e) {
	    var _props8 = this.props,
	        onHover = _props8.onHover,
	        hoverKey = _props8.hoverKey,
	        fixedIndex = _props8.fixedIndex,
	        syncHover = _props8.syncHover;

	    if (syncHover) {
	      this.setState({ hovered: false });
	    }
	    onHover(false, hoverKey, e, fixedIndex);
	  };

	  TableRow.prototype.render = function render() {
	    var _props9 = this.props,
	        clsPrefix = _props9.clsPrefix,
	        columns = _props9.columns,
	        record = _props9.record,
	        height = _props9.height,
	        visible = _props9.visible,
	        index = _props9.index,
	        expandIconColumnIndex = _props9.expandIconColumnIndex,
	        expandIconAsCell = _props9.expandIconAsCell,
	        expanded = _props9.expanded,
	        expandRowByClick = _props9.expandRowByClick,
	        rowDraggAble = _props9.rowDraggAble,
	        expandable = _props9.expandable,
	        onExpand = _props9.onExpand,
	        needIndentSpaced = _props9.needIndentSpaced,
	        indent = _props9.indent,
	        indentSize = _props9.indentSize,
	        isHiddenExpandIcon = _props9.isHiddenExpandIcon,
	        fixed = _props9.fixed,
	        bodyDisplayInRow = _props9.bodyDisplayInRow;

	    var showSum = false;
	    var className = this.props.className;

	    if (this.state.hovered) {
	      className += ' ' + clsPrefix + '-hover';
	    }
	    //判断是否为合计行
	    if (className.indexOf('sumrow') > -1) {
	      showSum = true;
	    }
	    var cells = [];

	    var expandIcon = _react2["default"].createElement(_ExpandIcon2["default"], {
	      expandable: expandable,
	      clsPrefix: clsPrefix,
	      onExpand: onExpand,
	      needIndentSpaced: needIndentSpaced,
	      expanded: expanded,
	      record: record,
	      isHiddenExpandIcon: isHiddenExpandIcon
	    });

	    for (var i = 0; i < columns.length; i++) {
	      if (expandIconAsCell && i === 0 && !showSum) {
	        cells.push(_react2["default"].createElement(
	          'td',
	          {
	            className: clsPrefix + '-expand-icon-cell',
	            key: 'rc-table-expand-icon-cell-' + i
	          },
	          expandIcon
	        ));
	      }
	      var isColumnHaveExpandIcon = expandIconAsCell || expandRowByClick || showSum ? false : i === expandIconColumnIndex;
	      cells.push(_react2["default"].createElement(_TableCell2["default"], {
	        clsPrefix: clsPrefix,
	        record: record,
	        indentSize: indentSize,
	        indent: indent,
	        index: index,
	        column: columns[i],
	        key: index + "_" + (columns[i].key || columns[i].dataIndex || i),
	        fixed: fixed,
	        showSum: showSum,
	        expandIcon: isColumnHaveExpandIcon ? expandIcon : null,
	        bodyDisplayInRow: bodyDisplayInRow
	      }));
	    }
	    var style = { height: height };
	    if (!visible) {
	      style.display = 'none';
	    }

	    return _react2["default"].createElement(
	      'tr',
	      {
	        draggable: rowDraggAble,
	        onClick: this.onRowClick,
	        onDoubleClick: this.onRowDoubleClick,
	        onMouseEnter: this.onMouseEnter,
	        onMouseLeave: this.onMouseLeave,
	        className: clsPrefix + ' ' + className + ' ' + clsPrefix + '-level-' + indent,
	        style: style,
	        'data-row-key': record && record.key ? record.key : "null"
	        // key={hoverKey}
	        , ref: this.bindElement
	      },
	      cells.length > 0 ? cells : _react2["default"].createElement('td', null)
	    );
	  };

	  return TableRow;
	}(React__default.Component);

	TableRow.propTypes = propTypes$1;
	TableRow.defaultProps = defaultProps;

	exports["default"] = TableRow;
	module.exports = exports['default'];
	});

	unwrapExports(TableRow_1);

	/* eslint-disable no-undefined,no-param-reassign,no-shadow */

	/**
	 * Throttle execution of a function. Especially useful for rate limiting
	 * execution of handlers on events like resize and scroll.
	 *
	 * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
	 * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
	 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
	 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
	 *                                    the internal counter is reset)
	 * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
	 *                                    to `callback` when the throttled-function is executed.
	 * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
	 *                                    schedule `callback` to execute after `delay` ms.
	 *
	 * @return {Function}  A new, throttled, function.
	 */
	function throttle$1 (delay, noTrailing, callback, debounceMode) {
	  /*
	   * After wrapper has stopped being called, this timeout ensures that
	   * `callback` is executed at the proper times in `throttle` and `end`
	   * debounce modes.
	   */
	  var timeoutID;
	  var cancelled = false; // Keep track of the last time `callback` was executed.

	  var lastExec = 0; // Function to clear existing timeout

	  function clearExistingTimeout() {
	    if (timeoutID) {
	      clearTimeout(timeoutID);
	    }
	  } // Function to cancel next exec


	  function cancel() {
	    clearExistingTimeout();
	    cancelled = true;
	  } // `noTrailing` defaults to falsy.


	  if (typeof noTrailing !== 'boolean') {
	    debounceMode = callback;
	    callback = noTrailing;
	    noTrailing = undefined;
	  }
	  /*
	   * The `wrapper` function encapsulates all of the throttling / debouncing
	   * functionality and when executed will limit the rate at which `callback`
	   * is executed.
	   */


	  function wrapper() {
	    var self = this;
	    var elapsed = Date.now() - lastExec;
	    var args = arguments;

	    if (cancelled) {
	      return;
	    } // Execute `callback` and update the `lastExec` timestamp.


	    function exec() {
	      lastExec = Date.now();
	      callback.apply(self, args);
	    }
	    /*
	     * If `debounceMode` is true (at begin) this is used to clear the flag
	     * to allow future `callback` executions.
	     */


	    function clear() {
	      timeoutID = undefined;
	    }

	    if (debounceMode && !timeoutID) {
	      /*
	       * Since `wrapper` is being called for the first time and
	       * `debounceMode` is true (at begin), execute `callback`.
	       */
	      exec();
	    }

	    clearExistingTimeout();

	    if (debounceMode === undefined && elapsed > delay) {
	      /*
	       * In throttle mode, if `delay` time has been exceeded, execute
	       * `callback`.
	       */
	      exec();
	    } else if (noTrailing !== true) {
	      /*
	       * In trailing throttle mode, since `delay` time has not been
	       * exceeded, schedule `callback` to execute `delay` ms after most
	       * recent execution.
	       *
	       * If `debounceMode` is true (at begin), schedule `clear` to execute
	       * after `delay` ms.
	       *
	       * If `debounceMode` is false (at end), schedule `callback` to
	       * execute after `delay` ms.
	       */
	      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
	    }
	  }

	  wrapper.cancel = cancel; // Return the wrapper function.

	  return wrapper;
	}

	/* eslint-disable no-undefined */
	/**
	 * Debounce execution of a function. Debouncing, unlike throttling,
	 * guarantees that a function is only executed a single time, either at the
	 * very beginning of a series of calls, or at the very end.
	 *
	 * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
	 * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds
	 *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.
	 *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).
	 * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
	 *                                  to `callback` when the debounced-function is executed.
	 *
	 * @return {Function} A new, debounced function.
	 */

	function debounce (delay, atBegin, callback) {
	  return callback === undefined ? throttle$1(delay, atBegin, false) : throttle$1(delay, callback, atBegin !== false);
	}

	var index_esm = /*#__PURE__*/Object.freeze({
		throttle: throttle$1,
		debounce: debounce
	});

	var KeyCode_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */

	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};

	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode.isTextModifyingKeyEvent = function isTextModifyingKeyEvent(e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	  // Function keys don't generate text
	  keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	    return false;
	  }

	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode.ALT:
	    case KeyCode.CAPS_LOCK:
	    case KeyCode.CONTEXT_MENU:
	    case KeyCode.CTRL:
	    case KeyCode.DOWN:
	    case KeyCode.END:
	    case KeyCode.ESC:
	    case KeyCode.HOME:
	    case KeyCode.INSERT:
	    case KeyCode.LEFT:
	    case KeyCode.MAC_FF_META:
	    case KeyCode.META:
	    case KeyCode.NUMLOCK:
	    case KeyCode.NUM_CENTER:
	    case KeyCode.PAGE_DOWN:
	    case KeyCode.PAGE_UP:
	    case KeyCode.PAUSE:
	    case KeyCode.PRINT_SCREEN:
	    case KeyCode.RIGHT:
	    case KeyCode.SHIFT:
	    case KeyCode.UP:
	    case KeyCode.WIN_KEY:
	    case KeyCode.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};

	/*
	 whether character is entered.
	 */
	KeyCode.isCharacterKey = function isCharacterKey(keyCode) {
	  if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
	    return true;
	  }

	  if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
	    return true;
	  }

	  if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
	    return true;
	  }

	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }

	  switch (keyCode) {
	    case KeyCode.SPACE:
	    case KeyCode.QUESTION_MARK:
	    case KeyCode.NUM_PLUS:
	    case KeyCode.NUM_MINUS:
	    case KeyCode.NUM_PERIOD:
	    case KeyCode.NUM_DIVISION:
	    case KeyCode.SEMICOLON:
	    case KeyCode.DASH:
	    case KeyCode.EQUALS:
	    case KeyCode.COMMA:
	    case KeyCode.PERIOD:
	    case KeyCode.SLASH:
	    case KeyCode.APOSTROPHE:
	    case KeyCode.SINGLE_QUOTE:
	    case KeyCode.OPEN_SQUARE_BRACKET:
	    case KeyCode.BACKSLASH:
	    case KeyCode.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};

	exports['default'] = KeyCode;
	module.exports = exports['default'];
	});

	unwrapExports(KeyCode_1);

	var DateConstants = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  DATE_ROW_COUNT: 6,
	  DATE_COL_COUNT: 7
	};
	module.exports = exports["default"];
	});

	unwrapExports(DateConstants);

	var moment = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	    module.exports = factory();
	}(commonjsGlobal, (function () {
	    var hookCallback;

	    function hooks () {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback (callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return input != null && Object.prototype.toString.call(input) === '[object Object]';
	    }

	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return (Object.getOwnPropertyNames(obj).length === 0);
	        } else {
	            var k;
	            for (k in obj) {
	                if (obj.hasOwnProperty(k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    function isNumber(input) {
	        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	    }

	    function isDate(input) {
	        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	    }

	    function map(arr, fn) {
	        var res = [], i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function createUTC (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty           : false,
	            unusedTokens    : [],
	            unusedInput     : [],
	            overflow        : -2,
	            charsLeftOver   : 0,
	            nullInput       : false,
	            invalidMonth    : null,
	            invalidFormat   : false,
	            userInvalidated : false,
	            iso             : false,
	            parsedDateParts : [],
	            meridiem        : null,
	            rfc2822         : false,
	            weekdayMismatch : false
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this);
	            var len = t.length >>> 0;

	            for (var i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m);
	            var parsedParts = some.call(flags.parsedDateParts, function (i) {
	                return i != null;
	            });
	            var isNowValid = !isNaN(m._d.getTime()) &&
	                flags.overflow < 0 &&
	                !flags.empty &&
	                !flags.invalidMonth &&
	                !flags.invalidWeekday &&
	                !flags.weekdayMismatch &&
	                !flags.nullInput &&
	                !flags.invalidFormat &&
	                !flags.userInvalidated &&
	                (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid = isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            }
	            else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function createInvalid (flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        }
	        else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = hooks.momentProperties = [];

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i = 0; i < momentProperties.length; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    var updateInProgress = false;

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment (obj) {
	        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	    }

	    function absFloor (number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if ((dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    function warn(msg) {
	        if (hooks.suppressDeprecationWarnings === false &&
	                (typeof console !==  'undefined') && console.warn) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [];
	                var arg;
	                for (var i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (var key in arguments[0]) {
	                            arg += key + ': ' + arguments[0][key] + ', ';
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	    }

	    function set (config) {
	        var prop, i;
	        for (i in config) {
	            prop = config[i];
	            if (isFunction(prop)) {
	                this[i] = prop;
	            } else {
	                this['_' + i] = prop;
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' + (/\d{1,2}/).source);
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig), prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (hasOwnProp(parentConfig, prop) &&
	                    !hasOwnProp(childConfig, prop) &&
	                    isObject(parentConfig[prop])) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i, res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay : '[Today at] LT',
	        nextDay : '[Tomorrow at] LT',
	        nextWeek : 'dddd [at] LT',
	        lastDay : '[Yesterday at] LT',
	        lastWeek : '[Last] dddd [at] LT',
	        sameElse : 'L'
	    };

	    function calendar (key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    var defaultLongDateFormat = {
	        LTS  : 'h:mm:ss A',
	        LT   : 'h:mm A',
	        L    : 'MM/DD/YYYY',
	        LL   : 'MMMM D, YYYY',
	        LLL  : 'MMMM D, YYYY h:mm A',
	        LLLL : 'dddd, MMMM D, YYYY h:mm A'
	    };

	    function longDateFormat (key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	            return val.slice(1);
	        });

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate () {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d';
	    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	    function ordinal (number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future : 'in %s',
	        past   : '%s ago',
	        s  : 'a few seconds',
	        ss : '%d seconds',
	        m  : 'a minute',
	        mm : '%d minutes',
	        h  : 'an hour',
	        hh : '%d hours',
	        d  : 'a day',
	        dd : '%d days',
	        M  : 'a month',
	        MM : '%d months',
	        y  : 'a year',
	        yy : '%d years'
	    };

	    function relativeTime (number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return (isFunction(output)) ?
	            output(number, withoutSuffix, string, isFuture) :
	            output.replace(/%d/i, number);
	    }

	    function pastFuture (diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias (unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [];
	        for (var u in unitsObj) {
	            units.push({unit: u, priority: priorities[u]});
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	    var formatFunctions = {};

	    var formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken (token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(func.apply(this, arguments), token);
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens), i, length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '', i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var match1         = /\d/;            //       0 - 9
	    var match2         = /\d\d/;          //      00 - 99
	    var match3         = /\d{3}/;         //     000 - 999
	    var match4         = /\d{4}/;         //    0000 - 9999
	    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	    var match1to2      = /\d\d?/;         //       0 - 99
	    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	    var match1to3      = /\d{1,3}/;       //       0 - 999
	    var match1to4      = /\d{1,4}/;       //       0 - 9999
	    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	    var matchUnsigned  = /\d+/;           //       0 - inf
	    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	    // any word (or two) characters or numbers including two/three word month in arabic.
	    // includes scottish gaelic two word and hyphenated months
	    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

	    var regexes = {};

	    function addRegexToken (token, regex, strictRegex) {
	        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	            return (isStrict && strictRegex) ? strictRegex : regex;
	        };
	    }

	    function getParseRegexForToken (token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	            return p1 || p2 || p3 || p4;
	        }));
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken (token, callback) {
	        var i, func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken (token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0;
	    var MONTH = 1;
	    var DATE = 2;
	    var HOUR = 3;
	    var MINUTE = 4;
	    var SECOND = 5;
	    var MILLISECOND = 6;
	    var WEEK = 7;
	    var WEEKDAY = 8;

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? '' + y : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY',   4],       0, 'year');
	    addFormatToken(0, ['YYYYY',  5],       0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y',      matchSigned);
	    addRegexToken('YY',     match1to2, match2);
	    addRegexToken('YYYY',   match1to4, match4);
	    addRegexToken('YYYYY',  match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    // HOOKS

	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear () {
	        return isLeapYear(this.year());
	    }

	    function makeGetSet (unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }

	    function get (mom, unit) {
	        return mom.isValid() ?
	            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	    }

	    function set$1 (mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	            }
	            else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }

	    // MOMENTS

	    function stringGet (units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }


	    function stringSet (units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units);
	            for (var i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M',    match1to2);
	    addRegexToken('MM',   match1to2, match2);
	    addRegexToken('MMM',  function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	    function localeMonths (m, format) {
	        if (!m) {
	            return isArray(this._months) ? this._months :
	                this._months['standalone'];
	        }
	        return isArray(this._months) ? this._months[m.month()] :
	            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	    function localeMonthsShort (m, format) {
	        if (!m) {
	            return isArray(this._monthsShort) ? this._monthsShort :
	                this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	    }

	    function handleStrictParse(monthName, format, strict) {
	        var i, ii, mom, llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse (monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth (mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth (value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }

	    function getDaysInMonth () {
	        return daysInMonth(this.year(), this.month());
	    }

	    var defaultMonthsShortRegex = matchWord;
	    function monthsShortRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict ?
	                this._monthsShortStrictRegex : this._monthsShortRegex;
	        }
	    }

	    var defaultMonthsRegex = matchWord;
	    function monthsRegex (isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict ?
	                this._monthsStrictRegex : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    }

	    function createDate (y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }

	        return date;
	    }

	    function createUTCDate (y) {
	        var date;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            var args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }

	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear, resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek, resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w',  match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W',  match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // LOCALES

	    function localeWeek (mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow : 0, // Sunday is the first day of the week.
	        doy : 6  // The week that contains Jan 6th is the first week of the year.
	    };

	    function localeFirstDayOfWeek () {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear () {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek (input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek (input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d',    match1to2);
	    addRegexToken('e',    match1to2);
	    addRegexToken('E',    match1to2);
	    addRegexToken('dd',   function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd',   function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd',   function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES
	    function shiftWeekdays (ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	    function localeWeekdays (m, format) {
	        var weekdays = isArray(this._weekdays) ? this._weekdays :
	            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
	        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
	            : (m) ? weekdays[m.day()] : weekdays;
	    }

	    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	    function localeWeekdaysShort (m) {
	        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	    }

	    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	    function localeWeekdaysMin (m) {
	        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	    }

	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse (weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
	                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
	                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
	            }
	            if (!this._weekdaysParse[i]) {
	                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek (input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    var defaultWeekdaysRegex = matchWord;
	    function weekdaysRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict ?
	                this._weekdaysStrictRegex : this._weekdaysRegex;
	        }
	    }

	    var defaultWeekdaysShortRegex = matchWord;
	    function weekdaysShortRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict ?
	                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	        }
	    }

	    var defaultWeekdaysMinRegex = matchWord;
	    function weekdaysMinRegex (isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict ?
	                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	        }
	    }


	    function computeWeekdaysParse () {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	            i, mom, minp, shortp, longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = this.weekdaysMin(mom, '');
	            shortp = this.weekdaysShort(mom, '');
	            longp = this.weekdays(mom, '');
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 7; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2);
	    });

	    function meridiem (token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem (isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a',  matchMeridiem);
	    addRegexToken('A',  matchMeridiem);
	    addRegexToken('H',  match1to2);
	    addRegexToken('h',  match1to2);
	    addRegexToken('k',  match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4;
	        var pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM (input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return ((input + '').toLowerCase().charAt(0) === 'p');
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	    function localeMeridiem (hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }


	    // MOMENTS

	    // Setting the hour should keep the time, because the user explicitly
	    // specified which hour they want. So trying to maintain the same hour (in
	    // a new timezone) makes sense. Adding/subtracting hours does not follow
	    // this rule.
	    var getSetHour = makeGetSet('Hours', true);

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse
	    };

	    // internal storage for locale config files
	    var locales = {};
	    var localeFamilies = {};
	    var globalLocale;

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0, j, next, locale, split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }

	    function loadLocale(name) {
	        var oldLocale = null;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (!locales[name] && ('object' !== 'undefined') &&
	                module && module.exports) {
	            try {
	                oldLocale = globalLocale._abbr;
	                var aliasedRequire = commonjsRequire;
	                aliasedRequire('./locale/' + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {}
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale (key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            }
	            else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            }
	            else {
	                if ((typeof console !==  'undefined') && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
	                }
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale (name, config) {
	        if (config !== null) {
	            var locale, parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple('defineLocaleOverride',
	                        'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }

	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);


	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale, tmpLocale, parentConfig = baseConfig;
	            // MERGE
	            tmpLocale = loadLocale(name);
	            if (tmpLocale != null) {
	                parentConfig = tmpLocale._config;
	            }
	            config = mergeConfigs(parentConfig, config);
	            locale = new Locale(config);
	            locale.parentLocale = locales[name];
	            locales[name] = locale;

	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function getLocale (key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow (m) {
	        var overflow;
	        var a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	                -1;

	            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray (config) {
	        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (config._a[HOUR] === 24 &&
	                config._a[MINUTE] === 0 &&
	                config._a[SECOND] === 0 &&
	                config._a[MILLISECOND] === 0) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }

	        // check for mismatching day of week
	        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            var curWeek = weekOfYear(createLocal(), dow, doy);

	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	            // Default to current week.
	            week = defaults(w.w, curWeek.week);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	    var isoDates = [
	        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	        ['YYYY-DDD', /\d{4}-\d{3}/],
	        ['YYYY-MM', /\d{4}-\d\d/, false],
	        ['YYYYYYMMDD', /[+-]\d{10}/],
	        ['YYYYMMDD', /\d{8}/],
	        // YYYYMM is NOT allowed by the standard
	        ['GGGG[W]WWE', /\d{4}W\d{3}/],
	        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	        ['YYYYDDD', /\d{7}/]
	    ];

	    // iso time formats and regexes
	    var isoTimes = [
	        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	        ['HH:mm', /\d\d:\d\d/],
	        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	        ['HHmmss', /\d\d\d\d\d\d/],
	        ['HHmm', /\d\d\d\d/],
	        ['HH', /\d\d/]
	    ];

	    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	    // date from iso format
	    function configFromISO(config) {
	        var i, l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime, dateFormat, timeFormat, tzFormat;

	        if (match) {
	            getParsingFlags(config).iso = true;

	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

	    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10)
	        ];

	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }

	        return result;
	    }

	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }

	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	    }

	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }

	    var obsOffsets = {
	        UT: 0,
	        GMT: 0,
	        EDT: -4 * 60,
	        EST: -5 * 60,
	        CDT: -5 * 60,
	        CST: -6 * 60,
	        MDT: -6 * 60,
	        MST: -7 * 60,
	        PDT: -7 * 60,
	        PST: -8 * 60
	    };

	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10);
	            var m = hm % 100, h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }

	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i));
	        if (match) {
	            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }

	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);

	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from iso format or fallback
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);

	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        // Final attempt, use Input Fallback
	        hooks.createFromInputFallback(config);
	    }

	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	        'discouraged and will be removed in an upcoming major release. Please refer to ' +
	        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};

	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i, parsedInput, tokens, token, skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0;

	        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	            // console.log('token', token, 'parsedInput', parsedInput,
	            //         'regex', getParseRegexForToken(token, config));
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                }
	                else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            }
	            else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	        configFromArray(config);
	        checkOverflow(config);
	    }


	    function meridiemFixWrap (locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,

	            scoreToBeat,
	            i,
	            currentScore;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (!isValid(tempConfig)) {
	                continue;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (scoreToBeat == null || currentScore < scoreToBeat) {
	                scoreToBeat = currentScore;
	                bestMoment = tempConfig;
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i);
	        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	            return obj && parseInt(obj, 10);
	        });

	        configFromArray(config);
	    }

	    function createFromConfig (config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig (config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({nullInput: true});
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        }  else {
	            configFromInput(config);
	        }

	        if (!isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC (input, format, locale, strict, isUTC) {
	        var c = {};

	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }

	        if ((isObject(input) && isObjectEmpty(input)) ||
	                (isArray(input) && input.length === 0)) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function createLocal (input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other < this ? this : other;
	            } else {
	                return createInvalid();
	            }
	        }
	    );

	    var prototypeMax = deprecate(
	        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	        function () {
	            var other = createLocal.apply(null, arguments);
	            if (this.isValid() && other.isValid()) {
	                return other > this ? this : other;
	            } else {
	                return createInvalid();
	            }
	        }
	    );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max () {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +(new Date());
	    };

	    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

	    function isDurationValid(m) {
	        for (var key in m) {
	            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	                return false;
	            }
	        }

	        var unitHasDecimal = false;
	        for (var i = 0; i < ordering.length; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }

	        return true;
	    }

	    function isValid$1() {
	        return this._isValid;
	    }

	    function createInvalid$1() {
	        return createDuration(NaN);
	    }

	    function Duration (duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        this._isValid = isDurationValid(normalizedInput);

	        // representation for dateAddRemove
	        this._milliseconds = +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days +
	            weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months +
	            quarters * 3 +
	            years * 12;

	        this._data = {};

	        this._locale = getLocale();

	        this._bubble();
	    }

	    function isDuration (obj) {
	        return obj instanceof Duration;
	    }

	    function absRound (number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // FORMATTING

	    function offset (token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset();
	            var sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z',  matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher);

	        if (matches === null) {
	            return null;
	        }

	        var chunk   = matches[matches.length - 1] || [];
	        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        var minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return minutes === 0 ?
	          0 :
	          parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }

	    function getDateOffset (m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset (input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone (input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC (keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal (keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset () {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            }
	            else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset (input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime () {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted () {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {};

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted = this.isValid() &&
	                compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal () {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset () {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc () {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	    // and further modified to allow for strings containing both week and day
	    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	    function createDuration (input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms : input._milliseconds,
	                d  : input._days,
	                M  : input._months
	            };
	        } else if (isNumber(input)) {
	            duration = {};
	            if (key) {
	                duration[key] = input;
	            } else {
	                duration.milliseconds = input;
	            }
	        } else if (!!(match = aspNetRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y  : 0,
	                d  : toInt(match[DATE])                         * sign,
	                h  : toInt(match[HOUR])                         * sign,
	                m  : toInt(match[MINUTE])                       * sign,
	                s  : toInt(match[SECOND])                       * sign,
	                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	            };
	        } else if (!!(match = isoRegex.exec(input))) {
	            sign = (match[1] === '-') ? -1 : 1;
	            duration = {
	                y : parseIso(match[2], sign),
	                M : parseIso(match[3], sign),
	                w : parseIso(match[4], sign),
	                d : parseIso(match[5], sign),
	                h : parseIso(match[6], sign),
	                m : parseIso(match[7], sign),
	                s : parseIso(match[8], sign)
	            };
	        } else if (duration == null) {// checks for null or undefined
	            duration = {};
	        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        return ret;
	    }

	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;

	    function parseIso (inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {};

	        res.months = other.month() - base.month() +
	            (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return {milliseconds: 0, months: 0};
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	                tmp = val; val = period; period = tmp;
	            }

	            val = typeof val === 'string' ? +val : val;
	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function addSubtract (mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add      = createAdder(1, 'add');
	    var subtract = createAdder(-1, 'subtract');

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6 ? 'sameElse' :
	                diff < -1 ? 'lastWeek' :
	                diff < 0 ? 'lastDay' :
	                diff < 1 ? 'sameDay' :
	                diff < 2 ? 'nextDay' :
	                diff < 7 ? 'nextWeek' : 'sameElse';
	    }

	    function calendar$1 (time, formats) {
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse';

	        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	    }

	    function clone () {
	        return new Moment(this);
	    }

	    function isAfter (input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore (input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween (from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
	    }

	    function isSame (input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	        }
	    }

	    function isSameOrAfter (input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }

	    function isSameOrBefore (input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }

	    function diff (input, units, asFloat) {
	        var that,
	            zoneDelta,
	            output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        switch (units) {
	            case 'year': output = monthDiff(this, that) / 12; break;
	            case 'month': output = monthDiff(this, that); break;
	            case 'quarter': output = monthDiff(this, that) / 3; break;
	            case 'second': output = (this - that) / 1e3; break; // 1000
	            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
	            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
	            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default: output = this - that;
	        }

	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff (a, b) {
	        // difference in months
	        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2, adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString () {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true;
	        var m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
	    }

	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect () {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment';
	        var zone = '';
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        var prefix = '[' + func + '("]';
	        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        var suffix = zone + '[")]';

	        return this.format(prefix + year + datetime + suffix);
	    }

	    function format (inputString) {
	        if (!inputString) {
	            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 createLocal(time).isValid())) {
	            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow (withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }

	    function to (time, withoutSuffix) {
	        if (this.isValid() &&
	                ((isMoment(time) && time.isValid()) ||
	                 createLocal(time).isValid())) {
	            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow (withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale (key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData () {
	        return this._locale;
	    }

	    var MS_PER_SECOND = 1000;
	    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
	    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
	    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return (dividend % divisor + divisor) % divisor;
	    }

	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }

	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }

	    function startOf (units) {
	        var time;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
	                break;
	            case 'isoWeek':
	                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function endOf (units) {
	        var time;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
	                break;
	            case 'isoWeek':
	                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function valueOf () {
	        return this._d.valueOf() - ((this._offset || 0) * 60000);
	    }

	    function unix () {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate () {
	        return new Date(this.valueOf());
	    }

	    function toArray () {
	        var m = this;
	        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	    }

	    function toObject () {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds()
	        };
	    }

	    function toJSON () {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function isValid$2 () {
	        return isValid(this);
	    }

	    function parsingFlags () {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt () {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict
	        };
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken (token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg',     'weekYear');
	    addWeekYearFormatToken('ggggg',    'weekYear');
	    addWeekYearFormatToken('GGGG',  'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);


	    // PARSING

	    addRegexToken('G',      matchSigned);
	    addRegexToken('g',      matchSigned);
	    addRegexToken('GG',     match1to2, match2);
	    addRegexToken('gg',     match1to2, match2);
	    addRegexToken('GGGG',   match1to4, match4);
	    addRegexToken('gggg',   match1to4, match4);
	    addRegexToken('GGGGG',  match1to6, match6);
	    addRegexToken('ggggg',  match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input,
	                this.week(),
	                this.weekday(),
	                this.localeData()._week.dow,
	                this.localeData()._week.doy);
	    }

	    function getSetISOWeekYear (input) {
	        return getSetWeekYearHelper.call(this,
	                input, this.isoWeek(), this.isoWeekday(), 1, 4);
	    }

	    function getISOWeeksInYear () {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getWeeksInYear () {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter (input) {
	        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIORITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D',  match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict ?
	          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	          locale._dayOfMonthOrdinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD',  match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear (input) {
	        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m',  match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s',  match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });


	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S',    match1to3, match1);
	    addRegexToken('SS',   match1to3, match2);
	    addRegexToken('SSS',  match1to3, match3);

	    var token;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }
	    // MOMENTS

	    var getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z',  0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr () {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName () {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var proto = Moment.prototype;

	    proto.add               = add;
	    proto.calendar          = calendar$1;
	    proto.clone             = clone;
	    proto.diff              = diff;
	    proto.endOf             = endOf;
	    proto.format            = format;
	    proto.from              = from;
	    proto.fromNow           = fromNow;
	    proto.to                = to;
	    proto.toNow             = toNow;
	    proto.get               = stringGet;
	    proto.invalidAt         = invalidAt;
	    proto.isAfter           = isAfter;
	    proto.isBefore          = isBefore;
	    proto.isBetween         = isBetween;
	    proto.isSame            = isSame;
	    proto.isSameOrAfter     = isSameOrAfter;
	    proto.isSameOrBefore    = isSameOrBefore;
	    proto.isValid           = isValid$2;
	    proto.lang              = lang;
	    proto.locale            = locale;
	    proto.localeData        = localeData;
	    proto.max               = prototypeMax;
	    proto.min               = prototypeMin;
	    proto.parsingFlags      = parsingFlags;
	    proto.set               = stringSet;
	    proto.startOf           = startOf;
	    proto.subtract          = subtract;
	    proto.toArray           = toArray;
	    proto.toObject          = toObject;
	    proto.toDate            = toDate;
	    proto.toISOString       = toISOString;
	    proto.inspect           = inspect;
	    proto.toJSON            = toJSON;
	    proto.toString          = toString;
	    proto.unix              = unix;
	    proto.valueOf           = valueOf;
	    proto.creationData      = creationData;
	    proto.year       = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear    = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month       = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week           = proto.weeks        = getSetWeek;
	    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
	    proto.weeksInYear    = getWeeksInYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.date       = getSetDayOfMonth;
	    proto.day        = proto.days             = getSetDayOfWeek;
	    proto.weekday    = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear  = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset            = getSetOffset;
	    proto.utc                  = setOffsetToUTC;
	    proto.local                = setOffsetToLocal;
	    proto.parseZone            = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST                = isDaylightSavingTime;
	    proto.isLocal              = isLocal;
	    proto.isUtcOffset          = isUtcOffset;
	    proto.isUtc                = isUtc;
	    proto.isUTC                = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	    function createUnix (input) {
	        return createLocal(input * 1000);
	    }

	    function createInZone () {
	        return createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat (string) {
	        return string;
	    }

	    var proto$1 = Locale.prototype;

	    proto$1.calendar        = calendar;
	    proto$1.longDateFormat  = longDateFormat;
	    proto$1.invalidDate     = invalidDate;
	    proto$1.ordinal         = ordinal;
	    proto$1.preparse        = preParsePostFormat;
	    proto$1.postformat      = preParsePostFormat;
	    proto$1.relativeTime    = relativeTime;
	    proto$1.pastFuture      = pastFuture;
	    proto$1.set             = set;

	    proto$1.months            =        localeMonths;
	    proto$1.monthsShort       =        localeMonthsShort;
	    proto$1.monthsParse       =        localeMonthsParse;
	    proto$1.monthsRegex       = monthsRegex;
	    proto$1.monthsShortRegex  = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	    proto$1.weekdays       =        localeWeekdays;
	    proto$1.weekdaysMin    =        localeWeekdaysMin;
	    proto$1.weekdaysShort  =        localeWeekdaysShort;
	    proto$1.weekdaysParse  =        localeWeekdaysParse;

	    proto$1.weekdaysRegex       =        weekdaysRegex;
	    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
	    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;

	    function get$1 (format, index, field, setter) {
	        var locale = getLocale();
	        var utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl (format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl (localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0;

	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }

	        var i;
	        var out = [];
	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function listMonths (format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function listMonthsShort (format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function listWeekdays (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function listWeekdaysShort (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function listWeekdaysMin (localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    getSetGlobalLocale('en', {
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (toInt(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        }
	    });

	    // Side effect imports

	    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	    var mathAbs = Math.abs;

	    function abs () {
	        var data           = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days         = mathAbs(this._days);
	        this._months       = mathAbs(this._months);

	        data.milliseconds  = mathAbs(data.milliseconds);
	        data.seconds       = mathAbs(data.seconds);
	        data.minutes       = mathAbs(data.minutes);
	        data.hours         = mathAbs(data.hours);
	        data.months        = mathAbs(data.months);
	        data.years         = mathAbs(data.years);

	        return this;
	    }

	    function addSubtract$1 (duration, input, value, direction) {
	        var other = createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days         += direction * other._days;
	        duration._months       += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1 (input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1 (input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }

	    function absCeil (number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble () {
	        var milliseconds = this._milliseconds;
	        var days         = this._days;
	        var months       = this._months;
	        var data         = this._data;
	        var seconds, minutes, hours, years, monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0))) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds           = absFloor(milliseconds / 1000);
	        data.seconds      = seconds % 60;

	        minutes           = absFloor(seconds / 60);
	        data.minutes      = minutes % 60;

	        hours             = absFloor(minutes / 60);
	        data.hours        = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days   = days;
	        data.months = months;
	        data.years  = years;

	        return this;
	    }

	    function daysToMonths (days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return days * 4800 / 146097;
	    }

	    function monthsToDays (months) {
	        // the reverse of daysToMonths
	        return months * 146097 / 4800;
	    }

	    function as (units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days;
	        var months;
	        var milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':   return months;
	                case 'quarter': return months / 3;
	                case 'year':    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week'   : return days / 7     + milliseconds / 6048e5;
	                case 'day'    : return days         + milliseconds / 864e5;
	                case 'hour'   : return days * 24    + milliseconds / 36e5;
	                case 'minute' : return days * 1440  + milliseconds / 6e4;
	                case 'second' : return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	                default: throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function valueOf$1 () {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs (alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms');
	    var asSeconds      = makeAs('s');
	    var asMinutes      = makeAs('m');
	    var asHours        = makeAs('h');
	    var asDays         = makeAs('d');
	    var asWeeks        = makeAs('w');
	    var asMonths       = makeAs('M');
	    var asQuarters     = makeAs('Q');
	    var asYears        = makeAs('y');

	    function clone$1 () {
	        return createDuration(this);
	    }

	    function get$2 (units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }

	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }

	    var milliseconds = makeGetter('milliseconds');
	    var seconds      = makeGetter('seconds');
	    var minutes      = makeGetter('minutes');
	    var hours        = makeGetter('hours');
	    var days         = makeGetter('days');
	    var months       = makeGetter('months');
	    var years        = makeGetter('years');

	    function weeks () {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round;
	    var thresholds = {
	        ss: 44,         // a few seconds to seconds
	        s : 45,         // seconds to minute
	        m : 45,         // minutes to hour
	        h : 22,         // hours to day
	        d : 26,         // days to month
	        M : 11          // months to year
	    };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	        var duration = createDuration(posNegDuration).abs();
	        var seconds  = round(duration.as('s'));
	        var minutes  = round(duration.as('m'));
	        var hours    = round(duration.as('h'));
	        var days     = round(duration.as('d'));
	        var months   = round(duration.as('M'));
	        var years    = round(duration.as('y'));

	        var a = seconds <= thresholds.ss && ['s', seconds]  ||
	                seconds < thresholds.s   && ['ss', seconds] ||
	                minutes <= 1             && ['m']           ||
	                minutes < thresholds.m   && ['mm', minutes] ||
	                hours   <= 1             && ['h']           ||
	                hours   < thresholds.h   && ['hh', hours]   ||
	                days    <= 1             && ['d']           ||
	                days    < thresholds.d   && ['dd', days]    ||
	                months  <= 1             && ['M']           ||
	                months  < thresholds.M   && ['MM', months]  ||
	                years   <= 1             && ['y']           || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding (roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof(roundingFunction) === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold (threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }

	    function humanize (withSuffix) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var locale = this.localeData();
	        var output = relativeTime$1(this, !withSuffix, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var abs$1 = Math.abs;

	    function sign(x) {
	        return ((x > 0) - (x < 0)) || +x;
	    }

	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var seconds = abs$1(this._milliseconds) / 1000;
	        var days         = abs$1(this._days);
	        var months       = abs$1(this._months);
	        var minutes, hours, years;

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes           = absFloor(seconds / 60);
	        hours             = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years  = absFloor(months / 12);
	        months %= 12;


	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        var Y = years;
	        var M = months;
	        var D = days;
	        var h = hours;
	        var m = minutes;
	        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	        var total = this.asSeconds();

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        var totalSign = total < 0 ? '-' : '';
	        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	        return totalSign + 'P' +
	            (Y ? ymSign + Y + 'Y' : '') +
	            (M ? ymSign + M + 'M' : '') +
	            (D ? daysSign + D + 'D' : '') +
	            ((h || m || s) ? 'T' : '') +
	            (h ? hmsSign + h + 'H' : '') +
	            (m ? hmsSign + m + 'M' : '') +
	            (s ? hmsSign + s + 'S' : '');
	    }

	    var proto$2 = Duration.prototype;

	    proto$2.isValid        = isValid$1;
	    proto$2.abs            = abs;
	    proto$2.add            = add$1;
	    proto$2.subtract       = subtract$1;
	    proto$2.as             = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds      = asSeconds;
	    proto$2.asMinutes      = asMinutes;
	    proto$2.asHours        = asHours;
	    proto$2.asDays         = asDays;
	    proto$2.asWeeks        = asWeeks;
	    proto$2.asMonths       = asMonths;
	    proto$2.asQuarters     = asQuarters;
	    proto$2.asYears        = asYears;
	    proto$2.valueOf        = valueOf$1;
	    proto$2._bubble        = bubble;
	    proto$2.clone          = clone$1;
	    proto$2.get            = get$2;
	    proto$2.milliseconds   = milliseconds;
	    proto$2.seconds        = seconds;
	    proto$2.minutes        = minutes;
	    proto$2.hours          = hours;
	    proto$2.days           = days;
	    proto$2.weeks          = weeks;
	    proto$2.months         = months;
	    proto$2.years          = years;
	    proto$2.humanize       = humanize;
	    proto$2.toISOString    = toISOString$1;
	    proto$2.toString       = toISOString$1;
	    proto$2.toJSON         = toISOString$1;
	    proto$2.locale         = locale;
	    proto$2.localeData     = localeData;

	    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	    proto$2.lang = lang;

	    // Side effect imports

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input, 10) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    // Side effect imports


	    hooks.version = '2.24.0';

	    setHookCallback(createLocal);

	    hooks.fn                    = proto;
	    hooks.min                   = min;
	    hooks.max                   = max;
	    hooks.now                   = now;
	    hooks.utc                   = createUTC;
	    hooks.unix                  = createUnix;
	    hooks.months                = listMonths;
	    hooks.isDate                = isDate;
	    hooks.locale                = getSetGlobalLocale;
	    hooks.invalid               = createInvalid;
	    hooks.duration              = createDuration;
	    hooks.isMoment              = isMoment;
	    hooks.weekdays              = listWeekdays;
	    hooks.parseZone             = createInZone;
	    hooks.localeData            = getLocale;
	    hooks.isDuration            = isDuration;
	    hooks.monthsShort           = listMonthsShort;
	    hooks.weekdaysMin           = listWeekdaysMin;
	    hooks.defineLocale          = defineLocale;
	    hooks.updateLocale          = updateLocale;
	    hooks.locales               = listLocales;
	    hooks.weekdaysShort         = listWeekdaysShort;
	    hooks.normalizeUnits        = normalizeUnits;
	    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat        = getCalendarFormat;
	    hooks.prototype             = proto;

	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD',                             // <input type="date" />
	        TIME: 'HH:mm',                                  // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
	        MONTH: 'YYYY-MM'                                // <input type="month" />
	    };

	    return hooks;

	})));
	});

	var DateTHead_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _DateConstants2 = _interopRequireDefault(DateConstants);



	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var DateTHead = function (_React$Component) {
	  _inherits(DateTHead, _React$Component);

	  function DateTHead() {
	    _classCallCheck(this, DateTHead);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DateTHead.prototype.render = function render() {
	    var props = this.props;
	    var value = props.value;
	    var localeData = value.localeData();
	    var prefixCls = props.prefixCls;
	    var veryShortWeekdays = [];
	    var weekDays = [];
	    var firstDayOfWeek = localeData.firstDayOfWeek();
	    var showWeekNumberEl = void 0;
	    var now = (0, _moment2["default"])();
	    for (var dateColIndex = 0; dateColIndex < _DateConstants2["default"].DATE_COL_COUNT; dateColIndex++) {
	      var index = (firstDayOfWeek + dateColIndex) % _DateConstants2["default"].DATE_COL_COUNT;
	      now.day(index);
	      veryShortWeekdays[dateColIndex] = localeData.weekdaysMin(now);
	      weekDays[dateColIndex] = localeData.weekdaysShort(now);
	    }

	    if (props.showWeekNumber) {
	      showWeekNumberEl = _react2["default"].createElement(
	        'th',
	        {
	          role: 'columnheader',
	          className: prefixCls + '-column-header ' + prefixCls + '-week-number-header'
	        },
	        _react2["default"].createElement(
	          'span',
	          { className: prefixCls + '-column-header-inner' },
	          'x'
	        )
	      );
	    }
	    var weekDaysEls = weekDays.map(function (day, xindex) {
	      return _react2["default"].createElement(
	        'th',
	        {
	          key: xindex,
	          role: 'columnheader',
	          title: day,
	          className: prefixCls + '-column-header'
	        },
	        _react2["default"].createElement(
	          'span',
	          { className: prefixCls + '-column-header-inner' },
	          veryShortWeekdays[xindex]
	        )
	      );
	    });
	    return _react2["default"].createElement(
	      'thead',
	      null,
	      _react2["default"].createElement(
	        'tr',
	        { role: 'row' },
	        showWeekNumberEl,
	        weekDaysEls
	      )
	    );
	  };

	  return DateTHead;
	}(_react2["default"].Component);

	exports["default"] = DateTHead;
	module.exports = exports['default'];
	});

	unwrapExports(DateTHead_1);

	var util$4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.getTodayTime = getTodayTime;
	exports.getTitleString = getTitleString;
	exports.getTodayTimeStr = getTodayTimeStr;
	exports.getMonthName = getMonthName;
	exports.syncTime = syncTime;
	exports.getTimeConfig = getTimeConfig;
	exports.isTimeValidByConfig = isTimeValidByConfig;
	exports.isTimeValid = isTimeValid;
	exports.isAllowedDate = isAllowedDate;
	exports.formatDate = formatDate;



	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var defaultDisabledTime = {
	  disabledHours: function disabledHours() {
	    return [];
	  },
	  disabledMinutes: function disabledMinutes() {
	    return [];
	  },
	  disabledSeconds: function disabledSeconds() {
	    return [];
	  }
	};

	function getTodayTime(value) {
	  var today = (0, _moment2["default"])();
	  today.locale(value.locale()).utcOffset(value.utcOffset());
	  return today;
	}

	function getTitleString(value) {
	  return value.format('LL');
	}

	function getTodayTimeStr(value) {
	  var today = getTodayTime(value);
	  return getTitleString(today);
	}

	function getMonthName(month) {
	  var locale = month.locale();
	  var localeData = month.localeData();
	  return localeData[locale === 'zh-cn' ? 'months' : 'monthsShort'](month);
	}

	function syncTime(from, to) {
	  if (!_moment2["default"].isMoment(from) || !_moment2["default"].isMoment(to)) return;
	  to.hour(from.hour());
	  to.minute(from.minute());
	  to.second(from.second());
	}

	function getTimeConfig(value, disabledTime) {
	  var disabledTimeConfig = disabledTime ? disabledTime(value) : {};
	  disabledTimeConfig = _extends({}, defaultDisabledTime, disabledTimeConfig);
	  return disabledTimeConfig;
	}

	function isTimeValidByConfig(value, disabledTimeConfig) {
	  var invalidTime = false;
	  if (value) {
	    var hour = value.hour();
	    var minutes = value.minute();
	    var seconds = value.second();
	    var disabledHours = disabledTimeConfig.disabledHours();
	    if (disabledHours.indexOf(hour) === -1) {
	      var disabledMinutes = disabledTimeConfig.disabledMinutes(hour);
	      if (disabledMinutes.indexOf(minutes) === -1) {
	        var disabledSeconds = disabledTimeConfig.disabledSeconds(hour, minutes);
	        invalidTime = disabledSeconds.indexOf(seconds) !== -1;
	      } else {
	        invalidTime = true;
	      }
	    } else {
	      invalidTime = true;
	    }
	  }
	  return !invalidTime;
	}

	function isTimeValid(value, disabledTime) {
	  var disabledTimeConfig = getTimeConfig(value, disabledTime);
	  return isTimeValidByConfig(value, disabledTimeConfig);
	}

	function isAllowedDate(value, disabledDate, disabledTime) {
	  if (disabledDate) {
	    if (disabledDate(value)) {
	      return false;
	    }
	  }
	  if (disabledTime) {
	    if (!isTimeValid(value, disabledTime)) {
	      return false;
	    }
	  }
	  return true;
	}

	function formatDate(value, format) {
	  if (!value) {
	    return '';
	  }

	  if (Array.isArray(format)) {
	    format = format[0];
	  }

	  return value.format(format);
	}
	});

	unwrapExports(util$4);
	var util_1$4 = util$4.getTodayTime;
	var util_2$1 = util$4.getTitleString;
	var util_3$1 = util$4.getTodayTimeStr;
	var util_4$1 = util$4.getMonthName;
	var util_5$1 = util$4.syncTime;
	var util_6$1 = util$4.getTimeConfig;
	var util_7$1 = util$4.isTimeValidByConfig;
	var util_8$1 = util$4.isTimeValid;
	var util_9$1 = util$4.isAllowedDate;
	var util_10$1 = util$4.formatDate;

	var DateTBody_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _DateConstants2 = _interopRequireDefault(DateConstants);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function isSameDay(one, two) {
	  return one && two && one.isSame(two, 'day');
	}

	function beforeCurrentMonthYear(current, today) {
	  if (current.year() < today.year()) {
	    return 1;
	  }
	  return current.year() === today.year() && current.month() < today.month();
	}

	function afterCurrentMonthYear(current, today) {
	  if (current.year() > today.year()) {
	    return 1;
	  }
	  return current.year() === today.year() && current.month() > today.month();
	}

	function getIdFromDate(date) {
	  return 'rc-calendar-' + date.year() + '-' + date.month() + '-' + date.date();
	}

	var DateTBody = function (_React$Component) {
	  _inherits(DateTBody, _React$Component);

	  function DateTBody() {
	    _classCallCheck(this, DateTBody);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DateTBody.prototype.render = function render() {
	    var props = this.props;
	    var contentRender = props.contentRender,
	        prefixCls = props.prefixCls,
	        selectedValue = props.selectedValue,
	        value = props.value,
	        showWeekNumber = props.showWeekNumber,
	        dateRender = props.dateRender,
	        disabledDate = props.disabledDate,
	        hoverValue = props.hoverValue;

	    var iIndex = void 0;
	    var jIndex = void 0;
	    var current = void 0;
	    var dateTable = [];
	    var today = (0, util$4.getTodayTime)(value);
	    var cellClass = prefixCls + '-cell';
	    var weekNumberCellClass = prefixCls + '-week-number-cell';
	    var dateClass = prefixCls + '-date';
	    var todayClass = prefixCls + '-today';
	    var selectedClass = prefixCls + '-selected-day';
	    var selectedDateClass = prefixCls + '-selected-date'; // do not move with mouse operation
	    var selectedStartDateClass = prefixCls + '-selected-start-date';
	    var selectedEndDateClass = prefixCls + '-selected-end-date';
	    var inRangeClass = prefixCls + '-in-range-cell';
	    var lastMonthDayClass = prefixCls + '-last-month-cell';
	    var nextMonthDayClass = prefixCls + '-next-month-btn-day';
	    var disabledClass = prefixCls + '-disabled-cell';
	    var firstDisableClass = prefixCls + '-disabled-cell-first-of-row';
	    var lastDisableClass = prefixCls + '-disabled-cell-last-of-row';
	    var lastDayOfMonthClass = prefixCls + '-last-day-of-month';
	    var month1 = value.clone();
	    month1.date(1);
	    var day = month1.day();
	    var lastMonthDiffDay = (day + 7 - value.localeData().firstDayOfWeek()) % 7;
	    // calculate last month
	    var lastMonth1 = month1.clone();
	    lastMonth1.add(0 - lastMonthDiffDay, 'days');
	    var passed = 0;

	    for (iIndex = 0; iIndex < _DateConstants2["default"].DATE_ROW_COUNT; iIndex++) {
	      for (jIndex = 0; jIndex < _DateConstants2["default"].DATE_COL_COUNT; jIndex++) {
	        current = lastMonth1;
	        if (passed) {
	          current = current.clone();
	          current.add(passed, 'days');
	        }
	        dateTable.push(current);
	        passed++;
	      }
	    }
	    var tableHtml = [];
	    passed = 0;

	    for (iIndex = 0; iIndex < _DateConstants2["default"].DATE_ROW_COUNT; iIndex++) {
	      var _cx;

	      var isCurrentWeek = void 0;
	      var weekNumberCell = void 0;
	      var isActiveWeek = false;
	      var dateCells = [];
	      if (showWeekNumber) {
	        weekNumberCell = _react2["default"].createElement(
	          'td',
	          {
	            key: dateTable[passed].week(),
	            role: 'gridcell',
	            className: weekNumberCellClass
	          },
	          dateTable[passed].week()
	        );
	      }
	      for (jIndex = 0; jIndex < _DateConstants2["default"].DATE_COL_COUNT; jIndex++) {
	        var next = null;
	        var last = null;
	        current = dateTable[passed];
	        if (jIndex < _DateConstants2["default"].DATE_COL_COUNT - 1) {
	          next = dateTable[passed + 1];
	        }
	        if (jIndex > 0) {
	          last = dateTable[passed - 1];
	        }
	        var cls = cellClass;
	        var disabled = false;
	        var selected = false;

	        if (isSameDay(current, today)) {
	          cls += ' ' + todayClass;
	          isCurrentWeek = true;
	        }

	        var isBeforeCurrentMonthYear = beforeCurrentMonthYear(current, value);
	        var isAfterCurrentMonthYear = afterCurrentMonthYear(current, value);

	        if (selectedValue && Array.isArray(selectedValue)) {
	          var rangeValue = hoverValue.length ? hoverValue : selectedValue;
	          if (!isBeforeCurrentMonthYear && !isAfterCurrentMonthYear) {
	            var startValue = rangeValue[0];
	            var endValue = rangeValue[1];
	            if (startValue) {
	              if (isSameDay(current, startValue)) {
	                selected = true;
	                isActiveWeek = true;
	                cls += ' ' + selectedStartDateClass;
	              }
	            }
	            if (startValue && endValue) {
	              if (isSameDay(current, endValue)) {
	                selected = true;
	                isActiveWeek = true;
	                cls += ' ' + selectedEndDateClass;
	              } else if (current.isAfter(startValue, 'day') && current.isBefore(endValue, 'day')) {
	                cls += ' ' + inRangeClass;
	              }
	            }
	          }
	        } else if (isSameDay(current, value)) {
	          // keyboard change value, highlight works
	          selected = true;
	          isActiveWeek = true;
	        }

	        if (isSameDay(current, selectedValue)) {
	          cls += ' ' + selectedDateClass;
	        }

	        if (isBeforeCurrentMonthYear) {
	          cls += ' ' + lastMonthDayClass;
	        }

	        if (isAfterCurrentMonthYear) {
	          cls += ' ' + nextMonthDayClass;
	        }

	        if (current.clone().endOf('month').date() === current.date()) {
	          cls += ' ' + lastDayOfMonthClass;
	        }

	        if (disabledDate) {
	          if (disabledDate(current, value)) {
	            disabled = true;

	            if (!last || !disabledDate(last, value)) {
	              cls += ' ' + firstDisableClass;
	            }

	            if (!next || !disabledDate(next, value)) {
	              cls += ' ' + lastDisableClass;
	            }
	          }
	        }

	        if (selected) {
	          cls += ' ' + selectedClass;
	        }

	        if (disabled) {
	          cls += ' ' + disabledClass;
	        }

	        var dateHtml = void 0;
	        if (dateRender) {
	          dateHtml = dateRender(current, value);
	        } else {
	          var content = contentRender ? contentRender(current, value) : current.date();
	          dateHtml = _react2["default"].createElement(
	            'div',
	            {
	              key: getIdFromDate(current),
	              className: dateClass,
	              'aria-selected': selected,
	              'aria-disabled': disabled
	            },
	            content
	          );
	        }

	        dateCells.push(_react2["default"].createElement(
	          'td',
	          {
	            key: passed,
	            onClick: disabled ? undefined : props.onSelect.bind(null, current),
	            onMouseEnter: disabled ? undefined : props.onDayHover && props.onDayHover.bind(null, current) || undefined,
	            role: 'gridcell',
	            title: (0, util$4.getTitleString)(current),
	            className: cls
	          },
	          dateHtml
	        ));

	        passed++;
	      }

	      tableHtml.push(_react2["default"].createElement(
	        'tr',
	        {
	          key: iIndex,
	          role: 'row',
	          className: (0, _classnames2["default"])((_cx = {}, _defineProperty(_cx, prefixCls + '-current-week', isCurrentWeek), _defineProperty(_cx, prefixCls + '-active-week', isActiveWeek), _cx))
	        },
	        weekNumberCell,
	        dateCells
	      ));
	    }
	    return _react2["default"].createElement(
	      'tbody',
	      { className: prefixCls + '-tbody' },
	      tableHtml
	    );
	  };

	  return DateTBody;
	}(_react2["default"].Component);

	DateTBody.propTypes = {
	  contentRender: _propTypes2["default"].func,
	  dateRender: _propTypes2["default"].func,
	  disabledDate: _propTypes2["default"].func,
	  prefixCls: _propTypes2["default"].string,
	  selectedValue: _propTypes2["default"].oneOfType([_propTypes2["default"].object, _propTypes2["default"].arrayOf(_propTypes2["default"].object)]),
	  value: _propTypes2["default"].object,
	  hoverValue: _propTypes2["default"].any,
	  showWeekNumber: _propTypes2["default"].bool
	};
	DateTBody.defaultProps = {
	  hoverValue: []
	};
	exports["default"] = DateTBody;
	module.exports = exports['default'];
	});

	unwrapExports(DateTBody_1);

	var DateTable_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _DateTHead2 = _interopRequireDefault(DateTHead_1);



	var _DateTBody2 = _interopRequireDefault(DateTBody_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var DateTable = function (_React$Component) {
	  _inherits(DateTable, _React$Component);

	  function DateTable() {
	    _classCallCheck(this, DateTable);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DateTable.prototype.render = function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    return _react2["default"].createElement(
	      'table',
	      { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	      _react2["default"].createElement(_DateTHead2["default"], props),
	      _react2["default"].createElement(_DateTBody2["default"], props)
	    );
	  };

	  return DateTable;
	}(_react2["default"].Component);

	exports["default"] = DateTable;
	module.exports = exports['default'];
	});

	unwrapExports(DateTable_1);

	var mapSelf_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = mapSelf;



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function mirror(o) {
	  return o;
	}

	function mapSelf(children) {
	  // return ReactFragment
	  return _react2['default'].Children.map(children, mirror);
	}
	module.exports = exports['default'];
	});

	unwrapExports(mapSelf_1);

	var MonthTable_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var ROW = 4;
	var COL = 3;

	function chooseMonth(month) {
	  var next = this.state.value.clone();
	  next.month(month);
	  this.setAndSelectValue(next);
	}

	function noop() {}

	var MonthTable = function (_Component) {
	  _inherits(MonthTable, _Component);

	  function MonthTable(props) {
	    _classCallCheck(this, MonthTable);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.state = {
	      value: props.value
	    };
	    return _this;
	  }

	  MonthTable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      this.setState({
	        value: nextProps.value
	      });
	    }
	  };

	  MonthTable.prototype.setAndSelectValue = function setAndSelectValue(value) {
	    this.setState({
	      value: value
	    });
	    this.props.onSelect(value);
	  };

	  MonthTable.prototype.months = function months() {
	    var value = this.state.value;
	    var current = value.clone();
	    var months = [];
	    var index = 0;
	    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	      months[rowIndex] = [];
	      for (var colIndex = 0; colIndex < COL; colIndex++) {
	        current.month(index);
	        var content = (0, util$4.getMonthName)(current);
	        months[rowIndex][colIndex] = {
	          value: index,
	          content: content,
	          title: content
	        };
	        index++;
	      }
	    }
	    return months;
	  };

	  MonthTable.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var value = this.state.value;
	    var today = (0, util$4.getTodayTime)(value);
	    var months = this.months();
	    var currentMonth = value.month();
	    var prefixCls = props.prefixCls,
	        locale = props.locale,
	        contentRender = props.contentRender,
	        cellRender = props.cellRender;

	    var monthsEls = months.map(function (month, index) {
	      var tds = month.map(function (monthData) {
	        var _classNameMap;

	        var disabled = false;
	        if (props.disabledDate) {
	          var testValue = value.clone();
	          testValue.month(monthData.value);
	          disabled = props.disabledDate(testValue);
	        }
	        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-cell-disabled', disabled), _defineProperty(_classNameMap, prefixCls + '-selected-cell', monthData.value === currentMonth), _defineProperty(_classNameMap, prefixCls + '-current-cell', today.year() === value.year() && monthData.value === today.month()), _classNameMap);
	        var cellEl = void 0;
	        if (cellRender) {
	          var currentValue = value.clone();
	          currentValue.month(monthData.value);
	          cellEl = cellRender(currentValue, locale);
	        } else {
	          var content = void 0;
	          if (contentRender) {
	            var _currentValue = value.clone();
	            _currentValue.month(monthData.value);
	            content = contentRender(_currentValue, locale);
	          } else {
	            content = monthData.content;
	          }
	          cellEl = _react2["default"].createElement(
	            'a',
	            { className: prefixCls + '-month' },
	            content
	          );
	        }
	        return _react2["default"].createElement(
	          'td',
	          {
	            role: 'gridcell',
	            key: monthData.value,
	            onClick: disabled ? null : chooseMonth.bind(_this2, monthData.value),
	            title: monthData.title,
	            className: (0, _classnames2["default"])(classNameMap)
	          },
	          cellEl
	        );
	      });
	      return _react2["default"].createElement(
	        'tr',
	        { key: index, role: 'row' },
	        tds
	      );
	    });

	    return _react2["default"].createElement(
	      'table',
	      { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	      _react2["default"].createElement(
	        'tbody',
	        { className: prefixCls + '-tbody' },
	        monthsEls
	      )
	    );
	  };

	  return MonthTable;
	}(React__default.Component);

	MonthTable.defaultProps = {
	  onSelect: noop
	};
	MonthTable.propTypes = {
	  onSelect: _propTypes2["default"].func,
	  cellRender: _propTypes2["default"].func,
	  prefixCls: _propTypes2["default"].string,
	  value: _propTypes2["default"].object
	};
	exports["default"] = MonthTable;
	module.exports = exports['default'];
	});

	unwrapExports(MonthTable_1);

	var DateInput_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _KeyCode2 = _interopRequireDefault(KeyCode_1);





	var _moment2 = _interopRequireDefault(moment);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var cachedSelectionStart = void 0;
	var cachedSelectionEnd = void 0;
	var dateInputInstance = void 0;

	var DateInput = function (_React$Component) {
	  _inherits(DateInput, _React$Component);

	  function DateInput(props) {
	    _classCallCheck(this, DateInput);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    var selectedValue = props.selectedValue;

	    _this.state = {
	      str: (0, util$4.formatDate)(selectedValue, _this.props.format),
	      invalid: false,
	      hasFocus: false
	    };
	    return _this;
	  }

	  DateInput.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (dateInputInstance && this.state.hasFocus && !this.state.invalid && !(cachedSelectionStart === 0 && cachedSelectionEnd === 0)) {
	      dateInputInstance.setSelectionRange(cachedSelectionStart, cachedSelectionEnd);
	    }
	  };

	  DateInput.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, state) {
	    var newState = {};

	    if (dateInputInstance) {
	      cachedSelectionStart = dateInputInstance.selectionStart;
	      cachedSelectionEnd = dateInputInstance.selectionEnd;
	    }
	    // when popup show, click body will call this, bug!
	    var selectedValue = nextProps.selectedValue;
	    if (!state.hasFocus) {
	      newState = {
	        str: (0, util$4.formatDate)(selectedValue, nextProps.format),
	        invalid: false
	      };
	    }

	    return newState;
	  };

	  DateInput.getInstance = function getInstance() {
	    return dateInputInstance;
	  };

	  DateInput.prototype.render = function render() {
	    var props = this.props;
	    var _state = this.state,
	        invalid = _state.invalid,
	        str = _state.str;
	    var locale = props.locale,
	        prefixCls = props.prefixCls,
	        placeholder = props.placeholder,
	        clearIcon = props.clearIcon;

	    var invalidClass = invalid ? prefixCls + '-input-invalid' : '';
	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-input-wrap' },
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-date-input-wrap' },
	        _react2["default"].createElement('input', {
	          ref: this.saveDateInput,
	          className: prefixCls + '-input ' + invalidClass,
	          value: str,
	          disabled: props.disabled,
	          placeholder: placeholder,
	          onChange: this.onInputChange,
	          onKeyDown: this.onKeyDown,
	          onFocus: this.onFocus,
	          onBlur: this.onBlur
	        })
	      ),
	      props.showClear ? _react2["default"].createElement(
	        'a',
	        {
	          role: 'button',
	          title: locale.clear,
	          onClick: this.onClear
	        },
	        clearIcon || _react2["default"].createElement('span', { className: prefixCls + '-clear-btn uf uf-close-c' })
	      ) : null
	    );
	  };

	  return DateInput;
	}(_react2["default"].Component);

	DateInput.propTypes = {
	  prefixCls: _propTypes2["default"].string,
	  timePicker: _propTypes2["default"].object,
	  value: _propTypes2["default"].object,
	  disabledTime: _propTypes2["default"].any,
	  format: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].arrayOf(_propTypes2["default"].string)]),
	  locale: _propTypes2["default"].object,
	  disabledDate: _propTypes2["default"].func,
	  onChange: _propTypes2["default"].func,
	  onClear: _propTypes2["default"].func,
	  placeholder: _propTypes2["default"].string,
	  onSelect: _propTypes2["default"].func,
	  selectedValue: _propTypes2["default"].object,
	  clearIcon: _propTypes2["default"].node
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.onClear = function () {
	    _this2.setState({
	      str: ''
	    });
	    _this2.props.onClear(null);
	  };

	  this.onInputChange = function (event) {
	    var str = event.target.value;
	    var _props = _this2.props,
	        disabledDate = _props.disabledDate,
	        format = _props.format,
	        onChange = _props.onChange,
	        selectedValue = _props.selectedValue;

	    // 没有内容，合法并直接退出

	    if (!str) {
	      onChange(null);
	      _this2.setState({
	        invalid: false,
	        str: str
	      });
	      return;
	    }

	    // 不合法直接退出
	    var parsed = (0, _moment2["default"])(str, format, true);
	    if (!parsed.isValid()) {
	      _this2.setState({
	        invalid: true,
	        str: str
	      });
	      return;
	    }

	    var value = _this2.props.value.clone();
	    value.year(parsed.year()).month(parsed.month()).date(parsed.date()).hour(parsed.hour()).minute(parsed.minute()).second(parsed.second());

	    if (!value || disabledDate && disabledDate(value)) {
	      _this2.setState({
	        invalid: true,
	        str: str
	      });
	      return;
	    }

	    if (selectedValue !== value || selectedValue && value && !selectedValue.isSame(value)) {
	      _this2.setState({
	        invalid: false,
	        str: str
	      });
	      onChange(value);
	    }
	  };

	  this.onFocus = function () {
	    _this2.setState({ hasFocus: true });
	  };

	  this.onBlur = function () {
	    _this2.setState(function (prevState, prevProps) {
	      return {
	        hasFocus: false,
	        str: (0, util$4.formatDate)(prevProps.value, prevProps.format)
	      };
	    });
	  };

	  this.onKeyDown = function (e) {
	    var _props2 = _this2.props,
	        onSelect = _props2.onSelect,
	        value = _props2.value,
	        onKeyDown = _props2.onKeyDown;

	    if (e.keyCode === _KeyCode2["default"].ENTER && onSelect) {
	      onSelect(value.clone());
	    }
	    onKeyDown && onKeyDown(e);
	  };

	  this.getRootDOMNode = function () {
	    return _reactDom2["default"].findDOMNode(_this2);
	  };

	  this.focus = function () {
	    if (dateInputInstance) {
	      dateInputInstance.focus();
	    }
	  };

	  this.saveDateInput = function (dateInput) {
	    dateInputInstance = dateInput;
	  };
	};

	(0, reactLifecyclesCompat_es.polyfill)(DateInput);

	exports["default"] = DateInput;
	module.exports = exports['default'];
	});

	unwrapExports(DateInput_1);

	var MonthPanel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _MonthTable2 = _interopRequireDefault(MonthTable_1);



	var _DateInput2 = _interopRequireDefault(DateInput_1);



	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.add(direction, 'year');
	  this.setAndChangeValue(next);
	}

	function noop() {}

	var MonthPanel = function (_React$Component) {
	  _inherits(MonthPanel, _React$Component);

	  function MonthPanel(props) {
	    _classCallCheck(this, MonthPanel);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.setAndChangeValue = function (value) {
	      _this.setValue(value);
	      _this.props.onChange(value);
	    };

	    _this.setAndSelectValue = function (value) {
	      _this.setValue(value);
	      _this.props.onSelect(value);
	    };

	    _this.setValue = function (value) {
	      if (!('value' in _this.props)) {
	        _this.setState({
	          value: value
	        });
	      }
	    };

	    _this.nextYear = goYear.bind(_this, 1);
	    _this.previousYear = goYear.bind(_this, -1);
	    _this.prefixCls = props.rootPrefixCls + '-month-panel';

	    _this.state = {
	      value: props.value || props.defaultValue
	    };
	    return _this;
	  }

	  MonthPanel.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
	    var newState = {};

	    if ('value' in nextProps) {
	      newState = {
	        value: nextProps.value
	      };
	    }

	    return newState;
	  };

	  MonthPanel.prototype.render = function render() {
	    var props = this.props;
	    var value = this.state.value;
	    var locale = props.locale,
	        cellRender = props.cellRender,
	        contentRender = props.contentRender,
	        renderFooter = props.renderFooter,
	        rootPrefixCls = props.rootPrefixCls;

	    var year = value.year();
	    var prefixCls = this.prefixCls;

	    var footer = renderFooter && renderFooter('month');

	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls, style: props.style },
	      _react2["default"].createElement(
	        'div',
	        null,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-header' },
	          _react2["default"].createElement('a', {
	            className: prefixCls + '-prev-year-btn',
	            role: 'button',
	            onClick: this.previousYear,
	            title: locale.previousYear
	          }),
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-year-select',
	              role: 'button',
	              onClick: props.onYearPanelShow,
	              title: locale.yearSelect
	            },
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-year-select-content' },
	              year
	            ),
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-year-select-arrow' },
	              'x'
	            )
	          ),
	          _react2["default"].createElement('a', {
	            className: prefixCls + '-next-year-btn',
	            role: 'button',
	            onClick: this.nextYear,
	            title: locale.nextYear
	          })
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-body' },
	          _react2["default"].createElement(_MonthTable2["default"], {
	            disabledDate: props.disabledDate,
	            onSelect: this.setAndSelectValue,
	            locale: locale,
	            value: value,
	            cellRender: cellRender,
	            contentRender: contentRender,
	            prefixCls: prefixCls
	          })
	        ),
	        footer && _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-footer' },
	          footer
	        )
	      )
	    );
	  };

	  return MonthPanel;
	}(_react2["default"].Component);

	MonthPanel.propTypes = {
	  onChange: _propTypes2["default"].func,
	  disabledDate: _propTypes2["default"].func,
	  onSelect: _propTypes2["default"].func,
	  renderFooter: _propTypes2["default"].func,
	  rootPrefixCls: _propTypes2["default"].string,
	  value: _propTypes2["default"].object,
	  defaultValue: _propTypes2["default"].object
	};
	MonthPanel.defaultProps = {
	  onChange: noop,
	  onSelect: noop
	};


	(0, reactLifecyclesCompat_es.polyfill)(MonthPanel);

	exports["default"] = MonthPanel;
	module.exports = exports['default'];
	});

	unwrapExports(MonthPanel_1);

	var DecadePanel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var ROW = 4;
	var COL = 3;


	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.add(direction, 'years');
	  this.setState({
	    value: next
	  });
	}

	function chooseDecade(year, event) {
	  var next = this.state.value.clone();
	  next.year(year);
	  next.month(this.state.value.month());
	  this.props.onSelect(next);
	  event.preventDefault();
	}

	var DecadePanel = function (_React$Component) {
	  _inherits(DecadePanel, _React$Component);

	  function DecadePanel(props) {
	    _classCallCheck(this, DecadePanel);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      value: props.value || props.defaultValue
	    };

	    // bind methods
	    _this.prefixCls = props.rootPrefixCls + '-decade-panel';
	    _this.nextCentury = goYear.bind(_this, 100);
	    _this.previousCentury = goYear.bind(_this, -100);
	    return _this;
	  }

	  DecadePanel.prototype.render = function render() {
	    var _this2 = this;

	    var value = this.state.value;
	    var _props = this.props,
	        locale = _props.locale,
	        renderFooter = _props.renderFooter;

	    var currentYear = value.year();
	    var startYear = parseInt(currentYear / 100, 10) * 100;
	    var preYear = startYear - 10;
	    var endYear = startYear + 99;
	    var decades = [];
	    var index = 0;
	    var prefixCls = this.prefixCls;

	    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	      decades[rowIndex] = [];
	      for (var colIndex = 0; colIndex < COL; colIndex++) {
	        var startDecade = preYear + index * 10;
	        var endDecade = preYear + index * 10 + 9;
	        decades[rowIndex][colIndex] = {
	          startDecade: startDecade,
	          endDecade: endDecade
	        };
	        index++;
	      }
	    }

	    var footer = renderFooter && renderFooter('decade');

	    var decadesEls = decades.map(function (row, decadeIndex) {
	      var tds = row.map(function (decadeData) {
	        var _classNameMap;

	        var dStartDecade = decadeData.startDecade;
	        var dEndDecade = decadeData.endDecade;
	        var isLast = dStartDecade < startYear;
	        var isNext = dEndDecade > endYear;
	        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', dStartDecade <= currentYear && currentYear <= dEndDecade), _defineProperty(_classNameMap, prefixCls + '-last-century-cell', isLast), _defineProperty(_classNameMap, prefixCls + '-next-century-cell', isNext), _classNameMap);
	        var content = dStartDecade + '-' + dEndDecade;
	        var clickHandler = void 0;
	        if (isLast) {
	          clickHandler = _this2.previousCentury;
	        } else if (isNext) {
	          clickHandler = _this2.nextCentury;
	        } else {
	          clickHandler = chooseDecade.bind(_this2, dStartDecade);
	        }
	        return _react2["default"].createElement(
	          'td',
	          {
	            key: dStartDecade,
	            onClick: clickHandler,
	            role: 'gridcell',
	            className: (0, _classnames2["default"])(classNameMap)
	          },
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-decade'
	            },
	            content
	          )
	        );
	      });
	      return _react2["default"].createElement(
	        'tr',
	        { key: decadeIndex, role: 'row' },
	        tds
	      );
	    });

	    return _react2["default"].createElement(
	      'div',
	      { className: this.prefixCls },
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-header' },
	        _react2["default"].createElement('a', {
	          className: prefixCls + '-prev-century-btn',
	          role: 'button',
	          onClick: this.previousCentury,
	          title: locale.previousCentury
	        }),
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-century' },
	          startYear,
	          '-',
	          endYear
	        ),
	        _react2["default"].createElement('a', {
	          className: prefixCls + '-next-century-btn',
	          role: 'button',
	          onClick: this.nextCentury,
	          title: locale.nextCentury
	        })
	      ),
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-body' },
	        _react2["default"].createElement(
	          'table',
	          { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	          _react2["default"].createElement(
	            'tbody',
	            { className: prefixCls + '-tbody' },
	            decadesEls
	          )
	        )
	      ),
	      footer && _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-footer' },
	        footer
	      )
	    );
	  };

	  return DecadePanel;
	}(_react2["default"].Component);

	exports["default"] = DecadePanel;


	DecadePanel.propTypes = {
	  locale: _propTypes2["default"].object,
	  value: _propTypes2["default"].object,
	  defaultValue: _propTypes2["default"].object,
	  rootPrefixCls: _propTypes2["default"].string,
	  renderFooter: _propTypes2["default"].func
	};

	DecadePanel.defaultProps = {
	  onSelect: function onSelect() {}
	};
	module.exports = exports['default'];
	});

	unwrapExports(DecadePanel_1);

	var YearPanel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _DecadePanel2 = _interopRequireDefault(DecadePanel_1);



	var _DateInput2 = _interopRequireDefault(DateInput_1);



	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var ROW = 4;
	var COL = 3;

	function goYear(direction) {
	  var value = this.state.value.clone();
	  value.add(direction, 'year');
	  this.setState({
	    value: value
	  });
	}

	function chooseYear(year) {
	  var value = this.state.value.clone();
	  value.year(year);
	  value.month(this.state.value.month());
	  this.props.onSelect(value);
	}

	var YearPanel = function (_React$Component) {
	  _inherits(YearPanel, _React$Component);

	  function YearPanel(props) {
	    _classCallCheck(this, YearPanel);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.yearSelect = function (value) {
	      var _this$props = _this.props,
	          onSelect = _this$props.onSelect,
	          format = _this$props.format;

	      onSelect && onSelect(value, value ? value.format(format) : '');
	    };

	    _this.onInputChange = function (value) {
	      var _this$props2 = _this.props,
	          onChange = _this$props2.onChange,
	          format = _this$props2.format;

	      _this.setState({
	        value: value ? value : (0, _moment2["default"])()
	      });
	      onChange && onChange(value, value ? value.format(format) : '');
	    };

	    _this.onClear = function () {
	      var _this$props3 = _this.props,
	          onChange = _this$props3.onChange,
	          format = _this$props3.format,
	          onClear = _this$props3.onClear;

	      _this.setState({
	        value: (0, _moment2["default"])()
	      });
	      onChange && onChange('', '');
	      onClear && onClear('', '');
	    };

	    _this.prefixCls = props.rootPrefixCls + '-year-panel';
	    _this.state = {
	      value: props.value || props.defaultValue
	    };
	    _this.nextDecade = goYear.bind(_this, 10);
	    _this.previousDecade = goYear.bind(_this, -10);
	    ['showDecadePanel', 'onDecadePanelSelect'].forEach(function (method) {
	      _this[method] = _this[method].bind(_this);
	    });
	    return _this;
	  }

	  YearPanel.prototype.onDecadePanelSelect = function onDecadePanelSelect(current) {
	    this.setState({
	      value: current,
	      showDecadePanel: 0
	    });
	  };

	  YearPanel.prototype.years = function years() {
	    var value = this.state.value;
	    var currentYear = value.year();
	    var startYear = parseInt(currentYear / 10, 10) * 10;
	    var previousYear = startYear - 1;
	    var years = [];
	    var index = 0;
	    for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	      years[rowIndex] = [];
	      for (var colIndex = 0; colIndex < COL; colIndex++) {
	        var year = previousYear + index;
	        var content = String(year);
	        years[rowIndex][colIndex] = {
	          content: content,
	          year: year,
	          title: content
	        };
	        index++;
	      }
	    }
	    return years;
	  };

	  YearPanel.prototype.showDecadePanel = function showDecadePanel() {
	    this.setState({
	      showDecadePanel: 1
	    });
	  };

	  YearPanel.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var value = this.state.value;
	    var locale = props.locale;
	    var years = this.years();
	    var currentYear = value.year();
	    var startYear = parseInt(currentYear / 10, 10) * 10;
	    var endYear = startYear + 9;
	    var prefixCls = this.prefixCls;

	    var yeasEls = years.map(function (row, index) {
	      var tds = row.map(function (yearData) {
	        var _classNameMap;

	        var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', yearData.year === currentYear), _defineProperty(_classNameMap, prefixCls + '-last-decade-cell', yearData.year < startYear), _defineProperty(_classNameMap, prefixCls + '-next-decade-cell', yearData.year > endYear), _classNameMap);
	        var clickHandler = void 0;
	        if (yearData.year < startYear) {
	          clickHandler = _this2.previousDecade;
	        } else if (yearData.year > endYear) {
	          clickHandler = _this2.nextDecade;
	        } else {
	          clickHandler = chooseYear.bind(_this2, yearData.year);
	        }
	        return _react2["default"].createElement(
	          'td',
	          {
	            role: 'gridcell',
	            title: yearData.title,
	            key: yearData.content,
	            onClick: clickHandler,
	            className: (0, _classnames2["default"])(classNameMap)
	          },
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-year'
	            },
	            yearData.content
	          )
	        );
	      });
	      return _react2["default"].createElement(
	        'tr',
	        { key: index, role: 'row' },
	        tds
	      );
	    });

	    var decadePanel = void 0;
	    if (this.state.showDecadePanel) {
	      decadePanel = _react2["default"].createElement(_DecadePanel2["default"], {
	        locale: locale,
	        value: value,
	        rootPrefixCls: props.rootPrefixCls,
	        onSelect: this.onDecadePanelSelect
	      });
	    }
	    var showDateInput = props.showDateInput,
	        rootPrefixCls = props.rootPrefixCls,
	        format = props.format;

	    return _react2["default"].createElement(
	      'div',
	      { className: this.prefixCls },
	      _react2["default"].createElement(
	        'div',
	        null,
	        showDateInput ? _react2["default"].createElement(_DateInput2["default"], {
	          value: value,
	          prefixCls: this.props.rootPrefixCls,
	          showClear: true,
	          locale: locale,
	          format: format,
	          onChange: this.onInputChange,
	          selectedValue: value,
	          onClear: this.onClear,
	          onSelect: this.yearSelect
	        }) : '',
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-header' },
	          _react2["default"].createElement('a', {
	            className: prefixCls + '-prev-decade-btn',
	            role: 'button',
	            onClick: this.previousDecade,
	            title: locale.previousDecade
	          }),
	          _react2["default"].createElement(
	            'a',
	            {
	              className: prefixCls + '-decade-select',
	              role: 'button',
	              onClick: this.showDecadePanel,
	              title: locale.decadeSelect
	            },
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-decade-select-content' },
	              startYear,
	              '-',
	              endYear
	            ),
	            _react2["default"].createElement(
	              'span',
	              { className: prefixCls + '-decade-select-arrow' },
	              'x'
	            )
	          ),
	          _react2["default"].createElement('a', {
	            className: prefixCls + '-next-decade-btn',
	            role: 'button',
	            onClick: this.nextDecade,
	            title: locale.nextDecade
	          })
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-body' },
	          _react2["default"].createElement(
	            'table',
	            { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' },
	            _react2["default"].createElement(
	              'tbody',
	              { className: prefixCls + '-tbody' },
	              yeasEls
	            )
	          )
	        )
	      ),
	      decadePanel
	    );
	  };

	  return YearPanel;
	}(_react2["default"].Component);

	exports["default"] = YearPanel;


	YearPanel.propTypes = {
	  rootPrefixCls: _propTypes2["default"].string,
	  value: _propTypes2["default"].object,
	  defaultValue: _propTypes2["default"].object
	};

	YearPanel.defaultProps = {
	  onSelect: function onSelect() {},

	  format: 'YYYY',
	  showDateInput: false
	};
	module.exports = exports['default'];
	});

	unwrapExports(YearPanel_1);

	var CalendarHeader_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _mapSelf2 = _interopRequireDefault(mapSelf_1);



	var _MonthPanel2 = _interopRequireDefault(MonthPanel_1);



	var _YearPanel2 = _interopRequireDefault(YearPanel_1);



	var _DecadePanel2 = _interopRequireDefault(DecadePanel_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function goMonth(direction) {
	  var next = this.props.value.clone();
	  next.add(direction, 'months');
	  this.props.onValueChange(next);
	}

	function goYear(direction) {
	  var next = this.props.value.clone();
	  next.add(direction, 'years');
	  this.props.onValueChange(next);
	}

	function showIf(condition, el) {
	  return condition ? el : null;
	}

	var CalendarHeader = function (_React$Component) {
	  _inherits(CalendarHeader, _React$Component);

	  function CalendarHeader(props) {
	    _classCallCheck(this, CalendarHeader);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    _this.nextMonth = goMonth.bind(_this, 1);
	    _this.previousMonth = goMonth.bind(_this, -1);
	    _this.nextYear = goYear.bind(_this, 1);
	    _this.previousYear = goYear.bind(_this, -1);

	    _this.state = { yearPanelReferer: null };
	    return _this;
	  }

	  CalendarHeader.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var prefixCls = props.prefixCls,
	        locale = props.locale,
	        mode = props.mode,
	        value = props.value,
	        showTimePicker = props.showTimePicker,
	        enableNext = props.enableNext,
	        enablePrev = props.enablePrev,
	        disabledMonth = props.disabledMonth,
	        renderFooter = props.renderFooter,
	        onChange = props.onChange,
	        onClear = props.onClear,
	        showMonthInput = props.showMonthInput;


	    var panel = null;
	    if (mode === 'month') {
	      panel = _react2["default"].createElement(_MonthPanel2["default"], {
	        showDateInput: true,
	        locale: locale,
	        showMonthInput: showMonthInput,
	        defaultValue: value,
	        rootPrefixCls: prefixCls,
	        onSelect: this.onMonthSelect,
	        onYearPanelShow: function onYearPanelShow() {
	          return _this2.showYearPanel('month');
	        },
	        disabledDate: disabledMonth,
	        cellRender: props.monthCellRender,
	        contentRender: props.monthCellContentRender,
	        renderFooter: renderFooter,
	        onChange: onChange,
	        onClear: onClear,
	        value: value
	      });
	    }
	    if (mode === 'year') {
	      panel = _react2["default"].createElement(_YearPanel2["default"], {
	        locale: locale,
	        defaultValue: value,
	        rootPrefixCls: prefixCls,
	        onSelect: this.onYearSelect,
	        onDecadePanelShow: this.showDecadePanel,
	        renderFooter: renderFooter
	      });
	    }
	    if (mode === 'decade') {
	      panel = _react2["default"].createElement(_DecadePanel2["default"], {
	        locale: locale,
	        defaultValue: value,
	        rootPrefixCls: prefixCls,
	        onSelect: this.onDecadeSelect,
	        renderFooter: renderFooter
	      });
	    }

	    return _react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-header' },
	      _react2["default"].createElement(
	        'div',
	        { style: { position: 'relative' }, className: prefixCls + '-header-btns' },
	        showIf(enablePrev && !showTimePicker, _react2["default"].createElement('a', {
	          className: prefixCls + '-prev-year-btn',
	          role: 'button',
	          onClick: this.previousYear,
	          title: locale.previousYear
	        })),
	        showIf(enablePrev && !showTimePicker, _react2["default"].createElement('a', {
	          className: prefixCls + '-prev-month-btn',
	          role: 'button',
	          onClick: this.previousMonth,
	          title: locale.previousMonth
	        })),
	        this.monthYearElement(showTimePicker),
	        showIf(enableNext && !showTimePicker, _react2["default"].createElement('a', {
	          className: prefixCls + '-next-month-btn',
	          onClick: this.nextMonth,
	          title: locale.nextMonth
	        })),
	        showIf(enableNext && !showTimePicker, _react2["default"].createElement('a', {
	          className: prefixCls + '-next-year-btn',
	          onClick: this.nextYear,
	          title: locale.nextYear
	        }))
	      ),
	      panel
	    );
	  };

	  return CalendarHeader;
	}(_react2["default"].Component);

	CalendarHeader.propTypes = {
	  prefixCls: _propTypes2["default"].string,
	  value: _propTypes2["default"].object,
	  onValueChange: _propTypes2["default"].func,
	  showTimePicker: _propTypes2["default"].bool,
	  onPanelChange: _propTypes2["default"].func,
	  locale: _propTypes2["default"].object,
	  enablePrev: _propTypes2["default"].any,
	  enableNext: _propTypes2["default"].any,
	  disabledMonth: _propTypes2["default"].func,
	  renderFooter: _propTypes2["default"].func,
	  onMonthSelect: _propTypes2["default"].func
	};
	CalendarHeader.defaultProps = {
	  enableNext: 1,
	  enablePrev: 1,
	  onPanelChange: function onPanelChange() {},
	  onValueChange: function onValueChange() {}
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this.onMonthSelect = function (value) {
	    _this3.props.onPanelChange(value, 'date');
	    if (_this3.props.onMonthSelect) {
	      _this3.props.onMonthSelect(value);
	    } else {
	      _this3.props.onValueChange(value);
	    }
	  };

	  this.onYearSelect = function (value) {
	    var referer = _this3.state.yearPanelReferer;
	    _this3.setState({ yearPanelReferer: null });
	    _this3.props.onPanelChange(value, referer);
	    _this3.props.onValueChange(value);
	  };

	  this.onDecadeSelect = function (value) {
	    _this3.props.onPanelChange(value, 'year');
	    _this3.props.onValueChange(value);
	  };

	  this.monthYearElement = function (showTimePicker) {
	    var props = _this3.props;
	    var prefixCls = props.prefixCls;
	    var locale = props.locale;
	    var value = props.value;
	    var localeData = value.localeData();
	    var monthBeforeYear = locale.monthBeforeYear;
	    var selectClassName = prefixCls + '-' + (monthBeforeYear ? 'my-select' : 'ym-select');
	    var timeClassName = showTimePicker ? ' ' + prefixCls + '-time-status' : '';
	    var year = _react2["default"].createElement(
	      'a',
	      {
	        className: prefixCls + '-year-select' + timeClassName,
	        role: 'button',
	        onClick: showTimePicker ? null : function () {
	          return _this3.showYearPanel('date');
	        },
	        title: showTimePicker ? null : locale.yearSelect
	      },
	      value.format(locale.yearFormat)
	    );
	    var month = _react2["default"].createElement(
	      'a',
	      {
	        className: prefixCls + '-month-select' + timeClassName,
	        role: 'button',
	        onClick: showTimePicker ? null : _this3.showMonthPanel,
	        title: showTimePicker ? null : locale.monthSelect
	      },
	      locale.monthFormat ? value.format(locale.monthFormat) : localeData.monthsShort(value)
	    );
	    var day = void 0;
	    if (showTimePicker) {
	      day = _react2["default"].createElement(
	        'a',
	        {
	          className: prefixCls + '-day-select' + timeClassName,
	          role: 'button'
	        },
	        value.format(locale.dayFormat)
	      );
	    }
	    var my = [];
	    if (monthBeforeYear) {
	      my = [month, day, year];
	    } else {
	      my = [year, month, day];
	    }
	    return _react2["default"].createElement(
	      'span',
	      { className: selectClassName },
	      (0, _mapSelf2["default"])(my)
	    );
	  };

	  this.showMonthPanel = function () {
	    // null means that users' interaction doesn't change value
	    _this3.props.onPanelChange(null, 'month');
	  };

	  this.showYearPanel = function (referer) {
	    _this3.setState({ yearPanelReferer: referer });
	    _this3.props.onPanelChange(null, 'year');
	  };

	  this.showDecadePanel = function () {
	    _this3.props.onPanelChange(null, 'decade');
	  };
	};

	exports["default"] = CalendarHeader;
	module.exports = exports['default'];
	});

	unwrapExports(CalendarHeader_1);

	var TodayButton_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = TodayButton;



	var _react2 = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function TodayButton(_ref) {
	  var prefixCls = _ref.prefixCls,
	      locale = _ref.locale,
	      value = _ref.value,
	      timePicker = _ref.timePicker,
	      disabled = _ref.disabled,
	      disabledDate = _ref.disabledDate,
	      onToday = _ref.onToday,
	      text = _ref.text;

	  var localeNow = (!text && timePicker ? locale.now : text) || locale.today;
	  var disabledToday = disabledDate && !(0, util$4.isAllowedDate)((0, util$4.getTodayTime)(value), disabledDate);
	  var isDisabled = disabledToday || disabled;
	  var disabledTodayClass = isDisabled ? prefixCls + '-today-btn-disabled' : '';
	  return _react2["default"].createElement(
	    'a',
	    {
	      className: prefixCls + '-today-btn ' + disabledTodayClass,
	      role: 'button',
	      onClick: isDisabled ? null : onToday,
	      title: (0, util$4.getTodayTimeStr)(value)
	    },
	    localeNow
	  );
	}
	module.exports = exports['default'];
	});

	unwrapExports(TodayButton_1);

	var Button_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    /**
	     * @title 尺寸
	     */
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'xg', 'lg']),
	    /**
	     * @title 样式
	     */
	    style: _propTypes2["default"].object,
	    /**
	     * @title 形状
	     */
	    shape: _propTypes2["default"].oneOf(['block', 'round', 'border', 'squared', 'floating', 'pillRight', 'pillLeft', 'icon']),

	    bordered: _propTypes2["default"].bool,
	    /**
	    * @title 类型
	    */
	    colors: _propTypes2["default"].oneOf(['primary', 'secondary', 'accent', 'success', 'info', 'warning', 'danger', 'dark', 'light', 'default']),
	    /**
	     * @title 是否禁用
	     * @veIgnore
	     */
	    disabled: _propTypes2["default"].bool,
	    /**
	     * @title 类名
	     * @veIgnore
	     */
	    className: _propTypes2["default"].string,

	    /**
	     * @title <button> 的 type
	     * @veIgnore
	     */
	    htmlType: _propTypes2["default"].oneOf(['submit', 'button', 'reset']),
	    isSubmit: _propTypes2["default"].bool //是否作为form的提交按钮
	};

	var defaultProps = {
	    disabled: false,
	    htmlType: 'button',
	    clsPrefix: 'u-button',
	    bordered: false,
	    isSubmit: false
	};

	var sizeMap = {
	    sm: 'sm',
	    md: 'md',
	    xg: 'xg',
	    lg: 'lg'
	},
	    colorsMap = {
	    primary: 'primary',
	    secondary: 'secondary',
	    accent: 'accent',
	    success: 'success',
	    info: 'info',
	    warning: 'warning',
	    danger: 'danger',
	    dark: 'dark',
	    light: 'light'
	},
	    shapeMap = {
	    block: 'block',
	    round: 'round',
	    border: 'border',
	    squared: 'squared',
	    floating: 'floating',
	    pillRight: 'pill-right',
	    pillLeft: 'pill-left',
	    icon: 'icon'
	};

	var Button = function (_Component) {
	    _inherits(Button, _Component);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }

	    Button.prototype.render = function render() {
	        var _props = this.props,
	            colors = _props.colors,
	            shape = _props.shape,
	            disabled = _props.disabled,
	            className = _props.className,
	            size = _props.size,
	            bordered = _props.bordered,
	            children = _props.children,
	            htmlType = _props.htmlType,
	            clsPrefix = _props.clsPrefix,
	            isSubmit = _props.isSubmit,
	            others = _objectWithoutProperties(_props, ['colors', 'shape', 'disabled', 'className', 'size', 'bordered', 'children', 'htmlType', 'clsPrefix', 'isSubmit']);

	        var clsObj = {};
	        if (className) {
	            clsObj[className] = true;
	        }
	        if (sizeMap[size]) {
	            clsObj[clsPrefix + '-' + sizeMap[size]] = true;
	        }

	        if (shapeMap[shape]) {
	            clsObj[clsPrefix + '-' + shapeMap[shape]] = true;
	        }
	        if (colorsMap[colors]) {
	            clsObj[clsPrefix + '-' + colorsMap[colors]] = true;
	        }
	        if (bordered) {
	            clsObj[clsPrefix + '-border'] = bordered;
	        }
	        var classes = (0, _classnames2["default"])(clsPrefix, clsObj);
	        return _react2["default"].createElement(
	            'button',
	            _extends({
	                type: htmlType,
	                className: classes,
	                disabled: disabled
	            }, others),
	            this.props.children
	        );
	    };

	    return Button;
	}(React__default.Component);

	Button.propTypes = propTypes$1;
	Button.defaultProps = defaultProps;

	exports["default"] = Button;
	module.exports = exports['default'];
	});

	unwrapExports(Button_1$2);

	var build$f = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Button2 = _interopRequireDefault(Button_1$2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Button2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$f);

	var OkButton_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = OkButton;



	var _react2 = _interopRequireDefault(React__default);



	var _beeButton2 = _interopRequireDefault(build$f);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function OkButton(_ref) {
	  var prefixCls = _ref.prefixCls,
	      locale = _ref.locale,
	      okDisabled = _ref.okDisabled,
	      onOk = _ref.onOk;

	  var className = prefixCls + '-btn-ok';
	  // if (okDisabled) {
	  //   className += ` ${prefixCls}-ok-btn-disabled`;
	  // }
	  return _react2["default"].createElement(
	    _beeButton2["default"],
	    {
	      className: className,
	      size: 'sm', colors: 'primary',
	      disabled: okDisabled,
	      onClick: okDisabled ? null : onOk
	    },
	    locale.ok
	  );
	}
	module.exports = exports['default'];
	});

	unwrapExports(OkButton_1);

	var TimePickerButton_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = TimePickerButton;



	var _react2 = _interopRequireDefault(React__default);



	var _classnames3 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function TimePickerButton(_ref) {
	  var _classnames;

	  var prefixCls = _ref.prefixCls,
	      locale = _ref.locale,
	      showTimePicker = _ref.showTimePicker,
	      onOpenTimePicker = _ref.onOpenTimePicker,
	      onCloseTimePicker = _ref.onCloseTimePicker,
	      timePickerDisabled = _ref.timePickerDisabled;

	  var className = (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-time-picker-btn', true), _defineProperty(_classnames, prefixCls + '-time-picker-btn-disabled', timePickerDisabled), _classnames));
	  var onClick = null;
	  if (!timePickerDisabled) {
	    onClick = showTimePicker ? onCloseTimePicker : onOpenTimePicker;
	  }
	  return _react2["default"].createElement(
	    'a',
	    {
	      className: className,
	      role: 'button',
	      onClick: onClick
	    },
	    showTimePicker ? locale.dateSelect : locale.timeSelect
	  );
	}
	module.exports = exports['default'];
	});

	unwrapExports(TimePickerButton_1);

	var CalendarFooter_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _mapSelf2 = _interopRequireDefault(mapSelf_1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _TodayButton2 = _interopRequireDefault(TodayButton_1);



	var _OkButton2 = _interopRequireDefault(OkButton_1);



	var _TimePickerButton2 = _interopRequireDefault(TimePickerButton_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var CalendarFooter = function (_React$Component) {
	  _inherits(CalendarFooter, _React$Component);

	  function CalendarFooter() {
	    _classCallCheck(this, CalendarFooter);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  CalendarFooter.prototype.onSelect = function onSelect(value) {
	    this.props.onSelect(value);
	  };

	  CalendarFooter.prototype.getRootDOMNode = function getRootDOMNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  };

	  CalendarFooter.prototype.render = function render() {
	    var props = this.props;
	    var value = props.value,
	        prefixCls = props.prefixCls,
	        showOk = props.showOk,
	        timePicker = props.timePicker,
	        renderFooter = props.renderFooter,
	        mode = props.mode;

	    var footerEl = null;
	    var extraFooter = renderFooter && renderFooter(mode);
	    if (props.showToday || timePicker || extraFooter) {
	      var nowEl = void 0;
	      if (props.showToday) {
	        nowEl = _react2["default"].createElement(_TodayButton2["default"], _extends({}, props, { value: value }));
	      }
	      var okBtn = void 0;
	      if (showOk === true || showOk !== false && !!props.timePicker) {
	        okBtn = _react2["default"].createElement(_OkButton2["default"], props);
	      }
	      var timePickerBtn = void 0;
	      if (!!props.timePicker) {
	        timePickerBtn = _react2["default"].createElement(_TimePickerButton2["default"], props);
	      }

	      var footerBtn = void 0;
	      if (nowEl || timePickerBtn || okBtn || extraFooter) {
	        footerBtn = _react2["default"].createElement(
	          'span',
	          { className: prefixCls + '-footer-btn' },
	          extraFooter,
	          (0, _mapSelf2["default"])([nowEl, timePickerBtn, okBtn])
	        );
	      }
	      var cls = (0, _classnames2["default"])(prefixCls + '-footer', _defineProperty({}, prefixCls + '-footer-show-ok', okBtn));
	      footerEl = _react2["default"].createElement(
	        'div',
	        { className: cls },
	        footerBtn
	      );
	    }
	    return footerEl;
	  };

	  return CalendarFooter;
	}(_react2["default"].Component);

	CalendarFooter.propTypes = {
	  prefixCls: _propTypes2["default"].string,
	  showDateInput: _propTypes2["default"].bool,
	  disabledTime: _propTypes2["default"].any,
	  timePicker: _propTypes2["default"].element,
	  selectedValue: _propTypes2["default"].any,
	  showOk: _propTypes2["default"].bool,
	  onSelect: _propTypes2["default"].func,
	  value: _propTypes2["default"].object,
	  renderFooter: _propTypes2["default"].func,
	  defaultValue: _propTypes2["default"].object,
	  mode: _propTypes2["default"].string
	};
	exports["default"] = CalendarFooter;
	module.exports = exports['default'];
	});

	unwrapExports(CalendarFooter_1);

	var CalendarMixin = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.calendarMixinWrapper = exports.calendarMixinDefaultProps = exports.calendarMixinPropTypes = undefined;
	exports.getNowByCurrentStateValue = getNowByCurrentStateValue;



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _moment2 = _interopRequireDefault(moment);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function noop() {}

	function getNowByCurrentStateValue(value) {
	  var ret = void 0;
	  if (value) {
	    ret = (0, util$4.getTodayTime)(value);
	  } else {
	    ret = (0, _moment2["default"])();
	  }
	  return ret;
	}

	var calendarMixinPropTypes = exports.calendarMixinPropTypes = {
	  value: _propTypes2["default"].object,
	  defaultValue: _propTypes2["default"].object,
	  onKeyDown: _propTypes2["default"].func
	};

	var calendarMixinDefaultProps = exports.calendarMixinDefaultProps = {
	  onKeyDown: noop
	};

	var calendarMixinWrapper = exports.calendarMixinWrapper = function calendarMixinWrapper(ComposeComponent) {
	  var _class, _temp2;

	  return _temp2 = _class = function (_ComposeComponent) {
	    _inherits(_class, _ComposeComponent);

	    function _class() {
	      var _temp, _this, _ret;

	      _classCallCheck(this, _class);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _ComposeComponent.call.apply(_ComposeComponent, [this].concat(args))), _this), _this.onSelect = function (value, cause) {
	        if (value) {
	          _this.setValue(value);
	        }
	        _this.setSelectedValue(value, cause);
	      }, _this.renderRoot = function (newProps) {
	        var _className;

	        var props = _this.props;
	        var prefixCls = props.prefixCls;

	        var className = (_className = {}, _defineProperty(_className, prefixCls, 1), _defineProperty(_className, prefixCls + '-hidden', !props.visible), _defineProperty(_className, props.className, !!props.className), _defineProperty(_className, newProps.className, !!newProps.className), _className);

	        return _react2["default"].createElement(
	          'div',
	          {
	            ref: _this.saveRoot,
	            className: '' + (0, _classnames2["default"])(className),
	            style: _this.props.style,
	            tabIndex: '0',
	            onKeyDown: _this.onKeyDown
	          },
	          newProps.children
	        );
	      }, _this.setSelectedValue = function (selectedValue, cause) {
	        // if (this.isAllowedDate(selectedValue)) {
	        if (!('selectedValue' in _this.props)) {
	          _this.setState({
	            selectedValue: selectedValue
	          });
	        }
	        if (_this.props.onSelect) {
	          _this.props.onSelect(selectedValue, cause);
	        }
	        // }
	      }, _this.setValue = function (value) {
	        var originalValue = _this.state.value;
	        if (!('value' in _this.props)) {
	          _this.setState({
	            value: value
	          });
	        }
	        if (originalValue && value && !originalValue.isSame(value) || !originalValue && value || originalValue && !value) {
	          _this.props.onChange(value);
	        }
	      }, _this.isAllowedDate = function (value) {
	        var disabledDate = _this.props.disabledDate;
	        var disabledTime = _this.props.disabledTime;
	        return (0, util$4.isAllowedDate)(value, disabledDate, disabledTime);
	      }, _temp), _possibleConstructorReturn(_this, _ret);
	    }

	    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
	      // Use origin function if provided
	      if (ComposeComponent.getDerivedStateFromProps) {
	        return ComposeComponent.getDerivedStateFromProps(nextProps, prevState);
	      }

	      var value = nextProps.value,
	          selectedValue = nextProps.selectedValue;

	      var newState = {};

	      if ('value' in nextProps) {
	        newState.value = value || nextProps.defaultValue || getNowByCurrentStateValue(prevState.value);
	      }
	      if ('selectedValue' in nextProps) {
	        newState.selectedValue = selectedValue;
	      }

	      return newState;
	    };

	    return _class;
	  }(ComposeComponent), _class.displayName = 'CalendarMixinWrapper', _class.defaultProps = ComposeComponent.defaultProps, _temp2;
	};
	});

	unwrapExports(CalendarMixin);
	var CalendarMixin_1 = CalendarMixin.calendarMixinWrapper;
	var CalendarMixin_2 = CalendarMixin.calendarMixinDefaultProps;
	var CalendarMixin_3 = CalendarMixin.calendarMixinPropTypes;
	var CalendarMixin_4 = CalendarMixin.getNowByCurrentStateValue;

	var en_US = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  today: 'Today',
	  now: 'Now',
	  backToToday: 'Back to today',
	  ok: 'Ok',
	  clear: 'Clear',
	  month: 'Month',
	  year: 'Year',
	  timeSelect: 'select time',
	  dateSelect: 'select date',
	  weekSelect: 'Choose a week',
	  monthSelect: 'Choose a month',
	  yearSelect: 'Choose a year',
	  decadeSelect: 'Choose a decade',
	  yearFormat: 'YYYY',
	  dateFormat: 'M/D/YYYY',
	  dayFormat: 'D',
	  dateTimeFormat: 'M/D/YYYY HH:mm:ss',
	  monthBeforeYear: true,
	  previousMonth: 'Previous month (PageUp)',
	  nextMonth: 'Next month (PageDown)',
	  previousYear: 'Last year (Control + left)',
	  nextYear: 'Next year (Control + right)',
	  previousDecade: 'Last decade',
	  nextDecade: 'Next decade',
	  previousCentury: 'Last century',
	  nextCentury: 'Next century',
	  lastWeek: 'Last week',
	  nowWeek: 'Now week',
	  nextWeek: 'Next week'
	};
	module.exports = exports['default'];
	});

	unwrapExports(en_US);

	var CommonMixin = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.commonMixinWrapper = exports.defaultProp = exports.propType = undefined;



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _en_US2 = _interopRequireDefault(en_US);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function noop() {}

	var propType = exports.propType = {
	  className: _propTypes2["default"].string,
	  locale: _propTypes2["default"].object,
	  style: _propTypes2["default"].object,
	  visible: _propTypes2["default"].bool,
	  onSelect: _propTypes2["default"].func,
	  prefixCls: _propTypes2["default"].string,
	  onChange: _propTypes2["default"].func,
	  onOk: _propTypes2["default"].func
	};

	var defaultProp = exports.defaultProp = {
	  locale: _en_US2["default"],
	  style: {},
	  visible: true,
	  prefixCls: 'rc-calendar',
	  className: '',
	  onSelect: noop,
	  onChange: noop,
	  onClear: noop,
	  renderFooter: function renderFooter() {
	    return null;
	  },
	  renderSidebar: function renderSidebar() {
	    return null;
	  }
	};

	var commonMixinWrapper = exports.commonMixinWrapper = function commonMixinWrapper(ComposeComponent) {
	  var _class, _temp2;

	  return _temp2 = _class = function (_ComposeComponent) {
	    _inherits(_class, _ComposeComponent);

	    function _class() {
	      var _temp, _this, _ret;

	      _classCallCheck(this, _class);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _ComposeComponent.call.apply(_ComposeComponent, [this].concat(args))), _this), _this.getFormat = function () {
	        var format = _this.props.format;
	        var _this$props = _this.props,
	            locale = _this$props.locale,
	            timePicker = _this$props.timePicker;

	        if (!format) {
	          if (timePicker) {
	            format = locale.dateTimeFormat;
	          } else {
	            format = locale.dateFormat;
	          }
	        }
	        return format;
	      }, _this.focus = function () {
	        if (_this.focusElement) {
	          _this.focusElement.focus();
	        } else if (_this.rootInstance) {
	          _this.rootInstance.focus();
	        }
	      }, _this.saveFocusElement = function (focusElement) {
	        _this.focusElement = focusElement;
	      }, _this.saveRoot = function (root) {
	        _this.rootInstance = root;
	      }, _temp), _possibleConstructorReturn(_this, _ret);
	    }

	    _class.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	      return this.props.visible || nextProps.visible;
	    };

	    return _class;
	  }(ComposeComponent), _class.displayName = 'CommonMixinWrapper', _class.defaultProps = ComposeComponent.defaultProps, _class.getDerivedStateFromProps = ComposeComponent.getDerivedStateFromProps, _temp2;
	};
	});

	unwrapExports(CommonMixin);
	var CommonMixin_1 = CommonMixin.commonMixinWrapper;
	var CommonMixin_2 = CommonMixin.defaultProp;
	var CommonMixin_3 = CommonMixin.propType;

	var toTime = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.goStartMonth = goStartMonth;
	exports.goEndMonth = goEndMonth;
	exports.goTime = goTime;
	exports.includesTime = includesTime;
	function goStartMonth(time) {
	  return time.clone().startOf('month');
	}

	function goEndMonth(time) {
	  return time.clone().endOf('month');
	}

	function goTime(time, direction, unit) {
	  return time.clone().add(direction, unit);
	}

	function includesTime() {
	  var timeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  var time = arguments[1];
	  var unit = arguments[2];

	  return timeList.some(function (t) {
	    return t.isSame(time, unit);
	  });
	}
	});

	unwrapExports(toTime);
	var toTime_1 = toTime.goStartMonth;
	var toTime_2 = toTime.goEndMonth;
	var toTime_3 = toTime.goTime;
	var toTime_4 = toTime.includesTime;

	var Calendar_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _KeyCode2 = _interopRequireDefault(KeyCode_1);





	var _DateTable2 = _interopRequireDefault(DateTable_1);



	var _CalendarHeader2 = _interopRequireDefault(CalendarHeader_1);



	var _CalendarFooter2 = _interopRequireDefault(CalendarFooter_1);







	var _DateInput2 = _interopRequireDefault(DateInput_1);







	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function noop() {}

	var Calendar = function (_React$Component) {
	  _inherits(Calendar, _React$Component);

	  function Calendar(props) {
	    _classCallCheck(this, Calendar);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    _this.state = {
	      mode: _this.props.mode || 'date',
	      value: props.value || props.defaultValue || (0, _moment2["default"])(),
	      selectedValue: props.selectedValue || props.defaultSelectedValue
	    };
	    return _this;
	  }

	  Calendar.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.showDateInput) {
	      this.saveFocusElement(_DateInput2["default"].getInstance());
	    }
	  };

	  Calendar.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, state) {
	    var value = nextProps.value,
	        selectedValue = nextProps.selectedValue;

	    var newState = {};

	    if ('mode' in nextProps && state.mode !== nextProps.mode) {
	      newState = { mode: nextProps.mode };
	    }
	    if ('value' in nextProps) {
	      newState.value = value || nextProps.defaultValue || (0, CalendarMixin.getNowByCurrentStateValue)(state.value);
	    }
	    if ('selectedValue' in nextProps) {
	      newState.selectedValue = selectedValue;
	    }

	    return newState;
	  };

	  Calendar.prototype.render = function render() {
	    var props = this.props,
	        state = this.state;
	    var locale = props.locale,
	        prefixCls = props.prefixCls,
	        disabledDate = props.disabledDate,
	        dateInputPlaceholder = props.dateInputPlaceholder,
	        timePicker = props.timePicker,
	        disabledTime = props.disabledTime,
	        clearIcon = props.clearIcon,
	        renderFooter = props.renderFooter,
	        showMonthInput = props.showMonthInput;
	    var value = state.value,
	        selectedValue = state.selectedValue,
	        mode = state.mode;

	    var showTimePicker = mode === 'time';
	    var disabledTimeConfig = showTimePicker && disabledTime && timePicker ? (0, util$4.getTimeConfig)(selectedValue, disabledTime) : null;

	    var timePickerEle = null;

	    if (timePicker && showTimePicker) {
	      var timePickerProps = _extends({
	        showHour: true,
	        showSecond: true,
	        showMinute: true
	      }, timePicker.props, disabledTimeConfig, {
	        onChange: this.onDateInputChange,
	        value: selectedValue,
	        disabledTime: disabledTime
	      });

	      if (timePicker.props.defaultValue !== undefined) {
	        timePickerProps.defaultOpenValue = timePicker.props.defaultValue;
	      }

	      timePickerEle = _react2["default"].cloneElement(timePicker, timePickerProps);
	    }

	    var dateInputElement = props.showDateInput ? _react2["default"].createElement(_DateInput2["default"], {
	      format: this.getFormat(),
	      key: 'date-input',
	      value: value,
	      locale: locale,
	      placeholder: dateInputPlaceholder,
	      showClear: true,
	      disabledTime: disabledTime,
	      disabledDate: disabledDate,
	      onClear: this.onClear,
	      prefixCls: prefixCls,
	      selectedValue: selectedValue,
	      onChange: this.onDateInputChange,
	      onSelect: this.onDateInputSelect,
	      clearIcon: clearIcon
	    }) : null;

	    var children = [];
	    if (props.renderSidebar) {
	      children.push(props.renderSidebar());
	    }
	    children.push(_react2["default"].createElement(
	      'div',
	      { className: prefixCls + '-panel', key: 'panel' },
	      dateInputElement,
	      _react2["default"].createElement(
	        'div',
	        {
	          tabIndex: this.props.focusablePanel ? 0 : undefined,
	          className: prefixCls + '-date-panel'
	        },
	        _react2["default"].createElement(_CalendarHeader2["default"], {
	          locale: locale,
	          mode: mode,
	          value: value,
	          onValueChange: this.setValue,
	          onPanelChange: this.onPanelChange,
	          renderFooter: renderFooter,
	          showTimePicker: showTimePicker,
	          prefixCls: prefixCls,
	          showMonthInput: showMonthInput
	        }),
	        timePicker && showTimePicker ? _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-time-picker' },
	          _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-time-picker-panel' },
	            timePickerEle
	          )
	        ) : null,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-body' },
	          _react2["default"].createElement(_DateTable2["default"], {
	            locale: locale,
	            value: value,
	            selectedValue: selectedValue,
	            prefixCls: prefixCls,
	            dateRender: props.dateRender,
	            onSelect: this.onDateTableSelect,
	            disabledDate: disabledDate,
	            showWeekNumber: props.showWeekNumber
	          })
	        ),
	        _react2["default"].createElement(_CalendarFooter2["default"], {
	          showOk: props.showOk,
	          mode: mode,
	          renderFooter: props.renderFooter,
	          locale: locale,
	          prefixCls: prefixCls,
	          showToday: props.showToday,
	          disabledTime: disabledTime,
	          showTimePicker: showTimePicker,
	          showDateInput: props.showDateInput,
	          timePicker: timePicker,
	          selectedValue: selectedValue,
	          value: value,
	          disabledDate: disabledDate,
	          okDisabled: props.showOk !== false && (!selectedValue || !this.isAllowedDate(selectedValue)),
	          onOk: this.onOk,
	          onSelect: this.onSelect,
	          onToday: this.onToday,
	          onOpenTimePicker: this.openTimePicker,
	          onCloseTimePicker: this.closeTimePicker
	        })
	      )
	    ));

	    return this.renderRoot({
	      children: children,
	      className: props.showWeekNumber ? prefixCls + '-week-number' : ''
	    });
	  };

	  return Calendar;
	}(_react2["default"].Component);

	Calendar.propTypes = _extends({}, CalendarMixin.calendarMixinPropTypes, CommonMixin.propType, {
	  prefixCls: _propTypes2["default"].string,
	  className: _propTypes2["default"].string,
	  style: _propTypes2["default"].object,
	  defaultValue: _propTypes2["default"].object,
	  value: _propTypes2["default"].object,
	  selectedValue: _propTypes2["default"].object,
	  defaultSelectedValue: _propTypes2["default"].object,
	  mode: _propTypes2["default"].oneOf(['time', 'date', 'month', 'year', 'decade']),
	  locale: _propTypes2["default"].object,
	  showDateInput: _propTypes2["default"].bool,
	  showWeekNumber: _propTypes2["default"].bool,
	  showToday: _propTypes2["default"].bool,
	  showOk: _propTypes2["default"].bool,
	  onSelect: _propTypes2["default"].func,
	  onOk: _propTypes2["default"].func,
	  onKeyDown: _propTypes2["default"].func,
	  timePicker: _propTypes2["default"].element,
	  dateInputPlaceholder: _propTypes2["default"].any,
	  onClear: _propTypes2["default"].func,
	  onChange: _propTypes2["default"].func,
	  onPanelChange: _propTypes2["default"].func,
	  disabledDate: _propTypes2["default"].func,
	  disabledTime: _propTypes2["default"].any,
	  dateRender: _propTypes2["default"].func,
	  renderFooter: _propTypes2["default"].func,
	  renderSidebar: _propTypes2["default"].func,
	  clearIcon: _propTypes2["default"].node,
	  focusablePanel: _propTypes2["default"].bool
	});
	Calendar.defaultProps = _extends({}, CalendarMixin.calendarMixinDefaultProps, CommonMixin.defaultProp, {
	  showToday: true,
	  showDateInput: true,
	  timePicker: null,
	  onOk: noop,
	  onPanelChange: noop,
	  focusablePanel: true
	});

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.onPanelChange = function (value, mode) {
	    var props = _this2.props,
	        state = _this2.state;

	    if (!('mode' in props)) {
	      _this2.setState({ mode: mode });
	    }
	    props.onPanelChange(value || state.value, mode);
	  };

	  this.onKeyDown = function (event) {
	    if (event.target.nodeName.toLowerCase() === 'input') {
	      return undefined;
	    } else {
	      _this2.props.onKeyDown && _this2.props.onKeyDown(event);
	    }
	    var keyCode = event.keyCode;
	    // mac
	    var ctrlKey = event.ctrlKey || event.metaKey;
	    var disabledDate = _this2.props.disabledDate;
	    var value = _this2.state.value;

	    switch (keyCode) {
	      case _KeyCode2["default"].DOWN:
	        _this2.goTime(1, 'weeks');
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].UP:
	        _this2.goTime(-1, 'weeks');
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].LEFT:
	        if (ctrlKey) {
	          _this2.goTime(-1, 'years');
	        } else {
	          _this2.goTime(-1, 'days');
	        }
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].RIGHT:
	        if (ctrlKey) {
	          _this2.goTime(1, 'years');
	        } else {
	          _this2.goTime(1, 'days');
	        }
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].HOME:
	        _this2.setValue((0, toTime.goStartMonth)(_this2.state.value));
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].END:
	        _this2.setValue((0, toTime.goEndMonth)(_this2.state.value));
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].PAGE_DOWN:
	        _this2.goTime(1, 'month');
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].PAGE_UP:
	        _this2.goTime(-1, 'month');
	        event.preventDefault();
	        return 1;
	      case _KeyCode2["default"].ENTER:
	        if (!disabledDate || !disabledDate(value)) {
	          _this2.onSelect(value, {
	            source: 'keyboard'
	          });
	        }
	        event.preventDefault();
	        return 1;
	    }
	  };

	  this.onClear = function () {
	    _this2.onSelect(null);
	    _this2.props.onClear();
	  };

	  this.onOk = function () {
	    var selectedValue = _this2.state.selectedValue;

	    if (_this2.isAllowedDate(selectedValue)) {
	      _this2.props.onOk(selectedValue);
	    }
	  };

	  this.onDateInputChange = function (value) {
	    _this2.onSelect(value, {
	      source: 'dateInput'
	    });
	  };

	  this.onDateInputSelect = function (value) {
	    _this2.onSelect(value, {
	      source: 'dateInputSelect'
	    });
	  };

	  this.onDateTableSelect = function (value) {
	    var timePicker = _this2.props.timePicker;
	    var selectedValue = _this2.state.selectedValue;

	    if (!selectedValue && timePicker) {
	      var timePickerDefaultValue = timePicker.props.defaultValue;
	      if (timePickerDefaultValue) {
	        (0, util$4.syncTime)(timePickerDefaultValue, value);
	      }
	    }
	    _this2.onSelect(value);
	  };

	  this.onToday = function () {
	    var value = _this2.state.value;

	    var now = (0, util$4.getTodayTime)(value);
	    _this2.onSelect(now, {
	      source: 'todayButton'
	    });
	  };

	  this.getRootDOMNode = function () {
	    return _reactDom2["default"].findDOMNode(_this2);
	  };

	  this.openTimePicker = function () {
	    _this2.onPanelChange(null, 'time');
	  };

	  this.closeTimePicker = function () {
	    _this2.onPanelChange(null, 'date');
	  };

	  this.goTime = function (direction, unit) {
	    _this2.setValue((0, toTime.goTime)(_this2.state.value, direction, unit));
	  };
	};

	(0, reactLifecyclesCompat_es.polyfill)(Calendar);

	exports["default"] = (0, CalendarMixin.calendarMixinWrapper)((0, CommonMixin.commonMixinWrapper)(Calendar));
	module.exports = exports['default'];
	});

	unwrapExports(Calendar_1);

	var rcCalendar = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Calendar2 = _interopRequireDefault(Calendar_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Calendar2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(rcCalendar);

	var createChainedFunction_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = createChainedFunction;
	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  var args = [].slice.call(arguments, 0);
	  if (args.length === 1) {
	    return args[0];
	  }

	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}
	module.exports = exports['default'];
	});

	unwrapExports(createChainedFunction_1$1);

	var placements_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = {
	  bottomLeft: {
	    points: ['tl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  },
	  topLeft: {
	    points: ['bl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  }
	};

	exports["default"] = placements;
	module.exports = exports['default'];
	});

	unwrapExports(placements_1);

	var Picker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _createChainedFunction2 = _interopRequireDefault(createChainedFunction_1$1);



	var _KeyCode2 = _interopRequireDefault(KeyCode_1);



	var _placements2 = _interopRequireDefault(placements_1);



	var _rcTrigger2 = _interopRequireDefault(Trigger);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function noop() {}

	function refFn(field, component) {
	  this[field] = component;
	}

	var Picker = function (_React$Component) {
	  _inherits(Picker, _React$Component);

	  function Picker(props) {
	    _classCallCheck(this, Picker);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    var open = void 0;
	    if ('open' in props) {
	      open = props.open;
	    } else {
	      open = props.defaultOpen;
	    }
	    var value = props.value || props.defaultValue;
	    _this.saveCalendarRef = refFn.bind(_this, 'calendarInstance');

	    _this.state = {
	      open: open,
	      value: value
	    };
	    return _this;
	  }

	  Picker.prototype.componentDidUpdate = function componentDidUpdate(_, prevState) {
	    if (!prevState.open && this.state.open) {
	      // setTimeout is for making sure saveCalendarRef happen before focusCalendar
	      this.focusTimeout = setTimeout(this.focusCalendar, 0, this);
	    }
	  };

	  Picker.prototype.componentWillUnmount = function componentWillUnmount() {
	    clearTimeout(this.focusTimeout);
	  };

	  Picker.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps) {
	    var newState = {};
	    var value = nextProps.value,
	        open = nextProps.open;

	    if ('value' in nextProps) {
	      newState.value = value;
	    }
	    if (open !== undefined) {
	      newState.open = open;
	    }
	    return newState;
	  };

	  Picker.prototype.render = function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls,
	        placement = props.placement,
	        style = props.style,
	        getCalendarContainer = props.getCalendarContainer,
	        align = props.align,
	        animation = props.animation,
	        disabled = props.disabled,
	        dropdownClassName = props.dropdownClassName,
	        transitionName = props.transitionName,
	        children = props.children;

	    var state = this.state;
	    return _react2["default"].createElement(
	      _rcTrigger2["default"],
	      {
	        popup: this.getCalendarElement(),
	        popupAlign: align,
	        builtinPlacements: _placements2["default"],
	        popupPlacement: placement,
	        action: disabled && !state.open ? [] : ['click'],
	        destroyPopupOnHide: true,
	        getPopupContainer: getCalendarContainer,
	        popupStyle: style,
	        popupAnimation: animation,
	        popupTransitionName: transitionName,
	        popupVisible: state.open,
	        onPopupVisibleChange: this.onVisibleChange,
	        prefixCls: prefixCls,
	        popupClassName: dropdownClassName
	      },
	      _react2["default"].cloneElement(children(state, props), { onKeyDown: this.onKeyDown })
	    );
	  };

	  return Picker;
	}(_react2["default"].Component);

	Picker.propTypes = {
	  animation: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].string]),
	  disabled: _propTypes2["default"].bool,
	  transitionName: _propTypes2["default"].string,
	  onChange: _propTypes2["default"].func,
	  onOpenChange: _propTypes2["default"].func,
	  children: _propTypes2["default"].func,
	  getCalendarContainer: _propTypes2["default"].func,
	  calendar: _propTypes2["default"].element,
	  style: _propTypes2["default"].object,
	  open: _propTypes2["default"].bool,
	  defaultOpen: _propTypes2["default"].bool,
	  prefixCls: _propTypes2["default"].string,
	  placement: _propTypes2["default"].any,
	  value: _propTypes2["default"].oneOfType([_propTypes2["default"].object, _propTypes2["default"].array]),
	  defaultValue: _propTypes2["default"].oneOfType([_propTypes2["default"].object, _propTypes2["default"].array]),
	  align: _propTypes2["default"].object
	};
	Picker.defaultProps = {
	  prefixCls: 'rc-calendar-picker',
	  style: {},
	  align: {},
	  placement: 'bottomLeft',
	  defaultOpen: false,
	  onChange: noop,
	  onOpenChange: noop
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.onCalendarKeyDown = function (event) {
	    if (event.keyCode === _KeyCode2["default"].ESC) {
	      event.stopPropagation();
	      _this2.close(_this2.focus);
	    }
	    _this2.props.onKeyDown && _this2.props.onKeyDown(event);
	  };

	  this.onCalendarSelect = function (value) {
	    var cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var props = _this2.props;
	    if (!('value' in props)) {
	      _this2.setState({
	        value: value
	      });
	    }
	    if (cause.source === 'keyboard' || cause.source === 'dateInputSelect' || !props.calendar.props.timePicker && cause.source !== 'dateInput' || cause.source === 'todayButton') {
	      _this2.close(_this2.focus);
	    }
	    props.onChange(value);
	  };

	  this.onKeyDown = function (event) {
	    if (!_this2.state.open && (event.keyCode === _KeyCode2["default"].DOWN || event.keyCode === _KeyCode2["default"].ENTER)) {
	      _this2.open();
	      event.preventDefault();
	    }
	    _this2.props.onKeyDown && _this2.props.onKeyDown(event);
	  };

	  this.onCalendarOk = function () {
	    _this2.close(_this2.focus);
	  };

	  this.onCalendarClear = function () {
	    _this2.close(_this2.focus);
	  };

	  this.onVisibleChange = function (open) {
	    _this2.setOpen(open);
	  };

	  this.getCalendarElement = function () {
	    var props = _this2.props;
	    var state = _this2.state;
	    var calendarProps = props.calendar.props;
	    var value = state.value;

	    var defaultValue = value;
	    var extraProps = {
	      ref: _this2.saveCalendarRef,
	      defaultValue: defaultValue || calendarProps.defaultValue,
	      selectedValue: value,
	      onKeyDown: _this2.onCalendarKeyDown,
	      onOk: (0, _createChainedFunction2["default"])(calendarProps.onOk, _this2.onCalendarOk),
	      onSelect: (0, _createChainedFunction2["default"])(calendarProps.onSelect, _this2.onCalendarSelect),
	      onClear: (0, _createChainedFunction2["default"])(calendarProps.onClear, _this2.onCalendarClear)
	    };

	    return _react2["default"].cloneElement(props.calendar, extraProps);
	  };

	  this.setOpen = function (open, callback) {
	    var onOpenChange = _this2.props.onOpenChange;

	    if (_this2.state.open !== open) {
	      if (!('open' in _this2.props)) {
	        _this2.setState({
	          open: open
	        }, callback);
	      }
	      onOpenChange(open);
	    }
	  };

	  this.open = function (callback) {
	    _this2.setOpen(true, callback);
	  };

	  this.close = function (callback) {
	    _this2.setOpen(false, callback);
	  };

	  this.focus = function () {
	    if (!_this2.state.open) {
	      _reactDom2["default"].findDOMNode(_this2).focus();
	    }
	  };

	  this.focusCalendar = function () {
	    if (_this2.state.open && !!_this2.calendarInstance) {
	      _this2.calendarInstance.focus();
	    }
	  };
	};

	(0, reactLifecyclesCompat_es.polyfill)(Picker);

	exports["default"] = Picker;
	module.exports = exports['default'];
	});

	unwrapExports(Picker_1);

	var FormControl_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),
	    type: _propTypes2["default"].string,
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'lg']),
	    onSearch: _propTypes2["default"].func,
	    onChange: _propTypes2["default"].func,
	    onBlur: _propTypes2["default"].func,
	    showClose: _propTypes2["default"].bool,
	    focusSelect: _propTypes2["default"].bool
	};

	var defaultProps = {
	    componentClass: 'input',
	    clsPrefix: 'u-form-control',
	    type: 'text',
	    size: 'md'
	};

	var FormControl = function (_React$Component) {
	    _inherits(FormControl, _React$Component);

	    function FormControl(props) {
	        _classCallCheck(this, FormControl);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.handleSearchChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                value: value,
	                showSearch: value == null || value === ""
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.handleChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                showClose: true
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.clearValue = function () {
	            var onChange = _this.props.onChange;

	            _this.setState({
	                showSearch: true,
	                value: "",
	                showClose: false
	            });
	            if (onChange) {
	                onChange("");
	            }
	            _this.input.focus();
	        };

	        _this.handleKeyDown = function (e) {
	            var _this$props = _this.props,
	                onSearch = _this$props.onSearch,
	                type = _this$props.type,
	                onKeyDown = _this$props.onKeyDown;

	            if (e.keyCode === 13 && type === "search") {
	                if (onSearch) {
	                    onSearch(_this.input.value);
	                }
	            }
	            onKeyDown && onKeyDown(e);
	        };

	        _this.handleSearch = function (e) {
	            var onSearch = _this.props.onSearch;

	            if (onSearch) onSearch(_this.input.value);
	        };

	        _this.handleBlur = function (e) {
	            var value = _this.state.value;
	            var onBlur = _this.props.onBlur;


	            if (onBlur) {
	                onBlur(value, e);
	            }
	        };

	        _this.handleFocus = function (e) {
	            var value = _this.state.value;
	            var onFocus = _this.props.onFocus;

	            if (_this.props.focusSelect) {
	                _this.input.select();
	            }
	            if (onFocus) {
	                onFocus(value, e);
	            }
	        };

	        _this.renderInput = function () {
	            var _this$props2 = _this.props,
	                Component = _this$props2.componentClass,
	                type = _this$props2.type,
	                className = _this$props2.className,
	                size = _this$props2.size,
	                clsPrefix = _this$props2.clsPrefix,
	                value = _this$props2.value,
	                onChange = _this$props2.onChange,
	                onSearch = _this$props2.onSearch,
	                onBlur = _this$props2.onBlur,
	                showClose = _this$props2.showClose,
	                focusSelect = _this$props2.focusSelect,
	                others = _objectWithoutProperties(_this$props2, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur', 'showClose', 'focusSelect']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }

	            var classNames = void 0;
	            if (type !== 'file') {
	                classNames = (0, _classnames2["default"])(clsPrefix, classes);
	            }

	            return showClose ? _react2["default"].createElement(
	                'div',
	                { className: (0, _classnames2["default"])(clsPrefix + '-close', clsPrefix + '-affix-wrapper', className) },
	                _react2["default"].createElement(Component, _extends({}, others, {
	                    type: type,
	                    ref: function ref(el) {
	                        return _this.input = el;
	                    },
	                    value: value,
	                    onChange: _this.handleChange,
	                    onBlur: _this.handleBlur,
	                    onFocus: _this.handleFocus,
	                    className: (0, _classnames2["default"])(className, classNames)
	                })),
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-suffix' },
	                    _this.state.showClose ? _react2["default"].createElement(_beeIcon2["default"], { onClick: _this.clearValue, type: 'uf-close-c' }) : ''
	                )
	            ) : _react2["default"].createElement(Component, _extends({}, others, {
	                type: type,
	                ref: function ref(el) {
	                    return _this.input = el;
	                },
	                value: value,
	                onChange: _this.handleChange,
	                onBlur: _this.handleBlur,
	                onFocus: _this.handleFocus,
	                className: (0, _classnames2["default"])(className, classNames)
	            }));
	        };

	        _this.renderSearch = function () {
	            var _this$props3 = _this.props,
	                Component = _this$props3.componentClass,
	                type = _this$props3.type,
	                className = _this$props3.className,
	                size = _this$props3.size,
	                clsPrefix = _this$props3.clsPrefix,
	                value = _this$props3.value,
	                onChange = _this$props3.onChange,
	                onSearch = _this$props3.onSearch,
	                onBlur = _this$props3.onBlur,
	                others = _objectWithoutProperties(_this$props3, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }
	            classes[clsPrefix + '-search'] = true;

	            if (type === "search") {
	                return _react2["default"].createElement(
	                    'div',
	                    { className: (0, _classnames2["default"])(clsPrefix + '-search', clsPrefix + '-affix-wrapper', className) },
	                    _react2["default"].createElement(Component, _extends({}, others, {
	                        type: type,
	                        ref: function ref(el) {
	                            return _this.input = el;
	                        },
	                        onChange: _this.handleSearchChange,
	                        value: value,
	                        onKeyDown: _this.handleKeyDown,
	                        onBlur: _this.handleBlur,
	                        onFocus: _this.handleFocus,
	                        className: (0, _classnames2["default"])(className, clsPrefix, classes)
	                    })),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + '-suffix' },
	                        _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-search', onClick: _this.handleSearch })
	                    )
	                );
	            }
	        };

	        _this.state = {
	            showSearch: !props.value,
	            value: props.value == null ? "" : props.value,
	            showClose: false
	        };
	        _this.input = {};
	        return _this;
	    }

	    FormControl.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProp) {
	        if (nextProp.value !== this.state.value) {
	            this.setState({ value: nextProp.value });
	        }
	    };

	    FormControl.prototype.render = function render() {

	        if (this.props.type === "search") {
	            return this.renderSearch();
	        }

	        return this.renderInput();
	    };

	    return FormControl;
	}(_react2["default"].Component);

	FormControl.propTypes = propTypes$1;
	FormControl.defaultProps = defaultProps;

	exports["default"] = FormControl;
	module.exports = exports['default'];
	});

	unwrapExports(FormControl_1$1);

	var build$g = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _FormControl2 = _interopRequireDefault(FormControl_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _FormControl2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$g);

	var Header_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var _react = _interopRequireWildcard(React__default);

	var _propTypes = _interopRequireDefault(propTypes);

	var _moment = _interopRequireDefault(moment);

	var _classnames = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var Header =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Header, _Component);

	  function Header(props) {
	    var _this;

	    _classCallCheck(this, Header);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Header).call(this, props));

	    _defineProperty(_assertThisInitialized(_this), "onInputChange", function (event) {
	      var str = event.target.value;

	      _this.setState({
	        str: str
	      });

	      var _this$props = _this.props,
	          format = _this$props.format,
	          hourOptions = _this$props.hourOptions,
	          minuteOptions = _this$props.minuteOptions,
	          secondOptions = _this$props.secondOptions,
	          disabledHours = _this$props.disabledHours,
	          disabledMinutes = _this$props.disabledMinutes,
	          disabledSeconds = _this$props.disabledSeconds,
	          onChange = _this$props.onChange;

	      if (str) {
	        var originalValue = _this.props.value;

	        var value = _this.getProtoValue().clone();

	        var parsed = (0, _moment["default"])(str, format, true);

	        if (!parsed.isValid()) {
	          _this.setState({
	            invalid: true
	          });

	          return;
	        }

	        value.hour(parsed.hour()).minute(parsed.minute()).second(parsed.second()); // if time value not allowed, response warning.

	        if (hourOptions.indexOf(value.hour()) < 0 || minuteOptions.indexOf(value.minute()) < 0 || secondOptions.indexOf(value.second()) < 0) {
	          _this.setState({
	            invalid: true
	          });

	          return;
	        } // if time value is disabled, response warning.


	        var disabledHourOptions = disabledHours();
	        var disabledMinuteOptions = disabledMinutes(value.hour());
	        var disabledSecondOptions = disabledSeconds(value.hour(), value.minute());

	        if (disabledHourOptions && disabledHourOptions.indexOf(value.hour()) >= 0 || disabledMinuteOptions && disabledMinuteOptions.indexOf(value.minute()) >= 0 || disabledSecondOptions && disabledSecondOptions.indexOf(value.second()) >= 0) {
	          _this.setState({
	            invalid: true
	          });

	          return;
	        }

	        if (originalValue) {
	          if (originalValue.hour() !== value.hour() || originalValue.minute() !== value.minute() || originalValue.second() !== value.second()) {
	            // keep other fields for rc-calendar
	            var changedValue = originalValue.clone();
	            changedValue.hour(value.hour());
	            changedValue.minute(value.minute());
	            changedValue.second(value.second());
	            onChange(changedValue);
	          }
	        } else if (originalValue !== value) {
	          onChange(value);
	        }
	      } else {
	        onChange(null);
	      }

	      _this.setState({
	        invalid: false
	      });
	    });

	    _defineProperty(_assertThisInitialized(_this), "onKeyDown", function (e) {
	      var _this$props2 = _this.props,
	          onEsc = _this$props2.onEsc,
	          onKeyDown = _this$props2.onKeyDown;

	      if (e.keyCode === 27) {
	        onEsc();
	      }

	      onKeyDown(e);
	    });

	    var _value = props.value,
	        _format = props.format;
	    _this.state = {
	      str: _value && _value.format(_format) || '',
	      invalid: false
	    };
	    return _this;
	  }

	  _createClass(Header, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this2 = this;

	      var focusOnOpen = this.props.focusOnOpen;

	      if (focusOnOpen) {
	        // Wait one frame for the panel to be positioned before focusing
	        var requestAnimationFrame = window.requestAnimationFrame || window.setTimeout;
	        requestAnimationFrame(function () {
	          _this2.refInput.focus();

	          _this2.refInput.select();
	        });
	      }
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var value = nextProps.value,
	          format = nextProps.format;
	      this.setState({
	        str: value && value.format(format) || '',
	        invalid: false
	      });
	    }
	  }, {
	    key: "getProtoValue",
	    value: function getProtoValue() {
	      var _this$props3 = this.props,
	          value = _this$props3.value,
	          defaultOpenValue = _this$props3.defaultOpenValue;
	      return value || defaultOpenValue;
	    }
	  }, {
	    key: "getInput",
	    value: function getInput() {
	      var _this3 = this;

	      var _this$props4 = this.props,
	          prefixCls = _this$props4.prefixCls,
	          placeholder = _this$props4.placeholder,
	          inputReadOnly = _this$props4.inputReadOnly;
	      var _this$state = this.state,
	          invalid = _this$state.invalid,
	          str = _this$state.str;
	      var invalidClass = invalid ? "".concat(prefixCls, "-input-invalid") : '';
	      return _react["default"].createElement("input", {
	        className: (0, _classnames["default"])("".concat(prefixCls, "-input"), invalidClass),
	        ref: function ref(_ref) {
	          _this3.refInput = _ref;
	        },
	        onKeyDown: this.onKeyDown,
	        value: str,
	        placeholder: placeholder,
	        onChange: this.onInputChange,
	        readOnly: !!inputReadOnly
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var prefixCls = this.props.prefixCls;
	      return _react["default"].createElement("div", {
	        className: "".concat(prefixCls, "-input-wrap")
	      }, this.getInput());
	    }
	  }]);

	  return Header;
	}(_react.Component);

	_defineProperty(Header, "propTypes", {
	  format: _propTypes["default"].string,
	  prefixCls: _propTypes["default"].string,
	  disabledDate: _propTypes["default"].func,
	  placeholder: _propTypes["default"].string,
	  clearText: _propTypes["default"].string,
	  value: _propTypes["default"].object,
	  inputReadOnly: _propTypes["default"].bool,
	  hourOptions: _propTypes["default"].array,
	  minuteOptions: _propTypes["default"].array,
	  secondOptions: _propTypes["default"].array,
	  disabledHours: _propTypes["default"].func,
	  disabledMinutes: _propTypes["default"].func,
	  disabledSeconds: _propTypes["default"].func,
	  onChange: _propTypes["default"].func,
	  onEsc: _propTypes["default"].func,
	  defaultOpenValue: _propTypes["default"].object,
	  currentSelectPanel: _propTypes["default"].string,
	  focusOnOpen: _propTypes["default"].bool,
	  onKeyDown: _propTypes["default"].func,
	  clearIcon: _propTypes["default"].node
	});

	_defineProperty(Header, "defaultProps", {
	  inputReadOnly: false
	});

	var _default = Header;
	exports["default"] = _default;
	});

	unwrapExports(Header_1);

	var Select_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var _react = _interopRequireWildcard(React__default);

	var _propTypes = _interopRequireDefault(propTypes);

	var _reactDom = _interopRequireDefault(ReactDOM__default);

	var _classnames = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var scrollTo = function scrollTo(element, to, duration) {
	  var requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout() {
	    return setTimeout(arguments[0], 10); // eslint-disable-line
	  }; // jump to target if duration zero


	  if (duration <= 0) {
	    element.scrollTop = to;
	    return;
	  }

	  var difference = to - element.scrollTop;
	  var perTick = difference / duration * 10;
	  requestAnimationFrame(function () {
	    element.scrollTop += perTick;
	    if (element.scrollTop === to) return;
	    scrollTo(element, to, duration - 10);
	  });
	};

	var Select =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Select, _Component);

	  function Select() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, Select);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Select)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_this), "state", {
	      active: false
	    });

	    _defineProperty(_assertThisInitialized(_this), "onSelect", function (value) {
	      var _this$props = _this.props,
	          onSelect = _this$props.onSelect,
	          type = _this$props.type;
	      onSelect(type, value);
	    });

	    _defineProperty(_assertThisInitialized(_this), "handleMouseEnter", function (e) {
	      var onMouseEnter = _this.props.onMouseEnter;

	      _this.setState({
	        active: true
	      });

	      onMouseEnter(e);
	    });

	    _defineProperty(_assertThisInitialized(_this), "handleMouseLeave", function () {
	      _this.setState({
	        active: false
	      });
	    });

	    _defineProperty(_assertThisInitialized(_this), "saveList", function (node) {
	      _this.list = node;
	    });

	    return _this;
	  }

	  _createClass(Select, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      // jump to selected option
	      this.scrollToSelected(0);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var selectedIndex = this.props.selectedIndex; // smooth scroll to selected option

	      if (prevProps.selectedIndex !== selectedIndex) {
	        this.scrollToSelected(120);
	      }
	    }
	  }, {
	    key: "getOptions",
	    value: function getOptions() {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          options = _this$props2.options,
	          selectedIndex = _this$props2.selectedIndex,
	          prefixCls = _this$props2.prefixCls;
	      return options.map(function (item, index) {
	        var _classNames;

	        var cls = (0, _classnames["default"])((_classNames = {}, _defineProperty(_classNames, "".concat(prefixCls, "-select-option-selected"), selectedIndex === index), _defineProperty(_classNames, "".concat(prefixCls, "-select-option-disabled"), item.disabled), _classNames));
	        var onClick = item.disabled ? undefined : function () {
	          _this2.onSelect(item.value);
	        };
	        return _react["default"].createElement("li", {
	          role: "button",
	          onClick: onClick,
	          className: cls,
	          key: index,
	          disabled: item.disabled
	        }, item.value);
	      });
	    }
	  }, {
	    key: "scrollToSelected",
	    value: function scrollToSelected(duration) {
	      // move to selected item
	      var selectedIndex = this.props.selectedIndex;

	      var select = _reactDom["default"].findDOMNode(this);

	      var list = _reactDom["default"].findDOMNode(this.list);

	      if (!list) {
	        return;
	      }

	      var index = selectedIndex;

	      if (index < 0) {
	        index = 0;
	      }

	      var topOption = list.children[index];
	      var to = topOption.offsetTop;
	      scrollTo(select, to, duration);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props3 = this.props,
	          prefixCls = _this$props3.prefixCls,
	          options = _this$props3.options;
	      var active = this.state.active;

	      if (options.length === 0) {
	        return null;
	      }

	      var cls = (0, _classnames["default"])("".concat(prefixCls, "-select"), _defineProperty({}, "".concat(prefixCls, "-select-active"), active));
	      return _react["default"].createElement("div", {
	        className: cls,
	        onMouseEnter: this.handleMouseEnter,
	        onMouseLeave: this.handleMouseLeave
	      }, _react["default"].createElement("ul", {
	        ref: this.saveList
	      }, this.getOptions()));
	    }
	  }]);

	  return Select;
	}(_react.Component);

	_defineProperty(Select, "propTypes", {
	  prefixCls: _propTypes["default"].string,
	  options: _propTypes["default"].array,
	  selectedIndex: _propTypes["default"].number,
	  type: _propTypes["default"].string,
	  onSelect: _propTypes["default"].func,
	  onMouseEnter: _propTypes["default"].func
	});

	var _default = Select;
	exports["default"] = _default;
	});

	unwrapExports(Select_1$1);

	var Combobox_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var _react = _interopRequireWildcard(React__default);

	var _propTypes = _interopRequireDefault(propTypes);

	var _Select = _interopRequireDefault(Select_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var formatOption = function formatOption(option, disabledOptions) {
	  var value = "".concat(option);

	  if (option < 10) {
	    value = "0".concat(option);
	  }

	  var disabled = false;

	  if (disabledOptions && disabledOptions.indexOf(option) >= 0) {
	    disabled = true;
	  }

	  return {
	    value: value,
	    disabled: disabled
	  };
	};

	var Combobox =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Combobox, _Component);

	  function Combobox() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck(this, Combobox);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Combobox)).call.apply(_getPrototypeOf2, [this].concat(args)));

	    _defineProperty(_assertThisInitialized(_this), "onItemChange", function (type, itemValue) {
	      var _this$props = _this.props,
	          onChange = _this$props.onChange,
	          defaultOpenValue = _this$props.defaultOpenValue,
	          use12Hours = _this$props.use12Hours,
	          propValue = _this$props.value,
	          isAM = _this$props.isAM,
	          onAmPmChange = _this$props.onAmPmChange;
	      var value = (propValue || defaultOpenValue).clone();

	      if (type === 'hour') {
	        if (use12Hours) {
	          if (isAM) {
	            value.hour(+itemValue % 12);
	          } else {
	            value.hour(+itemValue % 12 + 12);
	          }
	        } else {
	          value.hour(+itemValue);
	        }
	      } else if (type === 'minute') {
	        value.minute(+itemValue);
	      } else if (type === 'ampm') {
	        var ampm = itemValue.toUpperCase();

	        if (use12Hours) {
	          if (ampm === 'PM' && value.hour() < 12) {
	            value.hour(value.hour() % 12 + 12);
	          }

	          if (ampm === 'AM') {
	            if (value.hour() >= 12) {
	              value.hour(value.hour() - 12);
	            }
	          }
	        }

	        onAmPmChange(ampm);
	      } else {
	        value.second(+itemValue);
	      }

	      onChange(value);
	    });

	    _defineProperty(_assertThisInitialized(_this), "onEnterSelectPanel", function (range) {
	      var onCurrentSelectPanelChange = _this.props.onCurrentSelectPanelChange;
	      onCurrentSelectPanelChange(range);
	    });

	    return _this;
	  }

	  _createClass(Combobox, [{
	    key: "getHourSelect",
	    value: function getHourSelect(hour) {
	      var _this2 = this;

	      var _this$props2 = this.props,
	          prefixCls = _this$props2.prefixCls,
	          hourOptions = _this$props2.hourOptions,
	          disabledHours = _this$props2.disabledHours,
	          showHour = _this$props2.showHour,
	          use12Hours = _this$props2.use12Hours;

	      if (!showHour) {
	        return null;
	      }

	      var disabledOptions = disabledHours();
	      var hourOptionsAdj;
	      var hourAdj;

	      if (use12Hours) {
	        hourOptionsAdj = [12].concat(hourOptions.filter(function (h) {
	          return h < 12 && h > 0;
	        }));
	        hourAdj = hour % 12 || 12;
	      } else {
	        hourOptionsAdj = hourOptions;
	        hourAdj = hour;
	      }

	      return _react["default"].createElement(_Select["default"], {
	        prefixCls: prefixCls,
	        options: hourOptionsAdj.map(function (option) {
	          return formatOption(option, disabledOptions);
	        }),
	        selectedIndex: hourOptionsAdj.indexOf(hourAdj),
	        type: "hour",
	        onSelect: this.onItemChange,
	        onMouseEnter: function onMouseEnter() {
	          return _this2.onEnterSelectPanel('hour');
	        }
	      });
	    }
	  }, {
	    key: "getMinuteSelect",
	    value: function getMinuteSelect(minute) {
	      var _this3 = this;

	      var _this$props3 = this.props,
	          prefixCls = _this$props3.prefixCls,
	          minuteOptions = _this$props3.minuteOptions,
	          disabledMinutes = _this$props3.disabledMinutes,
	          defaultOpenValue = _this$props3.defaultOpenValue,
	          showMinute = _this$props3.showMinute,
	          propValue = _this$props3.value;

	      if (!showMinute) {
	        return null;
	      }

	      var value = propValue || defaultOpenValue;
	      var disabledOptions = disabledMinutes(value.hour());
	      return _react["default"].createElement(_Select["default"], {
	        prefixCls: prefixCls,
	        options: minuteOptions.map(function (option) {
	          return formatOption(option, disabledOptions);
	        }),
	        selectedIndex: minuteOptions.indexOf(minute),
	        type: "minute",
	        onSelect: this.onItemChange,
	        onMouseEnter: function onMouseEnter() {
	          return _this3.onEnterSelectPanel('minute');
	        }
	      });
	    }
	  }, {
	    key: "getSecondSelect",
	    value: function getSecondSelect(second) {
	      var _this4 = this;

	      var _this$props4 = this.props,
	          prefixCls = _this$props4.prefixCls,
	          secondOptions = _this$props4.secondOptions,
	          disabledSeconds = _this$props4.disabledSeconds,
	          showSecond = _this$props4.showSecond,
	          defaultOpenValue = _this$props4.defaultOpenValue,
	          propValue = _this$props4.value;

	      if (!showSecond) {
	        return null;
	      }

	      var value = propValue || defaultOpenValue;
	      var disabledOptions = disabledSeconds(value.hour(), value.minute());
	      return _react["default"].createElement(_Select["default"], {
	        prefixCls: prefixCls,
	        options: secondOptions.map(function (option) {
	          return formatOption(option, disabledOptions);
	        }),
	        selectedIndex: secondOptions.indexOf(second),
	        type: "second",
	        onSelect: this.onItemChange,
	        onMouseEnter: function onMouseEnter() {
	          return _this4.onEnterSelectPanel('second');
	        }
	      });
	    }
	  }, {
	    key: "getAMPMSelect",
	    value: function getAMPMSelect() {
	      var _this5 = this;

	      var _this$props5 = this.props,
	          prefixCls = _this$props5.prefixCls,
	          use12Hours = _this$props5.use12Hours,
	          format = _this$props5.format,
	          isAM = _this$props5.isAM;

	      if (!use12Hours) {
	        return null;
	      }

	      var AMPMOptions = ['am', 'pm'] // If format has A char, then we should uppercase AM/PM
	      .map(function (c) {
	        return format.match(/\sA/) ? c.toUpperCase() : c;
	      }).map(function (c) {
	        return {
	          value: c
	        };
	      });
	      var selected = isAM ? 0 : 1;
	      return _react["default"].createElement(_Select["default"], {
	        prefixCls: prefixCls,
	        options: AMPMOptions,
	        selectedIndex: selected,
	        type: "ampm",
	        onSelect: this.onItemChange,
	        onMouseEnter: function onMouseEnter() {
	          return _this5.onEnterSelectPanel('ampm');
	        }
	      });
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props6 = this.props,
	          prefixCls = _this$props6.prefixCls,
	          defaultOpenValue = _this$props6.defaultOpenValue,
	          propValue = _this$props6.value;
	      var value = propValue || defaultOpenValue;
	      return _react["default"].createElement("div", {
	        className: "".concat(prefixCls, "-combobox")
	      }, this.getHourSelect(value.hour()), this.getMinuteSelect(value.minute()), this.getSecondSelect(value.second()), this.getAMPMSelect(value.hour()));
	    }
	  }]);

	  return Combobox;
	}(_react.Component);

	_defineProperty(Combobox, "propTypes", {
	  format: _propTypes["default"].string,
	  defaultOpenValue: _propTypes["default"].object,
	  prefixCls: _propTypes["default"].string,
	  value: _propTypes["default"].object,
	  onChange: _propTypes["default"].func,
	  onAmPmChange: _propTypes["default"].func,
	  showHour: _propTypes["default"].bool,
	  showMinute: _propTypes["default"].bool,
	  showSecond: _propTypes["default"].bool,
	  hourOptions: _propTypes["default"].array,
	  minuteOptions: _propTypes["default"].array,
	  secondOptions: _propTypes["default"].array,
	  disabledHours: _propTypes["default"].func,
	  disabledMinutes: _propTypes["default"].func,
	  disabledSeconds: _propTypes["default"].func,
	  onCurrentSelectPanelChange: _propTypes["default"].func,
	  use12Hours: _propTypes["default"].bool,
	  isAM: _propTypes["default"].bool
	});

	var _default = Combobox;
	exports["default"] = _default;
	});

	unwrapExports(Combobox_1);

	var Panel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;

	var _react = _interopRequireWildcard(React__default);

	var _propTypes = _interopRequireDefault(propTypes);

	var _moment = _interopRequireDefault(moment);

	var _classnames = _interopRequireDefault(classnames);

	var _Header = _interopRequireDefault(Header_1);

	var _Combobox = _interopRequireDefault(Combobox_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function noop() {}

	function generateOptions(length, disabledOptions, hideDisabledOptions) {
	  var step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
	  var arr = [];

	  for (var value = 0; value < length; value += step) {
	    if (!disabledOptions || disabledOptions.indexOf(value) < 0 || !hideDisabledOptions) {
	      arr.push(value);
	    }
	  }

	  return arr;
	}

	function toNearestValidTime(time, hourOptions, minuteOptions, secondOptions) {
	  var hour = hourOptions.slice().sort(function (a, b) {
	    return Math.abs(time.hour() - a) - Math.abs(time.hour() - b);
	  })[0];
	  var minute = minuteOptions.slice().sort(function (a, b) {
	    return Math.abs(time.minute() - a) - Math.abs(time.minute() - b);
	  })[0];
	  var second = secondOptions.slice().sort(function (a, b) {
	    return Math.abs(time.second() - a) - Math.abs(time.second() - b);
	  })[0];
	  return (0, _moment["default"])("".concat(hour, ":").concat(minute, ":").concat(second), 'HH:mm:ss');
	}

	var Panel =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(Panel, _Component);

	  function Panel(props) {
	    var _this;

	    _classCallCheck(this, Panel);

	    _this = _possibleConstructorReturn(this, _getPrototypeOf(Panel).call(this, props));

	    _defineProperty(_assertThisInitialized(_this), "onChange", function (newValue) {
	      var onChange = _this.props.onChange;

	      _this.setState({
	        value: newValue
	      });

	      onChange(newValue);
	    });

	    _defineProperty(_assertThisInitialized(_this), "onAmPmChange", function (ampm) {
	      var onAmPmChange = _this.props.onAmPmChange;
	      onAmPmChange(ampm);
	    });

	    _defineProperty(_assertThisInitialized(_this), "onCurrentSelectPanelChange", function (currentSelectPanel) {
	      _this.setState({
	        currentSelectPanel: currentSelectPanel
	      });
	    });

	    _defineProperty(_assertThisInitialized(_this), "disabledHours", function () {
	      var _this$props = _this.props,
	          use12Hours = _this$props.use12Hours,
	          disabledHours = _this$props.disabledHours;
	      var disabledOptions = disabledHours();

	      if (use12Hours && Array.isArray(disabledOptions)) {
	        if (_this.isAM()) {
	          disabledOptions = disabledOptions.filter(function (h) {
	            return h < 12;
	          }).map(function (h) {
	            return h === 0 ? 12 : h;
	          });
	        } else {
	          disabledOptions = disabledOptions.map(function (h) {
	            return h === 12 ? 12 : h - 12;
	          });
	        }
	      }

	      return disabledOptions;
	    });

	    _this.state = {
	      value: props.value
	    };
	    return _this;
	  }

	  _createClass(Panel, [{
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      var value = nextProps.value;

	      if (value) {
	        this.setState({
	          value: value
	        });
	      }
	    }
	  }, {
	    key: "close",
	    // https://github.com/ant-design/ant-design/issues/5829
	    value: function close() {
	      var onEsc = this.props.onEsc;
	      onEsc();
	    }
	  }, {
	    key: "isAM",
	    value: function isAM() {
	      var defaultOpenValue = this.props.defaultOpenValue;
	      var value = this.state.value;
	      var realValue = value || defaultOpenValue;
	      return realValue.hour() >= 0 && realValue.hour() < 12;
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          prefixCls = _this$props2.prefixCls,
	          className = _this$props2.className,
	          placeholder = _this$props2.placeholder,
	          disabledMinutes = _this$props2.disabledMinutes,
	          disabledSeconds = _this$props2.disabledSeconds,
	          hideDisabledOptions = _this$props2.hideDisabledOptions,
	          showHour = _this$props2.showHour,
	          showMinute = _this$props2.showMinute,
	          showSecond = _this$props2.showSecond,
	          format = _this$props2.format,
	          defaultOpenValue = _this$props2.defaultOpenValue,
	          clearText = _this$props2.clearText,
	          onEsc = _this$props2.onEsc,
	          addon = _this$props2.addon,
	          use12Hours = _this$props2.use12Hours,
	          focusOnOpen = _this$props2.focusOnOpen,
	          onKeyDown = _this$props2.onKeyDown,
	          hourStep = _this$props2.hourStep,
	          minuteStep = _this$props2.minuteStep,
	          secondStep = _this$props2.secondStep,
	          inputReadOnly = _this$props2.inputReadOnly,
	          clearIcon = _this$props2.clearIcon;
	      var _this$state = this.state,
	          value = _this$state.value,
	          currentSelectPanel = _this$state.currentSelectPanel;
	      var disabledHourOptions = this.disabledHours();
	      var disabledMinuteOptions = disabledMinutes(value ? value.hour() : null);
	      var disabledSecondOptions = disabledSeconds(value ? value.hour() : null, value ? value.minute() : null);
	      var hourOptions = generateOptions(24, disabledHourOptions, hideDisabledOptions, hourStep);
	      var minuteOptions = generateOptions(60, disabledMinuteOptions, hideDisabledOptions, minuteStep);
	      var secondOptions = generateOptions(60, disabledSecondOptions, hideDisabledOptions, secondStep);
	      var validDefaultOpenValue = toNearestValidTime(defaultOpenValue, hourOptions, minuteOptions, secondOptions);
	      return _react["default"].createElement("div", {
	        className: (0, _classnames["default"])(className, "".concat(prefixCls, "-inner"))
	      }, _react["default"].createElement(_Header["default"], {
	        clearText: clearText,
	        prefixCls: prefixCls,
	        defaultOpenValue: validDefaultOpenValue,
	        value: value,
	        currentSelectPanel: currentSelectPanel,
	        onEsc: onEsc,
	        format: format,
	        placeholder: placeholder,
	        hourOptions: hourOptions,
	        minuteOptions: minuteOptions,
	        secondOptions: secondOptions,
	        disabledHours: this.disabledHours,
	        disabledMinutes: disabledMinutes,
	        disabledSeconds: disabledSeconds,
	        onChange: this.onChange,
	        focusOnOpen: focusOnOpen,
	        onKeyDown: onKeyDown,
	        inputReadOnly: inputReadOnly,
	        clearIcon: clearIcon
	      }), _react["default"].createElement(_Combobox["default"], {
	        prefixCls: prefixCls,
	        value: value,
	        defaultOpenValue: validDefaultOpenValue,
	        format: format,
	        onChange: this.onChange,
	        onAmPmChange: this.onAmPmChange,
	        showHour: showHour,
	        showMinute: showMinute,
	        showSecond: showSecond,
	        hourOptions: hourOptions,
	        minuteOptions: minuteOptions,
	        secondOptions: secondOptions,
	        disabledHours: this.disabledHours,
	        disabledMinutes: disabledMinutes,
	        disabledSeconds: disabledSeconds,
	        onCurrentSelectPanelChange: this.onCurrentSelectPanelChange,
	        use12Hours: use12Hours,
	        isAM: this.isAM()
	      }), addon(this));
	    }
	  }]);

	  return Panel;
	}(_react.Component);

	_defineProperty(Panel, "propTypes", {
	  clearText: _propTypes["default"].string,
	  prefixCls: _propTypes["default"].string,
	  className: _propTypes["default"].string,
	  defaultOpenValue: _propTypes["default"].object,
	  value: _propTypes["default"].object,
	  placeholder: _propTypes["default"].string,
	  format: _propTypes["default"].string,
	  inputReadOnly: _propTypes["default"].bool,
	  disabledHours: _propTypes["default"].func,
	  disabledMinutes: _propTypes["default"].func,
	  disabledSeconds: _propTypes["default"].func,
	  hideDisabledOptions: _propTypes["default"].bool,
	  onChange: _propTypes["default"].func,
	  onAmPmChange: _propTypes["default"].func,
	  onEsc: _propTypes["default"].func,
	  showHour: _propTypes["default"].bool,
	  showMinute: _propTypes["default"].bool,
	  showSecond: _propTypes["default"].bool,
	  use12Hours: _propTypes["default"].bool,
	  hourStep: _propTypes["default"].number,
	  minuteStep: _propTypes["default"].number,
	  secondStep: _propTypes["default"].number,
	  addon: _propTypes["default"].func,
	  focusOnOpen: _propTypes["default"].bool,
	  onKeyDown: _propTypes["default"].func,
	  clearIcon: _propTypes["default"].node
	});

	_defineProperty(Panel, "defaultProps", {
	  prefixCls: 'rc-time-picker-panel',
	  onChange: noop,
	  disabledHours: noop,
	  disabledMinutes: noop,
	  disabledSeconds: noop,
	  defaultOpenValue: (0, _moment["default"])(),
	  use12Hours: false,
	  addon: noop,
	  onKeyDown: noop,
	  onAmPmChange: noop,
	  inputReadOnly: false
	});

	var _default = Panel;
	exports["default"] = _default;
	});

	unwrapExports(Panel_1);

	var InputGroupButton_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-input-group-btn'
	};

	var InputGroupButton = function (_React$Component) {
	  _inherits(InputGroupButton, _React$Component);

	  function InputGroupButton() {
	    _classCallCheck(this, InputGroupButton);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  InputGroupButton.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['className', 'clsPrefix']);

	    return _react2["default"].createElement('span', _extends({}, others, {
	      className: (0, _classnames2["default"])(className, clsPrefix)
	    }));
	  };

	  return InputGroupButton;
	}(_react2["default"].Component);

	InputGroupButton.defaultProps = defaultProps;
	exports["default"] = InputGroupButton;
	module.exports = exports['default'];
	});

	unwrapExports(InputGroupButton_1$1);

	var InputGroup_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _beeInputGroupAddon2 = _interopRequireDefault(build$3);



	var _InputGroupButton2 = _interopRequireDefault(InputGroupButton_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-input-group',
	  simple: false
	};

	var InputGroup = function (_React$Component) {
	  _inherits(InputGroup, _React$Component);

	  function InputGroup() {
	    _classCallCheck(this, InputGroup);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  InputGroup.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        simple = _props.simple,
	        others = _objectWithoutProperties(_props, ['className', 'clsPrefix', 'simple']);

	    return _react2["default"].createElement('span', _extends({}, others, {
	      className: (0, _classnames2["default"])(className, clsPrefix, simple && 'simple')
	    }));
	  };

	  return InputGroup;
	}(_react2["default"].Component);

	/**
	  * 将InputGroupAddon与InputGroupButton组件作为InputGroup的附属组件
	  */


	InputGroup.Addon = _beeInputGroupAddon2["default"];
	InputGroup.Button = _InputGroupButton2["default"];
	InputGroup.defaultProps = defaultProps;
	exports["default"] = InputGroup;
	module.exports = exports['default'];
	});

	unwrapExports(InputGroup_1$1);

	var build$h = InputGroup_1$1;

	var zh_CN = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  today: '今天',
	  now: '此刻',
	  backToToday: '返回今天',
	  ok: '确定',
	  timeSelect: '选择时间',
	  dateSelect: '选择日期',
	  weekSelect: '选择周',
	  clear: '清除',
	  month: '月',
	  year: '年',
	  previousMonth: '上个月 (翻页上键)',
	  nextMonth: '下个月 (翻页下键)',
	  monthSelect: '选择月份',
	  yearSelect: '选择年份',
	  decadeSelect: '选择年代',
	  yearFormat: 'YYYY年',
	  dayFormat: 'D日',
	  dateFormat: 'YYYY年M月D日',
	  dateTimeFormat: 'YYYY年M月D日 HH时mm分ss秒',
	  previousYear: '上一年 (Control键加左方向键)',
	  nextYear: '下一年 (Control键加右方向键)',
	  previousDecade: '上一年代',
	  nextDecade: '下一年代',
	  previousCentury: '上一世纪',
	  nextCentury: '下一世纪',
	  lastWeek: '上一周',
	  nowWeek: '本周',
	  nextWeek: '下一周'
	};
	module.exports = exports['default'];
	});

	unwrapExports(zh_CN);

	var DatePicker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _rcCalendar2 = _interopRequireDefault(rcCalendar);



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);





	var _Picker2 = _interopRequireDefault(Picker_1);



	var _beeFormControl2 = _interopRequireDefault(build$g);



	var _Panel2 = _interopRequireDefault(Panel_1);



	var _moment2 = _interopRequireDefault(moment);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _beeInputGroup2 = _interopRequireDefault(build$h);



	var _zh_CN2 = _interopRequireDefault(zh_CN);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by chief on 17/4/6.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var timePickerElement = _react2["default"].createElement(_Panel2["default"], { defaultValue: (0, _moment2["default"])((0, _moment2["default"])().format("HH:mm:ss"), "HH:mm:ss") });

	var timerDatePicker = true;

	var DatePicker = function (_Component) {
	  _inherits(DatePicker, _Component);

	  function DatePicker(props, context) {
	    _classCallCheck(this, DatePicker);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _initialiseProps.call(_this);

	    _this.state = {
	      type: "month",
	      value: props.value || props.defaultValue || _moment2["default"].Moment,
	      open: props.open || false,
	      inputValue: props.value && _this.getValue(props.value) || props.defaultValue && _this.getValue(props.defaultValue) || '',
	      showClose: false
	    };

	    return _this;
	  }

	  DatePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ("value" in nextProps) {
	      this.setState({
	        value: nextProps.value
	      });
	    }
	    if ("open" in nextProps) {
	      this.setState({
	        open: nextProps.open
	      });
	    }
	    if ("renderIcon" in nextProps) {
	      this.setState({
	        renderIcon: nextProps.renderIcon
	      });
	    }
	  };

	  DatePicker.prototype.render = function render() {
	    var _this2 = this;

	    var state = this.state;
	    var props = this.props;
	    var value = state.value;
	    var pickerChangeHandler = {};
	    var calendarHandler = {};
	    var autofocus = this.props.autofocus ? { autofocus: 'autofocus' } : null;

	    if (props.showTime) {
	      calendarHandler = {
	        // fix https://github.com/ant-design/ant-design/issues/1902
	        onSelect: this.handleChange
	      };
	    } else {
	      pickerChangeHandler = {
	        onChange: this.handleChange
	      };
	    }

	    var calendar = _react2["default"].createElement(_rcCalendar2["default"], _extends({
	      timePicker: props.showTime ? timePickerElement : null
	    }, props, {
	      onSelect: this.handleSelect,
	      onChange: this.handleCalendarChange,
	      value: this.state.value
	    }));

	    var keyboardInputProps = {};
	    if (props.keyboardInput) {
	      keyboardInputProps.readOnly = false;
	      keyboardInputProps.onChange = this.inputChange;
	      keyboardInputProps.value = state.inputValue;
	    } else {
	      keyboardInputProps.readOnly = true;
	      keyboardInputProps.value = value && this.getValue(value) || "";
	    }
	    var classes = (0, _classnames2["default"])(props.className, "datepicker-container");
	    return _react2["default"].createElement(
	      "div",
	      { className: classes },
	      _react2["default"].createElement(
	        _Picker2["default"],
	        _extends({
	          animation: "slide-up"
	        }, props, pickerChangeHandler, {
	          onOpenChange: this.onOpenChange,
	          calendar: calendar,
	          mode: 'year',
	          open: this.state.open,
	          value: state.value
	        }),
	        function () {
	          return _react2["default"].createElement(
	            _beeInputGroup2["default"],
	            { simple: true, className: "datepicker-input-group",
	              onMouseEnter: _this2.onMouseEnter,
	              onMouseLeave: _this2.onMouseLeave
	            },
	            _react2["default"].createElement(_beeFormControl2["default"], _extends({
	              ref: function ref(_ref) {
	                return _this2.outInput = _ref;
	              },
	              disabled: props.disabled,
	              placeholder: _this2.props.placeholder,
	              onClick: function onClick(event) {
	                _this2.onClick(event);
	              },
	              focusSelect: props.defaultSelected,
	              onFocus: function onFocus(v, e) {
	                _this2.outInputFocus(e);
	              },
	              onKeyDown: _this2.outInputKeydown
	            }, keyboardInputProps, autofocus)),
	            _this2.state.value && _this2.state.showClose && !props.disabled ? _react2["default"].createElement(
	              _beeInputGroup2["default"].Button,
	              { shape: "border",
	                onClick: _this2.clear },
	              _react2["default"].createElement("i", { className: "uf uf-close-c" })
	            ) : _react2["default"].createElement(
	              _beeInputGroup2["default"].Button,
	              { shape: "border",
	                onClick: function onClick(e) {
	                  props.keyboardInput ? _this2.iconClick(e) : '';
	                } },
	              props.renderIcon()
	            )
	          );
	        }
	      )
	    );
	  };

	  return DatePicker;
	}(React__default.Component);

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this.getValue = function (value) {
	    var format = _this3.props.format;

	    if (typeof format == 'string') {
	      return value.format(format);
	    } else {
	      return value.format(format[0]);
	    }
	  };

	  this.onChange = function (value) {
	    var props = _this3.props;

	    _this3.setState({ value: value });
	  };

	  this.inputFocus = function () {
	    var input = document.querySelector('.rc-calendar-input');
	    if (input) {
	      if (input.value) {
	        input.select();
	      } else {
	        input.focus();
	      }
	      input.onkeydown = function (e) {
	        if (e.keyCode == lib$1.KeyCode.DELETE) {
	          input.value = '';
	          _this3.props.onChange('', '');
	        } else if (e.keyCode == lib$1.KeyCode.ESC || e.keyCode == lib$1.KeyCode.ENTER) {
	          _this3.setState({
	            open: false
	          });
	          var v = _this3.state.value;
	          _this3.props.onOpenChange(false, v, v && _this3.getValue(v) || '');
	          _reactDom2["default"].findDOMNode(_this3.outInput).focus(); // 按esc时候焦点回到input输入框
	        }
	        _this3.props.onKeyDown && _this3.props.onKeyDown(e);
	      };
	    }
	  };

	  this.onOpenChange = function (open) {
	    var props = _this3.props;
	    var self = _this3;
	    _this3.setState({
	      open: open
	    }, function () {
	      if (open) {
	        setTimeout(function () {
	          self.inputFocus();
	        }, 0);
	      }
	    });
	    var value = self.state.value;
	    props.onOpenChange(open, value, value && _this3.getValue(value) || '');
	    if (open) {
	      setTimeout(function () {
	        self.inputFocus();
	      }, 200);
	    }
	  };

	  this.handleCalendarChange = function (value) {
	    var props = _this3.props;
	    _this3.setState({ value: value, inputValue: value && _this3.getValue(value) || '' });
	    //props.onChange(value, (value && this.getValue(value)) || '');
	  };

	  this.handleChange = function (value) {
	    var props = _this3.props;
	    _this3.setState({ value: value, inputValue: value && _this3.getValue(value) || '' });
	    if (timerDatePicker) {
	      clearTimeout(_this3.timerout);
	      props.onChange(value, value && _this3.getValue(value) || '');
	      timerDatePicker = false;
	      _this3.timerout = window.setTimeout(function () {
	        timerDatePicker = true;
	      }, 300);
	    }
	  };

	  this.onClick = function (e) {
	    var props = _this3.props;
	    if (props.keyboardInput) e.stopPropagation();
	    var value = _this3.state.value;
	    if (props.keyboardInput) {
	      props.onClick && props.onClick(e.nativeEvent, value || null, _this3.state.inputValue);
	    } else {
	      props.onClick && props.onClick(e.nativeEvent, value || null, value && _this3.getValue(value) || '');
	    }
	  };

	  this.inputChange = function (value, e) {
	    if (_this3.props.keyboardInput) e.stopPropagation();
	    _this3.setState({
	      inputValue: value
	    });
	    if ((0, _moment2["default"])(value, _this3.props.format).isValid()) {
	      _this3.setState({
	        value: (0, _moment2["default"])(value, _this3.props.format)
	      });
	      value = (0, _moment2["default"])(value, _this3.props.format);
	      _this3.props.onChange(value, value && _this3.getValue(value) || '');
	    } else {
	      _this3.props.onChange(null, value);
	    }
	  };

	  this.outInputFocus = function (e) {
	    if (_this3.props.hasOwnProperty('open')) e.stopPropagation();
	    _this3.props.outInputFocus && _this3.props.outInputFocus(e);
	  };

	  this.iconClick = function (e) {
	    _this3.props.iconClick && _this3.props.iconClick(e);
	  };

	  this.outInputKeydown = function (e) {
	    if (e.keyCode == lib$1.KeyCode.DELETE) {
	      _this3.setState({
	        inputValue: ''
	      });
	      _this3.props.onChange('', '');
	    } else if (e.keyCode == lib$1.KeyCode.ESC) {
	      _this3.setState({
	        open: false
	      });
	      var value = _this3.state.inputValue;
	      if ((0, _moment2["default"])(value, _this3.props.format).isValid()) {
	        _this3.setState({
	          value: (0, _moment2["default"])(value, _this3.props.format)
	        });
	        value = (0, _moment2["default"])(value, _this3.props.format);
	        _this3.props.onChange(value, value && _this3.getValue(value) || '');
	      } else {
	        _this3.props.onChange(null, value);
	      }
	    }
	    _this3.props.outInputKeydown && _this3.props.outInputKeydown(e);
	  };

	  this.onMouseLeave = function (e) {
	    _this3.setState({
	      showClose: false
	    });
	  };

	  this.onMouseEnter = function (e) {
	    _this3.setState({
	      showClose: true
	    });
	  };

	  this.clear = function (e) {
	    e.stopPropagation();
	    _this3.setState({
	      inputValue: '',
	      value: ''
	    });
	    _this3.props.onChange && _this3.props.onChange('', '');
	  };

	  this.handleSelect = function (value) {
	    _this3.setState({
	      value: value
	    });
	    _this3.props.onSelect && _this3.props.onSelect(value, value && _this3.getValue(value) || '');
	    // ReactDOM.findDOMNode(this.outInput).focus()
	  };
	};

	DatePicker.defaultProps = {
	  renderIcon: function renderIcon() {
	    return _react2["default"].createElement(_beeIcon2["default"], { type: "uf-calendar" });
	  },
	  focusOnOpen: true,
	  defultSelect: false,
	  onOpenChange: function onOpenChange() {},
	  onChange: function onChange() {},
	  locale: _zh_CN2["default"],
	  showMonthInput: false,
	  onKeyDown: function onKeyDown() {}
	};

	exports["default"] = DatePicker;
	module.exports = exports["default"];
	});

	unwrapExports(DatePicker_1);

	var MonthCalendar_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _KeyCode2 = _interopRequireDefault(KeyCode_1);



	var _CalendarHeader2 = _interopRequireDefault(CalendarHeader_1);



	var _CalendarFooter2 = _interopRequireDefault(CalendarFooter_1);







	var _DateInput2 = _interopRequireDefault(DateInput_1);



	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var MonthCalendar = function (_React$Component) {
	  _inherits(MonthCalendar, _React$Component);

	  function MonthCalendar(props) {
	    _classCallCheck(this, MonthCalendar);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.onKeyDown = function (event) {
	      var keyCode = event.keyCode;
	      var ctrlKey = event.ctrlKey || event.metaKey;
	      var stateValue = _this.state.value;
	      var disabledDate = _this.props.disabledDate;

	      var value = stateValue;
	      switch (keyCode) {
	        case _KeyCode2["default"].DOWN:
	          value = stateValue.clone();
	          value.add(3, 'months');
	          break;
	        case _KeyCode2["default"].UP:
	          value = stateValue.clone();
	          value.add(-3, 'months');
	          break;
	        case _KeyCode2["default"].LEFT:
	          value = stateValue.clone();
	          if (ctrlKey) {
	            value.add(-1, 'years');
	          } else {
	            value.add(-1, 'months');
	          }
	          break;
	        case _KeyCode2["default"].RIGHT:
	          value = stateValue.clone();
	          if (ctrlKey) {
	            value.add(1, 'years');
	          } else {
	            value.add(1, 'months');
	          }
	          break;
	        case _KeyCode2["default"].ENTER:
	          if (!disabledDate || !disabledDate(stateValue)) {
	            _this.onSelect(stateValue);
	          }
	          event.preventDefault();
	          return 1;
	        default:
	          return undefined;
	      }
	      if (value !== stateValue) {
	        _this.setValue(value);
	        event.preventDefault();
	        return 1;
	      }
	    };

	    _this.handlePanelChange = function (_, mode) {
	      if (mode !== 'date') {
	        _this.setState({ mode: mode });
	      }
	    };

	    _this.onInputChange = function (value) {
	      var _this$props = _this.props,
	          onChange = _this$props.onChange,
	          format = _this$props.format;

	      _this.setState({
	        value: value ? value : (0, _moment2["default"])()
	      });
	      _this.setValue(value);
	      onChange && onChange(value);
	    };

	    _this.onClear = function () {
	      var _this$props2 = _this.props,
	          onChange = _this$props2.onChange,
	          format = _this$props2.format,
	          onClear = _this$props2.onClear;

	      _this.setState({
	        value: (0, _moment2["default"])()
	      });
	      _this.setValue((0, _moment2["default"])());
	      onChange && onChange('', '');
	      onClear && onClear('', '');
	    };

	    _this.state = {
	      mode: 'month',
	      value: props.value || props.defaultValue || (0, _moment2["default"])(),
	      selectedValue: props.selectedValue || props.defaultSelectedValue
	    };
	    return _this;
	  }

	  MonthCalendar.prototype.render = function render() {
	    var props = this.props,
	        state = this.state;
	    var mode = state.mode,
	        value = state.value;

	    value = value ? value : (0, _moment2["default"])();
	    var prefixCls = props.prefixCls,
	        locale = props.locale,
	        format = props.format,
	        showDateInput = props.showDateInput,
	        onChange = props.onChange,
	        onSelect = props.onSelect,
	        onClear = props.onClear,
	        showMonthInput = props.showMonthInput;

	    var children = _react2["default"].createElement(
	      'div',
	      { className: props.prefixCls + '-month-calendar-content' },
	      _react2["default"].createElement(
	        'div',
	        { className: props.prefixCls + '-month-header-wrap' },
	        showDateInput && showMonthInput ? _react2["default"].createElement(_DateInput2["default"], {
	          value: value,
	          prefixCls: prefixCls,
	          showClear: true,
	          locale: locale,
	          format: format,
	          onChange: this.onInputChange,
	          selectedValue: value,
	          onClear: this.onClear
	        }) : '',
	        _react2["default"].createElement(_CalendarHeader2["default"], {
	          prefixCls: props.prefixCls,
	          mode: mode,
	          value: value,
	          locale: props.locale,
	          disabledMonth: props.disabledDate,
	          monthCellRender: props.monthCellRender,
	          monthCellContentRender: props.monthCellContentRender,
	          onMonthSelect: this.onSelect,
	          onValueChange: this.setValue,
	          onPanelChange: this.handlePanelChange
	          // onChange={onChange}
	          , onClear: onClear
	        })
	      ),
	      _react2["default"].createElement(_CalendarFooter2["default"], {
	        prefixCls: props.prefixCls,
	        renderFooter: props.renderFooter
	      })
	    );
	    return this.renderRoot({
	      className: props.prefixCls + '-month-calendar',
	      children: children
	    });
	  };

	  return MonthCalendar;
	}(_react2["default"].Component);

	MonthCalendar.propTypes = _extends({}, CalendarMixin.calendarMixinPropTypes, CommonMixin.propType, {
	  monthCellRender: _propTypes2["default"].func,
	  dateCellRender: _propTypes2["default"].func,
	  value: _propTypes2["default"].object,
	  defaultValue: _propTypes2["default"].object,
	  selectedValue: _propTypes2["default"].object,
	  defaultSelectedValue: _propTypes2["default"].object,
	  disabledDate: _propTypes2["default"].func
	});
	MonthCalendar.defaultProps = _extends({
	  showDateInput: false
	}, CommonMixin.defaultProp, CalendarMixin.calendarMixinDefaultProps);
	exports["default"] = (0, CalendarMixin.calendarMixinWrapper)((0, CommonMixin.commonMixinWrapper)(MonthCalendar));
	module.exports = exports['default'];
	});

	unwrapExports(MonthCalendar_1);

	var MonthPicker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _MonthCalendar2 = _interopRequireDefault(MonthCalendar_1);





	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _Picker2 = _interopRequireDefault(Picker_1);



	var _beeFormControl2 = _interopRequireDefault(build$g);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _beeInputGroup2 = _interopRequireDefault(build$h);



	var _classnames2 = _interopRequireDefault(classnames);



	var _zh_CN2 = _interopRequireDefault(zh_CN);



	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by chief on 17/4/6.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var MonthPicker = function (_Component) {
	  _inherits(MonthPicker, _Component);

	  function MonthPicker(props, context) {
	    _classCallCheck(this, MonthPicker);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.onChange = function (value) {
	      var _this$props = _this.props,
	          onChange = _this$props.onChange,
	          onClear = _this$props.onClear,
	          onSelect = _this$props.onSelect,
	          format = _this$props.format;
	      // if(value){
	      //   this.setState({
	      //     value:value
	      //   });
	      // }else{
	      //   this.setState({
	      //     value:moment()
	      //   })
	      // }

	      _this.setState({
	        value: value
	      });
	      onChange && onChange(value, value ? value.format(format) : '');
	    };

	    _this.inputFocus = function () {
	      var self = _this;
	      var input = document.querySelector('.rc-calendar-input');
	      if (input) {
	        if (input.value) {
	          input.select();
	        } else {
	          input.focus();
	        }
	        input.onkeydown = function (e) {
	          if (e.keyCode == lib$1.KeyCode.DELETE) {
	            input.value = '';
	            self.props.onChange && self.props.onChange('', '');
	          } else if (e.keyCode == lib$1.KeyCode.ESC) {
	            self.setState({
	              open: false
	            });
	            var v = self.state.value;
	            self.props.onOpenChange && self.props.onOpenChange(false, v, v && v.format(self.props.format) || '');
	            _reactDom2["default"].findDOMNode(self.outInput).focus(); // 按esc时候焦点回到input输入框
	          }
	        };
	      }
	    };

	    _this.onOpenChange = function (open) {
	      var self = _this;
	      _this.setState({
	        open: open
	      });
	      if (open) {
	        setTimeout(function () {
	          self.inputFocus();
	        }, 200);
	      }
	    };

	    _this.onTypeChange = function (type) {
	      _this.setState({
	        type: type
	      });
	    };

	    _this.onMouseLeave = function (e) {
	      _this.setState({
	        showClose: false
	      });
	    };

	    _this.onMouseEnter = function (e) {
	      _this.setState({
	        showClose: true
	      });
	    };

	    _this.clear = function (e) {
	      e.stopPropagation();
	      _this.setState({
	        value: ''
	      });
	      _this.props.onChange && _this.props.onChange('', '');
	    };

	    _this.state = {
	      type: "month",
	      value: props.value || props.defaultValue,
	      open: false,
	      showClose: false
	    };
	    return _this;
	  }

	  MonthPicker.prototype.render = function render() {
	    var _this2 = this;

	    var state = this.state;

	    var props = this.props;

	    var monthCalendar = _react2["default"].createElement(_MonthCalendar2["default"], _extends({}, props, {
	      onChange: this.onChange
	    }));
	    var classes = (0, _classnames2["default"])(props.className, "datepicker-container");
	    return _react2["default"].createElement(
	      "div",
	      { className: classes },
	      _react2["default"].createElement(
	        _Picker2["default"],
	        {
	          onOpenChange: this.onOpenChange,
	          animation: 'animation' in props ? props.animation : "slide-up",
	          calendar: monthCalendar,
	          open: this.state.open,
	          value: state.value,
	          onChange: this.onChange,
	          dropdownClassName: props.dropdownClassName
	        },
	        function (_ref) {
	          var value = _ref.value;

	          return _react2["default"].createElement(
	            _beeInputGroup2["default"],
	            { simple: true, className: "datepicker-input-group",
	              onMouseEnter: _this2.onMouseEnter,
	              onMouseLeave: _this2.onMouseLeave
	            },
	            _react2["default"].createElement(_beeFormControl2["default"], {
	              ref: function ref(_ref2) {
	                return _this2.outInput = _ref2;
	              },
	              placeholder: _this2.props.placeholder,
	              className: _this2.props.className,
	              value: value && value.format(props.format) || "",
	              disabled: props.disabled
	            }),
	            _this2.state.value && _this2.state.showClose && !props.disabled ? _react2["default"].createElement(
	              _beeInputGroup2["default"].Button,
	              { shape: "border",
	                onClick: _this2.clear },
	              _react2["default"].createElement("i", { className: "uf uf-close-c" })
	            ) : _react2["default"].createElement(
	              _beeInputGroup2["default"].Button,
	              { shape: "border" },
	              props.renderIcon()
	            )
	          );
	        }
	      )
	    );
	  };

	  return MonthPicker;
	}(React__default.Component);

	MonthPicker.defaultProps = {
	  renderIcon: function renderIcon() {
	    return _react2["default"].createElement(_beeIcon2["default"], { type: "uf-calendar" });
	  },
	  format: 'YYYY-MM',
	  showDateInput: true,
	  showMonthInput: true,
	  locale: _zh_CN2["default"]
	};

	exports["default"] = MonthPicker;
	module.exports = exports["default"];
	});

	unwrapExports(MonthPicker_1);

	var CalendarPart_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _CalendarHeader2 = _interopRequireDefault(CalendarHeader_1);



	var _DateTable2 = _interopRequireDefault(DateTable_1);



	var _DateInput2 = _interopRequireDefault(DateInput_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var CalendarPart = function (_React$Component) {
	  _inherits(CalendarPart, _React$Component);

	  function CalendarPart() {
	    _classCallCheck(this, CalendarPart);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  CalendarPart.prototype.render = function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls,
	        value = props.value,
	        hoverValue = props.hoverValue,
	        selectedValue = props.selectedValue,
	        mode = props.mode,
	        direction = props.direction,
	        locale = props.locale,
	        format = props.format,
	        placeholder = props.placeholder,
	        disabledDate = props.disabledDate,
	        timePicker = props.timePicker,
	        disabledTime = props.disabledTime,
	        timePickerDisabledTime = props.timePickerDisabledTime,
	        showTimePicker = props.showTimePicker,
	        onInputChange = props.onInputChange,
	        onInputSelect = props.onInputSelect,
	        enablePrev = props.enablePrev,
	        enableNext = props.enableNext,
	        clearIcon = props.clearIcon;

	    var shouldShowTimePicker = showTimePicker && timePicker;
	    var disabledTimeConfig = shouldShowTimePicker && disabledTime ? (0, util$4.getTimeConfig)(selectedValue, disabledTime) : null;
	    var rangeClassName = prefixCls + '-range';
	    var newProps = {
	      locale: locale,
	      value: value,
	      prefixCls: prefixCls,
	      showTimePicker: showTimePicker
	    };
	    var index = direction === 'left' ? 0 : 1;
	    var timePickerEle = shouldShowTimePicker && _react2["default"].cloneElement(timePicker, _extends({
	      showHour: true,
	      showMinute: true,
	      showSecond: true
	    }, timePicker.props, disabledTimeConfig, timePickerDisabledTime, {
	      onChange: onInputChange,
	      defaultOpenValue: value,
	      value: selectedValue[index]
	    }));

	    var dateInputElement = props.showDateInput && _react2["default"].createElement(_DateInput2["default"], {
	      format: format,
	      locale: locale,
	      prefixCls: prefixCls,
	      timePicker: timePicker,
	      disabledDate: disabledDate,
	      placeholder: placeholder,
	      disabledTime: disabledTime,
	      value: value,
	      showClear: false,
	      selectedValue: selectedValue[index],
	      onChange: onInputChange,
	      onSelect: onInputSelect,
	      clearIcon: clearIcon
	    });

	    return _react2["default"].createElement(
	      'div',
	      {
	        className: rangeClassName + '-part ' + rangeClassName + '-' + direction
	      },
	      dateInputElement,
	      _react2["default"].createElement(
	        'div',
	        { style: { outline: 'none' } },
	        _react2["default"].createElement(_CalendarHeader2["default"], _extends({}, newProps, {
	          mode: mode,
	          enableNext: enableNext,
	          enablePrev: enablePrev,
	          onValueChange: props.onValueChange,
	          onPanelChange: props.onPanelChange,
	          disabledMonth: props.disabledMonth
	        })),
	        showTimePicker ? _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-time-picker' },
	          _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-time-picker-panel' },
	            timePickerEle
	          )
	        ) : null,
	        _react2["default"].createElement(
	          'div',
	          { className: prefixCls + '-body' },
	          _react2["default"].createElement(_DateTable2["default"], _extends({}, newProps, {
	            hoverValue: hoverValue,
	            selectedValue: selectedValue,
	            dateRender: props.dateRender,
	            onSelect: props.onSelect,
	            onDayHover: props.onDayHover,
	            disabledDate: disabledDate,
	            showWeekNumber: props.showWeekNumber
	          }))
	        )
	      )
	    );
	  };

	  return CalendarPart;
	}(_react2["default"].Component);

	CalendarPart.propTypes = {
	  prefixCls: _propTypes2["default"].string,
	  value: _propTypes2["default"].any,
	  hoverValue: _propTypes2["default"].any,
	  selectedValue: _propTypes2["default"].any,
	  direction: _propTypes2["default"].any,
	  locale: _propTypes2["default"].any,
	  showDateInput: _propTypes2["default"].bool,
	  showTimePicker: _propTypes2["default"].bool,
	  format: _propTypes2["default"].any,
	  placeholder: _propTypes2["default"].any,
	  disabledDate: _propTypes2["default"].any,
	  timePicker: _propTypes2["default"].any,
	  disabledTime: _propTypes2["default"].any,
	  onInputChange: _propTypes2["default"].func,
	  onInputSelect: _propTypes2["default"].func,
	  timePickerDisabledTime: _propTypes2["default"].object,
	  enableNext: _propTypes2["default"].any,
	  enablePrev: _propTypes2["default"].any,
	  clearIcon: _propTypes2["default"].node
	};
	exports["default"] = CalendarPart;
	module.exports = exports['default'];
	});

	unwrapExports(CalendarPart_1);

	var RangeCalendar_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _moment2 = _interopRequireDefault(moment);



	var _classnames3 = _interopRequireDefault(classnames);





	var _KeyCode2 = _interopRequireDefault(KeyCode_1);



	var _CalendarPart2 = _interopRequireDefault(CalendarPart_1);



	var _TodayButton2 = _interopRequireDefault(TodayButton_1);



	var _OkButton2 = _interopRequireDefault(OkButton_1);



	var _TimePickerButton2 = _interopRequireDefault(TimePickerButton_1);







	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function noop() {}

	function isEmptyArray(arr) {
	  return Array.isArray(arr) && (arr.length === 0 || arr.every(function (i) {
	    return !i;
	  }));
	}

	function isArraysEqual(a, b) {
	  if (a === b) return true;
	  if (a === null || typeof a === 'undefined' || b === null || typeof b === 'undefined') {
	    return false;
	  }
	  if (a.length !== b.length) return false;

	  for (var i = 0; i < a.length; ++i) {
	    if (a[i] !== b[i]) return false;
	  }
	  return true;
	}

	function getValueFromSelectedValue(selectedValue) {
	  var _selectedValue = _slicedToArray(selectedValue, 2),
	      start = _selectedValue[0],
	      end = _selectedValue[1];

	  var newEnd = end && end.isSame(start, 'month') ? end.clone().add(1, 'month') : end;
	  return [start, newEnd];
	}

	function normalizeAnchor(props, init) {
	  var selectedValue = props.selectedValue || init && props.defaultSelectedValue;
	  var value = props.value || init && props.defaultValue;
	  var normalizedValue = value ? getValueFromSelectedValue(value) : getValueFromSelectedValue(selectedValue);
	  return !isEmptyArray(normalizedValue) ? normalizedValue : init && [(0, _moment2["default"])(), (0, _moment2["default"])().add(1, 'months')];
	}

	function generateOptions(length, extraOptionGen) {
	  var arr = extraOptionGen ? extraOptionGen().concat() : [];
	  for (var value = 0; value < length; value++) {
	    if (arr.indexOf(value) === -1) {
	      arr.push(value);
	    }
	  }
	  return arr;
	}

	function onInputSelect(direction, value, cause) {
	  if (!value) {
	    return;
	  }
	  var originalValue = this.state.selectedValue;
	  var selectedValue = originalValue.concat();
	  var index = direction === 'left' ? 0 : 1;
	  selectedValue[index] = value;
	  if (selectedValue[0] && this.compare(selectedValue[0], selectedValue[1]) > 0) {
	    selectedValue[1 - index] = this.state.showTimePicker ? selectedValue[index] : undefined;
	  }
	  this.props.onInputSelect(selectedValue);
	  this.fireSelectValueChange(selectedValue, null, cause || { source: 'dateInput' });
	}

	var RangeCalendar = function (_React$Component) {
	  _inherits(RangeCalendar, _React$Component);

	  function RangeCalendar(props) {
	    _classCallCheck(this, RangeCalendar);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    var selectedValue = props.selectedValue || props.defaultSelectedValue;
	    var value = normalizeAnchor(props, 1);
	    _this.state = {
	      selectedValue: selectedValue,
	      prevSelectedValue: selectedValue,
	      firstSelectedValue: null,
	      hoverValue: props.hoverValue || [],
	      value: value,
	      showTimePicker: false,
	      mode: props.mode || ['date', 'date']
	    };
	    return _this;
	  }

	  RangeCalendar.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, state) {
	    var newState = {};
	    if ('value' in nextProps) {
	      newState.value = normalizeAnchor(nextProps, 0);
	    }
	    if ('hoverValue' in nextProps && !isArraysEqual(state.hoverValue, nextProps.hoverValue)) {
	      newState.hoverValue = nextProps.hoverValue;
	    }
	    if ('selectedValue' in nextProps) {
	      newState.selectedValue = nextProps.selectedValue;
	      newState.prevSelectedValue = nextProps.selectedValue;
	    }
	    if ('mode' in nextProps && !isArraysEqual(state.mode, nextProps.mode)) {
	      newState = { mode: nextProps.mode };
	    }
	    return newState;
	  };

	  // get disabled hours for second picker


	  RangeCalendar.prototype.render = function render() {
	    var _className, _classnames;

	    var props = this.props,
	        state = this.state;
	    var prefixCls = props.prefixCls,
	        dateInputPlaceholder = props.dateInputPlaceholder,
	        seperator = props.seperator,
	        timePicker = props.timePicker,
	        showOk = props.showOk,
	        locale = props.locale,
	        showClear = props.showClear,
	        showToday = props.showToday,
	        type = props.type,
	        clearIcon = props.clearIcon;
	    var hoverValue = state.hoverValue,
	        selectedValue = state.selectedValue,
	        mode = state.mode,
	        showTimePicker = state.showTimePicker;

	    var className = (_className = {}, _defineProperty(_className, props.className, !!props.className), _defineProperty(_className, prefixCls, 1), _defineProperty(_className, prefixCls + '-hidden', !props.visible), _defineProperty(_className, prefixCls + '-range', 1), _defineProperty(_className, prefixCls + '-show-time-picker', showTimePicker), _defineProperty(_className, prefixCls + '-week-number', props.showWeekNumber), _className);
	    var classes = (0, _classnames3["default"])(className);
	    var newProps = {
	      selectedValue: state.selectedValue,
	      onSelect: this.onSelect,
	      onDayHover: type === 'start' && selectedValue[1] || type === 'end' && selectedValue[0] || !!hoverValue.length ? this.onDayHover : undefined
	    };

	    var placeholder1 = void 0;
	    var placeholder2 = void 0;

	    if (dateInputPlaceholder) {
	      if (Array.isArray(dateInputPlaceholder)) {
	        var _dateInputPlaceholder = _slicedToArray(dateInputPlaceholder, 2);

	        placeholder1 = _dateInputPlaceholder[0];
	        placeholder2 = _dateInputPlaceholder[1];
	      } else {
	        placeholder1 = placeholder2 = dateInputPlaceholder;
	      }
	    }
	    var showOkButton = showOk === true || showOk !== false && !!timePicker;
	    var cls = (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-footer', true), _defineProperty(_classnames, prefixCls + '-range-bottom', true), _defineProperty(_classnames, prefixCls + '-footer-show-ok', showOkButton), _classnames));

	    var startValue = this.getStartValue();
	    var endValue = this.getEndValue();
	    var todayTime = (0, util$4.getTodayTime)(startValue);
	    var thisMonth = todayTime.month();
	    var thisYear = todayTime.year();
	    var isTodayInView = startValue.year() === thisYear && startValue.month() === thisMonth || endValue.year() === thisYear && endValue.month() === thisMonth;
	    var nextMonthOfStart = startValue.clone().add(1, 'months');
	    var isClosestMonths = nextMonthOfStart.year() === endValue.year() && nextMonthOfStart.month() === endValue.month();

	    // console.warn('Render:', selectedValue.map(t => t.format('YYYY-MM-DD')).join(', '));
	    // console.log('start:', startValue.format('YYYY-MM-DD'));
	    // console.log('end:', endValue.format('YYYY-MM-DD'));

	    var extraFooter = props.renderFooter();

	    return _react2["default"].createElement(
	      'div',
	      {
	        ref: this.saveRoot,
	        className: classes,
	        style: props.style,
	        tabIndex: '0',
	        onKeyDown: this.onKeyDown
	      },
	      props.renderSidebar(),
	      _react2["default"].createElement(
	        'div',
	        { className: prefixCls + '-panel' },
	        showClear && selectedValue[0] && selectedValue[1] ? _react2["default"].createElement(
	          'a',
	          {
	            role: 'button',
	            title: locale.clear,
	            onClick: this.clear
	          },
	          clearIcon || _react2["default"].createElement('span', { className: prefixCls + '-clear-btn uf uf-close-c' })
	        ) : null,
	        _react2["default"].createElement(
	          'div',
	          {
	            className: prefixCls + '-date-panel',
	            onMouseLeave: type !== 'both' ? this.onDatePanelLeave : undefined,
	            onMouseEnter: type !== 'both' ? this.onDatePanelEnter : undefined
	          },
	          _react2["default"].createElement(_CalendarPart2["default"], _extends({}, props, newProps, {
	            hoverValue: hoverValue,
	            direction: 'left',
	            disabledTime: this.disabledStartTime,
	            disabledMonth: this.disabledStartMonth,
	            format: this.getFormat(),
	            value: startValue,
	            mode: mode[0],
	            placeholder: placeholder1,
	            onInputChange: this.onStartInputChange,
	            onInputSelect: this.onStartInputSelect,
	            onValueChange: this.onStartValueChange,
	            onPanelChange: this.onStartPanelChange,
	            showDateInput: this.props.showDateInput,
	            timePicker: timePicker,
	            showTimePicker: showTimePicker,
	            enablePrev: true,
	            enableNext: !isClosestMonths || this.isMonthYearPanelShow(mode[1]),
	            clearIcon: clearIcon
	          })),
	          _react2["default"].createElement(
	            'span',
	            { className: prefixCls + '-range-middle' },
	            seperator
	          ),
	          _react2["default"].createElement(_CalendarPart2["default"], _extends({}, props, newProps, {
	            hoverValue: hoverValue,
	            direction: 'right',
	            format: this.getFormat(),
	            timePickerDisabledTime: this.getEndDisableTime(),
	            placeholder: placeholder2,
	            value: endValue,
	            mode: mode[1],
	            onInputChange: this.onEndInputChange,
	            onInputSelect: this.onEndInputSelect,
	            onValueChange: this.onEndValueChange,
	            onPanelChange: this.onEndPanelChange,
	            showDateInput: this.props.showDateInput,
	            timePicker: timePicker,
	            showTimePicker: showTimePicker,
	            disabledTime: this.disabledEndTime,
	            disabledMonth: this.disabledEndMonth,
	            enablePrev: !isClosestMonths || this.isMonthYearPanelShow(mode[0]),
	            enableNext: true,
	            clearIcon: clearIcon
	          }))
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: cls },
	          showToday || props.timePicker || showOkButton || extraFooter ? _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-footer-btn' },
	            extraFooter,
	            showToday ? _react2["default"].createElement(_TodayButton2["default"], _extends({}, props, {
	              disabled: isTodayInView,
	              value: state.value[0],
	              onToday: this.onToday,
	              text: locale.backToToday
	            })) : null,
	            props.timePicker ? _react2["default"].createElement(_TimePickerButton2["default"], _extends({}, props, {
	              showTimePicker: showTimePicker,
	              onOpenTimePicker: this.onOpenTimePicker,
	              onCloseTimePicker: this.onCloseTimePicker,
	              timePickerDisabled: !this.hasSelectedValue() || hoverValue.length
	            })) : null,
	            showOkButton ? _react2["default"].createElement(_OkButton2["default"], _extends({}, props, {
	              onOk: this.onOk,
	              okDisabled: !this.isAllowedDateAndTime(selectedValue) || !this.hasSelectedValue() || hoverValue.length
	            })) : null
	          ) : null
	        )
	      )
	    );
	  };

	  return RangeCalendar;
	}(_react2["default"].Component);

	RangeCalendar.propTypes = _extends({}, CommonMixin.propType, {
	  prefixCls: _propTypes2["default"].string,
	  dateInputPlaceholder: _propTypes2["default"].any,
	  seperator: _propTypes2["default"].string,
	  defaultValue: _propTypes2["default"].any,
	  value: _propTypes2["default"].any,
	  hoverValue: _propTypes2["default"].any,
	  mode: _propTypes2["default"].arrayOf(_propTypes2["default"].oneOf(['date', 'month', 'year', 'decade'])),
	  showDateInput: _propTypes2["default"].bool,
	  timePicker: _propTypes2["default"].any,
	  showOk: _propTypes2["default"].bool,
	  showToday: _propTypes2["default"].bool,
	  defaultSelectedValue: _propTypes2["default"].array,
	  selectedValue: _propTypes2["default"].array,
	  onOk: _propTypes2["default"].func,
	  showClear: _propTypes2["default"].bool,
	  locale: _propTypes2["default"].object,
	  onChange: _propTypes2["default"].func,
	  onSelect: _propTypes2["default"].func,
	  onValueChange: _propTypes2["default"].func,
	  onHoverChange: _propTypes2["default"].func,
	  onPanelChange: _propTypes2["default"].func,
	  format: _propTypes2["default"].oneOfType([_propTypes2["default"].object, _propTypes2["default"].string]),
	  onClear: _propTypes2["default"].func,
	  type: _propTypes2["default"].any,
	  disabledDate: _propTypes2["default"].func,
	  disabledTime: _propTypes2["default"].func,
	  clearIcon: _propTypes2["default"].node,
	  onKeyDown: _propTypes2["default"].func
	});
	RangeCalendar.defaultProps = _extends({}, CommonMixin.defaultProp, {
	  type: 'both',
	  seperator: '~',
	  defaultSelectedValue: [],
	  onValueChange: noop,
	  onHoverChange: noop,
	  onPanelChange: noop,
	  disabledTime: noop,
	  onInputSelect: noop,
	  showToday: true,
	  showDateInput: true
	});

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.onDatePanelEnter = function () {
	    if (_this2.hasSelectedValue()) {
	      _this2.fireHoverValueChange(_this2.state.selectedValue.concat());
	    }
	  };

	  this.onDatePanelLeave = function () {
	    if (_this2.hasSelectedValue()) {
	      _this2.fireHoverValueChange([]);
	    }
	  };

	  this.onSelect = function (value) {
	    var type = _this2.props.type;
	    var _state = _this2.state,
	        selectedValue = _state.selectedValue,
	        prevSelectedValue = _state.prevSelectedValue,
	        firstSelectedValue = _state.firstSelectedValue;

	    var nextSelectedValue = void 0;
	    if (type === 'both') {
	      if (!firstSelectedValue) {
	        (0, util$4.syncTime)(prevSelectedValue[0], value);
	        nextSelectedValue = [value];
	      } else if (_this2.compare(firstSelectedValue, value) < 0) {
	        (0, util$4.syncTime)(prevSelectedValue[1], value);
	        nextSelectedValue = [firstSelectedValue, value];
	      } else {
	        (0, util$4.syncTime)(prevSelectedValue[0], value);
	        (0, util$4.syncTime)(prevSelectedValue[1], firstSelectedValue);
	        nextSelectedValue = [value, firstSelectedValue];
	      }
	    } else if (type === 'start') {
	      (0, util$4.syncTime)(prevSelectedValue[0], value);
	      var endValue = selectedValue[1];
	      nextSelectedValue = endValue && _this2.compare(endValue, value) > 0 ? [value, endValue] : [value];
	    } else {
	      // type === 'end'
	      var startValue = selectedValue[0];
	      if (startValue && _this2.compare(startValue, value) <= 0) {
	        (0, util$4.syncTime)(prevSelectedValue[1], value);
	        nextSelectedValue = [startValue, value];
	      } else {
	        (0, util$4.syncTime)(prevSelectedValue[0], value);
	        nextSelectedValue = [value];
	      }
	    }

	    _this2.fireSelectValueChange(nextSelectedValue);
	  };

	  this.onKeyDown = function (event) {
	    if (event.target.nodeName.toLowerCase() === 'input') {
	      return;
	    }

	    var keyCode = event.keyCode;

	    var ctrlKey = event.ctrlKey || event.metaKey;

	    var _state2 = _this2.state,
	        selectedValue = _state2.selectedValue,
	        hoverValue = _state2.hoverValue,
	        firstSelectedValue = _state2.firstSelectedValue,
	        value = _state2.value;
	    var _props = _this2.props,
	        onKeyDown = _props.onKeyDown,
	        disabledDate = _props.disabledDate;

	    // Update last time of the picker

	    var updateHoverPoint = function updateHoverPoint(func) {
	      // Change hover to make focus in UI
	      var currentHoverTime = void 0;
	      var nextHoverTime = void 0;
	      var nextHoverValue = void 0;

	      if (!firstSelectedValue) {
	        currentHoverTime = hoverValue[0] || selectedValue[0] || value[0] || (0, _moment2["default"])();
	        nextHoverTime = func(currentHoverTime);
	        nextHoverValue = [nextHoverTime];
	        _this2.fireHoverValueChange(nextHoverValue);
	      } else {
	        if (hoverValue.length === 1) {
	          currentHoverTime = hoverValue[0].clone();
	          nextHoverTime = func(currentHoverTime);
	          nextHoverValue = _this2.onDayHover(nextHoverTime);
	        } else {
	          currentHoverTime = hoverValue[0].isSame(firstSelectedValue, 'day') ? hoverValue[1] : hoverValue[0];
	          nextHoverTime = func(currentHoverTime);
	          nextHoverValue = _this2.onDayHover(nextHoverTime);
	        }
	      }

	      // Find origin hover time on value index
	      if (nextHoverValue.length >= 2) {
	        var miss = nextHoverValue.some(function (ht) {
	          return !(0, toTime.includesTime)(value, ht, 'month');
	        });
	        if (miss) {
	          var newValue = nextHoverValue.slice().sort(function (t1, t2) {
	            return t1.valueOf() - t2.valueOf();
	          });
	          if (newValue[0].isSame(newValue[1], 'month')) {
	            newValue[1] = newValue[0].clone().add(1, 'month');
	          }
	          _this2.fireValueChange(newValue);
	        }
	      } else if (nextHoverValue.length === 1) {
	        // If only one value, let's keep the origin panel
	        var oriValueIndex = value.findIndex(function (time) {
	          return time.isSame(currentHoverTime, 'month');
	        });
	        if (oriValueIndex === -1) oriValueIndex = 0;

	        if (value.every(function (time) {
	          return !time.isSame(nextHoverTime, 'month');
	        })) {
	          var _newValue = value.slice();
	          _newValue[oriValueIndex] = nextHoverTime.clone();
	          _this2.fireValueChange(_newValue);
	        }
	      }

	      event.preventDefault();

	      return nextHoverTime;
	    };

	    switch (keyCode) {
	      case _KeyCode2["default"].DOWN:
	        updateHoverPoint(function (time) {
	          return (0, toTime.goTime)(time, 1, 'weeks');
	        });
	        return;
	      case _KeyCode2["default"].UP:
	        updateHoverPoint(function (time) {
	          return (0, toTime.goTime)(time, -1, 'weeks');
	        });
	        return;
	      case _KeyCode2["default"].LEFT:
	        if (ctrlKey) {
	          updateHoverPoint(function (time) {
	            return (0, toTime.goTime)(time, -1, 'years');
	          });
	        } else {
	          updateHoverPoint(function (time) {
	            return (0, toTime.goTime)(time, -1, 'days');
	          });
	        }
	        return;
	      case _KeyCode2["default"].RIGHT:
	        if (ctrlKey) {
	          updateHoverPoint(function (time) {
	            return (0, toTime.goTime)(time, 1, 'years');
	          });
	        } else {
	          updateHoverPoint(function (time) {
	            return (0, toTime.goTime)(time, 1, 'days');
	          });
	        }
	        return;
	      case _KeyCode2["default"].HOME:
	        updateHoverPoint(function (time) {
	          return (0, toTime.goStartMonth)(time);
	        });
	        return;
	      case _KeyCode2["default"].END:
	        updateHoverPoint(function (time) {
	          return (0, toTime.goEndMonth)(time);
	        });
	        return;
	      case _KeyCode2["default"].PAGE_DOWN:
	        updateHoverPoint(function (time) {
	          return (0, toTime.goTime)(time, 1, 'month');
	        });
	        return;
	      case _KeyCode2["default"].PAGE_UP:
	        updateHoverPoint(function (time) {
	          return (0, toTime.goTime)(time, -1, 'month');
	        });
	        return;
	      case _KeyCode2["default"].ENTER:
	        {
	          var lastValue = void 0;
	          if (hoverValue.length === 0) {
	            lastValue = updateHoverPoint(function (time) {
	              return time;
	            });
	          } else if (hoverValue.length === 1) {
	            lastValue = hoverValue[0];
	          } else {
	            lastValue = hoverValue[0].isSame(firstSelectedValue, 'day') ? hoverValue[1] : hoverValue[0];
	          }
	          if (lastValue && (!disabledDate || !disabledDate(lastValue))) {
	            _this2.onSelect(lastValue);
	          }
	          event.preventDefault();
	          return;
	        }
	      default:
	        if (onKeyDown) {
	          onKeyDown(event);
	        }
	    }
	  };

	  this.onDayHover = function (value) {
	    var hoverValue = [];
	    var _state3 = _this2.state,
	        selectedValue = _state3.selectedValue,
	        firstSelectedValue = _state3.firstSelectedValue;
	    var type = _this2.props.type;

	    if (type === 'start' && selectedValue[1]) {
	      hoverValue = _this2.compare(value, selectedValue[1]) < 0 ? [value, selectedValue[1]] : [value];
	    } else if (type === 'end' && selectedValue[0]) {
	      hoverValue = _this2.compare(value, selectedValue[0]) > 0 ? [selectedValue[0], value] : [];
	    } else {
	      if (!firstSelectedValue) {
	        if (_this2.state.hoverValue.length) {
	          _this2.setState({ hoverValue: [] });
	        }
	        return hoverValue;
	      }
	      hoverValue = _this2.compare(value, firstSelectedValue) < 0 ? [value, firstSelectedValue] : [firstSelectedValue, value];
	    }
	    _this2.fireHoverValueChange(hoverValue);

	    return hoverValue;
	  };

	  this.onToday = function () {
	    var startValue = (0, util$4.getTodayTime)(_this2.state.value[0]);
	    var endValue = startValue.clone().add(1, 'months');
	    _this2.setState({ value: [startValue, endValue] });
	  };

	  this.onOpenTimePicker = function () {
	    _this2.setState({
	      showTimePicker: true
	    });
	  };

	  this.onCloseTimePicker = function () {
	    _this2.setState({
	      showTimePicker: false
	    });
	  };

	  this.onOk = function () {
	    var selectedValue = _this2.state.selectedValue;

	    if (_this2.isAllowedDateAndTime(selectedValue)) {
	      _this2.props.onOk(_this2.state.selectedValue);
	    }
	  };

	  this.onStartInputChange = function () {
	    for (var _len = arguments.length, oargs = Array(_len), _key = 0; _key < _len; _key++) {
	      oargs[_key] = arguments[_key];
	    }

	    var args = ['left'].concat(oargs);
	    return onInputSelect.apply(_this2, args);
	  };

	  this.onEndInputChange = function () {
	    for (var _len2 = arguments.length, oargs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      oargs[_key2] = arguments[_key2];
	    }

	    var args = ['right'].concat(oargs);
	    return onInputSelect.apply(_this2, args);
	  };

	  this.onStartInputSelect = function (value) {
	    var args = ['left', value, { source: 'dateInputSelect' }];
	    return onInputSelect.apply(_this2, args);
	  };

	  this.onEndInputSelect = function (value) {
	    var args = ['right', value, { source: 'dateInputSelect' }];
	    return onInputSelect.apply(_this2, args);
	  };

	  this.onStartValueChange = function (leftValue) {
	    var value = [].concat(_toConsumableArray(_this2.state.value));
	    value[0] = leftValue;
	    return _this2.fireValueChange(value);
	  };

	  this.onEndValueChange = function (rightValue) {
	    var value = [].concat(_toConsumableArray(_this2.state.value));
	    value[1] = rightValue;
	    return _this2.fireValueChange(value);
	  };

	  this.onStartPanelChange = function (value, mode) {
	    var props = _this2.props,
	        state = _this2.state;

	    var newMode = [mode, state.mode[1]];
	    if (!('mode' in props)) {
	      _this2.setState({
	        mode: newMode
	      });
	    }
	    var newValue = [value || state.value[0], state.value[1]];
	    props.onPanelChange(newValue, newMode);
	  };

	  this.onEndPanelChange = function (value, mode) {
	    var props = _this2.props,
	        state = _this2.state;

	    var newMode = [state.mode[0], mode];
	    if (!('mode' in props)) {
	      _this2.setState({
	        mode: newMode
	      });
	    }
	    var newValue = [state.value[0], value || state.value[1]];
	    props.onPanelChange(newValue, newMode);
	  };

	  this.getStartValue = function () {
	    var value = _this2.state.value[0];
	    var selectedValue = _this2.state.selectedValue;
	    // keep selectedTime when select date
	    if (selectedValue[0] && _this2.props.timePicker) {
	      value = value.clone();
	      (0, util$4.syncTime)(selectedValue[0], value);
	    }
	    if (_this2.state.showTimePicker && selectedValue[0]) {
	      return selectedValue[0];
	    }
	    return value;
	  };

	  this.getEndValue = function () {
	    var _state4 = _this2.state,
	        value = _state4.value,
	        selectedValue = _state4.selectedValue,
	        showTimePicker = _state4.showTimePicker;

	    var endValue = value[1] ? value[1].clone() : value[0].clone().add(1, 'month');
	    // keep selectedTime when select date
	    if (selectedValue[1] && _this2.props.timePicker) {
	      (0, util$4.syncTime)(selectedValue[1], endValue);
	    }
	    if (showTimePicker) {
	      return selectedValue[1] ? selectedValue[1] : _this2.getStartValue();
	    }
	    return endValue;
	  };

	  this.getEndDisableTime = function () {
	    var _state5 = _this2.state,
	        selectedValue = _state5.selectedValue,
	        value = _state5.value;
	    var disabledTime = _this2.props.disabledTime;

	    var userSettingDisabledTime = disabledTime(selectedValue, 'end') || {};
	    var startValue = selectedValue && selectedValue[0] || value[0].clone();
	    // if startTime and endTime is same day..
	    // the second time picker will not able to pick time before first time picker
	    if (!selectedValue[1] || startValue.isSame(selectedValue[1], 'day')) {
	      var hours = startValue.hour();
	      var minutes = startValue.minute();
	      var second = startValue.second();
	      var _disabledHours = userSettingDisabledTime.disabledHours,
	          _disabledMinutes = userSettingDisabledTime.disabledMinutes,
	          _disabledSeconds = userSettingDisabledTime.disabledSeconds;

	      var oldDisabledMinutes = _disabledMinutes ? _disabledMinutes() : [];
	      var olddisabledSeconds = _disabledSeconds ? _disabledSeconds() : [];
	      _disabledHours = generateOptions(hours, _disabledHours);
	      _disabledMinutes = generateOptions(minutes, _disabledMinutes);
	      _disabledSeconds = generateOptions(second, _disabledSeconds);
	      return {
	        disabledHours: function disabledHours() {
	          return _disabledHours;
	        },
	        disabledMinutes: function disabledMinutes(hour) {
	          if (hour === hours) {
	            return _disabledMinutes;
	          }
	          return oldDisabledMinutes;
	        },
	        disabledSeconds: function disabledSeconds(hour, minute) {
	          if (hour === hours && minute === minutes) {
	            return _disabledSeconds;
	          }
	          return olddisabledSeconds;
	        }
	      };
	    }
	    return userSettingDisabledTime;
	  };

	  this.isAllowedDateAndTime = function (selectedValue) {
	    return (0, util$4.isAllowedDate)(selectedValue[0], _this2.props.disabledDate, _this2.disabledStartTime) && (0, util$4.isAllowedDate)(selectedValue[1], _this2.props.disabledDate, _this2.disabledEndTime);
	  };

	  this.isMonthYearPanelShow = function (mode) {
	    return ['month', 'year', 'decade'].indexOf(mode) > -1;
	  };

	  this.hasSelectedValue = function () {
	    var selectedValue = _this2.state.selectedValue;

	    return !!selectedValue[1] && !!selectedValue[0];
	  };

	  this.compare = function (v1, v2) {
	    if (_this2.props.timePicker) {
	      return v1.diff(v2);
	    }
	    return v1.diff(v2, 'days');
	  };

	  this.fireSelectValueChange = function (selectedValue, direct, cause) {
	    var timePicker = _this2.props.timePicker;
	    var prevSelectedValue = _this2.state.prevSelectedValue;

	    if (timePicker && timePicker.props.defaultValue) {
	      var timePickerDefaultValue = timePicker.props.defaultValue;
	      if (!prevSelectedValue[0] && selectedValue[0]) {
	        (0, util$4.syncTime)(timePickerDefaultValue[0], selectedValue[0]);
	      }
	      if (!prevSelectedValue[1] && selectedValue[1]) {
	        (0, util$4.syncTime)(timePickerDefaultValue[1], selectedValue[1]);
	      }
	    }

	    if (!('selectedValue' in _this2.props)) {
	      _this2.setState({
	        selectedValue: selectedValue
	      });
	    }

	    // 尚未选择过时间，直接输入的话
	    if (!_this2.state.selectedValue[0] || !_this2.state.selectedValue[1]) {
	      var startValue = selectedValue[0] || (0, _moment2["default"])();
	      var endValue = selectedValue[1] || startValue.clone().add(1, 'months');
	      _this2.setState({
	        selectedValue: selectedValue,
	        value: getValueFromSelectedValue([startValue, endValue])
	      });
	    }

	    if (selectedValue[0] && !selectedValue[1]) {
	      _this2.setState({ firstSelectedValue: selectedValue[0] });
	      _this2.fireHoverValueChange(selectedValue.concat());
	    }
	    _this2.props.onChange(selectedValue);
	    if (direct || selectedValue[0] && selectedValue[1]) {
	      _this2.setState({
	        prevSelectedValue: selectedValue,
	        firstSelectedValue: null
	      });
	      _this2.fireHoverValueChange([]);
	      _this2.props.onSelect(selectedValue, cause);
	    }
	  };

	  this.fireValueChange = function (value) {
	    var props = _this2.props;
	    if (!('value' in props)) {
	      _this2.setState({
	        value: value
	      });
	    }
	    props.onValueChange(value);
	  };

	  this.fireHoverValueChange = function (hoverValue) {
	    var props = _this2.props;
	    if (!('hoverValue' in props)) {
	      _this2.setState({ hoverValue: hoverValue });
	    }
	    props.onHoverChange(hoverValue);
	  };

	  this.clear = function () {
	    _this2.fireSelectValueChange([], true);
	    _this2.props.onClear();
	  };

	  this.disabledStartTime = function (time) {
	    return _this2.props.disabledTime(time, 'start');
	  };

	  this.disabledEndTime = function (time) {
	    return _this2.props.disabledTime(time, 'end');
	  };

	  this.disabledStartMonth = function (month) {
	    var value = _this2.state.value;

	    return month.isSameOrAfter(value[1], 'month');
	  };

	  this.disabledEndMonth = function (month) {
	    var value = _this2.state.value;

	    return month.isSameOrBefore(value[0], 'month');
	  };
	};

	(0, reactLifecyclesCompat_es.polyfill)(RangeCalendar);

	exports["default"] = (0, CommonMixin.commonMixinWrapper)(RangeCalendar);
	module.exports = exports['default'];
	});

	unwrapExports(RangeCalendar_1);

	var zhCn = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	   typeof commonjsRequire === 'function' ? factory(moment) :
	   factory(global.moment);
	}(commonjsGlobal, (function (moment) {

	    var zhCn = moment.defineLocale('zh-cn', {
	        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
	        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
	        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
	        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
	        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'YYYY/MM/DD',
	            LL : 'YYYY年M月D日',
	            LLL : 'YYYY年M月D日Ah点mm分',
	            LLLL : 'YYYY年M月D日ddddAh点mm分',
	            l : 'YYYY/M/D',
	            ll : 'YYYY年M月D日',
	            lll : 'YYYY年M月D日 HH:mm',
	            llll : 'YYYY年M月D日dddd HH:mm'
	        },
	        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
	        meridiemHour: function (hour, meridiem) {
	            if (hour === 12) {
	                hour = 0;
	            }
	            if (meridiem === '凌晨' || meridiem === '早上' ||
	                    meridiem === '上午') {
	                return hour;
	            } else if (meridiem === '下午' || meridiem === '晚上') {
	                return hour + 12;
	            } else {
	                // '中午'
	                return hour >= 11 ? hour : hour + 12;
	            }
	        },
	        meridiem : function (hour, minute, isLower) {
	            var hm = hour * 100 + minute;
	            if (hm < 600) {
	                return '凌晨';
	            } else if (hm < 900) {
	                return '早上';
	            } else if (hm < 1130) {
	                return '上午';
	            } else if (hm < 1230) {
	                return '中午';
	            } else if (hm < 1800) {
	                return '下午';
	            } else {
	                return '晚上';
	            }
	        },
	        calendar : {
	            sameDay : '[今天]LT',
	            nextDay : '[明天]LT',
	            nextWeek : '[下]ddddLT',
	            lastDay : '[昨天]LT',
	            lastWeek : '[上]ddddLT',
	            sameElse : 'L'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
	        ordinal : function (number, period) {
	            switch (period) {
	                case 'd':
	                case 'D':
	                case 'DDD':
	                    return number + '日';
	                case 'M':
	                    return number + '月';
	                case 'w':
	                case 'W':
	                    return number + '周';
	                default:
	                    return number;
	            }
	        },
	        relativeTime : {
	            future : '%s内',
	            past : '%s前',
	            s : '几秒',
	            ss : '%d 秒',
	            m : '1 分钟',
	            mm : '%d 分钟',
	            h : '1 小时',
	            hh : '%d 小时',
	            d : '1 天',
	            dd : '%d 天',
	            M : '1 个月',
	            MM : '%d 个月',
	            y : '1 年',
	            yy : '%d 年'
	        },
	        week : {
	            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return zhCn;

	})));
	});

	var RangePicker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _RangeCalendar2 = _interopRequireDefault(RangeCalendar_1);



	var _beeFormControl2 = _interopRequireDefault(build$g);



	var _Picker2 = _interopRequireDefault(Picker_1);



	var _beeInputGroup2 = _interopRequireDefault(build$h);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _zh_CN2 = _interopRequireDefault(zh_CN);



	var _moment2 = _interopRequireDefault(moment);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by chief on 17/4/6.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


	function format(v, f) {
	    return v ? v.format && v.format(f) : '';
	}

	var cn = location.search.indexOf("cn") !== -1;

	var now = (0, _moment2["default"])();

	function isValidRange(v) {
	    return v && v[0] && v[1];
	}

	if (cn) {
	    now.locale("zh-cn").utcOffset(8);
	} else {
	    now.locale("en-gb").utcOffset(0);
	}

	var RangePicker = function (_Component) {
	    _inherits(RangePicker, _Component);

	    function RangePicker(props, context) {
	        _classCallCheck(this, RangePicker);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _initialiseProps.call(_this);

	        _this.state = {
	            hoverValue: [],
	            value: props.value || props.defaultValue || []
	        };
	        return _this;
	    }

	    RangePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if ("value" in nextProps) {
	            this.setState({
	                value: nextProps.value
	            });
	        }
	        this.setState({
	            renderIcon: nextProps.renderIcon
	        });
	    };

	    RangePicker.prototype.render = function render() {
	        var _this2 = this;

	        var props = this.props;
	        var showValue = props.showValue;
	        var value = this.state.value;

	        var formatStr = props.format || 'YYYY-MM-DD';

	        var calendar = _react2["default"].createElement(_RangeCalendar2["default"], {
	            hoverValue: this.state.hoverValue,
	            onHoverChange: this.onHoverChange,
	            showWeekNumber: false,
	            format: formatStr,
	            dateInputPlaceholder: props.dateInputPlaceholder || ['start', 'end'],
	            locale: props.locale || _zh_CN2["default"],
	            onChange: this.onChange,
	            disabledDate: props.disabledDate,
	            showClear: props.showClear || false,
	            showOk: props.showOk || true,
	            renderFooter: props.renderFooter
	        });

	        return _react2["default"].createElement(
	            _Picker2["default"],
	            {
	                value: this.state.value,
	                animation: 'animation' in props ? props.animation : "slide-up",
	                calendar: calendar,
	                disabled: props.disabled,
	                dropdownClassName: props.dropdownClassName
	            },
	            function (_ref) {
	                _objectDestructuringEmpty(_ref);

	                return _react2["default"].createElement(
	                    "div",
	                    { className: (0, _classnames2["default"])('calendar-picker', 'u-input-group', 'simple', props.className),
	                        onMouseEnter: _this2.onMouseEnter,
	                        onMouseLeave: _this2.onMouseLeave
	                    },
	                    _react2["default"].createElement(_beeFormControl2["default"], {
	                        placeholder: _this2.props.placeholder ? _this2.props.placeholder : 'start ~ end',
	                        value: isValidRange(value) && format(value[0], formatStr) + " ~ " + format(value[1], formatStr) || '',
	                        disabled: props.disabled
	                    }),
	                    _this2.state.value && _this2.state.showClose && !props.disabled ? _react2["default"].createElement(
	                        _beeInputGroup2["default"].Button,
	                        { shape: "border",
	                            onClick: _this2.clear },
	                        _react2["default"].createElement("i", { className: "uf uf-close-c" })
	                    ) : _react2["default"].createElement(
	                        _beeInputGroup2["default"].Button,
	                        { shape: "border" },
	                        props.renderIcon()
	                    )
	                );
	            }
	        );
	    };

	    return RangePicker;
	}(React__default.Component);

	var _initialiseProps = function _initialiseProps() {
	    var _this3 = this;

	    this.onChange = function (value) {
	        var props = _this3.props;
	        var formatStr = props.format || 'YYYY-MM-DD';
	        _this3.setState({
	            value: value
	        });

	        //传入value和dateString
	        if (props.onChange && isValidRange(value) || value.length == 0) {
	            if (value.length > 0) {
	                props.onChange(value, "[\"" + format(value[0], formatStr) + "\" , \"" + format(value[1], formatStr) + "\"]");
	            } else {
	                props.onChange(null);
	            }
	        }
	    };

	    this.onHoverChange = function (hoverValue) {
	        _this3.setState({ hoverValue: hoverValue });
	    };

	    this.remove = function (e) {
	        _this3.setState({ value: '' });
	    };

	    this.handleCalendarChange = function (value) {};

	    this.onMouseLeave = function (e) {
	        _this3.setState({
	            showClose: false
	        });
	    };

	    this.onMouseEnter = function (e) {
	        _this3.setState({
	            showClose: true
	        });
	    };

	    this.clear = function (e) {
	        e.stopPropagation();
	        _this3.setState({
	            value: ''
	        });
	        _this3.props.onChange && _this3.props.onChange('', '');
	    };
	};

	RangePicker.defaultProps = {
	    renderIcon: function renderIcon() {
	        return _react2["default"].createElement(_beeIcon2["default"], { type: "uf-calendar" });
	    },
	    locale: _zh_CN2["default"]
	};

	exports["default"] = RangePicker;
	module.exports = exports["default"];
	});

	unwrapExports(RangePicker_1);

	var enGb = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	   typeof commonjsRequire === 'function' ? factory(moment) :
	   factory(global.moment);
	}(commonjsGlobal, (function (moment) {

	    var enGb = moment.defineLocale('en-gb', {
	        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
	        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
	        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
	        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        longDateFormat : {
	            LT : 'HH:mm',
	            LTS : 'HH:mm:ss',
	            L : 'DD/MM/YYYY',
	            LL : 'D MMMM YYYY',
	            LLL : 'D MMMM YYYY HH:mm',
	            LLLL : 'dddd, D MMMM YYYY HH:mm'
	        },
	        calendar : {
	            sameDay : '[Today at] LT',
	            nextDay : '[Tomorrow at] LT',
	            nextWeek : 'dddd [at] LT',
	            lastDay : '[Yesterday at] LT',
	            lastWeek : '[Last] dddd [at] LT',
	            sameElse : 'L'
	        },
	        relativeTime : {
	            future : 'in %s',
	            past : '%s ago',
	            s : 'a few seconds',
	            ss : '%d seconds',
	            m : 'a minute',
	            mm : '%d minutes',
	            h : 'an hour',
	            hh : '%d hours',
	            d : 'a day',
	            dd : '%d days',
	            M : 'a month',
	            MM : '%d months',
	            y : 'a year',
	            yy : '%d years'
	        },
	        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
	        ordinal : function (number) {
	            var b = number % 10,
	                output = (~~(number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	            return number + output;
	        },
	        week : {
	            dow : 1, // Monday is the first day of the week.
	            doy : 4  // The week that contains Jan 4th is the first week of the year.
	        }
	    });

	    return enGb;

	})));
	});

	var WeekPicker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _rcCalendar2 = _interopRequireDefault(rcCalendar);



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _Picker2 = _interopRequireDefault(Picker_1);



	var _beeFormControl2 = _interopRequireDefault(build$g);



	var _zh_CN2 = _interopRequireDefault(zh_CN);



	var _en_US2 = _interopRequireDefault(en_US);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _beeInputGroup2 = _interopRequireDefault(build$h);



	var _moment2 = _interopRequireDefault(moment);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by chief on 17/4/6.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var cn = location.search.indexOf("cn") !== -1;

	var now = (0, _moment2["default"])();
	if (cn) {
	  now.locale("zh-cn").utcOffset(8);
	} else {
	  now.locale("en-gb").utcOffset(0);
	}

	var format = "YYYY-Wo";

	var WeekPicker = function (_Component) {
	  _inherits(WeekPicker, _Component);

	  function WeekPicker(props, context) {
	    _classCallCheck(this, WeekPicker);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    _this.onChange = function (value) {
	      _this.setState({
	        value: value
	      });
	    };

	    _this.onOpenChange = function (open) {
	      _this.setState({
	        open: open
	      });
	    };

	    _this.dateRender = function (current) {
	      var selectedValue = _this.state.value;
	      if (selectedValue && current.year() === selectedValue.year() && current.week() === selectedValue.week()) {
	        return _react2["default"].createElement(
	          "div",
	          { className: "rc-calendar-selected-day" },
	          _react2["default"].createElement(
	            "div",
	            { className: "rc-calendar-date" },
	            current.date()
	          )
	        );
	      }
	      return _react2["default"].createElement(
	        "div",
	        { className: "rc-calendar-date" },
	        current.date()
	      );
	    };

	    _this.lastWeek = function () {
	      var value = _this.props.value || now;
	      value.add(-1, "weeks");
	      _this.setState({
	        value: value,
	        open: false
	      });
	    };

	    _this.nextWeek = function () {
	      var value = _this.props.value || now;
	      value.add(+1, "weeks");
	      _this.setState({
	        value: value,
	        open: false
	      });
	    };

	    _this.nowWeek = function () {
	      var value = now;
	      _this.setState({
	        value: value,
	        open: false
	      });
	    };

	    _this.renderFooter = function () {
	      return _react2["default"].createElement(
	        "div",
	        { className: "week-calendar-footer", key: "footer" },
	        _react2["default"].createElement(
	          "span",
	          {
	            className: "week-calendar-footer-button",
	            onClick: _this.lastWeek.bind(_this),
	            style: { 'float': 'left' }
	          },
	          _this.props.locale.lastWeek
	        ),
	        _react2["default"].createElement(
	          "span",
	          {
	            className: "week-calendar-footer-button",
	            onClick: _this.nowWeek.bind(_this)
	          },
	          _this.props.locale.nowWeek
	        ),
	        _react2["default"].createElement(
	          "span",
	          {
	            className: "week-calendar-footer-button",
	            onClick: _this.nextWeek.bind(_this),
	            style: { 'float': 'right' }
	          },
	          _this.props.locale.nextWeek
	        )
	      );
	    };

	    _this.onTypeChange = function (type) {
	      _this.setState({
	        type: type
	      });
	    };

	    _this.handleCalendarChange = function (value) {
	      _this.setState({ value: value });
	    };

	    _this.onMouseLeave = function (e) {
	      _this.setState({
	        showClose: false
	      });
	    };

	    _this.onMouseEnter = function (e) {
	      _this.setState({
	        showClose: true
	      });
	    };

	    _this.onClear = function (e) {
	      e.stopPropagation();
	      _this.setState({
	        value: ''
	      });
	      _this.props.onChange && _this.props.onChange('', '');
	    };

	    _this.state = {
	      value: props.value || props.defaultValue,
	      open: false,
	      showClose: false
	    };
	    return _this;
	  }

	  WeekPicker.prototype.render = function render() {
	    var _this2 = this;

	    var state = this.state;
	    var props = this.props;
	    var value = state.value;
	    var calendar = _react2["default"].createElement(_rcCalendar2["default"], {
	      className: "week-calendar",
	      showWeekNumber: true,
	      showMonthInput: false,
	      renderFooter: this.renderFooter,
	      dateRender: this.dateRender,
	      locale: cn ? _zh_CN2["default"] : _en_US2["default"],
	      format: format,
	      dateInputPlaceholder: this.props.placeholder,
	      defaultValue: now,
	      showDateInput: true,
	      onChange: this.handleCalendarChange,
	      showToday: false,
	      onClear: this.onClear
	    });
	    var classes = (0, _classnames2["default"])(props.className, "datepicker-container");
	    return _react2["default"].createElement(
	      "div",
	      { className: classes },
	      _react2["default"].createElement(
	        _Picker2["default"],
	        _extends({
	          animation: "slide-up"
	        }, props, {
	          onOpenChange: this.onOpenChange,
	          open: this.state.open,
	          calendar: calendar,
	          value: state.value
	        }),
	        function (_ref) {
	          _objectDestructuringEmpty(_ref);

	          return _react2["default"].createElement(
	            _beeInputGroup2["default"],
	            { simple: true, className: "datepicker-input-group",
	              onMouseEnter: _this2.onMouseEnter,
	              onMouseLeave: _this2.onMouseLeave
	            },
	            _react2["default"].createElement(_beeFormControl2["default"], {
	              placeholder: _this2.props.placeholder,
	              disabled: props.disabled,
	              readOnly: true,
	              tabIndex: "-1",
	              className: _this2.props.className,
	              value: value && value.format(format) || ""
	            }),
	            _this2.state.value && _this2.state.showClose && !props.disabled ? _react2["default"].createElement(
	              _beeInputGroup2["default"].Button,
	              { shape: "border",
	                onClick: _this2.onClear },
	              _react2["default"].createElement("i", { className: "uf uf-close-c" })
	            ) : _react2["default"].createElement(
	              _beeInputGroup2["default"].Button,
	              { shape: "border" },
	              props.renderIcon()
	            )
	          );
	        }
	      )
	    );
	  };

	  return WeekPicker;
	}(React__default.Component);

	WeekPicker.defaultProps = {
	  renderIcon: function renderIcon() {
	    return _react2["default"].createElement(_beeIcon2["default"], { type: "uf-calendar" });
	  },
	  locale: _zh_CN2["default"]
	};

	exports["default"] = WeekPicker;
	module.exports = exports["default"];
	});

	unwrapExports(WeekPicker_1);

	var YearPicker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _YearPanel2 = _interopRequireDefault(YearPanel_1);





	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _Picker2 = _interopRequireDefault(Picker_1);



	var _beeFormControl2 = _interopRequireDefault(build$g);



	var _beeInputGroup2 = _interopRequireDefault(build$h);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _moment2 = _interopRequireDefault(moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by chief on 17/4/6.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	//去掉focus报错
	_Picker2["default"].prototype.componentDidUpdate = function () {};

	var YearPicker = function (_Component) {
	    _inherits(YearPicker, _Component);

	    function YearPicker(props, context) {
	        _classCallCheck(this, YearPicker);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	        _initialiseProps.call(_this);

	        _this.state = {
	            type: "year",
	            value: props.value || props.defaultValue || '',
	            open: props.open || false,
	            showClose: false
	        };
	        return _this;
	    }

	    YearPicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if ("value" in nextProps) {
	            this.setState({
	                value: nextProps.value
	            });
	        }
	        if ("open" in nextProps) {
	            this.setState({
	                open: nextProps.open
	            });
	        }
	        if ("renderIcon" in nextProps) {
	            this.setState({
	                renderIcon: nextProps.renderIcon
	            });
	        }
	    };

	    YearPicker.prototype.render = function render() {
	        var _this2 = this;

	        var state = this.state;

	        var props = this.props;
	        var value = state.value;

	        var Calendar = _react2["default"].createElement(_YearPanel2["default"], _extends({
	            prefixCls: 'rc-calendar-picker',
	            rootPrefixCls: 'rc-calendar'
	        }, props, { focus: function focus() {},
	            onSelect: this.onSelect,
	            showDateInput: true
	        }));
	        var classes = (0, _classnames2["default"])(props.className, "datepicker-container");
	        return _react2["default"].createElement(
	            "div",
	            { className: classes },
	            _react2["default"].createElement(
	                _Picker2["default"],
	                _extends({
	                    animation: "slide-up"
	                }, props, {
	                    onOpenChange: this.onOpenChange,
	                    onChange: this.handleChange,
	                    calendar: Calendar,
	                    prefixCls: 'rc-calendar',
	                    value: state.value || (0, _moment2["default"])(),
	                    open: this.state.open
	                }),
	                function (_ref) {
	                    _objectDestructuringEmpty(_ref);

	                    return _react2["default"].createElement(
	                        _beeInputGroup2["default"],
	                        { simple: true, className: "datepicker-input-group",
	                            onMouseEnter: _this2.onMouseEnter,
	                            onMouseLeave: _this2.onMouseLeave
	                        },
	                        _react2["default"].createElement(_beeFormControl2["default"], {
	                            ref: function ref(_ref2) {
	                                return _this2.outInput = _ref2;
	                            },
	                            placeholder: _this2.props.placeholder,
	                            className: _this2.props.className,
	                            disabled: props.disabled,
	                            readOnly: true,
	                            value: value && value.format(props.format) || ""
	                        }),
	                        _this2.state.value && _this2.state.showClose && !props.disabled ? _react2["default"].createElement(
	                            _beeInputGroup2["default"].Button,
	                            { shape: "border",
	                                onClick: _this2.clear },
	                            _react2["default"].createElement("i", { className: "uf uf-close-c" })
	                        ) : _react2["default"].createElement(
	                            _beeInputGroup2["default"].Button,
	                            { shape: "border" },
	                            props.renderIcon()
	                        )
	                    );
	                }
	            )
	        );
	    };

	    return YearPicker;
	}(React__default.Component);

	var _initialiseProps = function _initialiseProps() {
	    var _this3 = this;

	    this.onChange = function (value) {
	        _this3.setState({
	            value: value
	        });
	    };

	    this.inputFocus = function () {
	        var self = _this3;
	        var input = document.querySelector('.rc-calendar-input');
	        if (input) {
	            if (input.value) {
	                input.select();
	            } else {
	                input.focus();
	            }
	            input.onkeydown = function (e) {
	                if (e.keyCode == lib$1.KeyCode.DELETE) {
	                    input.value = '';
	                    self.props.onChange && self.props.onChange('', '');
	                } else if (e.keyCode == lib$1.KeyCode.ESC) {
	                    self.setState({
	                        open: false
	                    });
	                    var v = self.state.value;
	                    self.props.onOpenChange && self.props.onOpenChange(false, v, v && v.format(self.props.format) || '');
	                    _reactDom2["default"].findDOMNode(self.outInput).focus(); // 按esc时候焦点回到input输入框
	                }
	            };
	        }
	    };

	    this.onOpenChange = function (open) {
	        var self = _this3;
	        _this3.setState({
	            open: open
	        });
	        if (open) {
	            setTimeout(function () {
	                self.inputFocus();
	            }, 200);
	        }
	    };

	    this.handleChange = function (value) {
	        var props = _this3.props;
	        _this3.setState({ value: value });
	        props.onChange && props.onChange(value, value && value.format(props.format) || '');
	    };

	    this.onMouseLeave = function (e) {
	        _this3.setState({
	            showClose: false
	        });
	    };

	    this.onMouseEnter = function (e) {
	        _this3.setState({
	            showClose: true
	        });
	    };

	    this.clear = function (e) {
	        e.stopPropagation();
	        _this3.setState({
	            value: ''
	        });
	        _this3.props.onChange && _this3.props.onChange('', '');
	    };

	    this.onSelect = function (value) {
	        var _props = _this3.props,
	            onSelect = _props.onSelect,
	            format = _props.format;

	        _this3.setState({
	            open: false
	        });
	        onSelect && onSelect(value, value ? value.format(format) : '');
	        _reactDom2["default"].findDOMNode(_this3.outInput).focus();
	    };
	};

	YearPicker.defaultProps = {
	    renderIcon: function renderIcon() {
	        return _react2["default"].createElement(_beeIcon2["default"], { type: "uf-calendar" });
	    },
	    disabled: false
	};

	exports["default"] = YearPicker;
	module.exports = exports["default"];
	});

	unwrapExports(YearPicker_1);

	var build$i = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _DatePicker2 = _interopRequireDefault(DatePicker_1);



	var _MonthPicker2 = _interopRequireDefault(MonthPicker_1);



	var _RangePicker2 = _interopRequireDefault(RangePicker_1);



	var _WeekPicker2 = _interopRequireDefault(WeekPicker_1);



	var _YearPicker2 = _interopRequireDefault(YearPicker_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_DatePicker2["default"].MonthPicker = _MonthPicker2["default"];
	_DatePicker2["default"].RangePicker = _RangePicker2["default"];
	_DatePicker2["default"].WeekPicker = _WeekPicker2["default"];
	_DatePicker2["default"].YearPicker = _YearPicker2["default"];

	exports["default"] = _DatePicker2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$i);

	var Icon_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
		type: _propTypes2["default"].string

	};
	/**
	 *  badge 默认显示内容1
	 */
	var defaultProps = {
		clsPrefix: 'uf'
	};

	var Icon = function (_Component) {
		_inherits(Icon, _Component);

		function Icon(props) {
			_classCallCheck(this, Icon);

			return _possibleConstructorReturn(this, _Component.call(this, props));
		}

		Icon.prototype.render = function render() {
			var _props = this.props,
			    type = _props.type,
			    className = _props.className,
			    clsPrefix = _props.clsPrefix,
			    others = _objectWithoutProperties(_props, ['type', 'className', 'clsPrefix']);

			var classNames = (0, _classnames2["default"])(clsPrefix, type);

			return _react2["default"].createElement('i', _extends({}, others, { className: (0, _classnames2["default"])(classNames, className) }));
		};

		return Icon;
	}(React__default.Component);

	Icon.defaultProps = defaultProps;
	Icon.propTypes = propTypes$1;

	exports["default"] = Icon;
	module.exports = exports['default'];
	});

	unwrapExports(Icon_1$2);

	var build$j = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Icon2 = _interopRequireDefault(Icon_1$2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Icon2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$j);

	var FormControl_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _beeIcon2 = _interopRequireDefault(build$j);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),
	    type: _propTypes2["default"].string,
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'lg']),
	    onSearch: _propTypes2["default"].func,
	    onChange: _propTypes2["default"].func,
	    onBlur: _propTypes2["default"].func,
	    showClose: _propTypes2["default"].bool,
	    focusSelect: _propTypes2["default"].bool
	};

	var defaultProps = {
	    componentClass: 'input',
	    clsPrefix: 'u-form-control',
	    type: 'text',
	    size: 'md'
	};

	var FormControl = function (_React$Component) {
	    _inherits(FormControl, _React$Component);

	    function FormControl(props) {
	        _classCallCheck(this, FormControl);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.handleSearchChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                value: value,
	                showSearch: value == null || value === ""
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.handleChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                showClose: true
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.clearValue = function () {
	            var onChange = _this.props.onChange;

	            _this.setState({
	                showSearch: true,
	                value: "",
	                showClose: false
	            });
	            if (onChange) {
	                onChange("");
	            }
	            _this.input.focus();
	        };

	        _this.handleKeyDown = function (e) {
	            var _this$props = _this.props,
	                onSearch = _this$props.onSearch,
	                type = _this$props.type,
	                onKeyDown = _this$props.onKeyDown;

	            if (e.keyCode === 13 && type === "search") {
	                if (onSearch) {
	                    onSearch(_this.input.value);
	                }
	            }
	            onKeyDown && onKeyDown(e);
	        };

	        _this.handleSearch = function (e) {
	            var onSearch = _this.props.onSearch;

	            if (onSearch) onSearch(_this.input.value);
	        };

	        _this.handleBlur = function (e) {
	            var value = _this.state.value;
	            var onBlur = _this.props.onBlur;


	            if (onBlur) {
	                onBlur(value, e);
	            }
	        };

	        _this.handleFocus = function (e) {
	            var value = _this.state.value;
	            var onFocus = _this.props.onFocus;

	            if (_this.props.focusSelect) {
	                _this.input.select();
	            }
	            if (onFocus) {
	                onFocus(value, e);
	            }
	        };

	        _this.renderInput = function () {
	            var _this$props2 = _this.props,
	                Component = _this$props2.componentClass,
	                type = _this$props2.type,
	                className = _this$props2.className,
	                size = _this$props2.size,
	                clsPrefix = _this$props2.clsPrefix,
	                value = _this$props2.value,
	                onChange = _this$props2.onChange,
	                onSearch = _this$props2.onSearch,
	                onBlur = _this$props2.onBlur,
	                showClose = _this$props2.showClose,
	                focusSelect = _this$props2.focusSelect,
	                others = _objectWithoutProperties(_this$props2, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur', 'showClose', 'focusSelect']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }

	            var classNames = void 0;
	            if (type !== 'file') {
	                classNames = (0, _classnames2["default"])(clsPrefix, classes);
	            }

	            return showClose ? _react2["default"].createElement(
	                'div',
	                { className: (0, _classnames2["default"])(clsPrefix + '-close', clsPrefix + '-affix-wrapper', className) },
	                _react2["default"].createElement(Component, _extends({}, others, {
	                    type: type,
	                    ref: function ref(el) {
	                        return _this.input = el;
	                    },
	                    value: value,
	                    onChange: _this.handleChange,
	                    onBlur: _this.handleBlur,
	                    onFocus: _this.handleFocus,
	                    className: (0, _classnames2["default"])(className, classNames)
	                })),
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-suffix' },
	                    _this.state.showClose ? _react2["default"].createElement(_beeIcon2["default"], { onClick: _this.clearValue, type: 'uf-close-c' }) : ''
	                )
	            ) : _react2["default"].createElement(Component, _extends({}, others, {
	                type: type,
	                ref: function ref(el) {
	                    return _this.input = el;
	                },
	                value: value,
	                onChange: _this.handleChange,
	                onBlur: _this.handleBlur,
	                onFocus: _this.handleFocus,
	                className: (0, _classnames2["default"])(className, classNames)
	            }));
	        };

	        _this.renderSearch = function () {
	            var _this$props3 = _this.props,
	                Component = _this$props3.componentClass,
	                type = _this$props3.type,
	                className = _this$props3.className,
	                size = _this$props3.size,
	                clsPrefix = _this$props3.clsPrefix,
	                value = _this$props3.value,
	                onChange = _this$props3.onChange,
	                onSearch = _this$props3.onSearch,
	                onBlur = _this$props3.onBlur,
	                others = _objectWithoutProperties(_this$props3, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }
	            classes[clsPrefix + '-search'] = true;

	            if (type === "search") {
	                return _react2["default"].createElement(
	                    'div',
	                    { className: (0, _classnames2["default"])(clsPrefix + '-search', clsPrefix + '-affix-wrapper', className) },
	                    _react2["default"].createElement(Component, _extends({}, others, {
	                        type: type,
	                        ref: function ref(el) {
	                            return _this.input = el;
	                        },
	                        onChange: _this.handleSearchChange,
	                        value: value,
	                        onKeyDown: _this.handleKeyDown,
	                        onBlur: _this.handleBlur,
	                        onFocus: _this.handleFocus,
	                        className: (0, _classnames2["default"])(className, clsPrefix, classes)
	                    })),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + '-suffix' },
	                        _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-search', onClick: _this.handleSearch })
	                    )
	                );
	            }
	        };

	        _this.state = {
	            showSearch: !props.value,
	            value: props.value == null ? "" : props.value,
	            showClose: false
	        };
	        _this.input = {};
	        return _this;
	    }

	    FormControl.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProp) {
	        if (nextProp.value !== this.state.value) {
	            this.setState({ value: nextProp.value });
	        }
	    };

	    FormControl.prototype.render = function render() {

	        if (this.props.type === "search") {
	            return this.renderSearch();
	        }

	        return this.renderInput();
	    };

	    return FormControl;
	}(_react2["default"].Component);

	FormControl.propTypes = propTypes$1;
	FormControl.defaultProps = defaultProps;

	exports["default"] = FormControl;
	module.exports = exports['default'];
	});

	unwrapExports(FormControl_1$2);

	var build$k = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _FormControl2 = _interopRequireDefault(FormControl_1$2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _FormControl2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$k);

	var InputGroupButton_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-input-group-btn'
	};

	var InputGroupButton = function (_React$Component) {
	  _inherits(InputGroupButton, _React$Component);

	  function InputGroupButton() {
	    _classCallCheck(this, InputGroupButton);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  InputGroupButton.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['className', 'clsPrefix']);

	    return _react2["default"].createElement('span', _extends({}, others, {
	      className: (0, _classnames2["default"])(className, clsPrefix)
	    }));
	  };

	  return InputGroupButton;
	}(_react2["default"].Component);

	InputGroupButton.defaultProps = defaultProps;
	exports["default"] = InputGroupButton;
	module.exports = exports['default'];
	});

	unwrapExports(InputGroupButton_1$2);

	var InputGroup_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _beeInputGroupAddon2 = _interopRequireDefault(build$3);



	var _InputGroupButton2 = _interopRequireDefault(InputGroupButton_1$2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-input-group',
	  simple: false
	};

	var InputGroup = function (_React$Component) {
	  _inherits(InputGroup, _React$Component);

	  function InputGroup() {
	    _classCallCheck(this, InputGroup);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  InputGroup.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        simple = _props.simple,
	        others = _objectWithoutProperties(_props, ['className', 'clsPrefix', 'simple']);

	    return _react2["default"].createElement('span', _extends({}, others, {
	      className: (0, _classnames2["default"])(className, clsPrefix, simple && 'simple')
	    }));
	  };

	  return InputGroup;
	}(_react2["default"].Component);

	/**
	  * 将InputGroupAddon与InputGroupButton组件作为InputGroup的附属组件
	  */


	InputGroup.Addon = _beeInputGroupAddon2["default"];
	InputGroup.Button = _InputGroupButton2["default"];
	InputGroup.defaultProps = defaultProps;
	exports["default"] = InputGroup;
	module.exports = exports['default'];
	});

	unwrapExports(InputGroup_1$2);

	var build$l = InputGroup_1$2;

	var FormControl_1$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _beeIcon2 = _interopRequireDefault(build$1);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),
	    type: _propTypes2["default"].string,
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'lg']),
	    onSearch: _propTypes2["default"].func,
	    onChange: _propTypes2["default"].func,
	    onBlur: _propTypes2["default"].func,
	    showClose: _propTypes2["default"].bool,
	    focusSelect: _propTypes2["default"].bool
	};

	var defaultProps = {
	    componentClass: 'input',
	    clsPrefix: 'u-form-control',
	    type: 'text',
	    size: 'md'
	};

	var FormControl = function (_React$Component) {
	    _inherits(FormControl, _React$Component);

	    function FormControl(props) {
	        _classCallCheck(this, FormControl);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.handleSearchChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                value: value,
	                showSearch: value == null || value === ""
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.handleChange = function (e) {
	            var onChange = _this.props.onChange;

	            var value = _this.input.value;
	            _this.setState({
	                showClose: true
	            });
	            if (onChange) {
	                onChange(value, e);
	            }
	        };

	        _this.clearValue = function () {
	            var onChange = _this.props.onChange;

	            _this.setState({
	                showSearch: true,
	                value: "",
	                showClose: false
	            });
	            if (onChange) {
	                onChange("");
	            }
	            _this.input.focus();
	        };

	        _this.handleKeyDown = function (e) {
	            var _this$props = _this.props,
	                onSearch = _this$props.onSearch,
	                type = _this$props.type,
	                onKeyDown = _this$props.onKeyDown;

	            if (e.keyCode === 13 && type === "search") {
	                if (onSearch) {
	                    onSearch(_this.input.value);
	                }
	            }
	            onKeyDown && onKeyDown(e);
	        };

	        _this.handleSearch = function (e) {
	            var onSearch = _this.props.onSearch;

	            if (onSearch) onSearch(_this.input.value);
	        };

	        _this.handleBlur = function (e) {
	            var value = _this.state.value;
	            var onBlur = _this.props.onBlur;


	            if (onBlur) {
	                onBlur(value, e);
	            }
	        };

	        _this.handleFocus = function (e) {
	            var value = _this.state.value;
	            var onFocus = _this.props.onFocus;

	            if (_this.props.focusSelect) {
	                _this.input.select();
	            }
	            if (onFocus) {
	                onFocus(value, e);
	            }
	        };

	        _this.renderInput = function () {
	            var _this$props2 = _this.props,
	                Component = _this$props2.componentClass,
	                type = _this$props2.type,
	                className = _this$props2.className,
	                size = _this$props2.size,
	                clsPrefix = _this$props2.clsPrefix,
	                value = _this$props2.value,
	                onChange = _this$props2.onChange,
	                onSearch = _this$props2.onSearch,
	                onBlur = _this$props2.onBlur,
	                showClose = _this$props2.showClose,
	                focusSelect = _this$props2.focusSelect,
	                others = _objectWithoutProperties(_this$props2, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur', 'showClose', 'focusSelect']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }

	            var classNames = void 0;
	            if (type !== 'file') {
	                classNames = (0, _classnames2["default"])(clsPrefix, classes);
	            }

	            return showClose ? _react2["default"].createElement(
	                'div',
	                { className: (0, _classnames2["default"])(clsPrefix + '-close', clsPrefix + '-affix-wrapper', className) },
	                _react2["default"].createElement(Component, _extends({}, others, {
	                    type: type,
	                    ref: function ref(el) {
	                        return _this.input = el;
	                    },
	                    value: value,
	                    onChange: _this.handleChange,
	                    onBlur: _this.handleBlur,
	                    onFocus: _this.handleFocus,
	                    className: (0, _classnames2["default"])(className, classNames)
	                })),
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-suffix' },
	                    _this.state.showClose ? _react2["default"].createElement(_beeIcon2["default"], { onClick: _this.clearValue, type: 'uf-close-c' }) : ''
	                )
	            ) : _react2["default"].createElement(Component, _extends({}, others, {
	                type: type,
	                ref: function ref(el) {
	                    return _this.input = el;
	                },
	                value: value,
	                onChange: _this.handleChange,
	                onBlur: _this.handleBlur,
	                onFocus: _this.handleFocus,
	                className: (0, _classnames2["default"])(className, classNames)
	            }));
	        };

	        _this.renderSearch = function () {
	            var _this$props3 = _this.props,
	                Component = _this$props3.componentClass,
	                type = _this$props3.type,
	                className = _this$props3.className,
	                size = _this$props3.size,
	                clsPrefix = _this$props3.clsPrefix,
	                value = _this$props3.value,
	                onChange = _this$props3.onChange,
	                onSearch = _this$props3.onSearch,
	                onBlur = _this$props3.onBlur,
	                others = _objectWithoutProperties(_this$props3, ['componentClass', 'type', 'className', 'size', 'clsPrefix', 'value', 'onChange', 'onSearch', 'onBlur']);
	            // input[type="file"] 不应该有类名 .form-control.


	            var classes = {};
	            if (size) {
	                classes['' + size] = true;
	            }
	            classes[clsPrefix + '-search'] = true;

	            if (type === "search") {
	                return _react2["default"].createElement(
	                    'div',
	                    { className: (0, _classnames2["default"])(clsPrefix + '-search', clsPrefix + '-affix-wrapper', className) },
	                    _react2["default"].createElement(Component, _extends({}, others, {
	                        type: type,
	                        ref: function ref(el) {
	                            return _this.input = el;
	                        },
	                        onChange: _this.handleSearchChange,
	                        value: value,
	                        onKeyDown: _this.handleKeyDown,
	                        onBlur: _this.handleBlur,
	                        onFocus: _this.handleFocus,
	                        className: (0, _classnames2["default"])(className, clsPrefix, classes)
	                    })),
	                    _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + '-suffix' },
	                        _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-search', onClick: _this.handleSearch })
	                    )
	                );
	            }
	        };

	        _this.state = {
	            showSearch: !props.value,
	            value: props.value == null ? "" : props.value,
	            showClose: false
	        };
	        _this.input = {};
	        return _this;
	    }

	    FormControl.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProp) {
	        if (nextProp.value !== this.state.value) {
	            this.setState({ value: nextProp.value });
	        }
	    };

	    FormControl.prototype.render = function render() {

	        if (this.props.type === "search") {
	            return this.renderSearch();
	        }

	        return this.renderInput();
	    };

	    return FormControl;
	}(_react2["default"].Component);

	FormControl.propTypes = propTypes$1;
	FormControl.defaultProps = defaultProps;

	exports["default"] = FormControl;
	module.exports = exports['default'];
	});

	unwrapExports(FormControl_1$3);

	var build$m = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _FormControl2 = _interopRequireDefault(FormControl_1$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _FormControl2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$m);

	var InputNumber_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _beeInputGroup2 = _interopRequireDefault(build$l);



	var _beeFormControl2 = _interopRequireDefault(build$m);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    max: _propTypes2["default"].number,
	    min: _propTypes2["default"].number,
	    step: _propTypes2["default"].number,
	    autoWidth: _propTypes2["default"].bool,
	    precision: _propTypes2["default"].number,
	    format: _propTypes2["default"].func,
	    delay: _propTypes2["default"].number,
	    disabled: _propTypes2["default"].bool,
	    toThousands: _propTypes2["default"].bool,
	    toNumber: _propTypes2["default"].bool //回调函数内的值是否转换为数值类型
	};

	var defaultProps = {
	    value: 0,
	    step: 1,
	    clsPrefix: 'u-input-number',
	    iconStyle: 'double',
	    autoWidth: false,
	    delay: 300,
	    toNumber: true
	};

	/**
	 * 校验value
	 * @param {*} props 
	 * @param {原来的值} oldValue 
	 */
	function judgeValue(props, oldValue) {
	    var currentValue = void 0;
	    var currentMinusDisabled = false;
	    var currentPlusDisabled = false;
	    var value = props.value,
	        min = props.min,
	        max = props.max,
	        precision = props.precision,
	        onChange = props.onChange;

	    if (value) {
	        currentValue = Number(value) || 0;
	    } else if (min) {
	        currentValue = min;
	    } else if (value == 0) {
	        currentValue = 0;
	    } else {
	        //NaN
	        if (oldValue || oldValue == 0) {
	            currentValue = oldValue;
	        }
	    }
	    if (currentValue <= min) {
	        currentMinusDisabled = true;
	    }
	    if (currentValue >= max) {
	        currentPlusDisabled = true;
	    }

	    if (props.hasOwnProperty('precision')) {
	        currentValue = currentValue.toFixed(precision);
	    }

	    return {
	        value: currentValue,
	        minusDisabled: currentMinusDisabled,
	        plusDisabled: currentPlusDisabled
	    };
	}
	/**
	 * 千分符
	 * @param {要转换的数据} num 
	 * @param {是否要小数点} point 
	 */
	function toThousands(number, point) {
	    var num = (number || 0).toString();
	    var integer = num.split('.')[0];
	    var decimal = num.split('.')[1] || '';
	    var result = '';
	    while (integer.length > 3) {
	        result = ',' + integer.slice(-3) + result;
	        integer = integer.slice(0, integer.length - 3);
	    }
	    if (integer) {
	        result = integer + result;
	        if (num == '.' || num.indexOf('.') == num.length - 1) {
	            result = result + '.' + decimal;
	        } else if (decimal) {
	            result = result + '.' + decimal;
	        }
	    }
	    return result;
	}

	function unThousands(number) {
	    number = (number || 0).toString();
	    return number.replace(/\,/g, '');
	}

	var InputNumber = function (_Component) {
	    _inherits(InputNumber, _Component);

	    function InputNumber(props) {
	        _classCallCheck(this, InputNumber);

	        // 初始化状态，加减按钮是否可用，根据当前值判断

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this.handleChange = function (value) {
	            var _this$props = _this.props,
	                onChange = _this$props.onChange,
	                toNumber = _this$props.toNumber;

	            value = unThousands(value);
	            if (isNaN(value) && value != '.') return;
	            _this.setState({
	                value: value,
	                showValue: toThousands(value)
	            });
	            if (value == '.' || value.indexOf('.') == value.length - 1) {
	                //当输入小数点的时候
	                onChange && onChange(value);
	            } else if (value[value.indexOf('.') + 1] == 0) {
	                //当输入 d.0 的时候，不转换Number
	                onChange && onChange(value);
	            } else {
	                toNumber ? onChange && onChange(Number(value)) : onChange && onChange(value);
	            }
	        };

	        _this.handleFocus = function (value, e) {
	            _this.focus = true;
	            var _this$props2 = _this.props,
	                onFocus = _this$props2.onFocus,
	                min = _this$props2.min,
	                max = _this$props2.max;

	            onFocus && onFocus(value);
	        };

	        _this.handleBlur = function (v) {
	            v = unThousands(v);
	            _this.focus = false;
	            var _this$props3 = _this.props,
	                onBlur = _this$props3.onBlur,
	                precision = _this$props3.precision,
	                onChange = _this$props3.onChange,
	                toNumber = _this$props3.toNumber;

	            var value = Number(v);
	            if (precision) {
	                value = value.toFixed(precision);
	            }
	            _this.setState({
	                value: value,
	                showValue: toThousands(value)
	            });
	            _this.detailDisable(value);
	            if (toNumber) {
	                onBlur && onBlur(Number(value));
	                onChange && onChange(Number(value));
	            } else {
	                onBlur && onBlur(value);
	                onChange && onChange(value);
	            }
	        };

	        _this.detailDisable = function (value) {
	            var _this$props4 = _this.props,
	                max = _this$props4.max,
	                min = _this$props4.min,
	                step = _this$props4.step;


	            if (value >= max || Number(value) + Number(step) > max) {
	                _this.setState({
	                    plusDisabled: true
	                });
	            } else {
	                _this.setState({
	                    plusDisabled: false
	                });
	            }
	            if (value <= min || value - step < min) {
	                _this.setState({
	                    minusDisabled: true
	                });
	            } else {
	                _this.setState({
	                    minusDisabled: false
	                });
	            }
	        };

	        _this.minus = function (value) {
	            var _this$props5 = _this.props,
	                min = _this$props5.min,
	                max = _this$props5.max,
	                step = _this$props5.step,
	                onChange = _this$props5.onChange,
	                toNumber = _this$props5.toNumber;


	            if (typeof min === "undefined") {
	                value = _this.detail(value, step, 'reduce');
	            } else {
	                if (value < min) {
	                    value = min;
	                } else {
	                    var reducedValue = _this.detail(value, step, 'reduce');
	                    if (reducedValue >= min) {
	                        value = reducedValue;
	                    }
	                }
	            }

	            if (value > max) {
	                value = max;
	            }

	            _this.setState({
	                value: value,
	                showValue: toThousands(value)
	            });
	            toNumber ? onChange && onChange(Number(value)) : onChange && onChange(value);
	            _this.detailDisable(value);
	        };

	        _this.plus = function (value) {
	            var _this$props6 = _this.props,
	                max = _this$props6.max,
	                min = _this$props6.min,
	                step = _this$props6.step,
	                onChange = _this$props6.onChange,
	                toNumber = _this$props6.toNumber;

	            if (typeof max === "undefined") {
	                value = _this.detail(value, step, 'add');
	            } else {
	                if (value > max) {
	                    value = max;
	                } else {
	                    var addedValue = _this.detail(value, step, 'add');
	                    if (addedValue <= max) {
	                        value = addedValue;
	                    }
	                }
	            }
	            if (value < min) {
	                value = min;
	            }
	            _this.setState({
	                value: value,
	                showValue: toThousands(value)
	            });
	            toNumber ? onChange && onChange(Number(value)) : onChange && onChange(value);
	            _this.detailDisable(value);
	        };

	        _this.detail = function (value, step, type) {
	            var precision = _this.props.precision;


	            var valueFloat = _this.separate(value);
	            var stepFloat = _this.separate(step);

	            var ans = void 0;
	            var stepFloatLength = stepFloat.toString().length;
	            var valueFloatLength = valueFloat.toString().length;

	            if (typeof precision === 'undefined') {
	                precision = Math.max(stepFloatLength, valueFloatLength);
	            }
	            var coefficient = Math.pow(10, Math.abs(stepFloatLength - valueFloatLength));
	            if (type === 'add') {
	                ans = (value * coefficient + step * coefficient) / coefficient;
	            } else {
	                ans = (value * coefficient - step * coefficient) / coefficient;
	            }

	            return ans.toFixed(precision);
	        };

	        _this.separate = function (value) {
	            value = value.toString();
	            if (value.indexOf('.') > -1) {
	                return value.split('.')[1];
	            } else {
	                return "";
	            }
	        };

	        _this.clear = function () {
	            if (_this.timer) {
	                clearTimeout(_this.timer);
	            }
	        };

	        _this.handlePlusMouseDown = function (e) {
	            var _this$props7 = _this.props,
	                delay = _this$props7.delay,
	                disabled = _this$props7.disabled;

	            if (disabled) return;
	            var value = _this.state.value;

	            _this.plus(value);
	            _this.clear();
	            _this.timer = setTimeout(function () {
	                _this.handlePlusMouseDown();
	            }, delay);
	        };

	        _this.handleReduceMouseDown = function (e) {
	            var _this$props8 = _this.props,
	                delay = _this$props8.delay,
	                disabled = _this$props8.disabled;

	            if (disabled) return;
	            var value = _this.state.value;

	            _this.minus(value);
	            _this.clear();
	            _this.timer = setTimeout(function () {
	                _this.handleReduceMouseDown();
	            }, delay);
	        };

	        var data = judgeValue(props);

	        _this.state = {
	            value: data.value,
	            minusDisabled: data.minusDisabled,
	            plusDisabled: data.plusDisabled,
	            showValue: toThousands(data.value)
	        };

	        _this.timer = null;
	        _this.focus = false;
	        return _this;
	    }

	    InputNumber.prototype.ComponentWillMount = function ComponentWillMount() {};

	    InputNumber.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (this.focus) {
	            this.setState({
	                value: nextProps.value,
	                showValue: toThousands(nextProps.value)
	            });
	        } else {
	            var data = judgeValue(nextProps, this.state.value);
	            this.setState({
	                value: data.value,
	                showValue: toThousands(data.value),
	                minusDisabled: data.minusDisabled,
	                plusDisabled: data.plusDisabled
	            });
	        }
	    };

	    InputNumber.prototype.ComponentWillUnMount = function ComponentWillUnMount() {
	        this.clear();
	    };
	    /**
	     * 设置增加减少按钮是否可用
	     */

	    /**
	     * 减法
	     */

	    /**
	     * 加法
	     */


	    /**
	     * 分离小数和整数
	     * @param value
	     * @returns {*}
	     */


	    InputNumber.prototype.render = function render() {
	        var _classes;

	        var _props = this.props,
	            toThousands = _props.toThousands,
	            max = _props.max,
	            min = _props.min,
	            step = _props.step,
	            disabled = _props.disabled,
	            clsPrefix = _props.clsPrefix,
	            className = _props.className,
	            delay = _props.delay,
	            onBlur = _props.onBlur,
	            onFocus = _props.onFocus,
	            iconStyle = _props.iconStyle,
	            autoWidth = _props.autoWidth,
	            onChange = _props.onChange,
	            format = _props.format,
	            precision = _props.precision,
	            toNumber = _props.toNumber,
	            others = _objectWithoutProperties(_props, ['toThousands', 'max', 'min', 'step', 'disabled', 'clsPrefix', 'className', 'delay', 'onBlur', 'onFocus', 'iconStyle', 'autoWidth', 'onChange', 'format', 'precision', 'toNumber']);

	        var classes = (_classes = {}, _defineProperty(_classes, clsPrefix + '-auto', autoWidth), _defineProperty(_classes, '' + clsPrefix, true), _classes);

	        var _state = this.state,
	            value = _state.value,
	            minusDisabled = _state.minusDisabled,
	            plusDisabled = _state.plusDisabled,
	            showValue = _state.showValue;


	        value = format ? format(value) : value;

	        var disabledCursor = disabled ? ' disabled-cursor' : '';
	        var disabledCon = disabled ? ' disabled-con' : '';
	        return _react2["default"].createElement(
	            'div',
	            null,
	            iconStyle === 'double' ? _react2["default"].createElement(
	                _beeInputGroup2["default"],
	                { className: (0, _classnames2["default"])(className, classes, disabledCon) },
	                _react2["default"].createElement(
	                    _beeInputGroup2["default"].Addon,
	                    {
	                        className: (minusDisabled && 'disabled') + disabledCursor,
	                        onMouseDown: this.handleReduceMouseDown,
	                        onMouseLeave: this.clear,
	                        onMouseUp: this.clear },
	                    '-'
	                ),
	                _react2["default"].createElement(_beeFormControl2["default"], _extends({}, others, {
	                    value: toThousands ? showValue : value,
	                    disabled: disabled,
	                    onBlur: this.handleBlur,
	                    onFocus: this.handleFocus,
	                    onChange: this.handleChange
	                })),
	                _react2["default"].createElement(
	                    _beeInputGroup2["default"].Addon,
	                    {
	                        className: (plusDisabled && 'disabled') + disabledCursor,
	                        onMouseDown: this.handlePlusMouseDown,
	                        onMouseLeave: this.clear,
	                        onMouseUp: this.clear },
	                    '+'
	                )
	            ) : _react2["default"].createElement(
	                _beeInputGroup2["default"],
	                {
	                    className: (0, _classnames2["default"])(className, classes, disabledCon),
	                    simple: true
	                },
	                _react2["default"].createElement(_beeFormControl2["default"], _extends({}, others, {
	                    value: toThousands ? showValue : value,
	                    disabled: disabled,
	                    onBlur: this.handleBlur,
	                    onFocus: this.handleFocus,
	                    onChange: this.handleChange
	                })),
	                _react2["default"].createElement(
	                    _beeInputGroup2["default"].Button,
	                    null,
	                    _react2["default"].createElement(
	                        'div',
	                        { className: 'icon-group' },
	                        _react2["default"].createElement(
	                            'span',
	                            {
	                                onMouseDown: this.handlePlusMouseDown,
	                                onMouseLeave: this.clear,
	                                onMouseUp: this.clear,
	                                className: (0, _classnames2["default"])('plus', { 'disabled': plusDisabled, 'disabled-cursor': disabledCursor }) },
	                            _react2["default"].createElement('span', { className: 'uf uf-arrow-up' })
	                        ),
	                        _react2["default"].createElement(
	                            'span',
	                            {
	                                onMouseDown: this.handleReduceMouseDown,
	                                onMouseLeave: this.clear,
	                                onMouseUp: this.clear,
	                                className: (0, _classnames2["default"])("reduce", { 'disabled': minusDisabled, 'disabled-cursor': disabledCursor }) },
	                            _react2["default"].createElement('span', { className: ' uf uf-arrow-down' })
	                        )
	                    )
	                )
	            )
	        );
	    };

	    return InputNumber;
	}(React__default.Component);

	InputNumber.defaultProps = defaultProps;
	InputNumber.propTypes = propTypes$1;
	exports["default"] = InputNumber;
	module.exports = exports['default'];
	});

	unwrapExports(InputNumber_1);

	var build$n = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _InputNumber2 = _interopRequireDefault(InputNumber_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _InputNumber2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$n);

	var placement = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = exports.placements = {
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  topCenter: {
	    points: ['bc', 'tc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  bottomCenter: {
	    points: ['tc', 'bc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  }
	};

	exports["default"] = placements;
	});

	unwrapExports(placement);
	var placement_1 = placement.placements;

	var Dropdown_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _trigger2 = _interopRequireDefault(trigger);



	var _placement2 = _interopRequireDefault(placement);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-dropdown.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/dropdown
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var propTypes$1 = {
	  minOverlayWidthMatchTrigger: _propTypes2["default"].bool,
	  onVisibleChange: _propTypes2["default"].func,
	  clsPrefix: _propTypes2["default"].string,
	  children: _propTypes2["default"].any,
	  transitionName: _propTypes2["default"].string,
	  overlayClassName: _propTypes2["default"].string,
	  animation: _propTypes2["default"].any,
	  align: _propTypes2["default"].object,
	  overlayStyle: _propTypes2["default"].object,
	  placement: _propTypes2["default"].string,
	  trigger: _propTypes2["default"].array,
	  showAction: _propTypes2["default"].array,
	  hideAction: _propTypes2["default"].array,
	  getPopupContainer: _propTypes2["default"].func
	};

	var defaultProps = {
	  minOverlayWidthMatchTrigger: true,
	  clsPrefix: 'u-dropdown',
	  trigger: ['hover'],
	  showAction: [],
	  hideAction: [],
	  overlayClassName: '',
	  overlayStyle: {},
	  defaultVisible: false,
	  onVisibleChange: function onVisibleChange() {},

	  placement: 'bottomLeft'
	};

	var jadgeState = function jadgeState(props) {
	  if ('visible' in props) {
	    return props.visible;
	  }
	  return props.defaultVisible;
	};

	var Dropdown = function (_React$Component) {
	  _inherits(Dropdown, _React$Component);

	  function Dropdown(props) {
	    _classCallCheck(this, Dropdown);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      visible: jadgeState(_this.props)
	    };
	    _this.onClick = _this.onClick.bind(_this);
	    _this.onVisibleChange = _this.onVisibleChange.bind(_this);
	    _this.getMenuElement = _this.getMenuElement.bind(_this);
	    _this.getPopupDomNode = _this.getPopupDomNode.bind(_this);
	    _this.afterVisibleChange = _this.afterVisibleChange.bind(_this);

	    return _this;
	  }

	  Dropdown.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref) {
	    var visible = _ref.visible;

	    if (visible !== undefined) {
	      this.setState({
	        visible: visible
	      });
	    }
	  };

	  Dropdown.prototype.onClick = function onClick(e) {
	    var props = this.props;
	    var overlayProps = props.overlay.props;
	    // do no call onVisibleChange, if you need click to hide, use onClick and control visible
	    if (!('visible' in props)) {
	      this.setState({
	        visible: false
	      });
	    }
	    if (overlayProps.onClick) {
	      overlayProps.onClick(e);
	    }
	  };

	  Dropdown.prototype.onVisibleChange = function onVisibleChange(visible) {
	    var props = this.props;
	    if (!('visible' in props)) {
	      this.setState({
	        visible: visible
	      });
	    }
	    props.onVisibleChange(visible);
	  };

	  Dropdown.prototype.getMenuElement = function getMenuElement() {
	    var _props = this.props,
	        overlay = _props.overlay,
	        clsPrefix = _props.clsPrefix;


	    return _react2["default"].cloneElement(overlay, {
	      prefixCls: clsPrefix + '-menu',
	      clsPrefix: clsPrefix + '-menu',
	      onClick: this.onClick
	    });
	  };

	  Dropdown.prototype.getPopupDomNode = function getPopupDomNode() {
	    return this.refs.trigger.getPopupDomNode();
	  };

	  Dropdown.prototype.afterVisibleChange = function afterVisibleChange(visible) {
	    if (visible && this.props.minOverlayWidthMatchTrigger) {
	      var overlayNode = this.getPopupDomNode();
	      var rootNode = _reactDom2["default"].findDOMNode(this);
	      if (rootNode.offsetWidth > overlayNode.offsetWidth) {
	        overlayNode.style['min-width'] = rootNode.offsetWidth + 'px';
	      }
	    }
	  };

	  Dropdown.prototype.render = function render() {
	    var _props2 = this.props,
	        clsPrefix = _props2.clsPrefix,
	        children = _props2.children,
	        transitionName = _props2.transitionName,
	        animation = _props2.animation,
	        align = _props2.align,
	        placement = _props2.placement,
	        getPopupContainer = _props2.getPopupContainer,
	        showAction = _props2.showAction,
	        hideAction = _props2.hideAction,
	        overlayClassName = _props2.overlayClassName,
	        overlayStyle = _props2.overlayStyle,
	        trigger = _props2.trigger,
	        getDocument = _props2.getDocument,
	        disabled = _props2.disabled,
	        props = _objectWithoutProperties(_props2, ['clsPrefix', 'children', 'transitionName', 'animation', 'align', 'placement', 'getPopupContainer', 'showAction', 'hideAction', 'overlayClassName', 'overlayStyle', 'trigger', 'getDocument', 'disabled']);

	    return _react2["default"].createElement(
	      _trigger2["default"],
	      _extends({}, props, {
	        clsPrefix: clsPrefix,
	        ref: 'trigger',
	        popupClassName: overlayClassName,
	        popupStyle: overlayStyle,
	        builtinPlacements: _placement2["default"],
	        action: trigger,
	        showAction: showAction,
	        hideAction: hideAction,
	        popupPlacement: placement,
	        popupAlign: align,
	        popupTransitionName: transitionName,
	        popupAnimation: animation,
	        popupVisible: disabled ? false : this.state.visible,
	        afterPopupVisibleChange: this.afterVisibleChange,
	        popup: this.getMenuElement(),
	        onPopupVisibleChange: this.onVisibleChange,
	        getPopupContainer: getPopupContainer,
	        getDocument: getDocument
	      }),
	      children
	    );
	  };

	  return Dropdown;
	}(_react2["default"].Component);

	Dropdown.propTypes = propTypes$1;
	Dropdown.defaultProps = defaultProps;

	exports["default"] = Dropdown;
	module.exports = exports['default'];
	});

	unwrapExports(Dropdown_1);

	var build$o = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Dropdown2 = _interopRequireDefault(Dropdown_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Dropdown2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$o);

	var util$5 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.setStyle = exports.getWidth = exports.menuAllProps = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                              * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                              * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                              */


	exports.noop = noop;
	exports.getKeyFromChildrenIndex = getKeyFromChildrenIndex;
	exports.getMenuIdFromSubMenuEventKey = getMenuIdFromSubMenuEventKey;
	exports.loopMenuItem = loopMenuItem;
	exports.loopMenuItemRecursively = loopMenuItemRecursively;
	exports.fireKeyEvent = fireKeyEvent;



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function noop() {}

	function getKeyFromChildrenIndex(child, menuEventKey, index) {
	  var prefix = menuEventKey || '';
	  return child.key || prefix + 'item_' + index;
	}

	function getMenuIdFromSubMenuEventKey(eventKey) {
	  return eventKey + '-menu-';
	}

	function loopMenuItem(children, cb) {
	  var index = -1;
	  _react2["default"].Children.forEach(children, function (c) {
	    index++;
	    if (c && c.type && c.type.isMenuItemGroup) {
	      _react2["default"].Children.forEach(c.props.children, function (c2) {
	        index++;
	        cb(c2, index);
	      });
	    } else {
	      cb(c, index);
	    }
	  });
	}

	function loopMenuItemRecursively(children, keys, ret) {
	  /* istanbul ignore if */
	  if (!children || ret.find) {
	    return;
	  }
	  _react2["default"].Children.forEach(children, function (c) {
	    if (c) {
	      var construct = c.type;
	      if (!construct || !(construct.isSubMenu || construct.isMenuItem || construct.isMenuItemGroup)) {
	        return;
	      }
	      if (keys.indexOf(c.key) !== -1) {
	        ret.find = true;
	      } else if (c.props.children) {
	        loopMenuItemRecursively(c.props.children, keys, ret);
	      }
	    }
	  });
	}

	var menuAllProps = exports.menuAllProps = ['defaultSelectedKeys', 'selectedKeys', 'defaultOpenKeys', 'openKeys', 'mode', 'getPopupContainer', 'onSelect', 'onDeselect', 'onDestroy', 'openTransitionName', 'openAnimation', 'subMenuOpenDelay', 'subMenuCloseDelay', 'forceSubMenuRender', 'triggerSubMenuAction', 'level', 'selectable', 'multiple', 'onOpenChange', 'visible', 'focusable', 'defaultActiveFirst', 'prefixCls', 'inlineIndent', 'parentMenu', 'title', 'rootPrefixCls', 'eventKey', 'active', 'onItemHover', 'onTitleMouseEnter', 'onTitleMouseLeave', 'onTitleClick', 'popupAlign', 'popupOffset', 'isOpen', 'renderMenuItem', 'manualRef', 'subMenuKey', 'disabled', 'index', 'isSelected', 'store', 'activeKey', 'builtinPlacements', 'overflowedIndicator',

	// the following keys found need to be removed from test regression
	'attribute', 'value', 'popupClassName', 'inlineCollapsed', 'menu', 'theme', 'itemIcon', 'expandIcon'];

	var getWidth = exports.getWidth = function getWidth(elem) {
	  return elem && typeof elem.getBoundingClientRect === 'function' && elem.getBoundingClientRect().width || 0;
	};

	var setStyle = exports.setStyle = function setStyle(elem, styleProperty, value) {
	  if (elem && _typeof(elem.style) === 'object') {
	    elem.style[styleProperty] = value;
	  }
	};

	function fireKeyEvent(el, evtType, keyCode) {
	  var evtObj;
	  if (document.createEvent) {
	    if (window.KeyEvent) {
	      //firefox 浏览器下模拟事件
	      evtObj = document.createEvent('KeyEvents');
	      evtObj.initKeyEvent(evtType, true, true, window, true, false, false, false, keyCode, 0);
	    } else {
	      //chrome 浏览器下模拟事件
	      evtObj = document.createEvent('UIEvents');
	      evtObj.initUIEvent(evtType, true, true, window, 1);

	      delete evtObj.keyCode;
	      if (typeof evtObj.keyCode === "undefined") {
	        //为了模拟keycode
	        Object.defineProperty(evtObj, "keyCode", { value: keyCode });
	      } else {
	        evtObj.key = String.fromCharCode(keyCode);
	      }

	      if (typeof evtObj.ctrlKey === 'undefined') {
	        //为了模拟ctrl键
	        Object.defineProperty(evtObj, "ctrlKey", { value: true });
	      } else {
	        evtObj.ctrlKey = true;
	      }
	    }
	    el.dispatchEvent(evtObj);
	  } else if (document.createEventObject) {
	    //IE 浏览器下模拟事件
	    evtObj = document.createEventObject();
	    evtObj.keyCode = keyCode;
	    el.fireEvent('on' + evtType, evtObj);
	  }
	}
	});

	unwrapExports(util$5);
	var util_1$5 = util$5.setStyle;
	var util_2$2 = util$5.getWidth;
	var util_3$2 = util$5.menuAllProps;
	var util_4$2 = util$5.noop;
	var util_5$2 = util$5.getKeyFromChildrenIndex;
	var util_6$2 = util$5.getMenuIdFromSubMenuEventKey;
	var util_7$2 = util$5.loopMenuItem;
	var util_8$2 = util$5.loopMenuItemRecursively;
	var util_9$2 = util$5.fireKeyEvent;

	var placements_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	* This source code is quoted from rc-menu.
	* homepage: https://github.com/react-component/menu
	*/
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var placements = exports.placements = {
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -7]
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 7]
	  },
	  leftTop: {
	    points: ['tr', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0]
	  },
	  rightTop: {
	    points: ['tl', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0]
	  }
	};

	exports["default"] = placements;
	});

	unwrapExports(placements_1$1);
	var placements_2 = placements_1$1.placements;

	var SubMenu_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SubMenu = undefined;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
	                                                                                                                                                                                                                                                                  * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                  * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                  */




	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _rcTrigger2 = _interopRequireDefault(Trigger);





	var _classnames2 = _interopRequireDefault(classnames);





	var _SubPopupMenu2 = _interopRequireDefault(SubPopupMenu_1);



	var _placements2 = _interopRequireDefault(placements_1$1);



	var _rcAnimate2 = _interopRequireDefault(Animate);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var guid = 0;

	var popupPlacementMap = {
	  horizontal: 'bottomLeft',
	  vertical: 'rightTop',
	  'vertical-left': 'rightTop',
	  'vertical-right': 'leftTop'
	};

	var updateDefaultActiveFirst = function updateDefaultActiveFirst(store, eventKey, defaultActiveFirst) {
	  var menuId = (0, util$5.getMenuIdFromSubMenuEventKey)(eventKey);
	  var state = store.getState();
	  store.setState({
	    defaultActiveFirst: _extends({}, state.defaultActiveFirst, _defineProperty({}, menuId, defaultActiveFirst))
	  });
	};

	var SubMenu = exports.SubMenu = function (_React$Component) {
	  _inherits(SubMenu, _React$Component);

	  function SubMenu(props) {
	    _classCallCheck(this, SubMenu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    var store = props.store;
	    var eventKey = props.eventKey;
	    var defaultActiveFirst = store.getState().defaultActiveFirst;

	    _this.isRootMenu = false;

	    var value = false;

	    if (defaultActiveFirst) {
	      value = defaultActiveFirst[eventKey];
	    }

	    updateDefaultActiveFirst(store, eventKey, value);
	    return _this;
	  }

	  SubMenu.prototype.componentDidMount = function componentDidMount() {
	    this.componentDidUpdate();
	  };

	  SubMenu.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _this2 = this;

	    var _props = this.props,
	        mode = _props.mode,
	        parentMenu = _props.parentMenu,
	        manualRef = _props.manualRef;

	    // invoke customized ref to expose component to mixin

	    if (manualRef) {
	      manualRef(this);
	    }

	    if (mode !== 'horizontal' || !parentMenu.isRootMenu || !this.props.isOpen) {
	      return;
	    }

	    this.minWidthTimeout = setTimeout(function () {
	      return _this2.adjustWidth();
	    }, 0);
	  };

	  SubMenu.prototype.componentWillUnmount = function componentWillUnmount() {
	    var _props2 = this.props,
	        onDestroy = _props2.onDestroy,
	        eventKey = _props2.eventKey;

	    if (onDestroy) {
	      onDestroy(eventKey);
	    }

	    /* istanbul ignore if */
	    if (this.minWidthTimeout) {
	      clearTimeout(this.minWidthTimeout);
	    }

	    /* istanbul ignore if */
	    if (this.mouseenterTimeout) {
	      clearTimeout(this.mouseenterTimeout);
	    }
	  };

	  SubMenu.prototype.renderChildren = function renderChildren(children) {
	    var props = this.props;
	    var baseProps = {
	      mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
	      visible: this.props.isOpen,
	      level: props.level + 1,
	      inlineIndent: props.inlineIndent,
	      focusable: false,
	      onClick: this.onSubMenuClick,
	      onSelect: this.onSelect,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      selectedKeys: props.selectedKeys,
	      eventKey: props.eventKey + '-menu-',
	      openKeys: props.openKeys,
	      openTransitionName: props.openTransitionName,
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      subMenuOpenDelay: props.subMenuOpenDelay,
	      parentMenu: this,
	      subMenuCloseDelay: props.subMenuCloseDelay,
	      forceSubMenuRender: props.forceSubMenuRender,
	      triggerSubMenuAction: props.triggerSubMenuAction,
	      builtinPlacements: props.builtinPlacements,
	      defaultActiveFirst: props.store.getState().defaultActiveFirst[(0, util$5.getMenuIdFromSubMenuEventKey)(props.eventKey)],
	      multiple: props.multiple,
	      prefixCls: props.rootPrefixCls,
	      id: this._menuId,
	      manualRef: this.saveMenuInstance,
	      itemIcon: props.itemIcon,
	      expandIcon: props.expandIcon
	    };

	    var haveRendered = this.haveRendered;
	    this.haveRendered = true;

	    this.haveOpened = this.haveOpened || baseProps.visible || baseProps.forceSubMenuRender;
	    // never rendered not planning to, don't render
	    if (!this.haveOpened) {
	      return _react2["default"].createElement('div', null);
	    }

	    // don't show transition on first rendering (no animation for opened menu)
	    // show appear transition if it's not visible (not sure why)
	    // show appear transition if it's not inline mode
	    var transitionAppear = haveRendered || !baseProps.visible || !baseProps.mode === 'inline';

	    baseProps.className = ' ' + baseProps.prefixCls + '-sub';
	    var animProps = {};

	    if (baseProps.openTransitionName) {
	      animProps.transitionName = baseProps.openTransitionName;
	    } else if (_typeof(baseProps.openAnimation) === 'object') {
	      animProps.animation = _extends({}, baseProps.openAnimation);
	      if (!transitionAppear) {
	        delete animProps.animation.appear;
	      }
	    }

	    return _react2["default"].createElement(
	      _rcAnimate2["default"],
	      _extends({}, animProps, {
	        showProp: 'visible',
	        component: '',
	        transitionAppear: transitionAppear
	      }),
	      _react2["default"].createElement(
	        _SubPopupMenu2["default"],
	        _extends({}, baseProps, { id: this._menuId }),
	        children
	      )
	    );
	  };

	  SubMenu.prototype.render = function render() {
	    var _classNames;

	    var props = _extends({}, this.props);
	    var isOpen = props.isOpen;
	    var prefixCls = this.getPrefixCls();
	    var isInlineMode = props.mode === 'inline';
	    var className = (0, _classnames2["default"])(prefixCls, prefixCls + '-' + props.mode, (_classNames = {}, _defineProperty(_classNames, props.className, !!props.className), _defineProperty(_classNames, this.getOpenClassName(), isOpen), _defineProperty(_classNames, this.getActiveClassName(), props.active || isOpen && !isInlineMode), _defineProperty(_classNames, this.getDisabledClassName(), props.disabled), _defineProperty(_classNames, this.getSelectedClassName(), this.isChildrenSelected()), _classNames));

	    if (!this._menuId) {
	      if (props.eventKey) {
	        this._menuId = props.eventKey + '$Menu';
	      } else {
	        this._menuId = '$__$' + ++guid + '$Menu';
	      }
	    }

	    var mouseEvents = {};
	    var titleClickEvents = {};
	    var titleMouseEvents = {};
	    if (!props.disabled) {
	      mouseEvents = {
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onMouseEnter
	      };

	      // only works in title, not outer li
	      titleClickEvents = {
	        onClick: this.onTitleClick
	      };
	      titleMouseEvents = {
	        onMouseEnter: this.onTitleMouseEnter,
	        onMouseLeave: this.onTitleMouseLeave
	      };
	    }

	    var style = {};
	    if (isInlineMode) {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }

	    var ariaOwns = {};
	    // only set aria-owns when menu is open
	    // otherwise it would be an invalid aria-owns value
	    // since corresponding node cannot be found
	    if (this.props.isOpen) {
	      ariaOwns = {
	        'aria-owns': this._menuId
	      };
	    }

	    // expand custom icon should NOT be displayed in menu with horizontal mode.
	    var icon = null;
	    if (props.mode !== 'horizontal') {
	      icon = this.props.expandIcon; // ReactNode
	      if (typeof this.props.expandIcon === 'function') {
	        icon = _react2["default"].createElement(this.props.expandIcon, _extends({}, this.props));
	      }
	    }

	    var title = _react2["default"].createElement(
	      'div',
	      _extends({
	        ref: this.saveSubMenuTitle,
	        style: style,
	        className: prefixCls + '-title'
	      }, titleMouseEvents, titleClickEvents, {
	        'aria-expanded': isOpen
	      }, ariaOwns, {
	        'aria-haspopup': 'true',
	        title: typeof props.title === 'string' ? props.title : undefined
	      }),
	      props.title,
	      icon || _react2["default"].createElement('i', { className: prefixCls + '-arrow' })
	    );
	    var children = this.renderChildren(props.children);

	    var getPopupContainer = function getPopupContainer(triggerNode) {
	      return triggerNode.parentNode;
	    };
	    var popupPlacement = popupPlacementMap[props.mode];
	    var popupAlign = props.popupOffset ? { offset: props.popupOffset } : {};
	    var popupClassName = props.mode === 'inline' ? '' : props.popupClassName;
	    var disabled = props.disabled,
	        triggerSubMenuAction = props.triggerSubMenuAction,
	        subMenuOpenDelay = props.subMenuOpenDelay,
	        forceSubMenuRender = props.forceSubMenuRender,
	        subMenuCloseDelay = props.subMenuCloseDelay,
	        builtinPlacements = props.builtinPlacements;

	    util$5.menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });
	    // Set onClick to null, to ignore propagated onClick event
	    delete props.onClick;
	    return _react2["default"].createElement(
	      'li',
	      _extends({}, props, mouseEvents, {
	        className: className,
	        role: 'menuitem'
	      }),
	      isInlineMode && title,
	      isInlineMode && children,
	      !isInlineMode && _react2["default"].createElement(
	        _rcTrigger2["default"],
	        {
	          prefixCls: prefixCls,
	          popupClassName: prefixCls + '-popup ' + popupClassName,
	          getPopupContainer: getPopupContainer,
	          builtinPlacements: _extends({}, _placements2["default"], builtinPlacements),
	          popupPlacement: popupPlacement,
	          popupVisible: isOpen,
	          popupAlign: popupAlign,
	          popup: children,
	          action: disabled ? [] : [triggerSubMenuAction],
	          mouseEnterDelay: subMenuOpenDelay,
	          mouseLeaveDelay: subMenuCloseDelay,
	          onPopupVisibleChange: this.onPopupVisibleChange,
	          forceRender: forceSubMenuRender
	        },
	        title
	      )
	    );
	  };

	  return SubMenu;
	}(_react2["default"].Component);

	SubMenu.propTypes = {
	  parentMenu: _propTypes2["default"].object,
	  title: _propTypes2["default"].node,
	  children: _propTypes2["default"].any,
	  selectedKeys: _propTypes2["default"].array,
	  openKeys: _propTypes2["default"].array,
	  onClick: _propTypes2["default"].func,
	  onOpenChange: _propTypes2["default"].func,
	  rootPrefixCls: _propTypes2["default"].string,
	  eventKey: _propTypes2["default"].string,
	  multiple: _propTypes2["default"].bool,
	  active: _propTypes2["default"].bool, // TODO: remove
	  onItemHover: _propTypes2["default"].func,
	  onSelect: _propTypes2["default"].func,
	  triggerSubMenuAction: _propTypes2["default"].string,
	  onDeselect: _propTypes2["default"].func,
	  onDestroy: _propTypes2["default"].func,
	  onMouseEnter: _propTypes2["default"].func,
	  onMouseLeave: _propTypes2["default"].func,
	  onTitleMouseEnter: _propTypes2["default"].func,
	  onTitleMouseLeave: _propTypes2["default"].func,
	  onTitleClick: _propTypes2["default"].func,
	  popupOffset: _propTypes2["default"].array,
	  isOpen: _propTypes2["default"].bool,
	  store: _propTypes2["default"].object,
	  mode: _propTypes2["default"].oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  manualRef: _propTypes2["default"].func,
	  itemIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node]),
	  expandIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node])
	};
	SubMenu.defaultProps = {
	  onMouseEnter: util$5.noop,
	  onMouseLeave: util$5.noop,
	  onTitleMouseEnter: util$5.noop,
	  onTitleMouseLeave: util$5.noop,
	  onTitleClick: util$5.noop,
	  manualRef: util$5.noop,
	  mode: 'vertical',
	  title: ''
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this.onDestroy = function (key) {
	    _this3.props.onDestroy(key);
	  };

	  this.onKeyDown = function (e) {
	    var keyCode = e.keyCode;
	    var menu = _this3.menuInstance;
	    var _props3 = _this3.props,
	        isOpen = _props3.isOpen,
	        store = _props3.store;

	    if (_this3.props.store.getState().keyboard) {
	      //是否启用键盘操作
	      if (keyCode === lib$1.KeyCode.ENTER) {
	        // this.onTitleClick(e);
	        menu && menu.onKeyDown && menu.onKeyDown(e);
	        updateDefaultActiveFirst(store, _this3.props.eventKey, true);
	        return true;
	      }

	      if (keyCode === lib$1.KeyCode.RIGHT) {
	        if (isOpen) {
	          menu.onKeyDown(e);
	        } else {
	          _this3.triggerOpenChange(true);
	          // need to update current menu's defaultActiveFirst value
	          updateDefaultActiveFirst(store, _this3.props.eventKey, true);
	        }
	        return true;
	      }
	      if (keyCode === lib$1.KeyCode.LEFT) {
	        var handled = void 0;
	        if (isOpen) {
	          handled = menu.onKeyDown(e);
	        } else {
	          return undefined;
	        }
	        if (!handled) {
	          _this3.triggerOpenChange(false);
	          handled = true;
	        }
	        return handled;
	      }
	      if (isOpen && (keyCode === lib$1.KeyCode.UP || keyCode === lib$1.KeyCode.DOWN)) {
	        return menu.onKeyDown(e);
	      }
	    }
	  };

	  this.onOpenChange = function (e) {
	    _this3.props.onOpenChange(e);
	  };

	  this.onPopupVisibleChange = function (visible) {
	    _this3.triggerOpenChange(visible, visible ? 'mouseenter' : 'mouseleave');
	  };

	  this.onMouseEnter = function (e) {
	    var _props4 = _this3.props,
	        key = _props4.eventKey,
	        onMouseEnter = _props4.onMouseEnter,
	        store = _props4.store;

	    updateDefaultActiveFirst(store, _this3.props.eventKey, false);
	    onMouseEnter({
	      key: key,
	      domEvent: e
	    });
	  };

	  this.onMouseLeave = function (e) {
	    var _props5 = _this3.props,
	        parentMenu = _props5.parentMenu,
	        eventKey = _props5.eventKey,
	        onMouseLeave = _props5.onMouseLeave;

	    parentMenu.subMenuInstance = _this3;
	    onMouseLeave({
	      key: eventKey,
	      domEvent: e
	    });
	  };

	  this.onTitleMouseEnter = function (domEvent) {
	    var _props6 = _this3.props,
	        key = _props6.eventKey,
	        onItemHover = _props6.onItemHover,
	        onTitleMouseEnter = _props6.onTitleMouseEnter;

	    onItemHover({
	      key: key,
	      hover: true
	    });
	    onTitleMouseEnter({
	      key: key,
	      domEvent: domEvent
	    });
	  };

	  this.onTitleMouseLeave = function (e) {
	    var _props7 = _this3.props,
	        parentMenu = _props7.parentMenu,
	        eventKey = _props7.eventKey,
	        onItemHover = _props7.onItemHover,
	        onTitleMouseLeave = _props7.onTitleMouseLeave;

	    parentMenu.subMenuInstance = _this3;
	    onItemHover({
	      key: eventKey,
	      hover: false
	    });
	    onTitleMouseLeave({
	      key: eventKey,
	      domEvent: e
	    });
	  };

	  this.onTitleClick = function (e) {
	    var props = _this3.props;

	    props.onTitleClick({
	      key: props.eventKey,
	      domEvent: e
	    });
	    if (props.triggerSubMenuAction === 'hover') {
	      return;
	    }
	    _this3.triggerOpenChange(!props.isOpen, 'click');
	    updateDefaultActiveFirst(props.store, _this3.props.eventKey, false);
	  };

	  this.onSubMenuClick = function (info) {
	    // in the case of overflowed submenu
	    // onClick is not copied over
	    if (typeof _this3.props.onClick === 'function') {
	      _this3.props.onClick(_this3.addKeyPath(info));
	    }
	  };

	  this.onSelect = function (info) {
	    _this3.props.onSelect(info);
	  };

	  this.onDeselect = function (info) {
	    _this3.props.onDeselect(info);
	  };

	  this.getPrefixCls = function () {
	    return _this3.props.rootPrefixCls + '-submenu';
	  };

	  this.getActiveClassName = function () {
	    return _this3.getPrefixCls() + '-active';
	  };

	  this.getDisabledClassName = function () {
	    return _this3.getPrefixCls() + '-disabled';
	  };

	  this.getSelectedClassName = function () {
	    return _this3.getPrefixCls() + '-selected';
	  };

	  this.getOpenClassName = function () {
	    return _this3.props.rootPrefixCls + '-submenu-open';
	  };

	  this.saveMenuInstance = function (c) {
	    // children menu instance
	    _this3.menuInstance = c;
	  };

	  this.addKeyPath = function (info) {
	    return _extends({}, info, {
	      keyPath: (info.keyPath || []).concat(_this3.props.eventKey)
	    });
	  };

	  this.triggerOpenChange = function (open, type) {
	    var key = _this3.props.eventKey;
	    var openChange = function openChange() {
	      _this3.onOpenChange({
	        key: key,
	        item: _this3,
	        trigger: type,
	        open: open
	      });
	    };
	    if (type === 'mouseenter') {
	      // make sure mouseenter happen after other menu item's mouseleave
	      _this3.mouseenterTimeout = setTimeout(function () {
	        openChange();
	      }, 0);
	    } else {
	      openChange();
	    }
	  };

	  this.isChildrenSelected = function () {
	    var ret = { find: false };
	    (0, util$5.loopMenuItemRecursively)(_this3.props.children, _this3.props.selectedKeys, ret);
	    return ret.find;
	  };

	  this.isOpen = function () {
	    return _this3.props.openKeys.indexOf(_this3.props.eventKey) !== -1;
	  };

	  this.adjustWidth = function () {
	    /* istanbul ignore if */
	    if (!_this3.subMenuTitle || !_this3.menuInstance) {
	      return;
	    }
	    var popupMenu = _reactDom2["default"].findDOMNode(_this3.menuInstance);
	    if (popupMenu.offsetWidth >= _this3.subMenuTitle.offsetWidth) {
	      return;
	    }

	    /* istanbul ignore next */
	    popupMenu.style.minWidth = _this3.subMenuTitle.offsetWidth + 'px';
	  };

	  this.saveSubMenuTitle = function (subMenuTitle) {
	    _this3.subMenuTitle = subMenuTitle;
	  };
	};

	var connected = (0, miniStore__default.connect)(function (_ref, _ref2) {
	  var openKeys = _ref.openKeys,
	      activeKey = _ref.activeKey,
	      selectedKeys = _ref.selectedKeys;
	  var eventKey = _ref2.eventKey,
	      subMenuKey = _ref2.subMenuKey;
	  return {
	    isOpen: openKeys.indexOf(eventKey) > -1,
	    active: activeKey[subMenuKey] === eventKey,
	    selectedKeys: selectedKeys
	  };
	})(SubMenu);

	connected.isSubMenu = true;

	exports["default"] = connected;
	});

	unwrapExports(SubMenu_1);
	var SubMenu_2 = SubMenu_1.SubMenu;

	// mutationobserver-shim v0.3.2 (github.com/megawac/MutationObserver.js)
	// Authors: Graeme Yeates (github.com/megawac) 
	window.MutationObserver=window.MutationObserver||function(w){function v(a){this.i=[];this.m=a;}function I(a){(function c(){var d=a.takeRecords();d.length&&a.m(d,a);a.h=setTimeout(c,v._period);})();}function p(a){var b={type:null,target:null,addedNodes:[],removedNodes:[],previousSibling:null,nextSibling:null,attributeName:null,attributeNamespace:null,oldValue:null},c;for(c in a)b[c]!==w&&a[c]!==w&&(b[c]=a[c]);return b}function J(a,b){var c=C(a,b);return function(d){var f=d.length,n;b.a&&3===a.nodeType&&
	a.nodeValue!==c.a&&d.push(new p({type:"characterData",target:a,oldValue:c.a}));b.b&&c.b&&A(d,a,c.b,b.f);if(b.c||b.g)n=K(d,a,c,b);if(n||d.length!==f)c=C(a,b);}}function L(a,b){return b.value}function M(a,b){return "style"!==b.name?b.value:a.style.cssText}function A(a,b,c,d){for(var f={},n=b.attributes,k,g,x=n.length;x--;)k=n[x],g=k.name,d&&d[g]===w||(D(b,k)!==c[g]&&a.push(p({type:"attributes",target:b,attributeName:g,oldValue:c[g],attributeNamespace:k.namespaceURI})),f[g]=!0);for(g in c)f[g]||a.push(p({target:b,
	type:"attributes",attributeName:g,oldValue:c[g]}));}function K(a,b,c,d){function f(b,c,f,k,y){var g=b.length-1;y=-~((g-y)/2);for(var h,l,e;e=b.pop();)h=f[e.j],l=k[e.l],d.c&&y&&Math.abs(e.j-e.l)>=g&&(a.push(p({type:"childList",target:c,addedNodes:[h],removedNodes:[h],nextSibling:h.nextSibling,previousSibling:h.previousSibling})),y--),d.b&&l.b&&A(a,h,l.b,d.f),d.a&&3===h.nodeType&&h.nodeValue!==l.a&&a.push(p({type:"characterData",target:h,oldValue:l.a})),d.g&&n(h,l);}function n(b,c){for(var g=b.childNodes,
	q=c.c,x=g.length,v=q?q.length:0,h,l,e,m,t,z=0,u=0,r=0;u<x||r<v;)m=g[u],t=(e=q[r])&&e.node,m===t?(d.b&&e.b&&A(a,m,e.b,d.f),d.a&&e.a!==w&&m.nodeValue!==e.a&&a.push(p({type:"characterData",target:m,oldValue:e.a})),l&&f(l,b,g,q,z),d.g&&(m.childNodes.length||e.c&&e.c.length)&&n(m,e),u++,r++):(k=!0,h||(h={},l=[]),m&&(h[e=E(m)]||(h[e]=!0,-1===(e=F(q,m,r,"node"))?d.c&&(a.push(p({type:"childList",target:b,addedNodes:[m],nextSibling:m.nextSibling,previousSibling:m.previousSibling})),z++):l.push({j:u,l:e})),
	u++),t&&t!==g[u]&&(h[e=E(t)]||(h[e]=!0,-1===(e=F(g,t,u))?d.c&&(a.push(p({type:"childList",target:c.node,removedNodes:[t],nextSibling:q[r+1],previousSibling:q[r-1]})),z--):l.push({j:e,l:r})),r++));l&&f(l,b,g,q,z);}var k;n(b,c);return k}function C(a,b){var c=!0;return function f(a){var k={node:a};!b.a||3!==a.nodeType&&8!==a.nodeType?(b.b&&c&&1===a.nodeType&&(k.b=G(a.attributes,function(c,f){if(!b.f||b.f[f.name])c[f.name]=D(a,f);return c})),c&&(b.c||b.a||b.b&&b.g)&&(k.c=N(a.childNodes,f)),c=b.g):k.a=
	a.nodeValue;return k}(a)}function E(a){try{return a.id||(a.mo_id=a.mo_id||H++)}catch(b){try{return a.nodeValue}catch(c){return H++}}}function N(a,b){for(var c=[],d=0;d<a.length;d++)c[d]=b(a[d],d,a);return c}function G(a,b){for(var c={},d=0;d<a.length;d++)c=b(c,a[d],d,a);return c}function F(a,b,c,d){for(;c<a.length;c++)if((d?a[c][d]:a[c])===b)return c;return -1}v._period=30;v.prototype={observe:function(a,b){for(var c={b:!!(b.attributes||b.attributeFilter||b.attributeOldValue),c:!!b.childList,g:!!b.subtree,
	a:!(!b.characterData&&!b.characterDataOldValue)},d=this.i,f=0;f<d.length;f++)d[f].s===a&&d.splice(f,1);b.attributeFilter&&(c.f=G(b.attributeFilter,function(a,b){a[b]=!0;return a}));d.push({s:a,o:J(a,c)});this.h||I(this);},takeRecords:function(){for(var a=[],b=this.i,c=0;c<b.length;c++)b[c].o(a);return a},disconnect:function(){this.i=[];clearTimeout(this.h);this.h=null;}};var B=document.createElement("i");B.style.top=0;var D=(B="null"!=B.attributes.style.value)?L:M,H=1;return v}(void 0);

	var DOMWrap_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _resizeObserverPolyfill2 = _interopRequireDefault(index$3);



	var _SubMenu2 = _interopRequireDefault(SubMenu_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var MENUITEM_OVERFLOWED_CLASSNAME = 'menuitem-overflowed';

	var DOMWrap = function (_React$Component) {
	  _inherits(DOMWrap, _React$Component);

	  function DOMWrap() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, DOMWrap);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      lastVisibleIndex: undefined
	    }, _this.getMenuItemNodes = function () {
	      var prefixCls = _this.props.prefixCls;

	      var ul = _reactDom2["default"].findDOMNode(_this);
	      if (!ul) {
	        return [];
	      }

	      // filter out all overflowed indicator placeholder
	      return [].slice.call(ul.children).filter(function (node) {
	        return node.className.split(' ').indexOf(prefixCls + '-overflowed-submenu') < 0;
	      });
	    }, _this.getOverflowedSubMenuItem = function (keyPrefix, overflowedItems, renderPlaceholder) {
	      var _this$props = _this.props,
	          overflowedIndicator = _this$props.overflowedIndicator,
	          level = _this$props.level,
	          mode = _this$props.mode,
	          prefixCls = _this$props.prefixCls,
	          theme = _this$props.theme,
	          propStyle = _this$props.style;

	      if (level !== 1 || mode !== 'horizontal') {
	        return null;
	      }
	      // put all the overflowed item inside a submenu
	      // with a title of overflow indicator ('...')
	      var copy = _this.props.children[0];

	      var _copy$props = copy.props,
	          throwAway = _copy$props.children,
	          title = _copy$props.title,
	          eventKey = _copy$props.eventKey,
	          rest = _objectWithoutProperties(_copy$props, ['children', 'title', 'eventKey']);

	      var style = _extends({}, propStyle);
	      var key = keyPrefix + '-overflowed-indicator';

	      if (overflowedItems.length === 0 && renderPlaceholder !== true) {
	        style = _extends({}, style, {
	          display: 'none'
	        });
	      } else if (renderPlaceholder) {
	        style = _extends({}, style, {
	          visibility: 'hidden',
	          // prevent from taking normal dom space
	          position: 'absolute'
	        });
	        key = key + '-placeholder';
	      }

	      var popupClassName = theme ? prefixCls + '-' + theme : '';
	      var props = {};
	      util$5.menuAllProps.forEach(function (k) {
	        if (rest[k] !== undefined) {
	          props[k] = rest[k];
	        }
	      });

	      return _react2["default"].createElement(
	        _SubMenu2["default"],
	        _extends({
	          title: overflowedIndicator,
	          className: prefixCls + '-overflowed-submenu',
	          popupClassName: popupClassName
	        }, props, {
	          key: key,
	          eventKey: keyPrefix + '-overflowed-indicator',
	          disabled: false,
	          style: style
	        }),
	        overflowedItems
	      );
	    }, _this.setChildrenWidthAndResize = function () {
	      if (_this.props.mode !== 'horizontal') {
	        return;
	      }
	      var ul = _reactDom2["default"].findDOMNode(_this);

	      if (!ul) {
	        return;
	      }

	      var ulChildrenNodes = ul.children;

	      if (!ulChildrenNodes || ulChildrenNodes.length === 0) {
	        return;
	      }

	      var lastOverflowedIndicatorPlaceholder = ul.children[ulChildrenNodes.length - 1];

	      // need last overflowed indicator for calculating length;
	      (0, util$5.setStyle)(lastOverflowedIndicatorPlaceholder, 'display', 'inline-block');

	      var menuItemNodes = _this.getMenuItemNodes();

	      // reset display attribute for all hidden elements caused by overflow to calculate updated width
	      // and then reset to original state after width calculation

	      var overflowedItems = menuItemNodes.filter(function (c) {
	        return c.className.split(' ').indexOf(MENUITEM_OVERFLOWED_CLASSNAME) >= 0;
	      });

	      overflowedItems.forEach(function (c) {
	        (0, util$5.setStyle)(c, 'display', 'inline-block');
	      });

	      _this.menuItemSizes = menuItemNodes.map(function (c) {
	        return (0, util$5.getWidth)(c);
	      });

	      overflowedItems.forEach(function (c) {
	        (0, util$5.setStyle)(c, 'display', 'none');
	      });
	      _this.overflowedIndicatorWidth = (0, util$5.getWidth)(ul.children[ul.children.length - 1]);
	      _this.originalTotalWidth = _this.menuItemSizes.reduce(function (acc, cur) {
	        return acc + cur;
	      }, 0);
	      _this.handleResize();
	      // prevent the overflowed indicator from taking space;
	      (0, util$5.setStyle)(lastOverflowedIndicatorPlaceholder, 'display', 'none');
	    }, _this.resizeObserver = null, _this.mutationObserver = null, _this.originalTotalWidth = 0, _this.overflowedItems = [], _this.menuItemSizes = [], _this.handleResize = function () {
	      if (_this.props.mode !== 'horizontal') {
	        return;
	      }

	      var ul = _reactDom2["default"].findDOMNode(_this);
	      if (!ul) {
	        return;
	      }
	      var width = (0, util$5.getWidth)(ul);

	      _this.overflowedItems = [];
	      var currentSumWidth = 0;

	      // index for last visible child in horizontal mode
	      var lastVisibleIndex = undefined;

	      if (_this.originalTotalWidth > width) {
	        lastVisibleIndex = -1;

	        _this.menuItemSizes.forEach(function (liWidth) {
	          currentSumWidth += liWidth;
	          if (currentSumWidth + _this.overflowedIndicatorWidth <= width) {
	            lastVisibleIndex++;
	          }
	        });
	      }

	      _this.setState({ lastVisibleIndex: lastVisibleIndex });
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  DOMWrap.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    this.setChildrenWidthAndResize();
	    if (this.props.level === 1 && this.props.mode === 'horizontal') {
	      var menuUl = _reactDom2["default"].findDOMNode(this);
	      if (!menuUl) {
	        return;
	      }
	      this.resizeObserver = new _resizeObserverPolyfill2["default"](function (entries) {
	        entries.forEach(_this2.setChildrenWidthAndResize);
	      });

	      [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
	        _this2.resizeObserver.observe(el);
	      });

	      if (typeof MutationObserver !== 'undefined') {
	        this.mutationObserver = new MutationObserver(function () {
	          _this2.resizeObserver.disconnect();
	          [].slice.call(menuUl.children).concat(menuUl).forEach(function (el) {
	            _this2.resizeObserver.observe(el);
	          });
	          _this2.setChildrenWidthAndResize();
	        });
	        this.mutationObserver.observe(menuUl, { attributes: false, childList: true, subTree: false });
	      }
	    }
	  };

	  DOMWrap.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.resizeObserver) {
	      this.resizeObserver.disconnect();
	    }
	    if (this.mutationObserver) {
	      this.resizeObserver.disconnect();
	    }
	  };

	  // get all valid menuItem nodes


	  // memorize rendered menuSize


	  // original scroll size of the list


	  // copy of overflowed items


	  // cache item of the original items (so we can track the size and order)


	  DOMWrap.prototype.renderChildren = function renderChildren(children) {
	    var _this3 = this;

	    // need to take care of overflowed items in horizontal mode
	    var lastVisibleIndex = this.state.lastVisibleIndex;

	    return (children || []).reduce(function (acc, childNode, index) {
	      var item = childNode;
	      if (_this3.props.mode === 'horizontal') {
	        var overflowed = _this3.getOverflowedSubMenuItem(childNode.props.eventKey, []);
	        if (lastVisibleIndex !== undefined && _this3.props.className.indexOf(_this3.props.prefixCls + '-root') !== -1) {
	          if (index > lastVisibleIndex) {
	            item = _react2["default"].cloneElement(childNode,
	            // 这里修改 eventKey 是为了防止隐藏状态下还会触发 openkeys 事件
	            {
	              style: { display: 'none' },
	              eventKey: childNode.props.eventKey + '-hidden',
	              className: childNode.className + ' ' + MENUITEM_OVERFLOWED_CLASSNAME
	            });
	          }
	          if (index === lastVisibleIndex + 1) {
	            _this3.overflowedItems = children.slice(lastVisibleIndex + 1).map(function (c) {
	              return _react2["default"].cloneElement(c,
	              // children[index].key will become '.$key' in clone by default,
	              // we have to overwrite with the correct key explicitly
	              { key: c.props.eventKey, mode: 'vertical-left' });
	            });

	            overflowed = _this3.getOverflowedSubMenuItem(childNode.props.eventKey, _this3.overflowedItems);
	          }
	        }

	        // const ret = [...acc, overflowed, item];//更改
	        var ret = [].concat(_toConsumableArray(acc), [item]);

	        if (index === children.length - 1) {
	          // need a placeholder for calculating overflowed indicator width
	          ret.push(_this3.getOverflowedSubMenuItem(childNode.props.eventKey, [], true));
	        }
	        return ret;
	      }
	      return [].concat(_toConsumableArray(acc), [item]);
	    }, []);
	  };

	  DOMWrap.prototype.render = function render() {
	    var _props = this.props,
	        hiddenClassName = _props.hiddenClassName,
	        visible = _props.visible,
	        prefixCls = _props.prefixCls,
	        overflowedIndicator = _props.overflowedIndicator,
	        mode = _props.mode,
	        level = _props.level,
	        Tag = _props.tag,
	        children = _props.children,
	        theme = _props.theme,
	        rest = _objectWithoutProperties(_props, ['hiddenClassName', 'visible', 'prefixCls', 'overflowedIndicator', 'mode', 'level', 'tag', 'children', 'theme']);

	    if (!visible) {
	      rest.className += ' ' + hiddenClassName;
	    }

	    return _react2["default"].createElement(
	      Tag,
	      rest,
	      this.renderChildren(this.props.children)
	    );
	  };

	  return DOMWrap;
	}(_react2["default"].Component);

	DOMWrap.propTypes = {
	  className: _propTypes2["default"].string,
	  children: _propTypes2["default"].node,
	  mode: _propTypes2["default"].oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  prefixCls: _propTypes2["default"].string,
	  level: _propTypes2["default"].number,
	  theme: _propTypes2["default"].string,
	  overflowedIndicator: _propTypes2["default"].node,
	  visible: _propTypes2["default"].bool,
	  hiddenClassName: _propTypes2["default"].string,
	  tag: _propTypes2["default"].string,
	  style: _propTypes2["default"].object
	};

	DOMWrap.defaultProps = {
	  tag: 'div',
	  className: ''
	};

	exports["default"] = DOMWrap;
	module.exports = exports['default'];
	});

	unwrapExports(DOMWrap_1);

	var SubPopupMenu_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SubPopupMenu = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
	                                                                                                                                                                                                                                                                  * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                  * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                  */


	exports.getActiveKey = getActiveKey;
	exports.saveRef = saveRef;



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);







	var _createChainedFunction2 = _interopRequireDefault(createChainedFunction_1$1);



	var _classnames2 = _interopRequireDefault(classnames);





	var _DOMWrap2 = _interopRequireDefault(DOMWrap_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function allDisabled(arr) {
	  if (!arr.length) {
	    return true;
	  }
	  return arr.every(function (c) {
	    return !!c.props.disabled;
	  });
	}

	function updateActiveKey(store, menuId, activeKey) {
	  var state = store.getState();
	  store.setState({
	    activeKey: _extends({}, state.activeKey, _defineProperty({}, menuId, activeKey))
	  });
	}

	function getEventKey(props) {
	  // when eventKey not available ,it's menu and return menu id '0-menu-'
	  return props.eventKey || '0-menu-';
	}

	function getActiveKey(props, originalActiveKey) {
	  var activeKey = originalActiveKey;
	  var children = props.children,
	      eventKey = props.eventKey;

	  if (activeKey) {
	    var found = void 0;
	    (0, util$5.loopMenuItem)(children, function (c, i) {
	      if (c && !c.props.disabled && activeKey === (0, util$5.getKeyFromChildrenIndex)(c, eventKey, i)) {
	        found = true;
	      }
	    });
	    if (found) {
	      return activeKey;
	    }
	  }
	  activeKey = null;
	  if (props.defaultActiveFirst) {
	    (0, util$5.loopMenuItem)(children, function (c, i) {
	      if (!activeKey && c && !c.props.disabled) {
	        activeKey = (0, util$5.getKeyFromChildrenIndex)(c, eventKey, i);
	      }
	    });
	    return activeKey;
	  }
	  return activeKey;
	}

	function saveRef(c) {
	  if (c) {
	    var index = this.instanceArray.indexOf(c);
	    if (index !== -1) {
	      // update component if it's already inside instanceArray
	      this.instanceArray[index] = c;
	    } else {
	      // add component if it's not in instanceArray yet;
	      this.instanceArray.push(c);
	    }
	  }
	}

	var SubPopupMenu = exports.SubPopupMenu = function (_React$Component) {
	  _inherits(SubPopupMenu, _React$Component);

	  function SubPopupMenu(props) {
	    _classCallCheck(this, SubPopupMenu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    props.store.setState({
	      activeKey: _extends({}, props.store.getState().activeKey, _defineProperty({}, props.eventKey, getActiveKey(props, props.activeKey)))
	    });

	    _this.instanceArray = [];
	    return _this;
	  }

	  SubPopupMenu.prototype.componentDidMount = function componentDidMount() {
	    // invoke customized ref to expose component to mixin
	    if (this.props.manualRef) {
	      this.props.manualRef(this);
	    }
	  };

	  SubPopupMenu.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return this.props.visible || nextProps.visible;
	  };

	  SubPopupMenu.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var props = this.props;
	    var originalActiveKey = 'activeKey' in props ? props.activeKey : props.store.getState().activeKey[getEventKey(props)];
	    var activeKey = getActiveKey(props, originalActiveKey);
	    if (activeKey !== originalActiveKey) {
	      updateActiveKey(props.store, getEventKey(props), activeKey);
	    } else if ('activeKey' in prevProps) {
	      // If prev activeKey is not same as current activeKey,
	      // we should set it.
	      var prevActiveKey = getActiveKey(prevProps, prevProps.activeKey);
	      if (activeKey !== prevActiveKey) {
	        updateActiveKey(props.store, getEventKey(props), activeKey);
	      }
	    }
	  };

	  // all keyboard events callbacks run from here at first


	  SubPopupMenu.prototype.render = function render() {
	    var _this2 = this;

	    var props = _objectWithoutProperties(this.props, []);

	    this.instanceArray = [];
	    var className = (0, _classnames2["default"])(props.prefixCls, props.className, props.prefixCls + '-' + props.mode);
	    var domProps = {
	      className: className,
	      // role could be 'select' and by default set to menu
	      role: props.role || 'menu'
	    };
	    if (props.id) {
	      domProps.id = props.id;
	    }
	    if (props.focusable) {
	      domProps.tabIndex = this.props.tabIndex;
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    var prefixCls = props.prefixCls,
	        eventKey = props.eventKey,
	        visible = props.visible,
	        level = props.level,
	        mode = props.mode,
	        overflowedIndicator = props.overflowedIndicator,
	        theme = props.theme;

	    util$5.menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });

	    // Otherwise, the propagated click event will trigger another onClick
	    delete props.onClick;
	    delete props.keyboard;

	    return (
	      // ESLint is not smart enough to know that the type of `children` was checked.
	      /* eslint-disable */
	      _react2["default"].createElement(
	        _DOMWrap2["default"],
	        _extends({}, props, {
	          prefixCls: prefixCls,
	          mode: mode,
	          tag: 'ul',
	          level: level,
	          theme: theme,
	          hiddenClassName: prefixCls + '-hidden',
	          visible: visible,
	          overflowedIndicator: overflowedIndicator
	        }, domProps),
	        _react2["default"].Children.map(props.children, function (c, i) {
	          return _this2.renderMenuItem(c, i, eventKey || '0-menu-');
	        })
	      )
	      /*eslint-enable */

	    );
	  };

	  return SubPopupMenu;
	}(_react2["default"].Component);

	SubPopupMenu.propTypes = {
	  onSelect: _propTypes2["default"].func,
	  onClick: _propTypes2["default"].func,
	  onDeselect: _propTypes2["default"].func,
	  onOpenChange: _propTypes2["default"].func,
	  onDestroy: _propTypes2["default"].func,
	  openTransitionName: _propTypes2["default"].string,
	  openAnimation: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
	  openKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  visible: _propTypes2["default"].bool,
	  children: _propTypes2["default"].any,
	  parentMenu: _propTypes2["default"].object,
	  eventKey: _propTypes2["default"].string,
	  store: _propTypes2["default"].shape({
	    getState: _propTypes2["default"].func,
	    setState: _propTypes2["default"].func
	  }),

	  // adding in refactor
	  focusable: _propTypes2["default"].bool,
	  multiple: _propTypes2["default"].bool,
	  style: _propTypes2["default"].object,
	  defaultActiveFirst: _propTypes2["default"].bool,
	  activeKey: _propTypes2["default"].string,
	  selectedKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  defaultSelectedKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  defaultOpenKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  level: _propTypes2["default"].number,
	  mode: _propTypes2["default"].oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  triggerSubMenuAction: _propTypes2["default"].oneOf(['click', 'hover']),
	  inlineIndent: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	  manualRef: _propTypes2["default"].func,
	  itemIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node]),
	  expandIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node])
	};
	SubPopupMenu.defaultProps = {
	  prefixCls: 'rc-menu',
	  className: '',
	  mode: 'vertical',
	  level: 1,
	  inlineIndent: 24,
	  visible: true,
	  focusable: true,
	  style: {},
	  manualRef: util$5.noop
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this.onKeyDown = function (e, callback) {
	    var keyCode = e.keyCode;
	    var handled = void 0;
	    _this3.getFlatInstanceArray().forEach(function (obj) {
	      if (obj && obj.props.active && obj.onKeyDown) {
	        handled = obj.onKeyDown(e);
	      }
	    });
	    if (handled) {
	      return 1;
	    }
	    var activeItem = null;
	    if (keyCode === lib$1.KeyCode.UP || keyCode === lib$1.KeyCode.DOWN) {
	      if (_this3.props.store.getState().keyboard) {
	        //是否启用键盘操作
	        activeItem = _this3.step(keyCode === lib$1.KeyCode.UP ? -2 : 2);
	      }
	    }

	    if (activeItem) {
	      e.preventDefault();
	      updateActiveKey(_this3.props.store, getEventKey(_this3.props), activeItem.props.eventKey);

	      if (typeof callback === 'function') {
	        callback(activeItem);
	      }

	      return 1;
	    }
	  };

	  this.onItemHover = function (e) {
	    var key = e.key,
	        hover = e.hover;

	    updateActiveKey(_this3.props.store, getEventKey(_this3.props), hover ? key : null);
	  };

	  this.onDeselect = function (selectInfo) {
	    _this3.props.onDeselect(selectInfo);
	  };

	  this.onSelect = function (selectInfo) {
	    _this3.props.onSelect(selectInfo);
	  };

	  this.onClick = function (e) {
	    _this3.props.onClick(e);
	  };

	  this.onOpenChange = function (e) {
	    _this3.props.onOpenChange(e);
	  };

	  this.onDestroy = function (key) {
	    /* istanbul ignore next */
	    _this3.props.onDestroy(key);
	  };

	  this.getFlatInstanceArray = function () {
	    return _this3.instanceArray;
	  };

	  this.getOpenTransitionName = function () {
	    return _this3.props.openTransitionName;
	  };

	  this.step = function (direction) {
	    var children = _this3.getFlatInstanceArray();
	    var activeKey = _this3.props.store.getState().activeKey[getEventKey(_this3.props)];
	    var len = children.length;
	    if (!len) {
	      return null;
	    }
	    if (direction < 0) {
	      children = children.concat().reverse();
	    }
	    // find current activeIndex
	    var activeIndex = -1;
	    children.every(function (c, ci) {
	      if (c && c.props.eventKey === activeKey) {
	        activeIndex = ci;
	        return false;
	      }
	      return true;
	    });
	    if (!_this3.props.defaultActiveFirst && activeIndex !== -1 && allDisabled(children.slice(activeIndex, len - 1))) {
	      return undefined;
	    }
	    var start = (activeIndex + 1) % len;
	    var i = start;

	    do {
	      var child = children[i];
	      if (!child || child.props.disabled) {
	        i = (i + 1) % len;
	      } else {
	        return child;
	      }
	    } while (i !== start);

	    return null;
	  };

	  this.renderCommonMenuItem = function (child, i, extraProps) {
	    var state = _this3.props.store.getState();
	    var props = _this3.props;
	    var key = (0, util$5.getKeyFromChildrenIndex)(child, props.eventKey, i);
	    var childProps = child.props;
	    var isActive = key === state.activeKey;
	    var newChildProps = _extends({
	      mode: childProps.mode || props.mode,
	      level: props.level,
	      inlineIndent: props.inlineIndent,
	      renderMenuItem: _this3.renderMenuItem,
	      rootPrefixCls: props.prefixCls,
	      index: i,
	      parentMenu: props.parentMenu,
	      // customized ref function, need to be invoked manually in child's componentDidMount
	      manualRef: childProps.disabled ? undefined : (0, _createChainedFunction2["default"])(child.ref, saveRef.bind(_this3)),
	      eventKey: key,
	      active: !childProps.disabled && isActive,
	      multiple: props.multiple,
	      onClick: function onClick(e) {
	        (childProps.onClick || util$5.noop)(e);
	        _this3.onClick(e);
	      },
	      onItemHover: _this3.onItemHover,
	      openTransitionName: _this3.getOpenTransitionName(),
	      openAnimation: props.openAnimation,
	      subMenuOpenDelay: props.subMenuOpenDelay,
	      subMenuCloseDelay: props.subMenuCloseDelay,
	      forceSubMenuRender: props.forceSubMenuRender,
	      onOpenChange: _this3.onOpenChange,
	      onDeselect: _this3.onDeselect,
	      onSelect: _this3.onSelect,
	      builtinPlacements: props.builtinPlacements,
	      itemIcon: childProps.itemIcon || _this3.props.itemIcon,
	      expandIcon: childProps.expandIcon || _this3.props.expandIcon
	    }, extraProps);
	    if (props.mode === 'inline') {
	      newChildProps.triggerSubMenuAction = 'click';
	    }
	    return _react2["default"].cloneElement(child, newChildProps);
	  };

	  this.renderMenuItem = function (c, i, subMenuKey) {
	    /* istanbul ignore if */

	    if (!c) {
	      return null;
	    }
	    var state = _this3.props.store.getState();
	    var extraProps = {
	      openKeys: state.openKeys,
	      selectedKeys: state.selectedKeys,
	      triggerSubMenuAction: _this3.props.triggerSubMenuAction,
	      subMenuKey: subMenuKey
	    };
	    return _this3.renderCommonMenuItem(c, i, extraProps);
	  };
	};

	var connected = (0, miniStore__default.connect)()(SubPopupMenu);

	exports["default"] = connected;
	});

	unwrapExports(SubPopupMenu_1);
	var SubPopupMenu_2 = SubPopupMenu_1.SubPopupMenu;
	var SubPopupMenu_3 = SubPopupMenu_1.getActiveKey;
	var SubPopupMenu_4 = SubPopupMenu_1.saveRef;

	var Menu_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _SubPopupMenu2 = _interopRequireDefault(SubPopupMenu_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var Menu = function (_React$Component) {
	  _inherits(Menu, _React$Component);

	  function Menu(props) {
	    _classCallCheck(this, Menu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _initialiseProps.call(_this);

	    _this.isRootMenu = true;

	    var selectedKeys = props.defaultSelectedKeys;
	    var openKeys = props.defaultOpenKeys;
	    if ('selectedKeys' in props) {
	      selectedKeys = props.selectedKeys || [];
	    }
	    if ('openKeys' in props) {
	      openKeys = props.openKeys || [];
	    }

	    _this.store = (0, miniStore__default.create)({
	      selectedKeys: selectedKeys,
	      openKeys: openKeys,
	      activeKey: { '0-menu-': (0, SubPopupMenu_1.getActiveKey)(props, props.activeKey) }
	    });
	    return _this;
	  }

	  Menu.prototype.componentDidMount = function componentDidMount() {
	    this.updateMiniStore();
	  };

	  Menu.prototype.componentDidUpdate = function componentDidUpdate() {
	    this.updateMiniStore();
	  };

	  // onKeyDown needs to be exposed as a instance method
	  // e.g., in rc-select, we need to navigate menu item while
	  // current active item is rc-select input box rather than the menu itself


	  Menu.prototype.updateMiniStore = function updateMiniStore() {
	    if ('selectedKeys' in this.props) {
	      this.store.setState({
	        selectedKeys: this.props.selectedKeys || [],
	        keyboard: this.props.keyboard || false
	      });
	    }
	    if ('openKeys' in this.props) {
	      this.store.setState({
	        openKeys: this.props.openKeys || [],
	        keyboard: this.props.keyboard || false
	      });
	    }
	  };

	  Menu.prototype.render = function render() {
	    var _this2 = this;

	    var props = _objectWithoutProperties(this.props, []);

	    props.className += ' ' + props.prefixCls + '-root';
	    props = _extends({}, props, {
	      onClick: this.onClick,
	      onOpenChange: this.onOpenChange,
	      onDeselect: this.onDeselect,
	      onSelect: this.onSelect,
	      openTransitionName: this.getOpenTransitionName(),
	      parentMenu: this
	    });
	    return _react2["default"].createElement(
	      miniStore__default.Provider,
	      { store: this.store },
	      _react2["default"].createElement(
	        _SubPopupMenu2["default"],
	        _extends({}, props, { onFocus: this.focus, ref: function ref(c) {
	            return _this2.innerMenu = c;
	          } }),
	        this.props.children
	      )
	    );
	  };

	  return Menu;
	}(_react2["default"].Component);

	Menu.propTypes = {
	  defaultSelectedKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  defaultActiveFirst: _propTypes2["default"].bool,
	  selectedKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  defaultOpenKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  openKeys: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
	  mode: _propTypes2["default"].oneOf(['horizontal', 'vertical', 'vertical-left', 'vertical-right', 'inline']),
	  getPopupContainer: _propTypes2["default"].func,
	  onClick: _propTypes2["default"].func,
	  onSelect: _propTypes2["default"].func,
	  onDeselect: _propTypes2["default"].func,
	  onDestroy: _propTypes2["default"].func,
	  openTransitionName: _propTypes2["default"].string,
	  openAnimation: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
	  subMenuOpenDelay: _propTypes2["default"].number,
	  subMenuCloseDelay: _propTypes2["default"].number,
	  forceSubMenuRender: _propTypes2["default"].bool,
	  triggerSubMenuAction: _propTypes2["default"].string,
	  level: _propTypes2["default"].number,
	  selectable: _propTypes2["default"].bool,
	  multiple: _propTypes2["default"].bool,
	  children: _propTypes2["default"].any,
	  className: _propTypes2["default"].string,
	  style: _propTypes2["default"].object,
	  activeKey: _propTypes2["default"].string,
	  prefixCls: _propTypes2["default"].string,
	  builtinPlacements: _propTypes2["default"].object,
	  itemIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node]),
	  expandIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node]),
	  overflowedIndicator: _propTypes2["default"].node,
	  keyboard: _propTypes2["default"].bool
	};
	Menu.defaultProps = {
	  selectable: true,
	  onClick: util$5.noop,
	  onSelect: util$5.noop,
	  onOpenChange: util$5.noop,
	  onDeselect: util$5.noop,
	  defaultSelectedKeys: [],
	  defaultOpenKeys: [],
	  subMenuOpenDelay: 0.1,
	  subMenuCloseDelay: 0.1,
	  triggerSubMenuAction: 'hover',
	  prefixCls: 'rc-menu',
	  className: '',
	  mode: 'vertical',
	  style: {},
	  builtinPlacements: {},
	  overflowedIndicator: _react2["default"].createElement(
	    'span',
	    null,
	    '\xB7\xB7\xB7'
	  ),
	  keyboard: false,
	  tabIndex: '0'
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this3 = this;

	  this.onSelect = function (selectInfo) {
	    var props = _this3.props;
	    if (props.selectable) {
	      // root menu
	      var selectedKeys = _this3.store.getState().selectedKeys;
	      var selectedKey = selectInfo.key;
	      if (props.multiple) {
	        selectedKeys = selectedKeys.concat([selectedKey]);
	      } else {
	        selectedKeys = [selectedKey];
	      }
	      if (!('selectedKeys' in props)) {
	        _this3.store.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onSelect(_extends({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  };

	  this.onClick = function (e) {
	    _this3.props.onClick(e);
	  };

	  this.onKeyDown = function (e, callback) {
	    _this3.innerMenu.getWrappedInstance().onKeyDown(e, callback);
	  };

	  this.onOpenChange = function (event) {
	    var props = _this3.props;
	    var openKeys = _this3.store.getState().openKeys.concat();
	    var changed = false;
	    var processSingle = function processSingle(e) {
	      var oneChanged = false;
	      if (e.open) {
	        oneChanged = openKeys.indexOf(e.key) === -1;
	        if (oneChanged) {
	          openKeys.push(e.key);
	        }
	      } else {
	        var index = openKeys.indexOf(e.key);
	        oneChanged = index !== -1;
	        if (oneChanged) {
	          openKeys.splice(index, 1);
	        }
	      }
	      changed = changed || oneChanged;
	    };
	    if (Array.isArray(event)) {
	      // batch change call
	      event.forEach(processSingle);
	    } else {
	      processSingle(event);
	    }
	    if (changed) {
	      if (!('openKeys' in _this3.props)) {
	        _this3.store.setState({ openKeys: openKeys });
	      }
	      props.onOpenChange(openKeys);
	    }
	  };

	  this.onDeselect = function (selectInfo) {
	    var props = _this3.props;
	    if (props.selectable) {
	      var selectedKeys = _this3.store.getState().selectedKeys.concat();
	      var selectedKey = selectInfo.key;
	      var index = selectedKeys.indexOf(selectedKey);
	      if (index !== -1) {
	        selectedKeys.splice(index, 1);
	      }
	      if (!('selectedKeys' in props)) {
	        _this3.store.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onDeselect(_extends({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  };

	  this.getOpenTransitionName = function () {
	    var props = _this3.props;
	    var transitionName = props.openTransitionName;
	    var animationName = props.openAnimation;
	    if (!transitionName && typeof animationName === 'string') {
	      transitionName = props.prefixCls + '-open-' + animationName;
	    }
	    return transitionName;
	  };

	  this.focus = function () {
	    (0, util$5.fireKeyEvent)(_reactDom2["default"].findDOMNode(_this3.innerMenu), 'keydown', 40);
	    _this3.props.onFocus && _this3.props.onFocus();
	  };
	};

	exports["default"] = Menu;
	module.exports = exports['default'];
	});

	unwrapExports(Menu_1);

	var MenuItem_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MenuItem = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _classnames2 = _interopRequireDefault(classnames);



	var _domScrollIntoView2 = _interopRequireDefault(lib$2);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	/* eslint react/no-is-mounted:0 */

	var MenuItem = exports.MenuItem = function (_React$Component) {
	  _inherits(MenuItem, _React$Component);

	  function MenuItem(props) {
	    _classCallCheck(this, MenuItem);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.onKeyDown = function (e) {
	      var keyCode = e.keyCode;
	      if (keyCode === lib$1.KeyCode.ENTER) {
	        _this.onClick(e);
	        return true;
	      }
	    };

	    _this.onMouseLeave = function (e) {
	      var _this$props = _this.props,
	          eventKey = _this$props.eventKey,
	          onItemHover = _this$props.onItemHover,
	          onMouseLeave = _this$props.onMouseLeave;

	      onItemHover({
	        key: eventKey,
	        hover: false
	      });
	      onMouseLeave({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onMouseEnter = function (e) {
	      var _this$props2 = _this.props,
	          eventKey = _this$props2.eventKey,
	          onItemHover = _this$props2.onItemHover,
	          onMouseEnter = _this$props2.onMouseEnter;

	      onItemHover({
	        key: eventKey,
	        hover: true
	      });
	      onMouseEnter({
	        key: eventKey,
	        domEvent: e
	      });
	    };

	    _this.onClick = function (e) {
	      var _this$props3 = _this.props,
	          eventKey = _this$props3.eventKey,
	          multiple = _this$props3.multiple,
	          onClick = _this$props3.onClick,
	          onSelect = _this$props3.onSelect,
	          onDeselect = _this$props3.onDeselect,
	          isSelected = _this$props3.isSelected;

	      var info = {
	        key: eventKey,
	        keyPath: [eventKey],
	        item: _this,
	        domEvent: e
	      };
	      onClick(info);
	      if (multiple) {
	        if (isSelected) {
	          onDeselect(info);
	        } else {
	          onSelect(info);
	        }
	      } else if (!isSelected) {
	        onSelect(info);
	      }
	    };

	    return _this;
	  }

	  MenuItem.prototype.componentDidMount = function componentDidMount() {
	    // invoke customized ref to expose component to mixin
	    this.callRef();
	  };

	  MenuItem.prototype.componentDidUpdate = function componentDidUpdate() {
	    if (this.props.active) {
	      (0, _domScrollIntoView2["default"])(_reactDom2["default"].findDOMNode(this), _reactDom2["default"].findDOMNode(this.props.parentMenu), {
	        onlyScrollIfNeeded: true
	      });
	    }
	    this.callRef();
	  };

	  MenuItem.prototype.componentWillUnmount = function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	  };

	  MenuItem.prototype.getPrefixCls = function getPrefixCls() {
	    return this.props.rootPrefixCls + '-item';
	  };

	  MenuItem.prototype.getActiveClassName = function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  };

	  MenuItem.prototype.getSelectedClassName = function getSelectedClassName() {
	    return this.getPrefixCls() + '-selected';
	  };

	  MenuItem.prototype.getDisabledClassName = function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  };

	  MenuItem.prototype.callRef = function callRef() {
	    if (this.props.manualRef) {
	      this.props.manualRef(this);
	    }
	  };

	  MenuItem.prototype.render = function render() {
	    var _classNames;

	    var props = _extends({}, this.props);
	    var className = (0, _classnames2["default"])(this.getPrefixCls(), props.className, (_classNames = {}, _defineProperty(_classNames, this.getActiveClassName(), !props.disabled && props.active), _defineProperty(_classNames, this.getSelectedClassName(), props.isSelected), _defineProperty(_classNames, this.getDisabledClassName(), props.disabled), _classNames));
	    var attrs = _extends({}, props.attribute, {
	      title: props.title,
	      className: className,
	      // set to menuitem by default
	      role: props.role || 'menuitem',
	      'aria-disabled': props.disabled
	    });

	    if (props.role === 'option') {
	      // overwrite to option
	      attrs = _extends({}, attrs, {
	        role: 'option',
	        'aria-selected': props.isSelected
	      });
	    } else if (props.role === null || props.role === 'none') {
	      // sometimes we want to specify role inside <li/> element
	      // <li><a role='menuitem'>Link</a></li> would be a good example
	      // in this case the role on <li/> should be "none" to
	      // remove the implied listitem role.
	      // https://www.w3.org/TR/wai-aria-practices-1.1/examples/menubar/menubar-1/menubar-1.html
	      attrs.role = 'none';
	    }
	    // In case that onClick/onMouseLeave/onMouseEnter is passed down from owner
	    var mouseEvent = {
	      onClick: props.disabled ? null : this.onClick,
	      onMouseLeave: props.disabled ? null : this.onMouseLeave,
	      onMouseEnter: props.disabled ? null : this.onMouseEnter
	    };
	    var style = _extends({}, props.style);
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    util$5.menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });
	    var icon = this.props.itemIcon;
	    if (typeof this.props.itemIcon === 'function') {
	      icon = _react2["default"].createElement(this.props.itemIcon, this.props);
	    }
	    return _react2["default"].createElement(
	      'li',
	      _extends({}, props, attrs, mouseEvent, {
	        style: style
	      }),
	      props.children,
	      icon
	    );
	  };

	  return MenuItem;
	}(_react2["default"].Component);

	MenuItem.propTypes = {
	  attribute: _propTypes2["default"].object,
	  rootPrefixCls: _propTypes2["default"].string,
	  eventKey: _propTypes2["default"].string,
	  active: _propTypes2["default"].bool,
	  children: _propTypes2["default"].any,
	  selectedKeys: _propTypes2["default"].array,
	  disabled: _propTypes2["default"].bool,
	  title: _propTypes2["default"].string,
	  onItemHover: _propTypes2["default"].func,
	  onSelect: _propTypes2["default"].func,
	  onClick: _propTypes2["default"].func,
	  onDeselect: _propTypes2["default"].func,
	  parentMenu: _propTypes2["default"].object,
	  onDestroy: _propTypes2["default"].func,
	  onMouseEnter: _propTypes2["default"].func,
	  onMouseLeave: _propTypes2["default"].func,
	  multiple: _propTypes2["default"].bool,
	  isSelected: _propTypes2["default"].bool,
	  manualRef: _propTypes2["default"].func,
	  itemIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].func, _propTypes2["default"].node])
	};
	MenuItem.defaultProps = {
	  onSelect: util$5.noop,
	  onMouseEnter: util$5.noop,
	  onMouseLeave: util$5.noop,
	  manualRef: util$5.noop
	};


	MenuItem.isMenuItem = true;

	var connected = (0, miniStore__default.connect)(function (_ref, _ref2) {
	  var activeKey = _ref.activeKey,
	      selectedKeys = _ref.selectedKeys;
	  var eventKey = _ref2.eventKey,
	      subMenuKey = _ref2.subMenuKey;
	  return {
	    active: activeKey[subMenuKey] === eventKey,
	    isSelected: selectedKeys.indexOf(eventKey) !== -1
	  };
	})(MenuItem);

	exports["default"] = connected;
	});

	unwrapExports(MenuItem_1);
	var MenuItem_2 = MenuItem_1.MenuItem;

	var MenuItemGroup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var MenuItemGroup = function (_React$Component) {
	  _inherits(MenuItemGroup, _React$Component);

	  function MenuItemGroup() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, MenuItemGroup);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.renderInnerMenuItem = function (item) {
	      var _this$props = _this.props,
	          renderMenuItem = _this$props.renderMenuItem,
	          index = _this$props.index;

	      return renderMenuItem(item, index, _this.props.subMenuKey);
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  MenuItemGroup.prototype.render = function render() {
	    var props = _objectWithoutProperties(this.props, []);

	    var _props$className = props.className,
	        className = _props$className === undefined ? '' : _props$className,
	        rootPrefixCls = props.rootPrefixCls;

	    var titleClassName = rootPrefixCls + '-item-group-title';
	    var listClassName = rootPrefixCls + '-item-group-list';
	    var title = props.title,
	        children = props.children;

	    util$5.menuAllProps.forEach(function (key) {
	      return delete props[key];
	    });

	    // Set onClick to null, to ignore propagated onClick event
	    delete props.onClick;

	    return _react2["default"].createElement(
	      'li',
	      _extends({}, props, { className: className + ' ' + rootPrefixCls + '-item-group' }),
	      _react2["default"].createElement(
	        'div',
	        {
	          className: titleClassName,
	          title: typeof title === 'string' ? title : undefined
	        },
	        title
	      ),
	      _react2["default"].createElement(
	        'ul',
	        { className: listClassName },
	        _react2["default"].Children.map(children, this.renderInnerMenuItem)
	      )
	    );
	  };

	  return MenuItemGroup;
	}(_react2["default"].Component);

	MenuItemGroup.propTypes = {
	  renderMenuItem: _propTypes2["default"].func,
	  index: _propTypes2["default"].number,
	  className: _propTypes2["default"].string,
	  subMenuKey: _propTypes2["default"].string,
	  rootPrefixCls: _propTypes2["default"].string
	};
	MenuItemGroup.defaultProps = {
	  disabled: true
	};


	MenuItemGroup.isMenuItemGroup = true;

	exports["default"] = MenuItemGroup;
	module.exports = exports['default'];
	});

	unwrapExports(MenuItemGroup_1);

	var Divider_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * This source code is quoted from rc-menu.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               * homepage: https://github.com/react-component/menu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */


	var Divider = function (_React$Component) {
	  _inherits(Divider, _React$Component);

	  function Divider() {
	    _classCallCheck(this, Divider);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Divider.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        rootPrefixCls = _props.rootPrefixCls,
	        style = _props.style;

	    return _react2["default"].createElement('li', {
	      className: className + ' ' + rootPrefixCls + '-item-divider',
	      style: style
	    });
	  };

	  return Divider;
	}(_react2["default"].Component);

	Divider.propTypes = {
	  className: _propTypes2["default"].string,
	  rootPrefixCls: _propTypes2["default"].string,
	  style: _propTypes2["default"].object
	};
	Divider.defaultProps = {
	  // To fix keyboard UX.
	  disabled: true,
	  className: '',
	  style: {}
	};
	exports["default"] = Divider;
	module.exports = exports['default'];
	});

	unwrapExports(Divider_1);

	var SideContainer = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: "u-navbar-side-container",
	  sideActive: false
	};

	var NavSideContainer = function (_React$Component) {
	  _inherits(NavSideContainer, _React$Component);

	  function NavSideContainer() {
	    _classCallCheck(this, NavSideContainer);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  NavSideContainer.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        children = _props.children,
	        clsPrefix = _props.clsPrefix,
	        sideActive = _props.sideActive,
	        expanded = _props.expanded,
	        props = _objectWithoutProperties(_props, ['className', 'children', 'clsPrefix', 'sideActive', 'expanded']);

	    //const navbarProps = this.context.u_navbar;

	    return _react2["default"].createElement(
	      'div',
	      { className: (0, _classnames2["default"])(className, clsPrefix, expanded && 'expanded') },
	      children
	    );
	  };

	  return NavSideContainer;
	}(_react2["default"].Component);

	NavSideContainer.defaultProps = defaultProps;

	exports["default"] = NavSideContainer;
	module.exports = exports['default'];
	});

	unwrapExports(SideContainer);

	var MenuToggle_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _createChainedFunction2 = _interopRequireDefault(createChainedFunction_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  onClick: _propTypes2["default"].func,
	  /**
	   * The toggle content, if left empty it will render the default toggle (seen above).
	   */
	  show: _propTypes2["default"].bool,
	  children: _propTypes2["default"].node
	};

	var contextTypes = {
	  u_navbar: _propTypes2["default"].shape({
	    expanded: _propTypes2["default"].bool,
	    onToggle: _propTypes2["default"].func
	  })
	};

	var defaultProps = {
	  clsPrefix: 'u-navbar-toggle',
	  show: false
	};

	var MenuToggle = function (_React$Component) {
	  _inherits(MenuToggle, _React$Component);

	  function MenuToggle(props) {
	    _classCallCheck(this, MenuToggle);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      toggleState: false
	      //this.handleRender = this.handleRender.bind(this);
	    };return _this;
	  }

	  MenuToggle.prototype.handleClick = function handleClick() {
	    var _context$u_navbar = this.context.u_navbar,
	        expanded = _context$u_navbar.expanded,
	        onToggle = _context$u_navbar.onToggle;

	    this.setState({ toggleState: !this.state.toggleState });
	    if (onToggle) {
	      onToggle(!expanded);
	    }
	  };

	  MenuToggle.prototype.render = function render() {
	    var _props = this.props,
	        onClick = _props.onClick,
	        className = _props.className,
	        children = _props.children,
	        clsPrefix = _props.clsPrefix,
	        show = _props.show,
	        props = _objectWithoutProperties(_props, ['onClick', 'className', 'children', 'clsPrefix', 'show']);
	    //const navbarProps = this.context.u_navbar || { bsClass: 'navbar' };
	    //console.log(navbarProps.onToggle, navbarProps.expanded);

	    var buttonProps = _extends({
	      type: 'button'
	    }, props, {
	      onClick: (0, _createChainedFunction2["default"])(onClick, this.handleClick.bind(this)),
	      className: (0, _classnames2["default"])(className, clsPrefix, show && 'show')
	      //!this.context.u_navbar.expanded && 'collapsed',
	    });

	    if (children) {
	      return _react2["default"].createElement(
	        'button',
	        buttonProps,
	        children
	      );
	    }
	    //当show存在时，渲染左侧静态面包按钮
	    return _react2["default"].createElement(
	      'div',
	      null,
	      show && this.state.toggleState && _react2["default"].createElement(
	        'button',
	        buttonProps,
	        _react2["default"].createElement(
	          'span',
	          { className: 'sr-only' },
	          'Toggle navigation'
	        ),
	        _react2["default"].createElement('span', { className: 'icon-bar' }),
	        _react2["default"].createElement('span', { className: 'icon-bar' }),
	        _react2["default"].createElement('span', { className: 'icon-bar' })
	      ),
	      show && !this.state.toggleState && _react2["default"].createElement(
	        'button',
	        buttonProps,
	        _react2["default"].createElement('span', { className: 'uf uf-arrow-left' })
	      ),
	      !show && !this.state.toggleState && _react2["default"].createElement(
	        'button',
	        buttonProps,
	        _react2["default"].createElement(
	          'span',
	          { className: 'sr-only' },
	          'Toggle navigation'
	        ),
	        _react2["default"].createElement('span', { className: 'icon-bar' }),
	        _react2["default"].createElement('span', { className: 'icon-bar' }),
	        _react2["default"].createElement('span', { className: 'icon-bar' })
	      )
	    );
	  };

	  return MenuToggle;
	}(_react2["default"].Component);

	MenuToggle.propTypes = propTypes$1;
	MenuToggle.defaultProps = defaultProps;
	MenuToggle.contextTypes = contextTypes;

	exports["default"] = MenuToggle;
	module.exports = exports['default'];
	});

	unwrapExports(MenuToggle_1);

	var ExportMenu = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MenuToggle = exports.SideContainer = exports.Divider = exports.ItemGroup = exports.MenuItemGroup = exports.MenuItem = exports.Item = exports.SubMenu = undefined;



	var _Menu2 = _interopRequireDefault(Menu_1);



	var _SubMenu2 = _interopRequireDefault(SubMenu_1);



	var _MenuItem2 = _interopRequireDefault(MenuItem_1);



	var _MenuItemGroup2 = _interopRequireDefault(MenuItemGroup_1);



	var _Divider2 = _interopRequireDefault(Divider_1);



	var _SideContainer2 = _interopRequireDefault(SideContainer);



	var _MenuToggle2 = _interopRequireDefault(MenuToggle_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.SubMenu = _SubMenu2["default"];
	exports.Item = _MenuItem2["default"];
	exports.MenuItem = _MenuItem2["default"];
	exports.MenuItemGroup = _MenuItemGroup2["default"];
	exports.ItemGroup = _MenuItemGroup2["default"];
	exports.Divider = _Divider2["default"];
	exports.SideContainer = _SideContainer2["default"];
	exports.MenuToggle = _MenuToggle2["default"]; /**
	                                           * This source code is quoted from rc-menu.
	                                           * homepage: https://github.com/react-component/menu
	                                           */

	exports["default"] = _Menu2["default"];
	});

	unwrapExports(ExportMenu);
	var ExportMenu_1 = ExportMenu.MenuToggle;
	var ExportMenu_2 = ExportMenu.SideContainer;
	var ExportMenu_3 = ExportMenu.Divider;
	var ExportMenu_4 = ExportMenu.ItemGroup;
	var ExportMenu_5 = ExportMenu.MenuItemGroup;
	var ExportMenu_6 = ExportMenu.MenuItem;
	var ExportMenu_7 = ExportMenu.Item;
	var ExportMenu_8 = ExportMenu.SubMenu;

	var openAnimation = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	function animate(node, show, done) {
	  var height = void 0;
	  return (0, lib$1.cssAnimation)(node, 'u-motion-collapse', {
	    start: function start() {
	      if (!show) {
	        node.style.height = node.offsetHeight + 'px';
	      } else {
	        height = node.offsetHeight;
	        node.style.height = 0;
	      }
	    },
	    active: function active() {
	      node.style.height = (show ? height : 0) + 'px';
	    },
	    end: function end() {
	      node.style.height = '';
	      done();
	    }
	  });
	}

	var animation = {
	  enter: function enter(node, done) {
	    return animate(node, true, done);
	  },
	  leave: function leave(node, done) {
	    return animate(node, false, done);
	  },
	  appear: function appear(node, done) {
	    return animate(node, true, done);
	  }
	};

	exports["default"] = animation;
	module.exports = exports['default'];
	});

	unwrapExports(openAnimation);

	var warning$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _warning2 = _interopRequireDefault(warning_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var warned = {};

	exports["default"] = function (valid, message) {
	  if (!valid && !warned[message]) {
	    (0, _warning2["default"])(false, message);
	    warned[message] = true;
	  }
	};

	module.exports = exports['default'];
	});

	unwrapExports(warning$3);

	var VerticalMenu = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _ExportMenu2 = _interopRequireDefault(ExportMenu);



	var _openAnimation2 = _interopRequireDefault(openAnimation);



	var _warning2 = _interopRequireDefault(warning$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var Menu = function (_React$Component) {
	  _inherits(Menu, _React$Component);

	  function Menu(props) {
	    _classCallCheck(this, Menu);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.handleClick = function (e) {
	      _this.setOpenKeys([]);

	      var onClick = _this.props.onClick;
	      if (onClick) {
	        onClick(e);
	      }
	    };

	    _this.handleOpenChange = function (openKeys) {
	      _this.setOpenKeys(openKeys);

	      var onOpenChange = _this.props.onOpenChange;
	      if (onOpenChange) {
	        onOpenChange(openKeys);
	      }
	    };

	    (0, _warning2["default"])(!('onOpen' in props || 'onClose' in props), '`onOpen` and `onClose` are removed, please use `onOpenChange` instead.');

	    _this.state = {
	      openKeys: []
	    };
	    _this.rcMenu = {};
	    return _this;
	  }

	  Menu.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.mode === 'inline' && nextProps.mode !== 'inline') {
	      this.switchModeFromInline = true;
	    }
	    if ('openKeys' in nextProps) {
	      this.setOpenKeys(nextProps.openKeys);
	    }
	  };

	  Menu.prototype.setOpenKeys = function setOpenKeys(openKeys) {
	    if (!('openKeys' in this.props)) {
	      this.setState({ openKeys: openKeys });
	    }
	  };

	  Menu.prototype.render = function render() {
	    var _this2 = this;

	    var openAnimation = this.props.openAnimation || this.props.openTransitionName;
	    if (!openAnimation) {
	      switch (this.props.mode) {
	        case 'horizontal':
	          openAnimation = '';
	          break;
	        case 'vertical':
	          // When mode switch from inline
	          // submenu should hide without animation
	          if (this.switchModeFromInline) {
	            openAnimation = _openAnimation2["default"];
	            this.switchModeFromInline = false;
	          } else {
	            openAnimation = 'zoom-big';
	          }
	          break;
	        case 'inline':
	          openAnimation = _openAnimation2["default"];
	          break;
	        default:
	      }
	    }

	    var props = {};
	    var className = this.props.className + ' ' + this.props.prefixCls + '-' + this.props.theme;
	    if (this.props.mode !== 'inline') {
	      // 这组属性的目的是
	      // 弹出型的菜单需要点击后立即关闭
	      // 另外，弹出型的菜单的受控模式没有使用场景
	      props = {
	        openKeys: this.state.openKeys,
	        onClick: this.handleClick,
	        onOpenChange: this.handleOpenChange,
	        openTransitionName: openAnimation,
	        className: className
	      };
	    } else {
	      props = {
	        openAnimation: openAnimation,
	        className: className
	      };
	    }
	    return _react2["default"].createElement(_ExportMenu2["default"], _extends({ ref: function ref(el) {
	        return _this2.rcMenu = el;
	      } }, this.props, props));
	  };

	  return Menu;
	}(_react2["default"].Component);

	Menu.defaultProps = {
	  prefixCls: 'u-menu',
	  className: '',
	  theme: 'light' // or dark
	};

	Menu.Divider = ExportMenu.Divider;
	Menu.Item = ExportMenu.Item;
	Menu.SubMenu = ExportMenu.SubMenu;
	Menu.ItemGroup = ExportMenu.ItemGroup;
	Menu.MenuToggle = ExportMenu.MenuToggle;
	Menu.SideContainer = ExportMenu.SideContainer;
	exports["default"] = Menu;
	module.exports = exports['default'];
	});

	unwrapExports(VerticalMenu);

	var build$p = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _VerticalMenu2 = _interopRequireDefault(VerticalMenu);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _VerticalMenu2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$p);

	var Button_1$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    /**
	     * @title 尺寸
	     */
	    size: _propTypes2["default"].oneOf(['sm', 'md', 'xg', 'lg']),
	    /**
	     * @title 样式
	     */
	    style: _propTypes2["default"].object,
	    /**
	     * @title 形状
	     */
	    shape: _propTypes2["default"].oneOf(['block', 'round', 'border', 'squared', 'floating', 'pillRight', 'pillLeft', 'icon']),

	    bordered: _propTypes2["default"].bool,
	    /**
	    * @title 类型
	    */
	    colors: _propTypes2["default"].oneOf(['primary', 'secondary', 'accent', 'success', 'info', 'warning', 'danger', 'dark', 'light', 'default']),
	    /**
	     * @title 是否禁用
	     * @veIgnore
	     */
	    disabled: _propTypes2["default"].bool,
	    /**
	     * @title 类名
	     * @veIgnore
	     */
	    className: _propTypes2["default"].string,

	    /**
	     * @title <button> 的 type
	     * @veIgnore
	     */
	    htmlType: _propTypes2["default"].oneOf(['submit', 'button', 'reset']),
	    isSubmit: _propTypes2["default"].bool //是否作为form的提交按钮
	};

	var defaultProps = {
	    disabled: false,
	    htmlType: 'button',
	    clsPrefix: 'u-button',
	    bordered: false,
	    isSubmit: false
	};

	var sizeMap = {
	    sm: 'sm',
	    md: 'md',
	    xg: 'xg',
	    lg: 'lg'
	},
	    colorsMap = {
	    primary: 'primary',
	    secondary: 'secondary',
	    accent: 'accent',
	    success: 'success',
	    info: 'info',
	    warning: 'warning',
	    danger: 'danger',
	    dark: 'dark',
	    light: 'light'
	},
	    shapeMap = {
	    block: 'block',
	    round: 'round',
	    border: 'border',
	    squared: 'squared',
	    floating: 'floating',
	    pillRight: 'pill-right',
	    pillLeft: 'pill-left',
	    icon: 'icon'
	};

	var Button = function (_Component) {
	    _inherits(Button, _Component);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }

	    Button.prototype.render = function render() {
	        var _props = this.props,
	            colors = _props.colors,
	            shape = _props.shape,
	            disabled = _props.disabled,
	            className = _props.className,
	            size = _props.size,
	            bordered = _props.bordered,
	            children = _props.children,
	            htmlType = _props.htmlType,
	            clsPrefix = _props.clsPrefix,
	            isSubmit = _props.isSubmit,
	            others = _objectWithoutProperties(_props, ['colors', 'shape', 'disabled', 'className', 'size', 'bordered', 'children', 'htmlType', 'clsPrefix', 'isSubmit']);

	        var clsObj = {};
	        if (className) {
	            clsObj[className] = true;
	        }
	        if (sizeMap[size]) {
	            clsObj[clsPrefix + '-' + sizeMap[size]] = true;
	        }

	        if (shapeMap[shape]) {
	            clsObj[clsPrefix + '-' + shapeMap[shape]] = true;
	        }
	        if (colorsMap[colors]) {
	            clsObj[clsPrefix + '-' + colorsMap[colors]] = true;
	        }
	        if (bordered) {
	            clsObj[clsPrefix + '-border'] = bordered;
	        }
	        var classes = (0, _classnames2["default"])(clsPrefix, clsObj);
	        return _react2["default"].createElement(
	            'button',
	            _extends({
	                type: htmlType,
	                className: classes,
	                disabled: disabled
	            }, others),
	            this.props.children
	        );
	    };

	    return Button;
	}(React__default.Component);

	Button.propTypes = propTypes$1;
	Button.defaultProps = defaultProps;

	exports["default"] = Button;
	module.exports = exports['default'];
	});

	unwrapExports(Button_1$3);

	var build$q = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Button2 = _interopRequireDefault(Button_1$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Button2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$q);

	var i18n$1 = {
	    'lang': 'zh-cn',
	    'resetSettings': '还原设置',
	    'include': '包含',
	    'exclusive': '不包含',
	    'equal': '等于',
	    'unequal': '不等于',
	    'begin': '以开始',
	    'end': '以结尾',
	    'greater_than': '大于',
	    'great_than_equal_to': '大于等于',
	    'less_than': '小于',
	    'less_than_equal_to': '小于等于',
	    'be_equal_to': '等于',
	    'not_equal_to': '不等于',
	    'en-us': {
	        'resetSettings': 'reset settings',
	        'include': 'include',
	        'exclusive': 'exclusive',
	        'equal': 'equal',
	        'unequal': 'unequal',
	        'begin': 'begin',
	        'end': 'end',
	        'greater_than': 'greater than',
	        'great_than_equal_to': 'great than equal to',
	        'less_than': 'less than',
	        'less_than_equal_to': 'less than equal to',
	        'be_equal_to': 'be equal to',
	        'not_equal_to': 'not equal to'
	    },
	    'zh-tw': {
	        'resetSettings': '還原設置',
	        'include': '包含',
	        'exclusive': '不包含',
	        'equal': '等於',
	        'unequal': '不等於',
	        'begin': '以開始',
	        'end': '以結尾',
	        'greater_than': '大於',
	        'great_than_equal_to': '大於等於',
	        'less_than': '小於',
	        'less_than_equal to': '小於等於',
	        'be_equal_to': '等於',
	        'not_equal_to': '不等於'
	    }
	};

	var tool$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.getComponentLocale = getComponentLocale;
	exports.getLocaleCode = getLocaleCode;
	function getComponentLocale(props, context, componentName, getDefaultLocale) {
	    var locale = {};
	    if (context && context.beeLocale && context.beeLocale[componentName]) {
	        locale = context.beeLocale[componentName];
	    } else {
	        var defaultLocale = getDefaultLocale();

	        locale = defaultLocale["default"] || defaultLocale;
	    }

	    var result = _extends({}, locale, props.locale);
	    if (props.locale) {
	        result.lang = _extends({}, locale.lang, props.locale.lang);
	    } else {
	        result.lang = _extends({}, locale.lang);
	    }

	    return result;
	}

	function getLocaleCode(context) {
	    var localeCode = context.beeLocale && context.beeLocale.lang;
	    // Had use LocaleProvide but didn't set locale
	    if (context.beeLocale && context.beeLocale.exist && !localeCode) {
	        return 'zh-cn';
	    }
	    return localeCode;
	}
	});

	unwrapExports(tool$1);
	var tool_1$1 = tool$1.getComponentLocale;
	var tool_2$1 = tool$1.getLocaleCode;

	var FilterDropDown_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _beeDropdown2 = _interopRequireDefault(build$o);



	var _beeMenus2 = _interopRequireDefault(build$p);



	var _beeButton2 = _interopRequireDefault(build$q);



	var _beeIcon2 = _interopRequireDefault(build$j);



	var _i18n2 = _interopRequireDefault(i18n$1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 过滤行功能内的下拉条件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var Item = _beeMenus2["default"].Item;

	var FilterDropDown = function (_Component) {
	    _inherits(FilterDropDown, _Component);

	    function FilterDropDown() {
	        _classCallCheck(this, FilterDropDown);

	        var _this = _possibleConstructorReturn(this, _Component.call(this));

	        _this.onSelectDropdown = function (item) {
	            var _this$props = _this.props,
	                onSelectDropdown = _this$props.onSelectDropdown,
	                filterDropdownType = _this$props.filterDropdownType;

	            if (onSelectDropdown) {
	                if (filterDropdownType == 'string') {
	                    _this.setState({
	                        selectValue: [item.key]
	                    }, function () {
	                        onSelectDropdown(item);
	                    });
	                }
	                if (filterDropdownType == 'number') {
	                    _this.setState({
	                        selectNumberValue: [item.key]
	                    }, function () {
	                        onSelectDropdown(item);
	                    });
	                }
	            }
	        };

	        _this.onClickClear = function () {
	            var onClickClear = _this.props.onClickClear;

	            if (onClickClear) {
	                _this.setState({
	                    // selectValue: [],
	                    // selectNumberValue: []
	                }, function () {
	                    onClickClear();
	                });
	            }
	        };

	        _this.getMenu = function () {
	            var _this$state = _this.state,
	                selectValue = _this$state.selectValue,
	                selectNumberValue = _this$state.selectNumberValue;
	            var _this$props2 = _this.props,
	                filterDropdownType = _this$props2.filterDropdownType,
	                filterDropdownIncludeKeys = _this$props2.filterDropdownIncludeKeys;

	            var locale = (0, tool$1.getComponentLocale)(_this.props, _this.context, 'Table', function () {
	                return _i18n2["default"];
	            });
	            var stringEnum = {
	                LIKE: 'include',
	                ULIKE: 'exclusive',
	                EQ: 'equal',
	                UEQ: 'unequal',
	                START: 'begin',
	                END: 'end'
	            };
	            var numberEnum = {
	                GT: 'greater_than',
	                GTEQ: 'great_than_equal_to',
	                LT: 'less_than',
	                LTEQ: 'less_than_equal_to',
	                EQ: 'be_equal_to',
	                UEQ: 'not_equal_to'
	            };
	            if (filterDropdownIncludeKeys != undefined) {
	                switch (filterDropdownType) {
	                    case 'string':
	                        return _react2["default"].createElement(
	                            _beeMenus2["default"],
	                            {
	                                onClick: _this.onSelectDropdown,
	                                selectedKeys: selectValue
	                            },
	                            filterDropdownIncludeKeys.map(function (item) {
	                                return _react2["default"].createElement(
	                                    Item,
	                                    { key: item },
	                                    locale[stringEnum[item]]
	                                );
	                            })
	                        );
	                    case 'number':
	                        return _react2["default"].createElement(
	                            _beeMenus2["default"],
	                            {
	                                onClick: _this.onSelectDropdown,
	                                selectedKeys: selectNumberValue
	                            },
	                            filterDropdownIncludeKeys.map(function (item) {
	                                return _react2["default"].createElement(
	                                    Item,
	                                    { key: item },
	                                    locale[numberEnum[item]]
	                                );
	                            })
	                        );
	                    default:
	                        return _react2["default"].createElement('div', null);
	                }
	            } else {
	                switch (filterDropdownType) {
	                    case 'string':
	                        return _react2["default"].createElement(
	                            _beeMenus2["default"],
	                            {
	                                onClick: _this.onSelectDropdown,
	                                selectedKeys: selectValue
	                            },
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'LIKE' },
	                                locale['include']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'ULIKE' },
	                                locale['exclusive']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'EQ' },
	                                locale['equal']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'UEQ' },
	                                locale['unequal']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'RLIKE' },
	                                locale['begin']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'LLIKE' },
	                                locale['end']
	                            )
	                        );
	                    case 'number':
	                        return _react2["default"].createElement(
	                            _beeMenus2["default"],
	                            {
	                                onClick: _this.onSelectDropdown,
	                                selectedKeys: selectNumberValue
	                            },
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'GT' },
	                                locale['greater_than']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'GTEQ' },
	                                locale['great_than_equal_to']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'LT' },
	                                locale['less_than']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'LTEQ' },
	                                locale['less_than_equal_to']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'EQ' },
	                                locale['be_equal_to']
	                            ),
	                            _react2["default"].createElement(
	                                Item,
	                                { key: 'UEQ' },
	                                locale['not_equal_to']
	                            )
	                        );
	                    default:
	                        return _react2["default"].createElement('div', null);
	                }
	            }
	        };

	        _this.state = {
	            selectValue: ['LIKE'],
	            selectNumberValue: ['EQ']
	        };
	        return _this;
	    }
	    /**
	     * 点击下拉菜单
	     *
	     * @param {*} s 选中的selectRecord
	     */


	    /**
	     * 清除事件
	     *
	     */


	    /**
	     * 根据props来获得指定的Menu,分为String和Number
	     *
	     * @returns JSX Menu
	     */


	    FilterDropDown.prototype.render = function render() {
	        var isShowCondition = this.props.isShowCondition;


	        return _react2["default"].createElement(
	            'div',
	            { className: 'filter-btns' },
	            isShowCondition == 'show' && _react2["default"].createElement(
	                _beeDropdown2["default"],
	                {
	                    overlayClassName: 'u-filter-dropdown-menu-wrap',
	                    trigger: ['click'],
	                    overlay: this.getMenu(),
	                    animation: 'slide-up'
	                },
	                _react2["default"].createElement(
	                    _beeButton2["default"],
	                    {
	                        shape: 'border',
	                        style: { marginLeft: "3px", minWidth: "0px", width: "24px", padding: 0 }
	                    },
	                    _react2["default"].createElement(_beeIcon2["default"], { style: { padding: 0, color: '#585858' }, type: 'uf-filter' })
	                )
	            ),
	            _react2["default"].createElement(
	                _beeButton2["default"],
	                {
	                    onClick: this.onClickClear,
	                    shape: 'border',
	                    style: { marginLeft: "1px", minWidth: "0px", width: "24px", padding: 0, "visibility": this.props.isShowClear || this.state.selectValue.length > 0 ? "visible" : "hidden" }
	                },
	                _react2["default"].createElement(_beeIcon2["default"], { style: { padding: 0, color: '#585858', "visibility": this.props.isShowClear || this.state.selectValue.length > 0 ? "visible" : "hidden" }, type: 'uf-filterno' })
	            )
	        );
	    };

	    return FilterDropDown;
	}(React__default.Component);

	FilterDropDown.propTypes = {
	    isShowCondition: _propTypes2["default"].string,
	    filterDropdownType: _propTypes2["default"].oneOf(['string', 'number'])
	};

	FilterDropDown.defaultProps = {
	    isShowCondition: 'show',
	    filterDropdownType: 'string'
	};

	exports["default"] = FilterDropDown;
	module.exports = exports['default'];
	});

	unwrapExports(FilterDropDown_1);

	var FilterType_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _beeDatepicker2 = _interopRequireDefault(build$i);



	var _zh_CN2 = _interopRequireDefault(zh_CN);



	var _beeFormControl2 = _interopRequireDefault(build$k);



	var _beeSelect2 = _interopRequireDefault(build$c);



	var _beeInputNumber2 = _interopRequireDefault(build$n);



	var _FilterDropDown2 = _interopRequireDefault(FilterDropDown_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var RangePicker = _beeDatepicker2["default"].RangePicker;


	var propTypes$1 = {
	    filterDropdown: _propTypes2["default"].string
	};

	var FilterType = function (_Component) {
	    _inherits(FilterType, _Component);

	    function FilterType(props) {
	        _classCallCheck(this, FilterType);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this.clearFilter = function () {
	            var _this$props = _this.props,
	                onFilterClear = _this$props.onFilterClear,
	                dataIndex = _this$props.dataIndex;

	            if (_this.state.value !== "") {
	                _this.setState({
	                    value: "", //清空值
	                    condition: _this.props.filterDropdownType == 'string' ? 'LIKE' : 'EQ' //切回默认查询条件
	                }, function () {
	                    //调用清除方法参数为当前字段的field
	                    onFilterClear && onFilterClear(dataIndex);
	                });
	            }
	        };

	        _this.changeText = function (val) {
	            _this.setState({
	                value: val
	            });
	        };

	        _this.changeTextCall = function (e) {
	            var _this$props2 = _this.props,
	                onFilterChange = _this$props2.onFilterChange,
	                dataIndex = _this$props2.dataIndex;

	            if (e.keyCode == 13) {
	                e.target.value !== "" && onFilterChange(dataIndex, e.target.value, _this.state.condition);
	            }
	        };

	        _this.changeValue = function () {
	            _this.setState({
	                value: ""
	            });
	        };

	        _this.onSelectDropdown = function (item) {
	            var _this$props3 = _this.props,
	                onFilterChange = _this$props3.onFilterChange,
	                dataIndex = _this$props3.dataIndex;

	            _this.setState({
	                condition: item.key
	            }, function () {
	                _this.state.value !== "" && onFilterChange && onFilterChange(dataIndex, _this.state.value, _this.state.condition);
	            });
	        };

	        _this.changeNumber = function (value) {
	            var _this$props4 = _this.props,
	                onFilterChange = _this$props4.onFilterChange,
	                dataIndex = _this$props4.dataIndex;

	            _this.setState({
	                value: value
	            }, function () {
	                onFilterChange(dataIndex, value, _this.state.condition);
	            });
	        };

	        _this.clearNumber = function () {
	            var onChange = _this.props.onChange;

	            onChange && onChange("");
	            _this.setState({
	                value: ""
	            });
	        };

	        _this.changeTextCallBlur = function (val) {
	            var onChange = _this.props.onChange;

	            onChange && onChange(val);
	        };

	        _this.changeSelect = function (value) {
	            var _this$props5 = _this.props,
	                onFilterChange = _this$props5.onFilterChange,
	                dataIndex = _this$props5.dataIndex;

	            if (onFilterChange) {
	                onFilterChange(dataIndex, value, _this.state.condition);
	                _this.setState({
	                    value: value
	                });
	            }
	        };

	        _this.clearSelectValue = function () {
	            _this.setState({
	                selectValue: ""
	            }, function () {
	                _this.changeSelect("");
	            });
	        };

	        _this.clearDateValue = function () {
	            _this.setState({
	                dateValue: ""
	            }, function () {
	                _this.changeDate("");
	            });
	        };

	        _this.changeDate = function (value) {
	            var _this$props6 = _this.props,
	                onFilterChange = _this$props6.onFilterChange,
	                dataIndex = _this$props6.dataIndex;

	            if (onFilterChange) {
	                onFilterChange(dataIndex, value, _this.state.condition);
	                _this.setState({
	                    value: value,
	                    open: false
	                });
	            }
	        };

	        _this.renderControl = function (rendertype) {
	            var _this$props7 = _this.props,
	                filterInputNumberOptions = _this$props7.filterInputNumberOptions,
	                filterDropdownIncludeKeys = _this$props7.filterDropdownIncludeKeys,
	                dataIndex = _this$props7.dataIndex,
	                filterDropdown = _this$props7.filterDropdown,
	                filterDropdownType = _this$props7.filterDropdownType,
	                format = _this$props7.format,
	                className = _this$props7.className,
	                onChange = _this$props7.onChange,
	                onSelectDropdown = _this$props7.onSelectDropdown,
	                clsPrefix = _this$props7.clsPrefix,
	                locale = _this$props7.locale;

	            switch (rendertype) {
	                case 'text':
	                    return _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + ' filter-wrap' },
	                        _react2["default"].createElement(_beeFormControl2["default"], {
	                            value: _this.state.value,
	                            className: className,
	                            onChange: _this.changeText,
	                            onKeyDown: _this.changeTextCall
	                            //onBlur={this.changeTextCallBlur}
	                        }),
	                        _react2["default"].createElement(_FilterDropDown2["default"], {
	                            locale: locale,
	                            dataIndex: dataIndex,
	                            dataText: _this.state.value,
	                            onSelectDropdown: _this.onSelectDropdown,
	                            onClickClear: _this.clearFilter,
	                            isShowClear: _this.state.value,
	                            isShowCondition: filterDropdown,
	                            filterDropdownType: filterDropdownType,
	                            filterDropdownIncludeKeys: filterDropdownIncludeKeys
	                        })
	                    );
	                case 'number':
	                    return _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + ' filter-wrap' },
	                        _react2["default"].createElement(_beeInputNumber2["default"], _extends({}, filterInputNumberOptions, {
	                            className: className,
	                            value: _this.state.value,
	                            onChange: _this.changeNumber,
	                            iconStyle: 'one'
	                        })),
	                        _react2["default"].createElement(_FilterDropDown2["default"], {
	                            locale: locale,
	                            dataIndex: dataIndex,
	                            dataText: _this.state.value,
	                            onSelectDropdown: _this.onSelectDropdown,
	                            onClickClear: _this.clearFilter,
	                            isShowClear: _this.state.value != 0,
	                            isShowCondition: filterDropdown,
	                            filterDropdownType: filterDropdownType,
	                            filterDropdownIncludeKeys: filterDropdownIncludeKeys
	                        })
	                    );
	                case 'dropdown':
	                    return _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + ' filter-wrap' },
	                        _react2["default"].createElement(_beeSelect2["default"], _extends({}, _this.props, {
	                            value: _this.state.value,
	                            onChange: _this.changeSelect
	                        })),
	                        _react2["default"].createElement(_FilterDropDown2["default"], {
	                            locale: locale,
	                            dataIndex: dataIndex,
	                            dataText: _this.state.value,
	                            onSelectDropdown: _this.onSelectDropdown,
	                            onClickClear: _this.clearFilter,
	                            isShowCondition: filterDropdown,
	                            isShowClear: _this.state.value,
	                            filterDropdownType: filterDropdownType,
	                            filterDropdownIncludeKeys: filterDropdownIncludeKeys
	                        })
	                    );
	                case 'date':
	                    return _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + ' filter-wrap' },
	                        _react2["default"].createElement(_beeDatepicker2["default"], _extends({}, _this.props, {
	                            value: _this.state.value,
	                            onChange: _this.changeDate,
	                            open: _this.state.open,
	                            format: format,
	                            locale: _zh_CN2["default"]
	                        })),
	                        _react2["default"].createElement(_FilterDropDown2["default"], {
	                            locale: locale,
	                            dataIndex: dataIndex,
	                            dataText: _this.state.value,
	                            onSelectDropdown: _this.onSelectDropdown,
	                            onClickClear: _this.clearFilter,
	                            isShowCondition: filterDropdown,
	                            isShowClear: _this.state.value,
	                            filterDropdownType: filterDropdownType,
	                            filterDropdownIncludeKeys: filterDropdownIncludeKeys
	                        })
	                    );
	                case 'daterange':
	                    return _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + ' filter-wrap' },
	                        _react2["default"].createElement(RangePicker, _extends({}, _this.props, {
	                            value: _this.state.value,
	                            onChange: _this.changeDate,
	                            open: _this.state.open,
	                            format: format,
	                            showTime: true,
	                            locale: _zh_CN2["default"],
	                            placeholder: '开始 ~ 结束',
	                            dateInputPlaceholder: ['开始', '结束'],
	                            showClear: true
	                        })),
	                        _react2["default"].createElement(_FilterDropDown2["default"], {
	                            locale: locale,
	                            dataIndex: dataIndex,
	                            dataText: _this.state.value,
	                            onSelectDropdown: _this.onSelectDropdown,
	                            onClickClear: _this.clearFilter,
	                            isShowCondition: filterDropdown,
	                            isShowClear: _this.state.value,
	                            filterDropdownIncludeKeys: filterDropdownIncludeKeys
	                        })
	                    );
	                case 'bool':
	                    return _react2["default"].createElement(
	                        'div',
	                        { className: clsPrefix + ' filter-wrap' },
	                        _react2["default"].createElement(Switch, {
	                            className: className,
	                            onChange: onChange
	                        }),
	                        _react2["default"].createElement(_FilterDropDown2["default"], { locale: locale,
	                            onSelectDropdown: onSelectDropdown,
	                            filterDropdownIncludeKeys: filterDropdownIncludeKeys
	                        })
	                    );
	                default:
	                    return _react2["default"].createElement('div', null);
	            }
	        };

	        _this.state = {
	            value: "",
	            text: "",
	            selectValue: "",
	            dateValue: "",
	            open: false,
	            condition: props.filterDropdownType == 'string' ? 'LIKE' : 'EQ',
	            number: 0
	        };
	        return _this;
	    }

	    /**
	     * 清除过滤条件
	     *
	     */


	    /**
	     * 设置输入文本的值
	     *
	     */


	    /**
	     * 输入框回车执行回调
	     *
	     */

	    /**
	     * 更改修改值
	     *
	     */

	    /**
	     * 下拉条件的回调
	     *
	     * @param {*} key 字段
	     * @param {*} value 值1,2,3...6
	     */


	    /**
	     * 修改数值型的值
	     *
	     */

	    //清除数值


	    //失去焦点后执行函数

	    //设置下拉值

	    //清除下拉值

	    //清除日期值

	    //设置日期值

	    //组件渲染
	    /**
	     * 根据不同的类型生成对应的组件类型包含一些参数的适应
	     *
	     * @param {*} rendertype 参数类型，包括['text','dropdown','date','daterange','number']
	     * @returns
	     */


	    FilterType.prototype.render = function render() {
	        var rendertype = this.props.rendertype;

	        return _react2["default"].createElement(
	            'div',
	            { 'data-filter-type': 'filterContext' },
	            this.renderControl(rendertype)
	        );
	    };

	    return FilterType;
	}(React__default.Component);

	FilterType.propTypes = propTypes$1;
	FilterType.defaultProps = {
	    filterDropdown: 'show'
	};
	exports["default"] = FilterType;
	module.exports = exports['default'];
	});

	unwrapExports(FilterType_1);

	var TableHeader_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);







	var _FilterType2 = _interopRequireDefault(FilterType_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  clsPrefix: _propTypes2["default"].string,
	  rowStyle: _propTypes2["default"].object,
	  rows: _propTypes2["default"].array
	};

	function getDiv(id) {
	  var div = document.createElement("div");
	  div.className = "u-table-drag-hidden-cont";
	  div.id = id;
	  return div;
	}

	var TableHeader = function (_Component) {
	  _inherits(TableHeader, _Component);

	  function TableHeader(props) {
	    _classCallCheck(this, TableHeader);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.getOnLineObject = function (_element) {
	      var type = _element.getAttribute('data-type'),
	          elementObj = null;
	      if (!type) {
	        var element = _element.parentElement || parentNode; //兼容写法。
	        if (element.getAttribute('data-type')) {
	          elementObj = element;
	        }
	      } else {
	        elementObj = _element;
	      }
	      return elementObj;
	    };

	    _this.onTrMouseDown = function (e) {
	      utils$2.Event.stopPropagation(e);
	      var event = utils$2.Event.getEvent(e),
	          targetEvent = utils$2.Event.getTarget(event);
	      var _this$props = _this.props,
	          clsPrefix = _this$props.clsPrefix,
	          contentTable = _this$props.contentTable;

	      var currentElement = _this.getOnLineObject(targetEvent);
	      if (!currentElement) return;
	      var type = currentElement.getAttribute('data-type');
	      if (!_this.props.dragborder && !_this.props.draggable) return;
	      if (type == 'online' && _this.props.dragborder) {
	        if (!_this.props.dragborder) return;
	        targetEvent.setAttribute('draggable', false); //添加交换列效果
	        var currentIndex = parseInt(currentElement.getAttribute("data-line-index"));
	        var defaultWidth = currentElement.getAttribute("data-th-width");
	        var currentObj = _this.table.cols[currentIndex];
	        _this.drag.option = "border"; //拖拽操作
	        _this.drag.currIndex = currentIndex;
	        _this.drag.oldLeft = event.x;
	        _this.drag.oldWidth = parseInt(currentObj.style.width);
	        _this.drag.minWidth = currentObj.style.minWidth != "" ? parseInt(currentObj.style.minWidth) : defaultWidth;
	        _this.drag.tableWidth = parseInt(_this.table.table.style.width ? _this.table.table.style.width : _this.table.table.scrollWidth);
	      } else if (type != 'online' && _this.props.draggable) {
	        if (!_this.props.draggable || targetEvent.nodeName.toUpperCase() != "TH") return;
	        targetEvent.setAttribute('draggable', true); //添加交换列效果
	        _this.drag.option = 'dragAble';
	        _this.currentDome = event.target;
	        var _currentIndex = parseInt(currentElement.getAttribute("data-line-index"));
	        _this.drag.currIndex = _currentIndex;
	      } else {
	        // console.log("onTrMouseDown dragborder or draggable is all false !");
	        return;
	      }
	    };

	    _this.onTrMouseMove = function (e) {
	      if (!_this.props.dragborder && !_this.props.draggable) return;
	      var _this$props2 = _this.props,
	          clsPrefix = _this$props2.clsPrefix,
	          dragborder = _this$props2.dragborder,
	          contentDomWidth = _this$props2.contentDomWidth,
	          scrollbarWidth = _this$props2.scrollbarWidth,
	          contentTable = _this$props2.contentTable,
	          headerScroll = _this$props2.headerScroll;

	      utils$2.Event.stopPropagation(e);
	      var event = utils$2.Event.getEvent(e);
	      if (_this.props.dragborder && _this.drag.option == "border") {
	        //移动改变宽度
	        var currentCols = _this.table.cols[_this.drag.currIndex];
	        var diff = event.x - _this.drag.oldLeft;
	        var newWidth = _this.drag.oldWidth + diff;
	        _this.drag.newWidth = newWidth;

	        // if(newWidth > this.drag.minWidth){
	        if (newWidth > _this.minWidth) {
	          currentCols.style.width = newWidth + 'px';
	          //hao 支持固定表头拖拽 修改表体的width
	          if (_this.fixedTable.cols) {
	            _this.fixedTable.cols[_this.drag.currIndex].style.width = newWidth + "px";
	          }
	          var newTableWidth = _this.drag.tableWidth + diff + 'px';
	          _this.table.table.style.width = newTableWidth; //改变table的width
	          if (_this.table.innerTableBody) {
	            //TODO 后续需要处理此处
	            _this.table.innerTableBody.style.width = newTableWidth;
	          }
	          var showScroll = contentDomWidth - (_this.drag.tableWidth + diff) - scrollbarWidth;

	          //表头滚动条处理
	          if (headerScroll) {
	            if (showScroll < 0) {
	              //找到固定列表格，设置表头的marginBottom值为scrollbarWidth;
	              _this.table.contentTableHeader.style.overflowX = 'scroll';
	              _this.optTableMargin(_this.table.fixedLeftHeaderTable, scrollbarWidth);
	              _this.optTableMargin(_this.table.fixedRighHeadertTable, scrollbarWidth);
	              // fixedLeftHeaderTable && (fixedLeftHeaderTable.style.marginBottom = scrollbarWidth + "px");
	              // fixedRighHeadertTable && (fixedRighHeadertTable.style.marginBottom = scrollbarWidth + "px");
	              //todo inner scroll-x去掉；outer marginbottom 设置成-15px】
	            } else {
	              _this.table.contentTableHeader.style.overflowX = 'hidden';
	              _this.optTableMargin(_this.table.fixedLeftHeaderTable, 0);
	              _this.optTableMargin(_this.table.fixedRighHeadertTable, 0);
	            }
	          } else {
	            if (showScroll < 0) {
	              _this.optTableMargin(_this.table.fixedLeftBodyTable, '-' + scrollbarWidth);
	              _this.optTableMargin(_this.table.fixedRightBodyTable, '-' + scrollbarWidth);
	              _this.optTableScroll(_this.table.fixedLeftBodyTable, { x: 'scroll' });
	              _this.optTableScroll(_this.table.fixedRightBodyTable, { x: 'scroll' });
	            } else {
	              _this.optTableMargin(_this.table.fixedLeftBodyTable, 0);
	              _this.optTableMargin(_this.table.fixedRightBodyTable, 0);
	              _this.optTableScroll(_this.table.fixedLeftBodyTable, { x: 'auto' });
	              _this.optTableScroll(_this.table.fixedRightBodyTable, { x: 'auto' });
	            }
	          }
	        }
	      } else if (_this.props.draggable && _this.drag.option == "draggable") ;
	    };

	    _this.onTrMouseUp = function (e) {
	      var event = utils$2.Event.getEvent(e);
	      var width = _this.drag.newWidth;
	      _this.mouseClear();
	      _this.props.onDropBorder && _this.props.onDropBorder(event, width);
	    };

	    _this.clearThsDr = function () {
	      var ths = _this.table.ths;
	      for (var index = 0; index < ths.length; index++) {
	        ths[index].setAttribute('draggable', false); //去掉交换列效果
	      }
	    };

	    _this.bodyonLineMouseUp = function (events, type) {
	      if (!_this.drag || !_this.drag.option) return;
	      _this.mouseClear();
	    };

	    _this.optTableMargin = function (table, scrollbarWidth) {
	      if (table) {
	        table.style.marginBottom = scrollbarWidth + "px";
	      }
	    };

	    _this.optTableScroll = function (table) {
	      var overflow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      if (table) {
	        var innerTable = table.querySelector('.u-table-body-inner');
	        if (innerTable) {
	          overflow.x && (innerTable.style.overflowX = overflow.x);
	          overflow.y && (innerTable.style.overflowY = overflow.y);
	        }
	      }
	    };

	    _this.onDragStart = function (e) {
	      if (!_this.props.draggable) return;
	      if (_this.drag && _this.drag.option != 'dragAble') {
	        return;
	      }
	      var event = utils$2.Event.getEvent(e),
	          target = utils$2.Event.getTarget(event);

	      var currentIndex = parseInt(target.getAttribute("data-line-index"));
	      var currentKey = target.getAttribute('data-line-key');

	      if (event.dataTransfer.setDragImage) {
	        var crt = target.cloneNode(true);
	        crt.style.backgroundColor = "#ebecf0";
	        crt.style.width = _this.table.cols[currentIndex].style.width; //拖动后再交换列的时候，阴影效果可同步
	        crt.style.height = "40px";
	        // crt.style['line-height'] = "40px";
	        // document.body.appendChild(crt);
	        document.getElementById(_this._table_none_cont_id).appendChild(crt);
	        event.dataTransfer.setDragImage(crt, 0, 0);
	      }

	      event.dataTransfer.effectAllowed = "move";
	      event.dataTransfer.setData("Text", currentKey);
	      _this.currentObj = _this.props.rows[0][currentIndex];
	    };

	    _this.onDragOver = function (e) {
	      var event = utils$2.Event.getEvent(e);
	      event.preventDefault();
	    };

	    _this.onDrop = function (e) {
	      if (!_this.props.draggable) return;
	      if (_this.drag && _this.drag.option != 'dragAble') {
	        return;
	      }
	      var event = utils$2.Event.getEvent(e),
	          target = utils$2.Event.getTarget(event);
	      _this.currentDome.setAttribute('draggable', false); //添加交换列效果
	    };

	    _this.onDragEnter = function (e) {
	      var event = utils$2.Event.getEvent(e),
	          target = utils$2.Event.getTarget(event);
	      _this._dragCurrent = target;
	      var currentIndex = target.getAttribute("data-line-index");
	      if (!currentIndex || parseInt(currentIndex) === _this.drag.currIndex) return;
	      if (target.nodeName.toUpperCase() === "TH") {
	        // target.style.border = "2px dashed rgba(5,0,0,0.25)";
	        target.setAttribute("style", "border:2px dashed rgba(5,0,0,0.25)");
	        // target.style.backgroundColor = 'rgb(235, 236, 240)';
	      }
	    };

	    _this.onDragEnd = function (e) {
	      var event = utils$2.Event.getEvent(e),
	          target = utils$2.Event.getTarget(event);
	      _this._dragCurrent.setAttribute("style", "");
	      // this._dragCurrent.style = "";
	      document.getElementById(_this._table_none_cont_id).innerHTML = "";

	      var data = _this.getCurrentEventData(_this._dragCurrent);
	      if (!data) return;
	      if (!_this.currentObj || _this.currentObj.key == data.key) return;
	      if (!_this.props.onDrop) return;
	      _this.props.onDrop(event, { dragSource: _this.currentObj, dragTarg: data });
	    };

	    _this.onDragLeave = function (e) {
	      var event = utils$2.Event.getEvent(e),
	          target = utils$2.Event.getTarget(event);
	      var currentIndex = target.getAttribute("data-line-index");
	      if (!currentIndex || parseInt(currentIndex) === _this.drag.currIndex) return;
	      if (target.nodeName.toUpperCase() === "TH") {
	        target.setAttribute("style", "");
	        // this._dragCurrent.style = "";
	      }
	    };

	    _this.handlerFilterChange = function (key, value, condition) {
	      var onFilterChange = _this.props.onFilterChange;

	      if (onFilterChange) {
	        onFilterChange(key, value, condition);
	      }
	    };

	    _this.handlerFilterClear = function (field) {
	      var onFilterClear = _this.props.onFilterClear;

	      if (onFilterClear) {
	        onFilterClear(field);
	      }
	    };

	    _this.filterRenderType = function (type, dataIndex, index) {
	      var _this$props3 = _this.props,
	          clsPrefix = _this$props3.clsPrefix,
	          rows = _this$props3.rows,
	          filterDelay = _this$props3.filterDelay,
	          locale = _this$props3.locale;

	      switch (type) {
	        //文本输入
	        case "text":
	          return _react2["default"].createElement(_FilterType2["default"], {
	            locale: locale //多语
	            , rendertype: type //渲染类型
	            , clsPrefix: clsPrefix //css前缀
	            , className: clsPrefix + " filter-text",
	            dataIndex: dataIndex //字段
	            , onFilterChange: _this.handlerFilterChange //输入框回调
	            , onFilterClear: _this.handlerFilterClear //清除回调
	            , filterDropdown: rows[1][index]["filterdropdown"] //是否显示下拉条件
	            , filterDropdownType: rows[1][index]["filterdropdowntype"] //下拉的条件类型为string,number
	            , filterDropdownIncludeKeys: rows[1][index]["filterdropdownincludekeys"] //下拉条件按照指定的keys去显示
	          });
	        //数值输入
	        case "number":
	          return _react2["default"].createElement(_FilterType2["default"], {
	            locale: locale,
	            rendertype: type,
	            clsPrefix: clsPrefix,
	            className: clsPrefix + " filter-text",
	            dataIndex: dataIndex //字段
	            , onFilterChange: (0, index_esm.debounce)(filterDelay || 300, _this.handlerFilterChange) //输入框回调并且函数防抖动
	            , onFilterClear: _this.handlerFilterClear //清除回调
	            , filterDropdown: rows[1][index]["filterdropdown"],
	            filterDropdownType: rows[1][index]["filterdropdowntype"] //下拉的条件类型为string,number
	            , filterDropdownIncludeKeys: rows[1][index]["filterdropdownincludekeys"] //下拉条件按照指定的keys去显示
	            , filterInputNumberOptions: rows[1][index]["filterinputnumberoptions"] //设置数值框内的详细属性
	          });
	        //下拉框选择
	        case "dropdown":
	          var selectDataSource = [];
	          //处理没有输入数据源的时候，系统自动查找自带的数据筛选后注入
	          if (rows.length > 0 && (rows[1][index]["filterdropdownauto"] || "auto") == "auto") {
	            var hash = {};
	            //处理下拉重复对象组装dropdown
	            selectDataSource = Array.from(rows[1][0].datasource, function (x) {
	              return {
	                key: x[dataIndex],
	                value: x[dataIndex]
	              };
	            });
	            selectDataSource = selectDataSource.reduceRight(function (item, next) {
	              hash[next.key] ? "" : hash[next.key] = item.push(next);
	              return item;
	            }, []);
	          } else {
	            //从外部数据源加载系统数据
	            selectDataSource = rows[1][index]["filterdropdowndata"];
	          }
	          return _react2["default"].createElement(_FilterType2["default"], {
	            locale: locale,
	            rendertype: type,
	            className: clsPrefix + " filter-dropdown",
	            data: selectDataSource,
	            notFoundContent: "Loading" //没有数据显示的默认字
	            , dataIndex: dataIndex //字段
	            , onFilterChange: _this.handlerFilterChange //输入框回调
	            , onFilterClear: _this.handlerFilterClear //清除回调
	            , filterDropdown: rows[1][index]["filterdropdown"],
	            onFocus: rows[1][index]["filterdropdownfocus"],
	            filterDropdownType: rows[1][index]["filterdropdowntype"] //下拉的条件类型为string,number
	            , filterDropdownIncludeKeys: rows[1][index]["filterdropdownincludekeys"] //下拉条件按照指定的keys去显示
	          });
	        //日期
	        case "date":
	          return _react2["default"].createElement(_FilterType2["default"], {
	            locale: locale,
	            rendertype: type,
	            className: "filter-date",
	            onClick: function onClick() {},
	            format: rows[1][index]["format"] || "YYYY-MM-DD",
	            dataIndex: dataIndex //字段
	            , onFilterChange: _this.handlerFilterChange //输入框回调
	            , onFilterClear: _this.handlerFilterClear //清除回调
	            , filterDropdown: rows[1][index]["filterdropdown"],
	            filterDropdownType: rows[1][index]["filterdropdowntype"] //下拉的条件类型为string,number
	            , filterDropdownIncludeKeys: rows[1][index]["filterdropdownincludekeys"] //下拉条件按照指定的keys去显示
	          });
	        //日期范围
	        case "daterange":
	          return _react2["default"].createElement(_FilterType2["default"], {
	            locale: locale,
	            rendertype: type,
	            className: "filter-date",
	            onClick: function onClick() {},
	            format: rows[1][index]["format"] || "YYYY-MM-DD",
	            dataIndex: dataIndex //字段
	            , onFilterChange: _this.handlerFilterChange //输入框回调
	            , onFilterClear: _this.handlerFilterClear //清除回调
	            , filterDropdown: rows[1][index]["filterdropdown"],
	            filterDropdownType: rows[1][index]["filterdropdowntype"] //下拉的条件类型为string,number
	            , filterDropdownIncludeKeys: rows[1][index]["filterdropdownincludekeys"] //下拉条件按照指定的keys去显示
	          });
	        default:
	          //不匹配类型默认文本输入
	          return _react2["default"].createElement("div", null);
	      }
	    };

	    _this.currentObj = null;
	    _this.theadKey = new Date().getTime();
	    _this.drag = {
	      option: ''
	    };
	    _this.minWidth = 80; //确定最小宽度就是80
	    _this.table = null;
	    _this._thead = null; //当前对象
	    _this.event = false; //避免多次绑定问题
	    return _this;
	  }

	  TableHeader.prototype.componentDidUpdate = function componentDidUpdate() {
	    this.initTable();
	    this.initEvent();
	  };

	  TableHeader.prototype.componentDidMount = function componentDidMount() {
	    var uid = "_table_uid_" + new Date().getTime();
	    this._table_none_cont_id = uid;
	    var div = getDiv(uid);
	    document.querySelector("body").appendChild(div);
	  };

	  TableHeader.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (!this.table) return;
	    if (this.props.draggable) {
	      this.removeDragAbleEvent();
	    }
	    if (this.props.dragborder) {
	      this.removeDragBorderEvent();
	    }
	    this.eventListen([{ key: 'mousedown', fun: this.onTrMouseDown }], 'remove', this.table.tr[0]);
	  };

	  /**
	   * 获取table的属性存放在this.table 中。(公用方法)
	   * @returns
	   * @memberof TableHeader
	   */


	  TableHeader.prototype.initTable = function initTable() {
	    var contentTable = this.props.contentTable;

	    if (!this.props.dragborder && !this.props.draggable) return;
	    var tableDome = this._thead.parentNode;
	    var table = {};
	    if (tableDome && tableDome.nodeName && tableDome.nodeName.toUpperCase() == "TABLE") {
	      table.table = tableDome;
	      table.cols = tableDome.getElementsByTagName("col");
	      table.ths = tableDome.getElementsByTagName("th");
	      table.tr = tableDome.getElementsByTagName("tr");
	    }

	    table.fixedLeftHeaderTable = contentTable.querySelector('.u-table-fixed-left .u-table-header');
	    table.fixedRighHeadertTable = contentTable.querySelector('.u-table-fixed-right .u-table-header');
	    table.contentTableHeader = contentTable.querySelector('.u-table-scroll .u-table-header');
	    table.fixedLeftBodyTable = contentTable.querySelector('.u-table-fixed-left .u-table-body-outer');
	    table.fixedRightBodyTable = contentTable.querySelector('.u-table-fixed-right .u-table-body-outer');
	    table.innerTableBody = contentTable.querySelector('.u-table-scroll .u-table-body table');

	    this.table = table;

	    if (!this.props.dragborder) return;
	    if (document.getElementById("u-table-drag-thead-" + this.theadKey)) {
	      this.fixedTable = {};
	      var _fixedParentContext = document.getElementById("u-table-drag-thead-" + this.theadKey).parentNode;
	      var siblingDom = _fixedParentContext.parentNode.nextElementSibling;
	      if (siblingDom) {
	        var fixedTable = siblingDom.querySelector("table");
	        this.fixedTable.table = fixedTable;
	        this.fixedTable.cols = fixedTable.getElementsByTagName("col");
	        // this.fixedTable.ths = fixedTable.tableDome.getElementsByTagName("th");
	      }
	    }
	  };

	  /**
	   * 事件初始化
	   */


	  TableHeader.prototype.initEvent = function initEvent() {
	    var _props = this.props,
	        dragborder = _props.dragborder,
	        draggable = _props.draggable;

	    if (!this.event) {
	      //避免多次绑定问题。
	      this.event = true;
	      if (dragborder) {
	        this.dragBorderEventInit(); //列宽
	      }
	      if (dragborder) {
	        this.dragAbleEventInit(); //交换列
	      }
	      if (this.table && this.table.tr) {
	        this.eventListen([{ key: 'mousedown', fun: this.onTrMouseDown }], '', this.table.tr[0]); //body mouseup
	      }
	      this.eventListen([{ key: 'mouseup', fun: this.bodyonLineMouseUp }], '', document.body); //body mouseup
	    }
	  };

	  /**
	   * 拖拽列宽事件的监听
	   */


	  TableHeader.prototype.dragBorderEventInit = function dragBorderEventInit() {
	    if (!this.props.dragborder) return;
	    var events = [{ key: 'mouseup', fun: this.onTrMouseUp }, { key: 'mousemove', fun: this.onTrMouseMove }];
	    this.eventListen(events, '', this.table.tr[0]); //表示把事件添加到th元素上
	  };

	  /**
	   * 删除拖动改变列宽的事件监听
	   */


	  TableHeader.prototype.removeDragBorderEvent = function removeDragBorderEvent() {
	    var events = [{ key: 'mouseup', fun: this.onTrMouseUp }, { key: 'mousemove', fun: this.onTrMouseMove }];
	    this.eventListen(events, 'remove', this.table.tr[0]);
	  };

	  TableHeader.prototype.eventListen = function eventListen(events, type, eventSource) {
	    if (!this.table) return;
	    var tr = this.table.tr;

	    for (var i = 0; i < events.length; i++) {
	      var _event = events[i];
	      if (type === "remove") {
	        utils$2.EventUtil.removeHandler(eventSource, _event.key, _event.fun);
	      } else {
	        utils$2.EventUtil.addHandler(eventSource, _event.key, _event.fun);
	      }
	    }
	  };

	  /**
	   *
	   *根据 data-type 来获取当前拖拽的对象的Object，如果为null表示拖动的对象并非是online
	   * @memberof TableHeader
	   */


	  /**
	  * 调整列宽的down事件
	  * @memberof TableHeader
	  */


	  /**
	   * 调整列宽的move事件
	   * @memberof TableHeader
	   */


	  /**
	  * 调整列宽的up事件
	  * @memberof TableHeader
	  */


	  TableHeader.prototype.mouseClear = function mouseClear() {
	    if (!this.drag || !this.drag.option) return;
	    var rows = this.props.rows;

	    var data = { rows: rows[0], cols: this.table.cols, currIndex: this.drag.currIndex };
	    this.props.afterDragColWidth && this.props.afterDragColWidth(data);
	    this.drag = {
	      option: ""
	    };
	    this.clearThsDr();
	  };

	  /**
	  * 当前对象上绑定全局事件，用于拖拽区域以外时的事件处理
	  * @param {*} events
	  * @param {*} type
	  * @memberof TableHeader
	  */


	  /**
	   *相关滚动条联动操作
	   *
	   * @memberof TableHeader
	   */


	  //---拖拽交换列代码----start-----
	  /**
	   * 添加换列的事件监听
	   */
	  TableHeader.prototype.dragAbleEventInit = function dragAbleEventInit() {
	    if (!this.props.draggable) return;
	    var events = [{ key: 'dragstart', fun: this.onDragStart }, //用户开始拖动元素时触发
	    { key: 'dragover', fun: this.onDragOver }, //当某被拖动的对象在另一对象容器范围内拖动时触发此事件
	    { key: 'drop', fun: this.onDrop }, //在一个拖动过程中，释放鼠标键时触发此事件 

	    { key: 'dragenter', fun: this.onDragEnter }, { key: 'dragend', fun: this.onDragEnd }, { key: 'dragleave', fun: this.onDragLeave }];
	    this.eventListen(events, '', this.table.tr[0]); //表示把事件添加到th元素上
	  };

	  /**
	   * 删除换列的事件监听
	   */


	  TableHeader.prototype.removeDragAbleEvent = function removeDragAbleEvent() {
	    var events = [{ key: 'dragstart', fun: this.onDragStart }, { key: 'dragover', fun: this.onDragOver }, { key: 'drop', fun: this.onDrop }, { key: 'dragenter', fun: this.onDragEnter }, { key: 'dragend', fun: this.onDragEnd }, { key: 'dragleave', fun: this.onDragLeave }];
	    this.eventListen(events, 'remove', this.table.tr[0]);
	  };

	  /**
	   * 开始调整交换列的事件
	   */


	  /**
	  * 在一个拖动过程中，释放鼠标键时触发此事件。【目标事件】
	  * @memberof TableHeader
	  */


	  /**
	   * 获取当前th上的对象数据
	   * @param {*} e
	   * @returns
	   * @memberof TableHeader
	   */
	  TableHeader.prototype.getCurrentEventData = function getCurrentEventData(th) {
	    if (!th) {
	      console.log(" event target is not th ! ");
	      return null;
	    }
	    var key = th.getAttribute('data-line-key');
	    var data = this.props.rows[0].find(function (da) {
	      return da.key == key;
	    });
	    if (data) {
	      return data;
	    } else {
	      console.log(" getCurrentEventData data is null ");
	      return null;
	    }
	  };
	  //---拖拽列交换----end----- 

	  /**
	   * 过滤输入后或下拉条件的回调函数
	   */


	  /**
	   * 过滤行清除回调
	   */


	  /**
	   * 过滤渲染的组件类型
	   */


	  TableHeader.prototype.render = function render() {
	    var _this2 = this;

	    var _props2 = this.props,
	        clsPrefix = _props2.clsPrefix,
	        rowStyle = _props2.rowStyle,
	        draggable = _props2.draggable,
	        dragborder = _props2.dragborder,
	        rows = _props2.rows,
	        filterable = _props2.filterable,
	        fixed = _props2.fixed,
	        lastShowIndex = _props2.lastShowIndex;


	    var attr = dragborder ? { id: "u-table-drag-thead-" + this.theadKey } : {};
	    return _react2["default"].createElement(
	      "thead",
	      _extends({ className: clsPrefix + "-thead" }, attr, { "data-theader-fixed": "scroll", ref: function ref(_thead) {
	          return _this2._thead = _thead;
	        } }),
	      rows.map(function (row, index) {
	        var _rowLeng = row.length - 1;
	        return _react2["default"].createElement(
	          "tr",
	          { key: index, style: rowStyle, className: filterable && index == rows.length - 1 ? 'filterable' : '' },
	          row.map(function (da, columIndex, arr) {
	            var thHover = da.drgHover ? " " + clsPrefix + "-thead th-drag-hover" : "";
	            delete da.drgHover;
	            var fixedStyle = "";
	            var canDotDrag = "";
	            //主表格下、固定列或者是过滤行中含有固定列时添加该属性
	            if (!fixed && (da.fixed || filterable && index == rows.length - 1 && rows[0][columIndex].fixed)) {
	              fixedStyle = " " + clsPrefix + "-row-fixed-columns-in-body";
	            }

	            if (lastShowIndex == columIndex) {
	              canDotDrag = "th-can-not-drag";
	            }
	            var thClassName = "" + da.className ? "" + da.className : '';
	            if (da.textAlign) {
	              thClassName += " text-" + da.textAlign + " ";
	            }
	            delete da.textAlign;
	            var keyTemp = {};
	            //避免key为undefined
	            // if(da.dataindex && da.key ===undefined ){
	            keyTemp.key = da.key || da.dataindex || index + '-' + columIndex;

	            // } 
	            if (filterable && index == rows.length - 1) {
	              da.children = _this2.filterRenderType(da["filtertype"], da.dataindex, columIndex);
	              if (da.key === undefined) {
	                keyTemp.key = keyTemp.key + '-filterable';
	              }
	              delete da.filterdropdownfocus;
	            }

	            var thDefaultObj = {};

	            if (draggable) {
	              thClassName += " " + clsPrefix + "-thead th-drag " + thHover + " ";
	            }
	            if (dragborder) {
	              thClassName += " " + clsPrefix + "-thead-th " + canDotDrag;
	            }
	            thClassName += " " + fixedStyle;
	            if (!da.fixed) {
	              return _react2["default"].createElement(
	                "th",
	                _extends({}, da, keyTemp, { className: thClassName, "data-th-fixed": da.fixed, "data-line-key": da.key,
	                  "data-line-index": columIndex, "data-th-width": da.width, "data-type": "draggable" }),
	                da.children,
	                dragborder && columIndex != _rowLeng ? _react2["default"].createElement(
	                  "div",
	                  { ref: function ref(el) {
	                      return _this2.gap = el;
	                    }, "data-line-key": da.key,
	                    "data-line-index": columIndex, "data-th-width": da.width,
	                    "data-type": "online", className: clsPrefix + "-thead-th-drag-gap" },
	                  _react2["default"].createElement("div", { className: "online" })
	                ) : ""
	              );
	            } else {
	              thDefaultObj = _extends({}, da, {
	                className: thClassName + " " + fixedStyle
	              });
	              da.onClick ? thDefaultObj.onClick = function (e) {
	                da.onClick(da, e);
	              } : "";
	              return _react2["default"].createElement("th", _extends({}, thDefaultObj, keyTemp, { "data-th-fixed": da.fixed }));
	            }
	          })
	        );
	      })
	    );
	  };

	  return TableHeader;
	}(React__default.Component);

	TableHeader.defaultProps = {
	  contentWidthDiff: 0
	};


	TableHeader.propTypes = propTypes$1;
	exports["default"] = TableHeader;
	module.exports = exports["default"];
	});

	unwrapExports(TableHeader_1);

	var Column_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  className: _propTypes2["default"].string,
	  colSpan: _propTypes2["default"].number,
	  title: _propTypes2["default"].node,
	  dataIndex: _propTypes2["default"].string,
	  width: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
	  fixed: _propTypes2["default"].oneOf([true, 'left', 'right']),
	  render: _propTypes2["default"].func,
	  onCellClick: _propTypes2["default"].func,
	  ifshow: _propTypes2["default"].bool
	};

	var Column = function (_Component) {
	  _inherits(Column, _Component);

	  function Column() {
	    _classCallCheck(this, Column);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  return Column;
	}(React__default.Component);

	Column.defaultProps = {
	  ifshow: true
	};


	Column.propTypes = propTypes$1;

	exports["default"] = Column;
	module.exports = exports['default'];
	});

	unwrapExports(Column_1);

	var ColumnGroup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});





	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var ColumnGroup = function (_Component) {
	  _inherits(ColumnGroup, _Component);

	  function ColumnGroup() {
	    _classCallCheck(this, ColumnGroup);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  return ColumnGroup;
	}(React__default.Component);

	ColumnGroup.propTypes = {
	  title: _propTypes2["default"].node
	};
	exports["default"] = ColumnGroup;
	module.exports = exports['default'];
	});

	unwrapExports(ColumnGroup_1);

	var ColumnManager_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _Column2 = _interopRequireDefault(Column_1);



	var _ColumnGroup2 = _interopRequireDefault(ColumnGroup_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	//行控制管理

	var ColumnManager = function () {
	  function ColumnManager(columns, elements, originWidth) {
	    _classCallCheck(this, ColumnManager);

	    this._cached = {};

	    this.columns = columns || this.normalize(elements);
	    this.originWidth = originWidth;
	  }

	  ColumnManager.prototype.isAnyColumnsFixed = function isAnyColumnsFixed() {
	    var _this = this;

	    return this._cache('isAnyColumnsFixed', function () {
	      return _this.columns.some(function (column) {
	        return !!column.fixed;
	      });
	    });
	  };

	  ColumnManager.prototype.isAnyColumnsLeftFixed = function isAnyColumnsLeftFixed() {
	    var _this2 = this;

	    return this._cache('isAnyColumnsLeftFixed', function () {
	      return _this2.columns.some(function (column) {
	        return column.fixed === 'left' || column.fixed === true;
	      });
	    });
	  };

	  ColumnManager.prototype.isAnyColumnsRightFixed = function isAnyColumnsRightFixed() {
	    var _this3 = this;

	    return this._cache('isAnyColumnsRightFixed', function () {
	      return _this3.columns.some(function (column) {
	        return column.fixed === 'right';
	      });
	    });
	  };

	  ColumnManager.prototype.leftColumns = function leftColumns() {
	    var _this4 = this;

	    return this._cache('leftColumns', function () {
	      return _this4.groupedColumns().filter(function (column) {
	        return column.fixed === 'left' || column.fixed === true;
	      });
	    });
	  };

	  ColumnManager.prototype.rightColumns = function rightColumns() {
	    var _this5 = this;

	    return this._cache('rightColumns', function () {
	      return _this5.groupedColumns().filter(function (column) {
	        return column.fixed === 'right';
	      });
	    });
	  };

	  ColumnManager.prototype.centerColumns = function centerColumns() {
	    var _this6 = this;

	    return this._cache('centerColumns', function () {
	      return _this6.groupedColumns().filter(function (column) {
	        return !column.fixed;
	      });
	    });
	  };

	  ColumnManager.prototype.leafColumns = function leafColumns() {
	    var _this7 = this;

	    return this._cache('leafColumns', function () {
	      return _this7._leafColumns(_this7.columns);
	    });
	  };

	  ColumnManager.prototype.leftLeafColumns = function leftLeafColumns() {
	    var _this8 = this;

	    return this._cache('leftLeafColumns', function () {
	      return _this8._leafColumns(_this8.leftColumns());
	    });
	  };

	  ColumnManager.prototype.rightLeafColumns = function rightLeafColumns() {
	    var _this9 = this;

	    return this._cache('rightLeafColumns', function () {
	      return _this9._leafColumns(_this9.rightColumns());
	    });
	  };

	  ColumnManager.prototype.centerLeafColumns = function centerLeafColumns() {
	    var _this10 = this;

	    return this._cache('centerLeafColumns', function () {
	      return _this10._leafColumns(_this10.centerColumns());
	    });
	  };

	  // add appropriate rowspan and colspan to column


	  ColumnManager.prototype.groupedColumns = function groupedColumns(type) {
	    var _this11 = this;

	    return this._cache('groupedColumns', function () {
	      var _groupColumns = function _groupColumns(columns) {
	        var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	        var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	        var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

	        // track how many rows we got
	        rows[currentRow] = rows[currentRow] || [];
	        var grouped = [];
	        var setRowSpan = function setRowSpan(column) {
	          var rowSpan = rows.length - currentRow;
	          if (column && !column.children && // parent columns are supposed to be one row
	          rowSpan > 1 && (!column.rowSpan || column.rowSpan < rowSpan)) {
	            column.rowSpan = rowSpan;
	          }
	        };
	        columns.forEach(function (column, index) {
	          var defaultOpt = {
	            ifshow: true
	          };
	          if (!_this11.originWidth) {
	            defaultOpt.width = 200;
	          }
	          //获取非固定列
	          if (type == 'nofixed' && column.fixed) {
	            return false;
	          }
	          var newColumn = _extends({}, defaultOpt, column);
	          rows[currentRow].push(newColumn);
	          parentColumn.colSpan = parentColumn.colSpan || 0;
	          if (newColumn.children && newColumn.children.length > 0) {
	            newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);
	            parentColumn.colSpan = parentColumn.colSpan + newColumn.colSpan;
	          } else {
	            parentColumn.colSpan++;
	          }
	          // update rowspan to all same row columns
	          for (var i = 0; i < rows[currentRow].length - 1; ++i) {
	            setRowSpan(rows[currentRow][i]);
	          }
	          // last column, update rowspan immediately
	          if (index + 1 === columns.length) {
	            setRowSpan(newColumn);
	          }
	          grouped.push(newColumn);
	        });
	        return grouped;
	      };
	      return _groupColumns(_this11.columns);
	    });
	  };

	  ColumnManager.prototype.normalize = function normalize(elements) {
	    var _this12 = this;

	    var columns = [];
	    _react2["default"].Children.forEach(elements, function (element) {
	      if (!_this12.isColumnElement(element)) return;
	      var column = _extends({}, element.props);
	      if (element.key) {
	        column.key = element.key;
	      }
	      if (element.type === _ColumnGroup2["default"]) {
	        column.children = _this12.normalize(column.children);
	      }
	      columns.push(column);
	    });
	    return columns;
	  };

	  ColumnManager.prototype.isColumnElement = function isColumnElement(element) {
	    return element && (element.type === _Column2["default"] || element.type === _ColumnGroup2["default"]);
	  };

	  ColumnManager.prototype.reset = function reset(columns, elements) {
	    this.columns = columns || this.normalize(elements);
	    this._cached = {};
	  };

	  ColumnManager.prototype.getColumnWidth = function getColumnWidth(contentWidth) {
	    var columns = this.leafColumns();
	    var res = { computeWidth: 0, lastShowIndex: -1 };
	    columns.forEach(function (col, index) {
	      //如果列显示
	      if (col.ifshow) {
	        var width = col.width;
	        if (typeof width == 'string' && width.includes('%')) {
	          width = contentWidth * parseInt(col.width) / 100;
	        }
	        res.computeWidth += parseInt(width);
	        if (!col.fixed) {
	          res.lastShowIndex = index;
	        }
	      }
	    });
	    return res;
	  };

	  ColumnManager.prototype.getLeftColumnsWidth = function getLeftColumnsWidth() {
	    var _this13 = this;

	    var contentWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	    return this._cache('leftColumnsWidth', function () {
	      var leftColumnsWidth = 0;
	      _this13.groupedColumns().forEach(function (column) {
	        if (column.fixed === 'left' || column.fixed === true) {
	          var width = column.width;
	          if (typeof width == 'string' && width.includes('%')) {
	            width = contentWidth * parseInt(column.width) / 100;
	          }
	          leftColumnsWidth += parseInt(width);
	        }
	      });
	      return leftColumnsWidth;
	    });
	  };

	  ColumnManager.prototype.getRightColumnsWidth = function getRightColumnsWidth() {
	    var _this14 = this;

	    var contentWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

	    return this._cache('rightColumnsWidth', function () {
	      var rightColumnsWidth = 0;
	      _this14.groupedColumns().forEach(function (column) {
	        if (column.fixed === 'right') {
	          var width = column.width;
	          if (typeof width == 'string' && width.includes('%')) {
	            width = contentWidth * parseInt(column.width) / 100;
	          }
	          rightColumnsWidth += parseInt(width);
	        }
	      });
	      return rightColumnsWidth;
	    });
	  };

	  ColumnManager.prototype._cache = function _cache(name, fn) {
	    if (name in this._cached) {
	      return this._cached[name];
	    }
	    this._cached[name] = fn();
	    return this._cached[name];
	  };

	  //todo 含有children的宽度计算


	  ColumnManager.prototype._leafColumns = function _leafColumns(columns) {
	    var _this15 = this;

	    var leafColumns = [];

	    columns.forEach(function (column) {
	      if (!column.children) {

	        var defaultOpt = {
	          ifshow: true
	        };
	        if (!_this15.originWidth) {
	          defaultOpt.width = 200;
	        }
	        var newColumn = _extends({}, defaultOpt, column);
	        leafColumns.push(newColumn);
	      } else {
	        leafColumns.push.apply(leafColumns, _toConsumableArray(_this15._leafColumns(column.children)));
	      }
	    });
	    return leafColumns;
	  };

	  return ColumnManager;
	}();

	exports["default"] = ColumnManager;
	module.exports = exports['default'];
	});

	unwrapExports(ColumnManager_1);

	var createStore_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = createStore;
	function createStore(initialState) {
	  var state = initialState;
	  var listeners = [];

	  function setState(partial) {
	    state = _extends({}, state, partial);
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }
	  }

	  function getState() {
	    return state;
	  }

	  function subscribe(listener) {
	    listeners.push(listener);

	    return function unsubscribe() {
	      var index = listeners.indexOf(listener);
	      listeners.splice(index, 1);
	    };
	  }

	  return {
	    setState: setState,
	    getState: getState,
	    subscribe: subscribe
	  };
	}
	module.exports = exports["default"];
	});

	unwrapExports(createStore_1);

	var Loading_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _Portal2 = _interopRequireDefault(Portal_1);



	var _beeIcon2 = _interopRequireDefault(build$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  /**
	   * @title 默认的公共类׺
	   */
	  clsPrefix: _propTypes2["default"].string,
	  clsLoadBack: _propTypes2["default"].string,
	  /**
	   * @title 不同loading样式
	   */
	  loadingType: _propTypes2["default"].oneOf(["rotate", "line"]),

	  /**
	   * @title 不同尺寸
	   */
	  size: _propTypes2["default"].oneOf(["sm", "lg"]),
	  /**
	   * @title 不同颜色
	   */
	  color: _propTypes2["default"].oneOf(["primary", "success", "warning", ""]),
	  /**
	   * @title 是否全屏loading
	   */
	  fullScreen: _propTypes2["default"].bool,
	  wrapperClassName: _propTypes2["default"].string
	};

	var defaultProps = {
	  clsPrefix: "u-loading",
	  clsLoadBack: "u-loading-back",
	  loadingType: "rotate",
	  color: "",
	  showBackDrop: true,
	  fullScreen: false,
	  wrapperClassName: ""
	};

	var sizeMap = {
	  sm: "sm",
	  lg: "lg"
	},
	    colorsMap = {
	  primary: "primary",
	  success: "success",
	  warning: "warning"
	};

	var Loading = function (_Component) {
	  _inherits(Loading, _Component);

	  function Loading(props) {
	    _classCallCheck(this, Loading);

	    return _possibleConstructorReturn(this, _Component.call(this, props));
	  }

	  Loading.prototype.render = function render() {
	    var _backClassObj;

	    var _props = this.props,
	        clsPrefix = _props.clsPrefix,
	        loadingType = _props.loadingType,
	        size = _props.size,
	        color = _props.color,
	        show = _props.show,
	        showBackDrop = _props.showBackDrop,
	        container = _props.container,
	        children = _props.children,
	        fullScreen = _props.fullScreen,
	        wrapperClassName = _props.wrapperClassName,
	        others = _objectWithoutProperties(_props, ["clsPrefix", "loadingType", "size", "color", "show", "showBackDrop", "container", "children", "fullScreen", "wrapperClassName"]);

	    var clsObj = {};

	    if (!show) return null;

	    clsObj[clsPrefix + "-" + loadingType] = true;

	    if (sizeMap[size]) {
	      clsObj[clsPrefix + "-" + loadingType + "-" + sizeMap[size]] = true;
	    }

	    if (colorsMap[color]) {
	      clsObj[clsPrefix + "-" + loadingType + "-" + colorsMap[color]] = true;
	    }

	    var classes = (0, _classnames2["default"])(clsPrefix, clsObj);

	    var dom = "";

	    if (wrapperClassName) {
	      classes += " " + wrapperClassName;
	    }

	    if (loadingType === "rotate") {
	      dom = _react2["default"].createElement(
	        "div",
	        null,
	        _react2["default"].createElement(
	          "div",
	          { className: classes },
	          _react2["default"].createElement(
	            "div",
	            null,
	            _react2["default"].createElement("img", { src: "http://design.yonyoucloud.com/static/bee.tinper.org-demo/loading.svg" })
	          )
	        ),
	        children && _react2["default"].createElement(
	          "div",
	          { className: clsPrefix + "-desc" },
	          children
	        )
	      );
	    } else if (loadingType === "line") {
	      dom = _react2["default"].createElement(
	        "div",
	        null,
	        _react2["default"].createElement(
	          "div",
	          { className: classes },
	          _react2["default"].createElement("div", null),
	          _react2["default"].createElement("div", null),
	          _react2["default"].createElement("div", null),
	          _react2["default"].createElement("div", null),
	          _react2["default"].createElement("div", null)
	        ),
	        children && _react2["default"].createElement(
	          "div",
	          { className: clsPrefix + "-desc" },
	          children
	        )
	      );
	    }

	    var backClassObj = (_backClassObj = {}, _defineProperty(_backClassObj, clsPrefix + "-backdrop", true), _defineProperty(_backClassObj, "full-screen", fullScreen), _backClassObj);

	    if (showBackDrop) {
	      dom = _react2["default"].createElement(
	        "div",
	        { className: (0, _classnames2["default"])(backClassObj) },
	        dom
	      );
	    }
	    //console.log(container);

	    return _react2["default"].createElement(
	      _Portal2["default"],
	      { container: container },
	      dom
	    );
	  };

	  return Loading;
	}(React__default.Component);

	Loading.propTypes = propTypes$1;
	Loading.defaultProps = defaultProps;

	exports["default"] = Loading;
	module.exports = exports["default"];
	});

	unwrapExports(Loading_1);

	var build$r = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Loading2 = _interopRequireDefault(Loading_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Loading2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$r);

	var Table_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _componentClasses2 = _interopRequireDefault(componentClasses);



	var _TableRow2 = _interopRequireDefault(TableRow_1);



	var _TableHeader2 = _interopRequireDefault(TableHeader_1);





	var _shallowequal2 = _interopRequireDefault(shallowequal);



	var _addEventListener2 = _interopRequireDefault(addEventListener);



	var _ColumnManager2 = _interopRequireDefault(ColumnManager_1);



	var _createStore2 = _interopRequireDefault(createStore_1);



	var _beeLoading2 = _interopRequireDefault(build$r);



	var _beeIcon2 = _interopRequireDefault(build$j);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  data: _propTypes2["default"].array,
	  expandIconAsCell: _propTypes2["default"].bool,
	  defaultExpandAllRows: _propTypes2["default"].bool,
	  expandedRowKeys: _propTypes2["default"].array,
	  defaultExpandedRowKeys: _propTypes2["default"].array,
	  useFixedHeader: _propTypes2["default"].bool,
	  columns: _propTypes2["default"].array,
	  clsPrefix: _propTypes2["default"].string,
	  bodyStyle: _propTypes2["default"].object,
	  style: _propTypes2["default"].object,
	  //特殊的渲染规则的key值
	  rowKey: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].func]),
	  rowClassName: _propTypes2["default"].func,
	  expandedRowClassName: _propTypes2["default"].func,
	  childrenColumnName: _propTypes2["default"].string,
	  onExpand: _propTypes2["default"].func,
	  onRowHover: _propTypes2["default"].func,
	  onExpandedRowsChange: _propTypes2["default"].func,
	  indentSize: _propTypes2["default"].number,
	  onRowClick: _propTypes2["default"].func,
	  onRowDoubleClick: _propTypes2["default"].func,
	  expandIconColumnIndex: _propTypes2["default"].number,
	  //是否显示表头
	  showHeader: _propTypes2["default"].bool,
	  title: _propTypes2["default"].func,
	  footer: _propTypes2["default"].func,
	  emptyText: _propTypes2["default"].func,
	  scroll: _propTypes2["default"].object,
	  rowRef: _propTypes2["default"].func,
	  getBodyWrapper: _propTypes2["default"].func,
	  children: _propTypes2["default"].node,
	  draggable: _propTypes2["default"].bool,
	  minColumnWidth: _propTypes2["default"].number,
	  filterable: _propTypes2["default"].bool,
	  filterDelay: _propTypes2["default"].number,
	  onFilterChange: _propTypes2["default"].func,
	  onFilterClear: _propTypes2["default"].func,
	  syncHover: _propTypes2["default"].bool,
	  tabIndex: _propTypes2["default"].string,
	  hoverContent: _propTypes2["default"].func,
	  size: _propTypes2["default"].oneOf(['sm', 'md', 'lg']),
	  rowDraggAble: _propTypes2["default"].bool
	};

	var defaultProps = {
	  data: [],
	  useFixedHeader: false,
	  expandIconAsCell: false,
	  defaultExpandAllRows: false,
	  defaultExpandedRowKeys: [],
	  rowKey: 'key',
	  rowClassName: function rowClassName() {
	    return '';
	  },
	  expandedRowClassName: function expandedRowClassName() {
	    return '';
	  },
	  onExpand: function onExpand() {},
	  onExpandedRowsChange: function onExpandedRowsChange() {},
	  onRowClick: function onRowClick() {},
	  onRowDoubleClick: function onRowDoubleClick() {},

	  clsPrefix: 'u-table',
	  bodyStyle: {},
	  style: {},
	  childrenColumnName: 'children',
	  indentSize: 15,
	  expandIconColumnIndex: 0,
	  showHeader: true,
	  scroll: {},
	  rowRef: function rowRef() {
	    return null;
	  },
	  getBodyWrapper: function getBodyWrapper(body) {
	    return body;
	  },
	  emptyText: function emptyText() {
	    return _react2["default"].createElement(
	      'div',
	      null,
	      _react2["default"].createElement(_beeIcon2["default"], { type: 'uf-nodata', className: 'table-nodata' }),
	      _react2["default"].createElement(
	        'span',
	        null,
	        '\u6682\u65E0\u6570\u636E'
	      )
	    );
	  },
	  columns: [],
	  minColumnWidth: 80,
	  locale: {},
	  syncHover: true,
	  setRowHeight: function setRowHeight() {},
	  setRowParentIndex: function setRowParentIndex() {},
	  tabIndex: '0',
	  heightConsistent: false,
	  size: 'md',
	  rowDraggAble: false
	};

	var Table = function (_Component) {
	  _inherits(Table, _Component);

	  function Table(props) {
	    _classCallCheck(this, Table);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.resize = function () {
	      (0, utils$2.debounce)(_this.syncFixedTableRowHeight, 150);
	      _this.computeTableWidth();
	      var renderFlag = _this.state.renderFlag;
	      _this.setState({
	        renderFlag: !renderFlag
	      });
	    };

	    _this.getTableUID = function () {
	      var uid = "_table_uid_" + new Date().getTime();
	      _this.tableUid = uid;
	      var div = document.createElement("div");
	      // div.className = "u-table-drag-hidden-cont";
	      div.className = "u-table-drag-hidden-cont";
	      div.id = uid;
	      _this.contentTable.appendChild(div);
	    };

	    _this.onDragRow = function (currentKey, targetKey) {
	      var data = _this.state.data,
	          currentIndex = void 0,
	          targetIndex = void 0;
	      data.forEach(function (da, i) {
	        if (da.key == currentKey) {
	          currentIndex = i;
	        }
	        if (da.key == targetKey) {
	          targetIndex = i;
	        }
	      });
	      if (currentIndex < targetIndex) {
	        data.splice(targetIndex, 0, data.splice(currentIndex, 1).shift());
	      } else {
	        data.splice(targetIndex + 1, 0, data.splice(currentIndex, 1).shift());
	      }
	      _this.setState({
	        data: data
	      });
	    };

	    _this.renderDragHideTable = function () {
	      var _this$props = _this.props,
	          columns = _this$props.columns,
	          dragborder = _this$props.dragborder,
	          dragborderKey = _this$props.dragborderKey;

	      if (!dragborder) return null;
	      var sum = 0;
	      return _react2["default"].createElement(
	        'div',
	        { id: 'u-table-drag-hide-table-' + dragborderKey, className: _this.props.clsPrefix + '-hiden-drag' },
	        columns.map(function (da, i) {
	          sum += da.width ? da.width : 0;
	          return _react2["default"].createElement('div', { className: _this.props.clsPrefix + '-hiden-drag-li', key: da + "_hiden_" + i, style: { left: sum + "px" } });
	        })
	      );
	    };

	    _this.onRowHoverMouseEnter = function () {

	      _this.store.setState({
	        currentHoverKey: _this.currentHoverKey
	      });
	      _this.hoverDom.style.display = 'block';
	    };

	    _this.onRowHoverMouseLeave = function () {};

	    _this.onFocus = function (e) {
	      _this.props.onKeyTab && _this.props.onKeyTab();
	    };

	    _this.onKeyDown = function (e) {
	      var event = utils$2.Event.getEvent(e);
	      // event.preventDefault?event.preventDefault():event.returnValue = false;
	      if (event.keyCode === 38) {
	        //up
	        event.preventDefault && event.preventDefault();
	        _this.props.onKeyUp && _this.props.onKeyUp();
	      } else if (event.keyCode === 40) {
	        //down
	        event.preventDefault && event.preventDefault();
	        _this.props.onKeyDown && _this.props.onKeyDown();
	      }
	      _this.props.onTableKeyDown && _this.props.onTableKeyDown();
	    };

	    var expandedRowKeys = [];
	    var rows = [].concat(_toConsumableArray(props.data));
	    _this.columnManager = new _ColumnManager2["default"](props.columns, props.children, props.originWidth);
	    _this.store = (0, _createStore2["default"])({ currentHoverKey: null });
	    _this.firstDid = true;
	    if (props.defaultExpandAllRows) {
	      for (var i = 0; i < rows.length; i++) {
	        var row = rows[i];
	        expandedRowKeys.push(_this.getRowKey(row, i));
	        rows = rows.concat(row[props.childrenColumnName] || []);
	      }
	    } else {
	      expandedRowKeys = props.expandedRowKeys || props.defaultExpandedRowKeys;
	    }
	    _this.state = {
	      expandedRowKeys: expandedRowKeys,
	      data: props.data,
	      currentHoverKey: null,
	      scrollPosition: 'left',
	      fixedColumnsHeadRowsHeight: [],
	      fixedColumnsBodyRowsHeight: []
	    };

	    _this.onExpandedRowsChange = _this.onExpandedRowsChange.bind(_this);
	    _this.onExpanded = _this.onExpanded.bind(_this);
	    _this.onRowDestroy = _this.onRowDestroy.bind(_this);
	    _this.getRowKey = _this.getRowKey.bind(_this);
	    _this.getExpandedRows = _this.getExpandedRows.bind(_this);
	    _this.getHeader = _this.getHeader.bind(_this);
	    _this.getHeaderRows = _this.getHeaderRows.bind(_this);
	    _this.getExpandedRow = _this.getExpandedRow.bind(_this);
	    _this.getRowsByData = _this.getRowsByData.bind(_this);
	    _this.getRows = _this.getRows.bind(_this);
	    _this.getColGroup = _this.getColGroup.bind(_this);
	    _this.getLeftFixedTable = _this.getLeftFixedTable.bind(_this);
	    _this.getRightFixedTable = _this.getRightFixedTable.bind(_this);
	    _this.getTable = _this.getTable.bind(_this);
	    _this.getTitle = _this.getTitle.bind(_this);
	    _this.getFooter = _this.getFooter.bind(_this);
	    _this.getEmptyText = _this.getEmptyText.bind(_this);
	    _this.getHeaderRowStyle = _this.getHeaderRowStyle.bind(_this);
	    _this.syncFixedTableRowHeight = _this.syncFixedTableRowHeight.bind(_this);
	    _this.resetScrollX = _this.resetScrollX.bind(_this);
	    _this.findExpandedRow = _this.findExpandedRow.bind(_this);
	    _this.isRowExpanded = _this.isRowExpanded.bind(_this);
	    _this.detectScrollTarget = _this.detectScrollTarget.bind(_this);
	    _this.handleBodyScroll = _this.handleBodyScroll.bind(_this);
	    _this.handleRowHover = _this.handleRowHover.bind(_this);
	    _this.computeTableWidth = _this.computeTableWidth.bind(_this);
	    _this.onBodyMouseLeave = _this.onBodyMouseLeave.bind(_this);
	    _this.tableUid = null;
	    return _this;
	  }

	  Table.prototype.componentDidMount = function componentDidMount() {
	    this.getTableUID();
	    utils$2.EventUtil.addHandler(this.contentTable, 'keydown', this.onKeyDown);
	    utils$2.EventUtil.addHandler(this.contentTable, 'focus', this.onFocus);
	    setTimeout(this.resetScrollX, 300);
	    //含有纵向滚动条
	    if (this.props.scroll.y) {
	      this.scrollbarWidth = (0, utils$2.measureScrollbar)();
	    }
	    //后续也放在recevice里面
	    if (!this.props.originWidth) {
	      this.computeTableWidth();
	    }
	    if (this.columnManager.isAnyColumnsFixed()) {
	      this.syncFixedTableRowHeight();
	      this.resizeEvent = (0, _addEventListener2["default"])(window, 'resize', this.resize);
	    }
	  };

	  Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if ('data' in nextProps) {
	      this.setState({
	        data: nextProps.data
	      });
	    }
	    if ('expandedRowKeys' in nextProps) {
	      this.setState({
	        expandedRowKeys: nextProps.expandedRowKeys
	      });
	    }
	    if (nextProps.columns && nextProps.columns !== this.props.columns) {
	      this.columnManager.reset(nextProps.columns);
	      if (nextProps.columns.length !== this.props.columns.length && this.refs && this.bodyTable) {
	        this.scrollTop = this.bodyTable.scrollTop;
	      }
	    } else if (nextProps.children !== this.props.children) {
	      this.columnManager.reset(null, nextProps.children);
	    }
	    //适配lazyload
	    if (nextProps.scrollTop > -1) {
	      // this.bodyTable.scrollTop = nextProps.scrollTop;
	      this.scrollTop = nextProps.scrollTop;
	    }
	    if (!nextProps.originWidth) {
	      this.computeTableWidth();
	      this.firstDid = true; //避免重复update
	    }
	    if (nextProps.resetScroll) {
	      this.resetScrollX();
	    }

	    // console.log('this.scrollTop**********',this.scrollTop);
	  };

	  Table.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {

	    if (this.columnManager.isAnyColumnsFixed()) {
	      this.syncFixedTableRowHeight();
	    }
	    //适应模态框中表格、以及父容器宽度变化的情况
	    if (typeof this.props.scroll.x !== 'number' && this.contentTable.getBoundingClientRect().width !== this.contentDomWidth && this.firstDid) {
	      this.computeTableWidth();
	      this.firstDid = false; //避免重复update
	    }
	    if (this.scrollTop > -1) {
	      this.refs.fixedColumnsBodyLeft && (this.refs.fixedColumnsBodyLeft.scrollTop = this.scrollTop);
	      this.refs.fixedColumnsBodyRight && (this.refs.fixedColumnsBodyRight.scrollTop = this.scrollTop);
	      this.bodyTable.scrollTop = this.scrollTop;
	      this.scrollTop = -1;
	    }
	    if (prevProps.data.length === 0 || this.props.data.length === 0) {
	      this.resetScrollX();
	    }
	    // 是否传入 scroll中的y属性，如果传入判断是否是整数，如果是则进行比较 。bodyTable 的clientHeight进行判断
	    this.isShowScrollY();
	  };

	  Table.prototype.componentWillUnmount = function componentWillUnmount() {
	    utils$2.EventUtil.removeHandler(this.contentTable, 'keydown', this.onKeyDown);
	    utils$2.EventUtil.removeHandler(this.contentTable, 'focus', this.onFocus);
	    if (this.resizeEvent) {
	      this.resizeEvent.remove();
	    }
	  };

	  Table.prototype.computeTableWidth = function computeTableWidth() {

	    //如果用户传了scroll.x按用户传的为主
	    var setWidthParam = this.props.scroll.x;

	    if (typeof setWidthParam == 'number') {
	      var numSetWidthParam = parseInt(setWidthParam);
	      this.contentWidth = numSetWidthParam;
	    } else {
	      // this.preContentDomWidth = this.contentDomWidth;
	      //计算总表格宽度、根据表格宽度和各列的宽度和比较，重置最后一列
	      this.contentDomWidth = this.contentTable.getBoundingClientRect().width; //表格容器宽度

	      this.contentWidth = this.contentDomWidth; //默认与容器宽度一样
	    }
	    var computeObj = this.columnManager.getColumnWidth(this.contentWidth);
	    var lastShowIndex = computeObj.lastShowIndex;
	    this.computeWidth = computeObj.computeWidth;

	    this.domWidthDiff = this.contentDomWidth - this.computeWidth;
	    if (typeof setWidthParam == 'string' && setWidthParam.indexOf('%')) {
	      this.contentWidth = this.contentWidth * parseInt(setWidthParam) / 100;
	      this.domWidthDiff = this.contentDomWidth - this.contentWidth;
	    }

	    if (this.computeWidth < this.contentWidth) {
	      var contentWidthDiff = this.scrollbarWidth ? this.contentWidth - this.computeWidth - this.scrollbarWidth : this.contentWidth - this.computeWidth;
	      //bordered的表格需要减去边框的差值1
	      if (this.props.bordered) {
	        contentWidthDiff = contentWidthDiff - 1;
	      }
	      this.setState({ contentWidthDiff: contentWidthDiff, lastShowIndex: lastShowIndex });
	    } else {
	      this.contentWidth = this.computeWidth;
	      this.setState({ contentWidthDiff: 0, lastShowIndex: lastShowIndex }); //重新渲染，为了显示滚动条
	    }
	  };
	  //根据内容动态的判断是否显示纵向滚动条


	  Table.prototype.isShowScrollY = function isShowScrollY() {
	    var props = this.props;
	    var y = props.scroll && props.scroll.y;
	    if (y) {
	      var bodyH = this.bodyTable.clientHeight;
	      var bodyContentH = this.bodyTable.querySelector('table').clientHeight;
	      var rightBodyTable = this.refs.fixedColumnsBodyRight;
	      var overflowy = bodyContentH <= bodyH ? 'auto' : 'scroll';
	      this.bodyTable.style.overflowY = overflowy;
	      this.refs.headTable.style.overflowY = overflowy;
	      rightBodyTable && (rightBodyTable.style.overflowY = overflowy);
	    }
	  };

	  Table.prototype.onExpandedRowsChange = function onExpandedRowsChange(expandedRowKeys) {
	    if (!this.props.expandedRowKeys) {
	      this.setState({ expandedRowKeys: expandedRowKeys });
	    }
	    this.props.onExpandedRowsChange(expandedRowKeys);
	  };

	  Table.prototype.onExpanded = function onExpanded(expanded, record, index, e) {
	    if (e) {
	      e.preventDefault();
	      e.stopPropagation();
	    }
	    var info = this.findExpandedRow(record);
	    if (typeof info !== 'undefined' && !expanded) {
	      this.onRowDestroy(record, index);
	    } else if (!info && expanded) {
	      var expandedRows = this.getExpandedRows().concat();
	      expandedRows.push(this.getRowKey(record, index));
	      this.onExpandedRowsChange(expandedRows);
	    }
	    this.props.onExpand(expanded, record, index);
	  };

	  Table.prototype.onRowDestroy = function onRowDestroy(record, rowIndex) {
	    var expandedRows = this.getExpandedRows().concat();
	    var rowKey = this.getRowKey(record, rowIndex);
	    var index = -1;
	    expandedRows.forEach(function (r, i) {
	      if (r === rowKey) {
	        index = i;
	      }
	    });
	    if (index !== -1) {
	      expandedRows.splice(index, 1);
	    }
	    //
	    if (this.currentHoverKey == rowKey && this.hoverDom) {
	      this.hoverDom.style.display = 'none';
	    }
	    this.onExpandedRowsChange(expandedRows);
	  };

	  Table.prototype.getRowKey = function getRowKey(record, index) {
	    var rowKey = this.props.rowKey;
	    var key = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
	    (0, utils$2.warningOnce)(key !== undefined, 'Each record in table should have a unique `key` prop,' + 'or set `rowKey` to an unique primary key.');
	    return key;
	  };

	  Table.prototype.getExpandedRows = function getExpandedRows() {
	    return this.props.expandedRowKeys || this.state.expandedRowKeys;
	  };

	  Table.prototype.getHeader = function getHeader(columns, fixed) {
	    var _props = this.props,
	        filterDelay = _props.filterDelay,
	        onFilterChange = _props.onFilterChange,
	        onFilterClear = _props.onFilterClear,
	        filterable = _props.filterable,
	        showHeader = _props.showHeader,
	        expandIconAsCell = _props.expandIconAsCell,
	        clsPrefix = _props.clsPrefix,
	        onDragStart = _props.onDragStart,
	        onDragEnter = _props.onDragEnter,
	        onDragOver = _props.onDragOver,
	        onDrop = _props.onDrop,
	        draggable = _props.draggable,
	        onMouseDown = _props.onMouseDown,
	        onMouseMove = _props.onMouseMove,
	        onMouseUp = _props.onMouseUp,
	        dragborder = _props.dragborder,
	        onThMouseMove = _props.onThMouseMove,
	        dragborderKey = _props.dragborderKey,
	        minColumnWidth = _props.minColumnWidth,
	        headerHeight = _props.headerHeight,
	        afterDragColWidth = _props.afterDragColWidth,
	        headerScroll = _props.headerScroll,
	        bordered = _props.bordered,
	        onDropBorder = _props.onDropBorder;

	    var rows = this.getHeaderRows(columns);
	    if (expandIconAsCell && fixed !== 'right') {
	      rows[0].unshift({
	        key: 'u-table-expandIconAsCell',
	        className: clsPrefix + '-expand-icon-th',
	        title: '',
	        rowSpan: rows.length
	      });
	    }

	    var trStyle = headerHeight && !fixed ? { height: headerHeight } : fixed ? this.getHeaderRowStyle(columns, rows) : null;
	    var drop = draggable ? { onDragStart: onDragStart, onDragOver: onDragOver, onDrop: onDrop, onDragEnter: onDragEnter, draggable: draggable } : {};
	    var dragBorder = dragborder ? { onMouseDown: onMouseDown, onMouseMove: onMouseMove, onMouseUp: onMouseUp, dragborder: dragborder, onThMouseMove: onThMouseMove, dragborderKey: dragborderKey, onDropBorder: onDropBorder } : {};
	    var contentWidthDiff = 0;
	    //非固定表格,宽度不够时自动扩充
	    if (!fixed) {
	      contentWidthDiff = this.state.contentWidthDiff;
	    }
	    return showHeader ? _react2["default"].createElement(_TableHeader2["default"], _extends({}, drop, dragBorder, {
	      locale: this.props.locale,
	      minColumnWidth: minColumnWidth,
	      contentWidthDiff: contentWidthDiff,
	      contentWidth: this.contentWidth,
	      lastShowIndex: this.state.lastShowIndex,
	      clsPrefix: clsPrefix,
	      rows: rows,
	      contentTable: this.contentTable,
	      rowStyle: trStyle,
	      fixed: fixed,
	      filterable: filterable,
	      onFilterChange: onFilterChange,
	      onFilterClear: onFilterClear,
	      filterDelay: filterDelay,
	      afterDragColWidth: afterDragColWidth,
	      contentDomWidth: this.contentDomWidth,
	      scrollbarWidth: this.scrollbarWidth,
	      headerScroll: headerScroll,
	      bordered: bordered
	    })) : null;
	  };

	  Table.prototype.getHeaderRows = function getHeaderRows(columns) {
	    var _this2 = this;

	    var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    var rows = arguments[2];
	    var _state = this.state,
	        _state$contentWidthDi = _state.contentWidthDiff,
	        contentWidthDiff = _state$contentWidthDi === undefined ? 0 : _state$contentWidthDi,
	        _state$lastShowIndex = _state.lastShowIndex,
	        lastShowIndex = _state$lastShowIndex === undefined ? -1 : _state$lastShowIndex;

	    var filterCol = [];
	    rows = rows || [];
	    rows[currentRow] = rows[currentRow] || [];

	    columns.forEach(function (column, i) {
	      if (column.rowSpan && rows.length < column.rowSpan) {
	        while (rows.length < column.rowSpan) {
	          rows.push([]);
	        }
	      }
	      var width = column.width;
	      if (typeof width == 'string' && width.indexOf('%') > -1 && _this2.contentWidth) {
	        width = parseInt(_this2.contentWidth * parseInt(width) / 100);
	      } else if (width) {
	        width = parseInt(width);
	      }
	      if (lastShowIndex == i && width) {
	        width = width + contentWidthDiff;
	      }
	      var cell = {
	        key: column.key,
	        className: column.className || '',
	        children: column.title,
	        drgHover: column.drgHover,
	        fixed: column.fixed,
	        width: width,
	        dataindex: column.dataIndex,
	        textAlign: column.textAlign
	      };
	      if (column.onHeadCellClick) {
	        cell.onClick = column.onHeadCellClick;
	      }
	      if (column.children) {
	        _this2.getHeaderRows(column.children, currentRow + 1, rows);
	      }
	      if ('colSpan' in column) {
	        cell.colSpan = column.colSpan;
	      }
	      if ('rowSpan' in column) {
	        cell.rowSpan = column.rowSpan;
	      }
	      if (cell.colSpan !== 0) {
	        rows[currentRow].push(cell);
	      }
	      //判断是否启用过滤
	      if (_this2.props.filterable) {
	        //组装Filter需要的Col
	        filterCol.push({
	          key: column.key,
	          children: "过滤渲染",
	          width: column.width,
	          filtertype: column.filterType, //下拉的类型 包括['text','dropdown','date','daterange','number']
	          dataindex: column.dataIndex, //field
	          datasource: _this2.props.data, //需要单独拿到数据处理
	          format: column.format, //设置日期的格式
	          filterdropdown: column.filterDropdown, //是否显示 show hide
	          filterdropdownauto: column.filterDropdownAuto, //是否自定义数据
	          filterdropdowndata: column.filterDropdownData, //自定义数据格式
	          filterdropdownfocus: column.filterDropdownFocus, //焦点触发函数回调
	          filterdropdowntype: column.filterDropdownType, //下拉的类型分为 String,Number 默认是String
	          filterdropdownincludekeys: column.filterDropdownIncludeKeys, //下拉条件按照指定的keys去显示
	          filterinputnumberoptions: column.filterInputNumberOptions //设置数值框内的详细属性
	        });
	      }
	    });
	    if (this.props.filterable) {
	      rows.push(filterCol);
	    }
	    return rows.filter(function (row) {
	      return row.length > 0;
	    });
	  };

	  Table.prototype.getExpandedRow = function getExpandedRow(key, content, visible, className, fixed) {
	    var _props2 = this.props,
	        clsPrefix = _props2.clsPrefix,
	        expandIconAsCell = _props2.expandIconAsCell;

	    var colCount = void 0;
	    if (fixed === 'left') {
	      colCount = this.columnManager.leftLeafColumns().length;
	    } else if (fixed === 'right') {
	      colCount = this.columnManager.rightLeafColumns().length;
	    } else {
	      colCount = this.columnManager.leafColumns().length;
	    }

	    function contentContainer() {
	      if (content && content.props && content.props.style) {
	        return _react2["default"].createElement('div', { style: { height: content.props.style.height } });
	      } else {
	        return ' ';
	      }
	    }

	    var columns = [{
	      key: 'extra-row',
	      render: function render() {
	        return {
	          props: {
	            colSpan: colCount
	          },
	          children: !fixed ? content : contentContainer()
	        };
	      }
	    }];
	    if (expandIconAsCell && fixed !== 'right') {
	      columns.unshift({
	        key: 'expand-icon-placeholder',
	        render: function render() {
	          return null;
	        }
	      });
	    }
	    return _react2["default"].createElement(_TableRow2["default"], {
	      columns: columns,
	      visible: visible,
	      className: className,
	      key: key + '-extra-row',
	      clsPrefix: clsPrefix + '-expanded-row',
	      indent: 1,
	      expandable: false,
	      store: this.store,
	      dragborderKey: this.props.dragborderKey,
	      rowDraggAble: this.props.rowDraggAble,
	      onDragRow: this.onDragRow
	    });
	  };

	  /**
	   *
	   *
	   * @param {*} data
	   * @param {*} visible
	   * @param {*} indent 层级
	   * @param {*} columns
	   * @param {*} fixed
	   * @param {number} [rootIndex=-1] 祖级节点
	   * @returns
	   * @memberof Table
	   */
	  Table.prototype.getRowsByData = function getRowsByData(data, visible, indent, columns, fixed) {
	    var rootIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;

	    var props = this.props;
	    var childrenColumnName = props.childrenColumnName;
	    var expandedRowRender = props.expandedRowRender;
	    var expandRowByClick = props.expandRowByClick;
	    var fixedColumnsBodyRowsHeight = this.state.fixedColumnsBodyRowsHeight;

	    var rst = [];

	    var height = void 0;
	    var rowClassName = props.rowClassName;
	    var rowRef = props.rowRef;
	    var expandedRowClassName = props.expandedRowClassName;
	    var needIndentSpaced = props.data.some(function (record) {
	      return record[childrenColumnName];
	    });
	    var onRowClick = props.onRowClick;
	    var onRowDoubleClick = props.onRowDoubleClick;

	    var expandIconAsCell = fixed !== 'right' ? props.expandIconAsCell : false;
	    var expandIconColumnIndex = fixed !== 'right' ? props.expandIconColumnIndex : -1;
	    if (props.lazyLoad && props.lazyLoad.preHeight && indent == 0) {
	      rst.push(_react2["default"].createElement(_TableRow2["default"], { height: props.lazyLoad.preHeight, columns: [], className: '', key: 'table_row_first', store: this.store, visible: true }));
	    }
	    var lazyCurrentIndex = props.lazyLoad && props.lazyLoad.startIndex ? props.lazyLoad.startIndex : 0;
	    var lazyParentIndex = props.lazyLoad && props.lazyLoad.startParentIndex ? props.lazyLoad.startParentIndex : 0;
	    for (var i = 0; i < data.length; i++) {
	      var isHiddenExpandIcon = void 0;
	      var record = data[i];
	      var key = this.getRowKey(record, i);
	      var childrenColumn = record[childrenColumnName];
	      var isRowExpanded = this.isRowExpanded(record, i);
	      var expandedRowContent = void 0;
	      var expandedContentHeight = 0;
	      //fixedIndex一般是跟index是一个值的，只有是树结构时，会讲子节点的值也累计上
	      var fixedIndex = i;
	      //判断是否是tree结构
	      if (this.treeType) {
	        fixedIndex = this.treeRowIndex;
	      }
	      if (expandedRowRender && isRowExpanded) {
	        expandedRowContent = expandedRowRender(record, fixedIndex + lazyCurrentIndex, indent);
	        expandedContentHeight = parseInt(expandedRowContent.props && expandedRowContent.props.style && expandedRowContent.props.style.height ? expandedRowContent.props.style.height : 0);
	      }
	      //只有当使用expandedRowRender参数的时候才去识别isHiddenExpandIcon（隐藏行展开的icon）
	      if (expandedRowRender && typeof props.haveExpandIcon == 'function') {
	        isHiddenExpandIcon = props.haveExpandIcon(record, i);
	      }

	      var onHoverProps = {};

	      onHoverProps.onHover = this.handleRowHover;

	      if (props.height) {
	        height = props.height;
	      } else if (fixed || props.heightConsistent) {
	        height = fixedColumnsBodyRowsHeight[fixedIndex];
	      }

	      var leafColumns = void 0;
	      if (fixed === 'left') {
	        leafColumns = this.columnManager.leftLeafColumns();
	      } else if (fixed === 'right') {
	        leafColumns = this.columnManager.rightLeafColumns();
	      } else {
	        leafColumns = this.columnManager.leafColumns();
	      }
	      var className = rowClassName(record, fixedIndex + lazyCurrentIndex, indent);

	      //合计代码如果是最后一行并且有合计功能时，最后一行为合计列
	      if (i == data.length - 1 && props.showSum) {
	        className = className + ' sumrow';
	      }

	      var paramRootIndex = rootIndex;
	      //小于0说明为第一层节点，她的子孙节点要保存自己的根节点
	      if (paramRootIndex < 0) {
	        paramRootIndex = i + lazyParentIndex;
	      }
	      var index = i;
	      if (rootIndex == -1) {
	        index = i + lazyParentIndex;
	      }
	      rst.push(_react2["default"].createElement(_TableRow2["default"], _extends({
	        indent: indent,
	        indentSize: props.indentSize,
	        needIndentSpaced: needIndentSpaced,
	        className: className + ' ' + (this.props.rowDraggAble ? ' row-dragg-able ' : ''),
	        record: record,
	        expandIconAsCell: expandIconAsCell,
	        onDestroy: this.onRowDestroy,
	        index: index,
	        visible: visible,
	        expandRowByClick: expandRowByClick,
	        onExpand: this.onExpanded,
	        expandable: childrenColumn || expandedRowRender,
	        expanded: isRowExpanded,
	        clsPrefix: props.clsPrefix + '-row',
	        childrenColumnName: childrenColumnName,
	        columns: leafColumns,
	        expandIconColumnIndex: expandIconColumnIndex,
	        onRowClick: onRowClick,
	        onRowDoubleClick: onRowDoubleClick,
	        height: height,
	        isHiddenExpandIcon: isHiddenExpandIcon
	      }, onHoverProps, {
	        key: "table_row_" + key + "_" + index,
	        hoverKey: key,
	        ref: rowRef,
	        store: this.store,
	        fixed: fixed,
	        expandedContentHeight: expandedContentHeight,
	        setRowHeight: props.setRowHeight,
	        setRowParentIndex: props.setRowParentIndex,
	        treeType: childrenColumn || this.treeType ? true : false,
	        fixedIndex: fixedIndex + lazyCurrentIndex,
	        rootIndex: rootIndex,
	        syncHover: props.syncHover,
	        bodyDisplayInRow: props.bodyDisplayInRow,
	        rowDraggAble: this.props.rowDraggAble,
	        onDragRow: this.onDragRow,
	        contentTable: this.contentTable,
	        tableUid: this.tableUid
	      })));
	      this.treeRowIndex++;
	      var subVisible = visible && isRowExpanded;

	      if (expandedRowContent && isRowExpanded) {
	        rst.push(this.getExpandedRow(key, expandedRowContent, subVisible, expandedRowClassName(record, i, indent), fixed));
	      }
	      if (childrenColumn) {
	        this.treeType = true; //证明是tree表形式visible = {true}
	        rst = rst.concat(this.getRowsByData(childrenColumn, subVisible, indent + 1, columns, fixed, paramRootIndex));
	      }
	    }

	    if (props.lazyLoad && props.lazyLoad.sufHeight && indent == 0) {
	      rst.push(_react2["default"].createElement(_TableRow2["default"], { height: props.lazyLoad.sufHeight, key: 'table_row_end', columns: [], className: '', store: this.store, visible: true }));
	    }
	    return rst;
	  };

	  Table.prototype.getRows = function getRows(columns, fixed) {
	    //统计index，只有含有鼠表结构才有用，因为数表结构时，固定列的索引取值有问题
	    this.treeRowIndex = 0;
	    var rs = this.getRowsByData(this.state.data, true, 0, columns, fixed);
	    return rs;
	  };

	  Table.prototype.getColGroup = function getColGroup(columns, fixed) {
	    var _this3 = this;

	    var cols = [];
	    var self = this;

	    var _state2 = this.state,
	        _state2$contentWidthD = _state2.contentWidthDiff,
	        contentWidthDiff = _state2$contentWidthD === undefined ? 0 : _state2$contentWidthD,
	        _state2$lastShowIndex = _state2.lastShowIndex,
	        lastShowIndex = _state2$lastShowIndex === undefined ? 0 : _state2$lastShowIndex;

	    if (this.props.expandIconAsCell && fixed !== 'right') {
	      cols.push(_react2["default"].createElement('col', {
	        className: this.props.clsPrefix + '-expand-icon-col',
	        key: 'u-table-expand-icon-col'
	      }));
	    }
	    var leafColumns = void 0;
	    if (fixed === 'left') {
	      contentWidthDiff = 0;
	      leafColumns = this.columnManager.leftLeafColumns();
	    } else if (fixed === 'right') {
	      contentWidthDiff = 0;
	      leafColumns = this.columnManager.rightLeafColumns();
	    } else {
	      leafColumns = this.columnManager.leafColumns();
	    }
	    cols = cols.concat(leafColumns.map(function (c, i, arr) {
	      var fixedClass = '';
	      var width = c.width;
	      if (typeof width == 'string' && width.indexOf('%') > -1 && self.contentWidth) {
	        width = parseInt(self.contentWidth * parseInt(width) / 100);
	      } else if (width) {
	        width = parseInt(width);
	      }
	      if (lastShowIndex == i && width) {
	        width = width + contentWidthDiff;
	      }
	      if (!fixed && c.fixed) {
	        fixedClass = ' ' + _this3.props.clsPrefix + '-row-fixed-columns-in-body';
	      }
	      return _react2["default"].createElement('col', { key: c.key, style: { width: width, minWidth: c.width }, className: fixedClass });
	    }));
	    return _react2["default"].createElement(
	      'colgroup',
	      { id: 'bee-table-colgroup' },
	      cols
	    );
	  };

	  Table.prototype.getLeftFixedTable = function getLeftFixedTable() {
	    return this.getTable({
	      columns: this.columnManager.leftColumns(),
	      fixed: 'left'
	    });
	  };

	  Table.prototype.getRightFixedTable = function getRightFixedTable() {
	    return this.getTable({
	      columns: this.columnManager.rightColumns(),
	      fixed: 'right'
	    });
	  };

	  Table.prototype.getTable = function getTable() {
	    var _this4 = this;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var columns = options.columns,
	        fixed = options.fixed;
	    var _props3 = this.props,
	        clsPrefix = _props3.clsPrefix,
	        _props3$scroll = _props3.scroll,
	        scroll = _props3$scroll === undefined ? {} : _props3$scroll,
	        getBodyWrapper = _props3.getBodyWrapper,
	        footerScroll = _props3.footerScroll,
	        headerScroll = _props3.headerScroll;
	    var useFixedHeader = this.props.useFixedHeader;

	    var bodyStyle = _extends({}, this.props.bodyStyle);
	    var headStyle = {};
	    var innerBodyStyle = {};

	    var tableClassName = '';
	    //表格元素的宽度大于容器的宽度也显示滚动条
	    if (scroll.x || fixed || this.contentDomWidth < this.contentWidth) {
	      tableClassName = clsPrefix + '-fixed';
	      //没有数据并且含有顶部菜单时
	      if (this.props.data.length == 0 && this.props.headerScroll) {
	        bodyStyle.overflowX = 'hidden';
	      }
	      if (!footerScroll) {
	        bodyStyle.overflowX = bodyStyle.overflowX || 'auto';
	      }
	    }

	    if (scroll.y) {
	      // maxHeight will make fixed-Table scrolling not working
	      // so we only set maxHeight to body-Table here
	      if (fixed) {
	        // bodyStyle.height = bodyStyle.height || scroll.y;
	        innerBodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;
	        innerBodyStyle.overflowY = bodyStyle.overflowY || 'scroll';
	      } else {
	        bodyStyle.maxHeight = bodyStyle.maxHeight || scroll.y;
	      }
	      bodyStyle.overflowY = bodyStyle.overflowY || 'scroll';
	      useFixedHeader = true;

	      // Add negative margin bottom for scroll bar overflow bug
	      var scrollbarWidth = this.scrollbarWidth;
	      if (scrollbarWidth >= 0) {
	        (fixed ? bodyStyle : headStyle).paddingBottom = '0px';
	        //显示表头滚动条
	        if (headerScroll) {
	          if (fixed) {

	            if (this.domWidthDiff <= 0) {
	              headStyle.marginBottom = scrollbarWidth + 'px';
	              // bodyStyle.marginBottom = `-${scrollbarWidth}px`;
	            } else {
	              innerBodyStyle.overflowX = 'auto';
	            }
	          } else {
	            //内容少，不用显示滚动条
	            if (this.domWidthDiff > 0) {
	              headStyle.overflowX = 'hidden';
	            }
	            headStyle.marginBottom = '0px';
	          }
	        } else {
	          if (fixed) {
	            if (this.domWidthDiff > 0) {
	              headStyle.overflow = 'hidden';
	              innerBodyStyle.overflowX = 'auto'; //兼容expand场景、子表格含有固定列的场景
	            }
	          } else {
	            headStyle.marginBottom = '-' + scrollbarWidth + 'px';
	          }
	        }
	      }
	    }

	    var renderTable = function renderTable() {
	      var hasHead = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	      var hasBody = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	      var tableStyle = {};
	      if (!fixed && scroll.x) {
	        // not set width, then use content fixed width
	        if (scroll.x === true) {
	          tableStyle.tableLayout = 'fixed';
	        } else {
	          tableStyle.width = _this4.contentWidth - _this4.columnManager.getLeftColumnsWidth(_this4.contentWidth) - _this4.columnManager.getRightColumnsWidth(_this4.contentWidth);
	        }
	      }
	      // 自动出现滚动条
	      if (!fixed && _this4.contentDomWidth < _this4.contentWidth) {
	        tableStyle.width = _this4.contentWidth - _this4.columnManager.getLeftColumnsWidth(_this4.contentWidth) - _this4.columnManager.getRightColumnsWidth(_this4.contentWidth);
	      }
	      var tableBody = hasBody ? getBodyWrapper(_react2["default"].createElement(
	        'tbody',
	        { className: clsPrefix + '-tbody', onMouseLeave: _this4.onBodyMouseLeave },
	        _this4.getRows(columns, fixed)
	      )) : null;
	      var _drag_class = _this4.props.dragborder ? "table-drag-bordered" : "";
	      return _react2["default"].createElement(
	        'table',
	        { id: 'bee-table-uid', className: ' ' + tableClassName + '  table-bordered ' + _drag_class + ' ', style: tableStyle },
	        _this4.getColGroup(columns, fixed),
	        hasHead ? _this4.getHeader(columns, fixed) : null,
	        tableBody
	      );
	    };

	    var headTable = void 0;

	    if (useFixedHeader) {
	      headTable = _react2["default"].createElement(
	        'div',
	        {
	          className: clsPrefix + '-header',
	          ref: fixed ? null : 'headTable',
	          style: headStyle,
	          onMouseOver: this.detectScrollTarget,
	          onTouchStart: this.detectScrollTarget,
	          onScroll: this.handleBodyScroll
	        },
	        renderTable(true, false)
	      );
	    }
	    var BodyTable = _react2["default"].createElement(
	      'div',
	      {
	        className: clsPrefix + '-body',
	        style: bodyStyle,
	        ref: function ref(el) {
	          _this4.bodyTable = el;
	        },
	        onMouseOver: this.detectScrollTarget,
	        onTouchStart: this.detectScrollTarget,
	        onScroll: this.handleBodyScroll,
	        onMouseLeave: this.onBodyMouseLeave
	      },
	      this.renderDragHideTable(),
	      renderTable(!useFixedHeader)
	    );

	    if (fixed && columns.length) {
	      var refName = void 0;
	      if (columns[0].fixed === 'left' || columns[0].fixed === true) {
	        refName = 'fixedColumnsBodyLeft';
	      } else if (columns[0].fixed === 'right') {
	        refName = 'fixedColumnsBodyRight';
	      }
	      delete bodyStyle.overflowX;
	      delete bodyStyle.overflowY;
	      BodyTable = _react2["default"].createElement(
	        'div',
	        {
	          className: clsPrefix + '-body-outer',
	          style: _extends({}, bodyStyle)
	        },
	        _react2["default"].createElement(
	          'div',
	          {
	            style: _extends({}, innerBodyStyle),
	            className: clsPrefix + '-body-inner',
	            ref: refName,
	            onMouseOver: this.detectScrollTarget,
	            onTouchStart: this.detectScrollTarget,
	            onScroll: this.handleBodyScroll
	          },
	          renderTable(!useFixedHeader),
	          _react2["default"].createElement('div', { className: 'scroll-dom', style: { height: this.scrollbarWidth + 'px' } })
	        )
	      );
	    }
	    var leftFixedWidth = this.columnManager.getLeftColumnsWidth(this.contentWidth);
	    var rightFixedWidth = this.columnManager.getRightColumnsWidth(this.contentWidth);
	    var parStyle = {};
	    if (!fixed) {
	      parStyle = { 'marginLeft': leftFixedWidth, 'marginRight': rightFixedWidth };
	    }
	    return _react2["default"].createElement(
	      'div',
	      { style: parStyle },
	      headTable,
	      BodyTable
	    );
	  };

	  Table.prototype.getTitle = function getTitle() {
	    var _props4 = this.props,
	        title = _props4.title,
	        clsPrefix = _props4.clsPrefix;

	    return title ? _react2["default"].createElement(
	      'div',
	      { className: clsPrefix + '-title' },
	      title(this.state.data)
	    ) : null;
	  };

	  Table.prototype.getFooter = function getFooter() {
	    var _props5 = this.props,
	        footer = _props5.footer,
	        clsPrefix = _props5.clsPrefix;

	    return footer ? _react2["default"].createElement(
	      'div',
	      { className: clsPrefix + '-footer' },
	      footer(this.state.data)
	    ) : null;
	  };

	  Table.prototype.getEmptyText = function getEmptyText() {
	    var _props6 = this.props,
	        emptyText = _props6.emptyText,
	        clsPrefix = _props6.clsPrefix,
	        data = _props6.data;

	    return !data.length ? _react2["default"].createElement(
	      'div',
	      { className: clsPrefix + '-placeholder' },
	      emptyText()
	    ) : null;
	  };

	  Table.prototype.getHeaderRowStyle = function getHeaderRowStyle(columns, rows) {
	    var fixedColumnsHeadRowsHeight = this.state.fixedColumnsHeadRowsHeight;

	    var headerHeight = fixedColumnsHeadRowsHeight[0];

	    if (headerHeight && columns) {
	      if (headerHeight === 'auto') {
	        return { height: 'auto' };
	      }
	      return { height: headerHeight / rows.length };
	    }
	    return null;
	  };

	  Table.prototype.syncFixedTableRowHeight = function syncFixedTableRowHeight() {
	    //this.props.height、headerHeight分别为用户传入的行高和表头高度，如果有值，所有行的高度都是固定的，主要为了避免在千行数据中有固定列时获取行高度有问题
	    var _props7 = this.props,
	        clsPrefix = _props7.clsPrefix,
	        height = _props7.height,
	        headerHeight = _props7.headerHeight,
	        columns = _props7.columns,
	        heightConsistent = _props7.heightConsistent;

	    var headRows = this.refs.headTable ? this.refs.headTable.querySelectorAll('thead') : this.bodyTable.querySelectorAll('thead');
	    var bodyRows = this.bodyTable.querySelectorAll('.' + clsPrefix + '-row') || [];
	    var leftBodyRows = this.refs.fixedColumnsBodyLeft && this.refs.fixedColumnsBodyLeft.querySelectorAll('.' + clsPrefix + '-row') || [];
	    var rightBodyRows = this.refs.fixedColumnsBodyRight && this.refs.fixedColumnsBodyRight.querySelectorAll('.' + clsPrefix + '-row') || [];
	    var fixedColumnsHeadRowsHeight = [].map.call(headRows, function (row) {
	      var height = headerHeight;
	      if (headerHeight) {
	        height = ((0, utils$2.getMaxColChildrenLength)(columns) + 1) * headerHeight;
	      }
	      return headerHeight ? height : row.getBoundingClientRect().height || 'auto';
	    });
	    var fixedColumnsBodyRowsHeight = [].map.call(bodyRows, function (row, index) {
	      var rsHeight = height;
	      if (rsHeight) {
	        return rsHeight;
	      } else {
	        // 为了提高性能，默认获取主表的高度，但是有的场景中固定列的高度比主表的高度高，所以提供此属性，会统计所有列的高度取最大的，设置
	        if (heightConsistent) {
	          var leftHeight = void 0,
	              rightHeight = void 0,
	              currentHeight = void 0,
	              maxHeight = void 0;
	          leftHeight = leftBodyRows[index] ? leftBodyRows[index].getBoundingClientRect().height : 0;
	          rightHeight = rightBodyRows[index] ? rightBodyRows[index].getBoundingClientRect().height : 0;
	          currentHeight = row.getBoundingClientRect().height;
	          maxHeight = Math.max(leftHeight, rightHeight, currentHeight);
	          return maxHeight || 'auto';
	        } else {
	          return row.getBoundingClientRect().height || 'auto';
	        }
	      }
	    });

	    if ((0, _shallowequal2["default"])(this.state.fixedColumnsHeadRowsHeight, fixedColumnsHeadRowsHeight) && (0, _shallowequal2["default"])(this.state.fixedColumnsBodyRowsHeight, fixedColumnsBodyRowsHeight)) {
	      return;
	    }
	    this.setState({
	      fixedColumnsHeadRowsHeight: fixedColumnsHeadRowsHeight,
	      fixedColumnsBodyRowsHeight: fixedColumnsBodyRowsHeight
	    });
	  };

	  Table.prototype.resetScrollX = function resetScrollX() {
	    if (this.refs.headTable) {
	      this.refs.headTable.scrollLeft = 0;
	    }
	    if (this.bodyTable) {
	      this.bodyTable.scrollLeft = 0;
	    }
	  };

	  Table.prototype.findExpandedRow = function findExpandedRow(record, index) {
	    var _this5 = this;

	    var rows = this.getExpandedRows().filter(function (i) {
	      return i === _this5.getRowKey(record, index);
	    });
	    return rows[0];
	  };

	  Table.prototype.isRowExpanded = function isRowExpanded(record, index) {
	    return typeof this.findExpandedRow(record, index) !== 'undefined';
	  };

	  Table.prototype.onBodyMouseLeave = function onBodyMouseLeave(e) {
	    this.hideHoverDom(e);
	  };

	  Table.prototype.detectScrollTarget = function detectScrollTarget(e) {
	    if (this.scrollTarget !== e.currentTarget) {
	      this.scrollTarget = e.currentTarget;
	    }
	  };

	  Table.prototype.hideHoverDom = function hideHoverDom(e) {
	    if (this.hoverDom) {
	      this.hoverDom.style.display = 'none';
	    }
	  };

	  Table.prototype.handleBodyScroll = function handleBodyScroll(e) {
	    var _props8 = this.props,
	        _props8$scroll = _props8.scroll,
	        scroll = _props8$scroll === undefined ? {} : _props8$scroll,
	        clsPrefix = _props8.clsPrefix,
	        handleScrollY = _props8.handleScrollY,
	        handleScrollX = _props8.handleScrollX;
	    var _refs = this.refs,
	        headTable = _refs.headTable,
	        bodyTable = _refs.bodyTable,
	        fixedColumnsBodyLeft = _refs.fixedColumnsBodyLeft,
	        fixedColumnsBodyRight = _refs.fixedColumnsBodyRight;
	    // Prevent scrollTop setter trigger onScroll event
	    // http://stackoverflow.com/q/1386696

	    if (e.currentTarget !== e.target) {
	      return;
	    }
	    if (e.target.scrollLeft !== this.lastScrollLeft) {
	      var position = '';
	      if (e.target === bodyTable && headTable) {
	        headTable.scrollLeft = e.target.scrollLeft;
	      } else if (e.target === headTable && bodyTable) {
	        bodyTable.scrollLeft = e.target.scrollLeft;
	      }
	      if (e.target.scrollLeft === 0) {
	        position = 'left';
	      } else if (e.target.scrollLeft + 1 >= e.target.children[0].getBoundingClientRect().width - e.target.getBoundingClientRect().width) {
	        position = 'right';
	      } else if (this.state.scrollPosition !== 'middle') {
	        position = 'middle';
	      }
	      if (position) {
	        (0, _componentClasses2["default"])(this.contentTable).remove(new RegExp('^' + clsPrefix + '-scroll-position-.+$')).add(clsPrefix + '-scroll-position-' + position);
	      }
	      if (handleScrollX) {
	        (0, utils$2.debounce)(handleScrollX(e.target.scrollLeft, this.treeType), 300);
	      }
	    }
	    // console.log('lastScrollTop--'+this.lastScrollTop+'--eventScrollTop--'+ e.target.scrollTop);
	    if (scroll.y && this.lastScrollTop != e.target.scrollTop && e.target !== headTable) {
	      if (fixedColumnsBodyLeft && e.target !== fixedColumnsBodyLeft) {
	        fixedColumnsBodyLeft.scrollTop = e.target.scrollTop;
	      }
	      if (fixedColumnsBodyRight && e.target !== fixedColumnsBodyRight) {
	        fixedColumnsBodyRight.scrollTop = e.target.scrollTop;
	      }
	      if (bodyTable && e.target !== bodyTable) {
	        bodyTable.scrollTop = e.target.scrollTop;
	      }
	      if (this.hoverDom) {
	        this.hoverDom.style.display = 'none';
	      }
	      this.lastScrollTop = e.target.scrollTop;
	      if (handleScrollY) {
	        (0, utils$2.debounce)(handleScrollY(this.lastScrollTop, this.treeType), 300);
	      }
	    }

	    // Remember last scrollLeft for scroll direction detecting.
	    this.lastScrollLeft = e.target.scrollLeft;
	  };

	  Table.prototype.handleRowHover = function handleRowHover(isHover, key, event, currentIndex) {
	    //增加新的API，设置是否同步Hover状态，提高性能，避免无关的渲染
	    var _props9 = this.props,
	        syncHover = _props9.syncHover,
	        onRowHover = _props9.onRowHover,
	        data = _props9.data;

	    var record = data[currentIndex];
	    // 固定列、或者含有hoverdom时情况下同步hover状态
	    if (this.columnManager.isAnyColumnsFixed() && syncHover) {
	      this.hoverKey = key;
	      this.store.setState({
	        currentHoverKey: isHover ? key : null
	      });
	    }
	    if (this.hoverDom) {
	      if (isHover) {
	        this.currentHoverKey = key;
	        var td = (0, utils$2.closest)(event.target, 'td');
	        if (td) {
	          var scrollTop = this.lastScrollTop ? this.lastScrollTop : 0;
	          var top = td.offsetTop - scrollTop;
	          if (this.refs.headTable) {
	            top = top + this.refs.headTable.clientHeight;
	          }
	          this.hoverDom.style.top = top + 'px';
	          this.hoverDom.style.height = td.offsetHeight + 'px';
	          this.hoverDom.style.lineHeight = td.offsetHeight + 'px';
	          this.hoverDom.style.display = 'block';
	        }
	      }
	    }

	    onRowHover && onRowHover(currentIndex, record);
	  };

	  Table.prototype.render = function render() {
	    var _this6 = this;

	    var props = this.props;
	    var clsPrefix = props.clsPrefix;
	    var hasFixedLeft = this.columnManager.isAnyColumnsLeftFixed();
	    var className = props.clsPrefix;
	    if (props.className) {
	      className += ' ' + props.className;
	    }
	    if (props.useFixedHeader || props.scroll && props.scroll.y) {
	      className += ' ' + clsPrefix + '-fixed-header';
	    }
	    if (props.bordered) {
	      className += ' ' + clsPrefix + '-bordered';
	    }
	    className += ' ' + clsPrefix + '-scroll-position-' + this.state.scrollPosition;
	    //如果传入height说明是固定高度
	    if (props.height) {
	      className += ' fixed-height';
	    }
	    if (props.bodyDisplayInRow) {
	      className += ' body-dispaly-in-row';
	    }
	    if (props.headerDisplayInRow) {
	      className += ' header-dispaly-in-row';
	    }
	    var isTableScroll = this.columnManager.isAnyColumnsFixed() || props.scroll.x || props.scroll.y;
	    var loading = props.loading;
	    if (typeof loading === 'boolean') {
	      loading = {
	        show: loading
	      };
	    }
	    if (props.size) {
	      className += ' ' + clsPrefix + '-' + props.size;
	    }
	    if (hasFixedLeft) {
	      className += ' has-fixed-left';
	    }

	    return _react2["default"].createElement(
	      'div',
	      { className: className, style: props.style, ref: function ref(el) {
	          return _this6.contentTable = el;
	        },
	        tabIndex: props.focusable && (props.tabIndex ? props.tabIndex : '0') },
	      this.getTitle(),
	      _react2["default"].createElement(
	        'div',
	        { className: clsPrefix + '-content' },
	        _react2["default"].createElement(
	          'div',
	          { className: isTableScroll ? clsPrefix + '-scroll' : '' },
	          this.getTable({ columns: this.columnManager.groupedColumns() }),
	          this.getEmptyText(),
	          this.getFooter()
	        ),
	        hasFixedLeft && _react2["default"].createElement(
	          'div',
	          { className: clsPrefix + '-fixed-left' },
	          this.getLeftFixedTable()
	        ),
	        this.columnManager.isAnyColumnsRightFixed() && _react2["default"].createElement(
	          'div',
	          { className: clsPrefix + '-fixed-right' },
	          this.getRightFixedTable()
	        )
	      ),
	      _react2["default"].createElement(_beeLoading2["default"], _extends({
	        container: this
	      }, loading)),
	      props.hoverContent && _react2["default"].createElement(
	        'div',
	        { className: 'u-row-hover',
	          onMouseEnter: this.onRowHoverMouseEnter, onMouseLeave: this.onRowHoverMouseLeave, ref: function ref(el) {
	            return _this6.hoverDom = el;
	          } },
	        props.hoverContent()
	      )
	    );
	  };

	  return Table;
	}(React__default.Component);

	Table.propTypes = propTypes$1;
	Table.defaultProps = defaultProps;

	exports["default"] = Table;
	module.exports = exports['default'];
	});

	unwrapExports(Table_1);

	Table_1.Column = Column_1;
	Table_1.ColumnGroup = ColumnGroup_1;

	var build$s = Table_1;

	var util$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.sortBy = sortBy;
	exports.compare = compare;
	exports.ObjectAssign = ObjectAssign;
	/*
	* 快速排序，按某个属性，或按“获取排序依据的函数”，来排序.
	* @method soryBy
	* @static
	* @param {array} arr 待处理数组
	* @param {string|function} prop 排序依据属性，获取
	* @param {boolean} desc 降序
	* @return {array} 返回排序后的新数组
	*/

	function sortBy(arr, prop, desc) {
	    var props = [],
	        ret = [],
	        i = 0,
	        len = arr.length;
	    if (typeof prop == 'string') {
	        for (; i < len; i++) {
	            var oI = arr[i];
	            (props[i] = new String(oI && oI[prop] || ''))._obj = oI;
	        }
	    } else if (typeof prop == 'function') {
	        for (; i < len; i++) {
	            var _oI = arr[i];
	            (props[i] = new String(_oI && prop(_oI) || ''))._obj = _oI;
	        }
	    } else {
	        throw '参数类型错误';
	    }
	    props.sort();
	    for (i = 0; i < len; i++) {
	        ret[i] = props[i]._obj;
	    }
	    if (desc) ret.reverse();
	    return ret;
	}
	/**
	 * 数组对象排序
	 * console.log(arr.sort(compare('age')))
	 * @param {} property 
	 */
	function compare(property) {
	    return function (a, b) {
	        var value1 = a[property];
	        var value2 = b[property];
	        return value1 - value2;
	    };
	}

	/**
	 * 简单数组数据对象拷贝
	 * @param {*} obj 要拷贝的对象 
	 */
	function ObjectAssign(obj) {
	    var b = obj instanceof Array;
	    var tagObj = b ? [] : {};
	    if (b) {
	        //数组
	        obj.forEach(function (da) {
	            var _da = {};
	            _extends(_da, da);
	            tagObj.push(_da);
	        });
	    } else {
	        _extends(tagObj, obj);
	    }
	    return tagObj;
	}
	});

	unwrapExports(util$6);
	var util_1$6 = util$6.sortBy;
	var util_2$3 = util$6.compare;
	var util_3$3 = util$6.ObjectAssign;

	var multiSelect_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports["default"] = multiSelect;



	var _react2 = _interopRequireDefault(React__default);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	/**
	 * 参数: 过滤表头
	 * @param {*} Table
	 * @param {*} Checkbox
	 * @param {*} Popover
	 * @param {*} Icon
	 */

	function multiSelect(Table, Checkbox) {
	  var _class, _temp, _initialiseProps;

	  return _temp = _class = function (_Component) {
	    _inherits(MultiSelect, _Component);

	    function MultiSelect(props) {
	      _classCallCheck(this, MultiSelect);

	      var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	      _initialiseProps.call(_this);

	      var obj = _this.getCheckedOrIndeter(props.data);
	      _this.state = _extends({}, obj, {
	        data: (0, util$6.ObjectAssign)(props.data)
	      });
	      return _this;
	    }

	    MultiSelect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      if ('data' in nextProps) {
	        var obj = this.getCheckedOrIndeter(nextProps.data);
	        this.setState(_extends({}, obj, {
	          data: (0, util$6.ObjectAssign)(nextProps.data)
	        }));
	      }
	    };

	    /**
	     * @param {*} data 
	     */


	    MultiSelect.prototype.getCheckedOrIndeter = function getCheckedOrIndeter(data) {
	      var obj = {};
	      var checkStatus = this.setChecked(data);
	      if (!checkStatus) {
	        obj.checkedAll = false;
	        obj.indeterminate = false;
	        return obj;
	      }
	      if (checkStatus == 'indeter') {
	        obj.indeterminate = true;
	        obj.checkedAll = false;
	      } else if (checkStatus == 'all') {
	        obj.checkedAll = true;
	        obj.indeterminate = false;
	      }
	      return obj;
	    };

	    /**
	     * 判断数据是否全部选中
	     * @param {*} data 
	     * reutnr  string  all(全选)、indeter(半选)
	     */


	    MultiSelect.prototype.setChecked = function setChecked(data) {
	      if (!this.isArray(data)) return false;
	      if (data.length == 0) return false;
	      var count = 0;
	      var disabledCount = 0;
	      data.forEach(function (da) {
	        if (da._checked && !da._disabled) {
	          count++;
	        }
	        if (da._disabled) {
	          disabledCount++;
	        }
	      });

	      if (data.length == count + disabledCount) {
	        return "all";
	      }
	      return count == 0 ? false : "indeter";
	    };

	    /**
	     * 判断是否是数组
	     * @param {*} o 
	     */


	    MultiSelect.prototype.isArray = function isArray(o) {
	      return Object.prototype.toString.call(o) == '[object Array]';
	    };

	    MultiSelect.prototype.render = function render() {
	      var columns = this.props.columns;
	      var data = this.state.data;

	      return _react2["default"].createElement(Table, _extends({}, this.props, { columns: this.getDefaultColumns(columns), data: data }));
	    };

	    return MultiSelect;
	  }(React__default.Component), _class.defaultProps = {
	    prefixCls: "u-table-mult-select",
	    getSelectedDataFunc: function getSelectedDataFunc() {}
	  }, _initialiseProps = function _initialiseProps() {
	    var _this2 = this;

	    this.onAllCheckChange = function () {
	      var _state = _this2.state,
	          data = _state.data,
	          checkedAll = _state.checkedAll,
	          indeterminate = _state.indeterminate;

	      var check = false;
	      if (checkedAll) {
	        check = false;
	      } else {
	        // if(indeterminate){
	        //   check = true;
	        // }else{
	        //   check = true;
	        // }
	        check = true;
	      }
	      var selectList = [];

	      data.forEach(function (item) {
	        if (!item._disabled) {
	          item._checked = check;
	        }

	        if (item._checked) {
	          selectList.push(item);
	        }
	      });
	      if (selectList.length > 0) {
	        indeterminate = true;
	      } else {
	        indeterminate = false;
	      }
	      _this2.setState({
	        indeterminate: indeterminate,
	        checkedAll: check
	      });
	      _this2.props.getSelectedDataFunc(selectList);
	    };

	    this.handleClick = function () {};

	    this.onCheckboxChange = function (text, record, index) {
	      return function () {
	        var data = _this2.state.data;

	        var selectList = [];
	        record._checked = record._checked ? false : true;
	        var obj = _this2.getCheckedOrIndeter(data);
	        _this2.setState(_extends({
	          data: data
	        }, obj));
	        data.forEach(function (da) {
	          if (da._checked) {
	            selectList.push(da);
	          }
	        });
	        _this2.props.getSelectedDataFunc(selectList, record, index);
	      };
	    };

	    this.getDefaultColumns = function (columns) {
	      var _state2 = _this2.state,
	          checkedAll = _state2.checkedAll,
	          indeterminate = _state2.indeterminate;

	      var checkAttr = { checked: checkedAll ? true : false };
	      var data = _this2.props.data;
	      var dataLength = data.length;
	      var disabledCount = 0;
	      indeterminate ? checkAttr.indeterminate = true : "";
	      //设置表头Checkbox是否可以点击
	      data.forEach(function (item, index, arr) {
	        if (item._disabled) {
	          disabledCount++;
	        }
	      });

	      var _defaultColumns = [{
	        title: _react2["default"].createElement(Checkbox, _extends({
	          className: "table-checkbox"
	        }, checkAttr, {
	          disabled: disabledCount == dataLength ? true : false,
	          onChange: _this2.onAllCheckChange
	        })),
	        key: "checkbox",
	        dataIndex: "checkbox",
	        fixed: "left",
	        width: 50,
	        render: function render(text, record, index) {
	          var attr = {};
	          record._disabled ? attr.disabled = record._disabled : "";
	          return _react2["default"].createElement(Checkbox, _extends({
	            key: index,
	            className: "table-checkbox"
	          }, attr, {
	            checked: record._checked,
	            onClick: _this2.handleClick,
	            onChange: _this2.onCheckboxChange(text, record, index)
	          }));
	        }
	      }];
	      return _defaultColumns.concat(columns);
	    };
	  }, _temp;
	}
	module.exports = exports["default"];
	});

	unwrapExports(multiSelect_1);

	// call something on iterator step with safe closing on error

	var _iterCall = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) _anObject(ret.call(iterator));
	    throw e;
	  }
	};

	// check on default Array iterator

	var ITERATOR$1 = _wks('iterator');
	var ArrayProto = Array.prototype;

	var _isArrayIter = function (it) {
	  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
	};

	var _createProperty = function (object, index, value) {
	  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
	  else object[index] = value;
	};

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = _wks('toStringTag');
	// ES3 wrong here
	var ARG = _cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	var _classof = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	    // builtinTag case
	    : ARG ? _cof(O)
	    // ES3 arguments fallback
	    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	var ITERATOR$2 = _wks('iterator');

	var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$2]
	    || it['@@iterator']
	    || _iterators[_classof(it)];
	};

	var ITERATOR$3 = _wks('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR$3]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	} catch (e) { /* empty */ }

	var _iterDetect = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR$3]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR$3] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};

	_export(_export.S + _export.F * !_iterDetect(function (iter) { }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = _toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = core_getIteratorMethod(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = _toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

	var from_1 = _core.Array.from;

	var from_1$1 = createCommonjsModule(function (module) {
	module.exports = { "default": from_1, __esModule: true };
	});

	unwrapExports(from_1$1);

	var toConsumableArray = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _from2 = _interopRequireDefault(from_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};
	});

	var _toConsumableArray = unwrapExports(toConsumableArray);

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	var emptyObject_1 = emptyObject;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant$2(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	var invariant_1$1 = invariant$2;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction$1 = function emptyFunction() {};

	emptyFunction$1.thatReturns = makeEmptyFunction;
	emptyFunction$1.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction$1.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction$1.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction$1.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction$1.thatReturnsArgument = function (arg) {
	  return arg;
	};

	var emptyFunction_1 = emptyFunction$1;

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning$4 = emptyFunction_1;

	if (process.env.NODE_ENV !== 'production') {
	  var printWarning$2 = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning$4 = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning$2.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var warning_1$1 = warning$4;

	if (process.env.NODE_ENV !== 'production') {
	  var warning$5 = warning_1$1;
	}

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	var ReactPropTypeLocationNames;
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	} else {
	  ReactPropTypeLocationNames = {};
	}

	function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */

	  var injectedMixins = [];

	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',

	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',

	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',

	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',

	    // ==== Definition methods ====

	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',

	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',

	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',

	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',

	    // ==== Delegate methods ====

	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',

	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',

	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',

	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',

	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillMount`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillMount: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillReceiveProps`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',

	    /**
	     * Replacement for (deprecated) `componentWillUpdate`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillUpdate: 'DEFINE_MANY',

	    // ==== Advanced methods ====

	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };

	  /**
	   * Similar to ReactClassInterface but for static methods.
	   */
	  var ReactClassStaticInterface = {
	    /**
	     * This method is invoked after a component is instantiated and when it
	     * receives new props. Return an object to update state in response to
	     * prop changes. Return null to indicate no change to state.
	     *
	     * If an object is returned, its keys will be merged into the existing state.
	     *
	     * @return {object || null}
	     * @optional
	     */
	    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
	  };

	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */
	  var RESERVED_SPEC_KEYS = {
	    displayName: function(Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function(Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function(Constructor, childContextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }
	      Constructor.childContextTypes = objectAssign(
	        {},
	        Constructor.childContextTypes,
	        childContextTypes
	      );
	    },
	    contextTypes: function(Constructor, contextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }
	      Constructor.contextTypes = objectAssign(
	        {},
	        Constructor.contextTypes,
	        contextTypes
	      );
	    },
	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function(Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(
	          Constructor.getDefaultProps,
	          getDefaultProps
	        );
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function(Constructor, propTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }
	      Constructor.propTypes = objectAssign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function(Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function() {}
	  };

	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        if (process.env.NODE_ENV !== 'production') {
	          warning$5(
	            typeof typeDef[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	              'React.PropTypes.',
	            Constructor.displayName || 'ReactClass',
	            ReactPropTypeLocationNames[location],
	            propName
	          );
	        }
	      }
	    }
	  }

	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name)
	      ? ReactClassInterface[name]
	      : null;

	    // Disallow overriding of base class methods unless explicitly allowed.
	    if (ReactClassMixin.hasOwnProperty(name)) {
	      invariant_1$1(
	        specPolicy === 'OVERRIDE_BASE',
	        'ReactClassInterface: You are attempting to override ' +
	          '`%s` from your class specification. Ensure that your method names ' +
	          'do not overlap with React methods.',
	        name
	      );
	    }

	    // Disallow defining methods more than once unless explicitly allowed.
	    if (isAlreadyDefined) {
	      invariant_1$1(
	        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
	        'ReactClassInterface: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be due ' +
	          'to a mixin.',
	        name
	      );
	    }
	  }

	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */
	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      if (process.env.NODE_ENV !== 'production') {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;

	        if (process.env.NODE_ENV !== 'production') {
	          warning$5(
	            isMixinValid,
	            "%s: You're attempting to include a mixin that is either null " +
	              'or not an object. Check the mixins included by the component, ' +
	              'as well as any mixins they include themselves. ' +
	              'Expected object but got %s.',
	            Constructor.displayName || 'ReactClass',
	            spec === null ? null : typeofSpec
	          );
	        }
	      }

	      return;
	    }

	    invariant_1$1(
	      typeof spec !== 'function',
	      "ReactClass: You're attempting to " +
	        'use a component class or function as a mixin. Instead, just use a ' +
	        'regular object.'
	    );
	    invariant_1$1(
	      !isValidElement(spec),
	      "ReactClass: You're attempting to " +
	        'use a component as a mixin. Instead, just use a regular object.'
	    );

	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs;

	    // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.
	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }

	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }

	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }

	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);

	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind =
	          isFunction &&
	          !isReactClassMethod &&
	          !isAlreadyDefined &&
	          spec.autobind !== false;

	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name];

	            // These cases should already be caught by validateMethodOverride.
	            invariant_1$1(
	              isReactClassMethod &&
	                (specPolicy === 'DEFINE_MANY_MERGED' ||
	                  specPolicy === 'DEFINE_MANY'),
	              'ReactClass: Unexpected spec policy %s for key %s ' +
	                'when mixing in component specs.',
	              specPolicy,
	              name
	            );

	            // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.
	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;
	            if (process.env.NODE_ENV !== 'production') {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }

	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }

	    for (var name in statics) {
	      var property = statics[name];
	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }

	      var isReserved = name in RESERVED_SPEC_KEYS;
	      invariant_1$1(
	        !isReserved,
	        'ReactClass: You are attempting to define a reserved ' +
	          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	          'as an instance property instead; it will still be accessible on the ' +
	          'constructor.',
	        name
	      );

	      var isAlreadyDefined = name in Constructor;
	      if (isAlreadyDefined) {
	        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
	          ? ReactClassStaticInterface[name]
	          : null;

	        invariant_1$1(
	          specPolicy === 'DEFINE_MANY_MERGED',
	          'ReactClass: You are attempting to define ' +
	            '`%s` on your component more than once. This conflict may be ' +
	            'due to a mixin.',
	          name
	        );

	        Constructor[name] = createMergedResultFunction(Constructor[name], property);

	        return;
	      }

	      Constructor[name] = property;
	    }
	  }

	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    invariant_1$1(
	      one && two && typeof one === 'object' && typeof two === 'object',
	      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	    );

	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        invariant_1$1(
	          one[key] === undefined,
	          'mergeIntoWithNoDuplicateKeys(): ' +
	            'Tried to merge two objects with the same key: `%s`. This conflict ' +
	            'may be due to a mixin; in particular, this may be caused by two ' +
	            'getInitialState() or getDefaultProps() methods returning objects ' +
	            'with clashing keys.',
	          key
	        );
	        one[key] = two[key];
	      }
	    }
	    return one;
	  }

	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);
	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }
	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }

	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }

	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);
	    if (process.env.NODE_ENV !== 'production') {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis) {
	        for (
	          var _len = arguments.length,
	            args = Array(_len > 1 ? _len - 1 : 0),
	            _key = 1;
	          _key < _len;
	          _key++
	        ) {
	          args[_key - 1] = arguments[_key];
	        }

	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning$5(
	              false,
	              'bind(): React component methods may only be bound to the ' +
	                'component instance. See %s',
	              componentName
	            );
	          }
	        } else if (!args.length) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning$5(
	              false,
	              'bind(): You are binding a component method to the component. ' +
	                'React does this for you automatically in a high-performance ' +
	                'way, so you can safely remove this call. See %s',
	              componentName
	            );
	          }
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }

	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;
	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }

	  var IsMountedPreMixin = {
	    componentDidMount: function() {
	      this.__isMounted = true;
	    }
	  };

	  var IsMountedPostMixin = {
	    componentWillUnmount: function() {
	      this.__isMounted = false;
	    }
	  };

	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function(newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },

	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function() {
	      if (process.env.NODE_ENV !== 'production') {
	        warning$5(
	          this.__didWarnIsMounted,
	          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
	            'subscriptions and pending requests in componentWillUnmount to ' +
	            'prevent memory leaks.',
	          (this.constructor && this.constructor.displayName) ||
	            this.name ||
	            'Component'
	        );
	        this.__didWarnIsMounted = true;
	      }
	      return !!this.__isMounted;
	    }
	  };

	  var ReactClassComponent = function() {};
	  objectAssign(
	    ReactClassComponent.prototype,
	    ReactComponent.prototype,
	    ReactClassMixin
	  );

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function(props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        warning$5(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	            'JSX instead. See: https://fb.me/react-legacyfactory'
	        );
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject_1;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (
	          initialState === undefined &&
	          this.getInitialState._isMockFunction
	        ) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      invariant_1$1(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      );

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    invariant_1$1(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    );

	    if (process.env.NODE_ENV !== 'production') {
	      warning$5(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.',
	        spec.displayName || 'A component'
	      );
	      warning$5(
	        !Constructor.prototype.componentWillRecieveProps,
	        '%s has a method called ' +
	          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	      warning$5(
	        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
	        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
	          'Did you mean UNSAFE_componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  }

	  return createClass;
	}

	var factory_1 = factory;

	if (typeof React__default === 'undefined') {
	  throw Error(
	    'create-react-class could not find the React object. If you are using script tags, ' +
	      'make sure that React is being loaded before create-react-class.'
	  );
	}

	// Hack to grab NoopUpdateQueue from isomorphic React
	var ReactNoopUpdateQueue = new React__default.Component().updater;

	var createReactClass = factory_1(
	  React__default.Component,
	  React__default.isValidElement,
	  ReactNoopUpdateQueue
	);

	var formatRegExp = /%[sdj%]/g;

	var warning$6 = function warning() {};

	// don't print warning message when in production env or node runtime
	if (process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
	  warning$6 = function warning(type, errors) {
	    if (typeof console !== 'undefined' && console.warn) {
	      if (errors.every(function (e) {
	        return typeof e === 'string';
	      })) {
	        console.warn(type, errors);
	      }
	    }
	  };
	}

	function format() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var i = 1;
	  var f = args[0];
	  var len = args.length;
	  if (typeof f === 'function') {
	    return f.apply(null, args.slice(1));
	  }
	  if (typeof f === 'string') {
	    var str = String(f).replace(formatRegExp, function (x) {
	      if (x === '%%') {
	        return '%';
	      }
	      if (i >= len) {
	        return x;
	      }
	      switch (x) {
	        case '%s':
	          return String(args[i++]);
	        case '%d':
	          return Number(args[i++]);
	        case '%j':
	          try {
	            return JSON.stringify(args[i++]);
	          } catch (_) {
	            return '[Circular]';
	          }
	          break;
	        default:
	          return x;
	      }
	    });
	    for (var arg = args[i]; i < len; arg = args[++i]) {
	      str += ' ' + arg;
	    }
	    return str;
	  }
	  return f;
	}

	function isNativeStringType(type) {
	  return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'pattern';
	}

	function isEmptyValue(value, type) {
	  if (value === undefined || value === null) {
	    return true;
	  }
	  if (type === 'array' && Array.isArray(value) && !value.length) {
	    return true;
	  }
	  if (isNativeStringType(type) && typeof value === 'string' && !value) {
	    return true;
	  }
	  return false;
	}

	function asyncParallelArray(arr, func, callback) {
	  var results = [];
	  var total = 0;
	  var arrLength = arr.length;

	  function count(errors) {
	    results.push.apply(results, errors);
	    total++;
	    if (total === arrLength) {
	      callback(results);
	    }
	  }

	  arr.forEach(function (a) {
	    func(a, count);
	  });
	}

	function asyncSerialArray(arr, func, callback) {
	  var index = 0;
	  var arrLength = arr.length;

	  function next(errors) {
	    if (errors && errors.length) {
	      callback(errors);
	      return;
	    }
	    var original = index;
	    index = index + 1;
	    if (original < arrLength) {
	      func(arr[original], next);
	    } else {
	      callback([]);
	    }
	  }

	  next([]);
	}

	function flattenObjArr(objArr) {
	  var ret = [];
	  Object.keys(objArr).forEach(function (k) {
	    ret.push.apply(ret, objArr[k]);
	  });
	  return ret;
	}

	function asyncMap(objArr, option, func, callback) {
	  if (option.first) {
	    var flattenArr = flattenObjArr(objArr);
	    return asyncSerialArray(flattenArr, func, callback);
	  }
	  var firstFields = option.firstFields || [];
	  if (firstFields === true) {
	    firstFields = Object.keys(objArr);
	  }
	  var objArrKeys = Object.keys(objArr);
	  var objArrLength = objArrKeys.length;
	  var total = 0;
	  var results = [];
	  var next = function next(errors) {
	    results.push.apply(results, errors);
	    total++;
	    if (total === objArrLength) {
	      callback(results);
	    }
	  };
	  objArrKeys.forEach(function (key) {
	    var arr = objArr[key];
	    if (firstFields.indexOf(key) !== -1) {
	      asyncSerialArray(arr, func, next);
	    } else {
	      asyncParallelArray(arr, func, next);
	    }
	  });
	}

	function complementError(rule) {
	  return function (oe) {
	    if (oe && oe.message) {
	      oe.field = oe.field || rule.fullField;
	      return oe;
	    }
	    return {
	      message: oe,
	      field: oe.field || rule.fullField
	    };
	  };
	}

	function deepMerge(target, source) {
	  if (source) {
	    for (var s in source) {
	      if (source.hasOwnProperty(s)) {
	        var value = source[s];
	        if ((typeof value === 'undefined' ? 'undefined' : _typeof$1(value)) === 'object' && _typeof$1(target[s]) === 'object') {
	          target[s] = _extends$5({}, target[s], value);
	        } else {
	          target[s] = value;
	        }
	      }
	    }
	  }
	  return target;
	}

	/**
	 *  Rule for validating required fields.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function required(rule, value, source, errors, options, type) {
	  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {
	    errors.push(format(options.messages.required, rule.fullField));
	  }
	}

	/**
	 *  Rule for validating whitespace.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function whitespace(rule, value, source, errors, options) {
	  if (/^\s+$/.test(value) || value === '') {
	    errors.push(format(options.messages.whitespace, rule.fullField));
	  }
	}

	/* eslint max-len:0 */

	var pattern = {
	  // http://emailregex.com/
	  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
	  url: new RegExp('^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$', 'i'),
	  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
	};

	var types = {
	  integer: function integer(value) {
	    return types.number(value) && parseInt(value, 10) === value;
	  },
	  float: function float(value) {
	    return types.number(value) && !types.integer(value);
	  },
	  array: function array(value) {
	    return Array.isArray(value);
	  },
	  regexp: function regexp(value) {
	    if (value instanceof RegExp) {
	      return true;
	    }
	    try {
	      return !!new RegExp(value);
	    } catch (e) {
	      return false;
	    }
	  },
	  date: function date(value) {
	    return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function';
	  },
	  number: function number(value) {
	    if (isNaN(value)) {
	      return false;
	    }
	    return typeof value === 'number';
	  },
	  object: function object(value) {
	    return (typeof value === 'undefined' ? 'undefined' : _typeof$1(value)) === 'object' && !types.array(value);
	  },
	  method: function method(value) {
	    return typeof value === 'function';
	  },
	  email: function email(value) {
	    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
	  },
	  url: function url(value) {
	    return typeof value === 'string' && !!value.match(pattern.url);
	  },
	  hex: function hex(value) {
	    return typeof value === 'string' && !!value.match(pattern.hex);
	  }
	};

	/**
	 *  Rule for validating the type of a value.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function type(rule, value, source, errors, options) {
	  if (rule.required && value === undefined) {
	    required(rule, value, source, errors, options);
	    return;
	  }
	  var custom = ['integer', 'float', 'array', 'regexp', 'object', 'method', 'email', 'number', 'date', 'url', 'hex'];
	  var ruleType = rule.type;
	  if (custom.indexOf(ruleType) > -1) {
	    if (!types[ruleType](value)) {
	      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
	    }
	    // straight typeof check
	  } else if (ruleType && (typeof value === 'undefined' ? 'undefined' : _typeof$1(value)) !== rule.type) {
	    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
	  }
	}

	/**
	 *  Rule for validating minimum and maximum allowed values.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function range(rule, value, source, errors, options) {
	  var len = typeof rule.len === 'number';
	  var min = typeof rule.min === 'number';
	  var max = typeof rule.max === 'number';
	  // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）
	  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	  var val = value;
	  var key = null;
	  var num = typeof value === 'number';
	  var str = typeof value === 'string';
	  var arr = Array.isArray(value);
	  if (num) {
	    key = 'number';
	  } else if (str) {
	    key = 'string';
	  } else if (arr) {
	    key = 'array';
	  }
	  // if the value is not of a supported type for range validation
	  // the validation rule rule should use the
	  // type property to also test for a particular type
	  if (!key) {
	    return false;
	  }
	  if (arr) {
	    val = value.length;
	  }
	  if (str) {
	    // 处理码点大于U+010000的文字length属性不准确的bug，如"𠮷𠮷𠮷".lenght !== 3
	    val = value.replace(spRegexp, '_').length;
	  }
	  if (len) {
	    if (val !== rule.len) {
	      errors.push(format(options.messages[key].len, rule.fullField, rule.len));
	    }
	  } else if (min && !max && val < rule.min) {
	    errors.push(format(options.messages[key].min, rule.fullField, rule.min));
	  } else if (max && !min && val > rule.max) {
	    errors.push(format(options.messages[key].max, rule.fullField, rule.max));
	  } else if (min && max && (val < rule.min || val > rule.max)) {
	    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
	  }
	}

	var ENUM = 'enum';

	/**
	 *  Rule for validating a value exists in an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function enumerable(rule, value, source, errors, options) {
	  rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
	  if (rule[ENUM].indexOf(value) === -1) {
	    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
	  }
	}

	/**
	 *  Rule for validating a regular expression pattern.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param source The source object being validated.
	 *  @param errors An array of errors that this rule may add
	 *  validation errors to.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function pattern$1(rule, value, source, errors, options) {
	  if (rule.pattern) {
	    if (rule.pattern instanceof RegExp) {
	      // if a RegExp instance is passed, reset `lastIndex` in case its `global`
	      // flag is accidentally set to `true`, which in a validation scenario
	      // is not necessary and the result might be misleading
	      rule.pattern.lastIndex = 0;
	      if (!rule.pattern.test(value)) {
	        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    } else if (typeof rule.pattern === 'string') {
	      var _pattern = new RegExp(rule.pattern);
	      if (!_pattern.test(value)) {
	        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
	      }
	    }
	  }
	}

	var rules = {
	  required: required,
	  whitespace: whitespace,
	  type: type,
	  range: range,
	  'enum': enumerable,
	  pattern: pattern$1
	};

	/**
	 *  Performs validation for string types.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function string(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value, 'string') && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options, 'string');
	    if (!isEmptyValue(value, 'string')) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	      rules.pattern(rule, value, source, errors, options);
	      if (rule.whitespace === true) {
	        rules.whitespace(rule, value, source, errors, options);
	      }
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates a function.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function method(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates a number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function number(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates a boolean.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function boolean(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates the regular expression type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function regexp(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (!isEmptyValue(value)) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates a number is an integer.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function integer(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates a number is a floating point number.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function floatFn(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates an array.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function array(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value, 'array') && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options, 'array');
	    if (!isEmptyValue(value, 'array')) {
	      rules.type(rule, value, source, errors, options);
	      rules.range(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates an object.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function object(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (value !== undefined) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	var ENUM$1 = 'enum';

	/**
	 *  Validates an enumerable list.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function enumerable$1(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (value) {
	      rules[ENUM$1](rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	/**
	 *  Validates a regular expression pattern.
	 *
	 *  Performs validation when a rule only contains
	 *  a pattern property but is not declared as a string type.
	 *
	 *  @param rule The validation rule.
	 *  @param value The value of the field on the source object.
	 *  @param callback The callback function.
	 *  @param source The source object being validated.
	 *  @param options The validation options.
	 *  @param options.messages The validation messages.
	 */
	function pattern$2(rule, value, callback, source, options) {
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value, 'string') && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (!isEmptyValue(value, 'string')) {
	      rules.pattern(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	function date(rule, value, callback, source, options) {
	  // console.log('integer rule called %j', rule);
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  // console.log('validate on %s value', value);
	  if (validate) {
	    if (isEmptyValue(value) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options);
	    if (!isEmptyValue(value)) {
	      var dateObject = void 0;

	      if (typeof value === 'number') {
	        dateObject = new Date(value);
	      } else {
	        dateObject = value;
	      }

	      rules.type(rule, dateObject, source, errors, options);
	      if (dateObject) {
	        rules.range(rule, dateObject.getTime(), source, errors, options);
	      }
	    }
	  }
	  callback(errors);
	}

	function required$1(rule, value, callback, source, options) {
	  var errors = [];
	  var type = Array.isArray(value) ? 'array' : typeof value === 'undefined' ? 'undefined' : _typeof$1(value);
	  rules.required(rule, value, source, errors, options, type);
	  callback(errors);
	}

	function type$1(rule, value, callback, source, options) {
	  var ruleType = rule.type;
	  var errors = [];
	  var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
	  if (validate) {
	    if (isEmptyValue(value, ruleType) && !rule.required) {
	      return callback();
	    }
	    rules.required(rule, value, source, errors, options, ruleType);
	    if (!isEmptyValue(value, ruleType)) {
	      rules.type(rule, value, source, errors, options);
	    }
	  }
	  callback(errors);
	}

	var validators = {
	  string: string,
	  method: method,
	  number: number,
	  boolean: boolean,
	  regexp: regexp,
	  integer: integer,
	  float: floatFn,
	  array: array,
	  object: object,
	  'enum': enumerable$1,
	  pattern: pattern$2,
	  date: date,
	  url: type$1,
	  hex: type$1,
	  email: type$1,
	  required: required$1
	};

	function newMessages() {
	  return {
	    'default': 'Validation error on field %s',
	    required: '%s is required',
	    'enum': '%s must be one of %s',
	    whitespace: '%s cannot be empty',
	    date: {
	      format: '%s date %s is invalid for format %s',
	      parse: '%s date could not be parsed, %s is invalid ',
	      invalid: '%s date %s is invalid'
	    },
	    types: {
	      string: '%s is not a %s',
	      method: '%s is not a %s (function)',
	      array: '%s is not an %s',
	      object: '%s is not an %s',
	      number: '%s is not a %s',
	      date: '%s is not a %s',
	      boolean: '%s is not a %s',
	      integer: '%s is not an %s',
	      float: '%s is not a %s',
	      regexp: '%s is not a valid %s',
	      email: '%s is not a valid %s',
	      url: '%s is not a valid %s',
	      hex: '%s is not a valid %s'
	    },
	    string: {
	      len: '%s must be exactly %s characters',
	      min: '%s must be at least %s characters',
	      max: '%s cannot be longer than %s characters',
	      range: '%s must be between %s and %s characters'
	    },
	    number: {
	      len: '%s must equal %s',
	      min: '%s cannot be less than %s',
	      max: '%s cannot be greater than %s',
	      range: '%s must be between %s and %s'
	    },
	    array: {
	      len: '%s must be exactly %s in length',
	      min: '%s cannot be less than %s in length',
	      max: '%s cannot be greater than %s in length',
	      range: '%s must be between %s and %s in length'
	    },
	    pattern: {
	      mismatch: '%s value %s does not match pattern %s'
	    },
	    clone: function clone() {
	      var cloned = JSON.parse(JSON.stringify(this));
	      cloned.clone = this.clone;
	      return cloned;
	    }
	  };
	}

	var messages = newMessages();

	/**
	 *  Encapsulates a validation schema.
	 *
	 *  @param descriptor An object declaring validation rules
	 *  for this schema.
	 */
	function Schema(descriptor) {
	  this.rules = null;
	  this._messages = messages;
	  this.define(descriptor);
	}

	Schema.prototype = {
	  messages: function messages(_messages) {
	    if (_messages) {
	      this._messages = deepMerge(newMessages(), _messages);
	    }
	    return this._messages;
	  },
	  define: function define(rules) {
	    if (!rules) {
	      throw new Error('Cannot configure a schema with no rules');
	    }
	    if ((typeof rules === 'undefined' ? 'undefined' : _typeof$1(rules)) !== 'object' || Array.isArray(rules)) {
	      throw new Error('Rules must be an object');
	    }
	    this.rules = {};
	    var z = void 0;
	    var item = void 0;
	    for (z in rules) {
	      if (rules.hasOwnProperty(z)) {
	        item = rules[z];
	        this.rules[z] = Array.isArray(item) ? item : [item];
	      }
	    }
	  },
	  validate: function validate(source_) {
	    var _this = this;

	    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var oc = arguments[2];

	    var source = source_;
	    var options = o;
	    var callback = oc;
	    if (typeof options === 'function') {
	      callback = options;
	      options = {};
	    }
	    if (!this.rules || Object.keys(this.rules).length === 0) {
	      if (callback) {
	        callback();
	      }
	      return;
	    }
	    function complete(results) {
	      var i = void 0;
	      var field = void 0;
	      var errors = [];
	      var fields = {};

	      function add(e) {
	        if (Array.isArray(e)) {
	          errors = errors.concat.apply(errors, e);
	        } else {
	          errors.push(e);
	        }
	      }

	      for (i = 0; i < results.length; i++) {
	        add(results[i]);
	      }
	      if (!errors.length) {
	        errors = null;
	        fields = null;
	      } else {
	        for (i = 0; i < errors.length; i++) {
	          field = errors[i].field;
	          fields[field] = fields[field] || [];
	          fields[field].push(errors[i]);
	        }
	      }
	      callback(errors, fields);
	    }

	    if (options.messages) {
	      var messages$1 = this.messages();
	      if (messages$1 === messages) {
	        messages$1 = newMessages();
	      }
	      deepMerge(messages$1, options.messages);
	      options.messages = messages$1;
	    } else {
	      options.messages = this.messages();
	    }
	    var arr = void 0;
	    var value = void 0;
	    var series = {};
	    var keys = options.keys || Object.keys(this.rules);
	    keys.forEach(function (z) {
	      arr = _this.rules[z];
	      value = source[z];
	      arr.forEach(function (r) {
	        var rule = r;
	        if (typeof rule.transform === 'function') {
	          if (source === source_) {
	            source = _extends$5({}, source);
	          }
	          value = source[z] = rule.transform(value);
	        }
	        if (typeof rule === 'function') {
	          rule = {
	            validator: rule
	          };
	        } else {
	          rule = _extends$5({}, rule);
	        }
	        rule.validator = _this.getValidationMethod(rule);
	        rule.field = z;
	        rule.fullField = rule.fullField || z;
	        rule.type = _this.getType(rule);
	        if (!rule.validator) {
	          return;
	        }
	        series[z] = series[z] || [];
	        series[z].push({
	          rule: rule,
	          value: value,
	          source: source,
	          field: z
	        });
	      });
	    });
	    var errorFields = {};
	    asyncMap(series, options, function (data, doIt) {
	      var rule = data.rule;
	      var deep = (rule.type === 'object' || rule.type === 'array') && (_typeof$1(rule.fields) === 'object' || _typeof$1(rule.defaultField) === 'object');
	      deep = deep && (rule.required || !rule.required && data.value);
	      rule.field = data.field;
	      function addFullfield(key, schema) {
	        return _extends$5({}, schema, {
	          fullField: rule.fullField + '.' + key
	        });
	      }

	      function cb() {
	        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	        var errors = e;
	        if (!Array.isArray(errors)) {
	          errors = [errors];
	        }
	        if (errors.length) {
	          warning$6('async-validator:', errors);
	        }
	        if (errors.length && rule.message) {
	          errors = [].concat(rule.message);
	        }

	        errors = errors.map(complementError(rule));

	        if (options.first && errors.length) {
	          errorFields[rule.field] = 1;
	          return doIt(errors);
	        }
	        if (!deep) {
	          doIt(errors);
	        } else {
	          // if rule is required but the target object
	          // does not exist fail at the rule level and don't
	          // go deeper
	          if (rule.required && !data.value) {
	            if (rule.message) {
	              errors = [].concat(rule.message).map(complementError(rule));
	            } else if (options.error) {
	              errors = [options.error(rule, format(options.messages.required, rule.field))];
	            } else {
	              errors = [];
	            }
	            return doIt(errors);
	          }

	          var fieldsSchema = {};
	          if (rule.defaultField) {
	            for (var k in data.value) {
	              if (data.value.hasOwnProperty(k)) {
	                fieldsSchema[k] = rule.defaultField;
	              }
	            }
	          }
	          fieldsSchema = _extends$5({}, fieldsSchema, data.rule.fields);
	          for (var f in fieldsSchema) {
	            if (fieldsSchema.hasOwnProperty(f)) {
	              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
	              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
	            }
	          }
	          var schema = new Schema(fieldsSchema);
	          schema.messages(options.messages);
	          if (data.rule.options) {
	            data.rule.options.messages = options.messages;
	            data.rule.options.error = options.error;
	          }
	          schema.validate(data.value, data.rule.options || options, function (errs) {
	            doIt(errs && errs.length ? errors.concat(errs) : errs);
	          });
	        }
	      }

	      var res = rule.validator(rule, data.value, cb, data.source, options);
	      if (res && res.then) {
	        res.then(function () {
	          return cb();
	        }, function (e) {
	          return cb(e);
	        });
	      }
	    }, function (results) {
	      complete(results);
	    });
	  },
	  getType: function getType(rule) {
	    if (rule.type === undefined && rule.pattern instanceof RegExp) {
	      rule.type = 'pattern';
	    }
	    if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {
	      throw new Error(format('Unknown rule type %s', rule.type));
	    }
	    return rule.type || 'string';
	  },
	  getValidationMethod: function getValidationMethod(rule) {
	    if (typeof rule.validator === 'function') {
	      return rule.validator;
	    }
	    var keys = Object.keys(rule);
	    var messageIndex = keys.indexOf('message');
	    if (messageIndex !== -1) {
	      keys.splice(messageIndex, 1);
	    }
	    if (keys.length === 1 && keys[0] === 'required') {
	      return validators.required;
	    }
	    return validators[this.getType(rule)] || false;
	  }
	};

	Schema.register = function register(type, validator) {
	  if (typeof validator !== 'function') {
	    throw new Error('Cannot register a validator by type, validator is not a function');
	  }
	  validators[type] = validator;
	};

	Schema.messages = messages;

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var __DEV__$1 = process.env.NODE_ENV !== 'production';

	var warning$7 = function() {};

	if (__DEV__$1) {
	  var printWarning$3 = function printWarning(format, args) {
	    var len = arguments.length;
	    args = new Array(len > 1 ? len - 1 : 0);
	    for (var key = 1; key < len; key++) {
	      args[key - 1] = arguments[key];
	    }
	    var argIndex = 0;
	    var message = 'Warning: ' +
	      format.replace(/%s/g, function() {
	        return args[argIndex++];
	      });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning$7 = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	          '`warning(condition, format, ...args)` requires a warning ' +
	          'message argument'
	      );
	    }
	    if (!condition) {
	      printWarning$3.apply(null, [format].concat(args));
	    }
	  };
	}

	var warning_1$2 = warning$7;

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray_1(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol_1(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	var _isKey = isKey;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject_1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = _baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = _root['__core-js_shared__'];

	var _coreJsData = coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked;

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype,
	    objectProto$2 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$2.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString$1.call(hasOwnProperty$3).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject_1(value) || _isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(_toSource(value));
	}

	var _baseIsNative = baseIsNative;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = _getValue(object, key);
	  return _baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative;

	/* Built-in method references that are verified to be native. */
	var nativeCreate = _getNative(Object, 'create');

	var _nativeCreate = nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$3.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (_nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty$4.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$4.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$5.call(data, key);
	}

	var _hashHas = hashHas;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	var _hashSet = hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = _hashClear;
	Hash.prototype['delete'] = _hashDelete;
	Hash.prototype.get = _hashGet;
	Hash.prototype.has = _hashHas;
	Hash.prototype.set = _hashSet;

	var _Hash = Hash;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	var _listCacheClear = listCacheClear;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq_1(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	var _assocIndexOf = assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	var _listCacheDelete = listCacheDelete;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	var _listCacheGet = listCacheGet;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return _assocIndexOf(this.__data__, key) > -1;
	}

	var _listCacheHas = listCacheHas;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	var _listCacheSet = listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = _listCacheClear;
	ListCache.prototype['delete'] = _listCacheDelete;
	ListCache.prototype.get = _listCacheGet;
	ListCache.prototype.has = _listCacheHas;
	ListCache.prototype.set = _listCacheSet;

	var _ListCache = ListCache;

	/* Built-in method references that are verified to be native. */
	var Map$1 = _getNative(_root, 'Map');

	var _Map = Map$1;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new _Hash,
	    'map': new (_Map || _ListCache),
	    'string': new _Hash
	  };
	}

	var _mapCacheClear = mapCacheClear;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return _isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = _getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return _getMapData(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return _getMapData(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = _getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = _mapCacheClear;
	MapCache.prototype['delete'] = _mapCacheDelete;
	MapCache.prototype.get = _mapCacheGet;
	MapCache.prototype.has = _mapCacheHas;
	MapCache.prototype.set = _mapCacheSet;

	var _MapCache = MapCache;

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || _MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = _MapCache;

	var memoize_1 = memoize;

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize_1(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	var _memoizeCapped = memoizeCapped;

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = _memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	var _stringToPath = stringToPath;

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray_1(value)) {
	    return value;
	  }
	  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
	}

	var _castPath = castPath;

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol_1(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
	}

	var _toKey = toKey;

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = _castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[_toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	var _baseGet = baseGet;

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : _baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	var get_1 = get;

	var defineProperty$5 = (function() {
	  try {
	    var func = _getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	var _defineProperty$2 = defineProperty$5;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && _defineProperty$2) {
	    _defineProperty$2(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	var _baseAssignValue = baseAssignValue;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$5.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$6.call(object, key) && eq_1(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    _baseAssignValue(object, key, value);
	  }
	}

	var _assignValue = assignValue;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex;

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject_1(object)) {
	    return object;
	  }
	  path = _castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = _toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject_1(objValue)
	          ? objValue
	          : (_isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    _assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	var _baseSet = baseSet;

	/**
	 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	 * it's created. Arrays are created for missing index properties while objects
	 * are created for all other missing properties. Use `_.setWith` to customize
	 * `path` creation.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.set(object, 'a[0].b.c', 4);
	 * console.log(object.a[0].b.c);
	 * // => 4
	 *
	 * _.set(object, ['x', '0', 'y', 'z'], 5);
	 * console.log(object.x[0].y.z);
	 * // => 5
	 */
	function set(object, path, value) {
	  return object == null ? object : _baseSet(object, path, value);
	}

	var set_1 = set;

	var Field = function Field(fields) {
	  _classCallCheck(this, Field);

	  _extends$5(this, fields);
	};

	function isFormField(obj) {
	  return obj instanceof Field;
	}

	function createFormField(field) {
	  if (isFormField(field)) {
	    return field;
	  }
	  return new Field(field);
	}

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

	var REACT_STATICS$1 = {
	    childContextTypes: true,
	    contextType: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    getDerivedStateFromError: true,
	    getDerivedStateFromProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS$1 = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    callee: true,
	    arguments: true,
	    arity: true
	};

	var FORWARD_REF_STATICS$1 = {
	    '$$typeof': true,
	    render: true,
	    defaultProps: true,
	    displayName: true,
	    propTypes: true
	};

	var MEMO_STATICS$1 = {
	    '$$typeof': true,
	    compare: true,
	    defaultProps: true,
	    displayName: true,
	    propTypes: true,
	    type: true
	};

	var TYPE_STATICS$1 = {};
	TYPE_STATICS$1[reactIs.ForwardRef] = FORWARD_REF_STATICS$1;

	function getStatics$1(component) {
	    if (reactIs.isMemo(component)) {
	        return MEMO_STATICS$1;
	    }
	    return TYPE_STATICS$1[component['$$typeof']] || REACT_STATICS$1;
	}

	var defineProperty$6 = Object.defineProperty;
	var getOwnPropertyNames$3 = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$2 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor$3 = Object.getOwnPropertyDescriptor;
	var getPrototypeOf$1 = Object.getPrototypeOf;
	var objectPrototype$1 = Object.prototype;

	function hoistNonReactStatics$1(targetComponent, sourceComponent, blacklist) {
	    if (typeof sourceComponent !== 'string') {
	        // don't hoist over string (html) components

	        if (objectPrototype$1) {
	            var inheritedComponent = getPrototypeOf$1(sourceComponent);
	            if (inheritedComponent && inheritedComponent !== objectPrototype$1) {
	                hoistNonReactStatics$1(targetComponent, inheritedComponent, blacklist);
	            }
	        }

	        var keys = getOwnPropertyNames$3(sourceComponent);

	        if (getOwnPropertySymbols$2) {
	            keys = keys.concat(getOwnPropertySymbols$2(sourceComponent));
	        }

	        var targetStatics = getStatics$1(targetComponent);
	        var sourceStatics = getStatics$1(sourceComponent);

	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (!KNOWN_STATICS$1[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	                var descriptor = getOwnPropertyDescriptor$3(sourceComponent, key);
	                try {
	                    // Avoid failures from read-only properties
	                    defineProperty$6(targetComponent, key, descriptor);
	                } catch (e) {}
	            }
	        }

	        return targetComponent;
	    }

	    return targetComponent;
	}

	var hoistNonReactStatics_cjs$1 = hoistNonReactStatics$1;

	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'WrappedComponent';
	}

	function argumentContainer(Container, WrappedComponent) {
	  /* eslint no-param-reassign:0 */
	  Container.displayName = 'Form(' + getDisplayName(WrappedComponent) + ')';
	  Container.WrappedComponent = WrappedComponent;
	  return hoistNonReactStatics_cjs$1(Container, WrappedComponent);
	}

	function identity$1(obj) {
	  return obj;
	}

	function flattenArray(arr) {
	  return Array.prototype.concat.apply([], arr);
	}

	function treeTraverse() {
	  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	  var tree = arguments[1];
	  var isLeafNode = arguments[2];
	  var errorMessage = arguments[3];
	  var callback = arguments[4];

	  if (isLeafNode(path, tree)) {
	    callback(path, tree);
	  } else if (tree === undefined || tree === null) ; else if (Array.isArray(tree)) {
	    tree.forEach(function (subTree, index) {
	      return treeTraverse(path + '[' + index + ']', subTree, isLeafNode, errorMessage, callback);
	    });
	  } else {
	    // It's object and not a leaf node
	    if (typeof tree !== 'object') {
	      warning_1$2(false, errorMessage);
	      return;
	    }
	    Object.keys(tree).forEach(function (subTreeKey) {
	      var subTree = tree[subTreeKey];
	      treeTraverse('' + path + (path ? '.' : '') + subTreeKey, subTree, isLeafNode, errorMessage, callback);
	    });
	  }
	}

	function flattenFields(maybeNestedFields, isLeafNode, errorMessage) {
	  var fields = {};
	  treeTraverse(undefined, maybeNestedFields, isLeafNode, errorMessage, function (path, node) {
	    fields[path] = node;
	  });
	  return fields;
	}

	function normalizeValidateRules(validate, rules, validateTrigger) {
	  var validateRules = validate.map(function (item) {
	    var newItem = _extends$5({}, item, {
	      trigger: item.trigger || []
	    });
	    if (typeof newItem.trigger === 'string') {
	      newItem.trigger = [newItem.trigger];
	    }
	    return newItem;
	  });
	  if (rules) {
	    validateRules.push({
	      trigger: validateTrigger ? [].concat(validateTrigger) : [],
	      rules: rules
	    });
	  }
	  return validateRules;
	}

	function getValidateTriggers(validateRules) {
	  return validateRules.filter(function (item) {
	    return !!item.rules && item.rules.length;
	  }).map(function (item) {
	    return item.trigger;
	  }).reduce(function (pre, curr) {
	    return pre.concat(curr);
	  }, []);
	}

	function getValueFromEvent(e) {
	  // To support custom element
	  if (!e || !e.target) {
	    return e;
	  }
	  var target = e.target;

	  return target.type === 'checkbox' ? target.checked : target.value;
	}

	function getErrorStrs(errors) {
	  if (errors) {
	    return errors.map(function (e) {
	      if (e && e.message) {
	        return e.message;
	      }
	      return e;
	    });
	  }
	  return errors;
	}

	function getParams(ns, opt, cb) {
	  var names = ns;
	  var options = opt;
	  var callback = cb;
	  if (cb === undefined) {
	    if (typeof names === 'function') {
	      callback = names;
	      options = {};
	      names = undefined;
	    } else if (Array.isArray(names)) {
	      if (typeof options === 'function') {
	        callback = options;
	        options = {};
	      } else {
	        options = options || {};
	      }
	    } else {
	      callback = options;
	      options = names || {};
	      names = undefined;
	    }
	  }
	  return {
	    names: names,
	    options: options,
	    callback: callback
	  };
	}

	function isEmptyObject(obj) {
	  return Object.keys(obj).length === 0;
	}

	function hasRules(validate) {
	  if (validate) {
	    return validate.some(function (item) {
	      return item.rules && item.rules.length;
	    });
	  }
	  return false;
	}

	function startsWith(str, prefix) {
	  return str.lastIndexOf(prefix, 0) === 0;
	}

	function partOf(a, b) {
	  return b.indexOf(a) === 0 && ['.', '['].indexOf(b[a.length]) !== -1;
	}

	function internalFlattenFields(fields) {
	  return flattenFields(fields, function (_, node) {
	    return isFormField(node);
	  }, 'You must wrap field data with `createFormField`.');
	}

	var FieldsStore = function () {
	  function FieldsStore(fields) {
	    _classCallCheck(this, FieldsStore);

	    _initialiseProps$6.call(this);

	    this.fields = internalFlattenFields(fields);
	    this.fieldsMeta = {};
	  }

	  _createClass(FieldsStore, [{
	    key: 'updateFields',
	    value: function updateFields(fields) {
	      this.fields = internalFlattenFields(fields);
	    }
	  }, {
	    key: 'flattenRegisteredFields',
	    value: function flattenRegisteredFields(fields) {
	      var validFieldsName = this.getAllFieldsName();
	      return flattenFields(fields, function (path) {
	        return validFieldsName.indexOf(path) >= 0;
	      }, 'You cannot set a form field before rendering a field associated with the value.');
	    }
	  }, {
	    key: 'setFields',
	    value: function setFields(fields) {
	      var _this = this;

	      var fieldsMeta = this.fieldsMeta;
	      var nowFields = _extends$5({}, this.fields, fields);
	      var nowValues = {};
	      Object.keys(fieldsMeta).forEach(function (f) {
	        nowValues[f] = _this.getValueFromFields(f, nowFields);
	      });
	      Object.keys(nowValues).forEach(function (f) {
	        var value = nowValues[f];
	        var fieldMeta = _this.getFieldMeta(f);
	        if (fieldMeta && fieldMeta.normalize) {
	          var nowValue = fieldMeta.normalize(value, _this.getValueFromFields(f, _this.fields), nowValues);
	          if (nowValue !== value) {
	            nowFields[f] = _extends$5({}, nowFields[f], {
	              value: nowValue
	            });
	          }
	        }
	      });
	      this.fields = nowFields;
	    }
	  }, {
	    key: 'resetFields',
	    value: function resetFields(ns) {
	      var fields = this.fields;

	      var names = ns ? this.getValidFieldsFullName(ns) : this.getAllFieldsName();
	      return names.reduce(function (acc, name) {
	        var field = fields[name];
	        if (field && 'value' in field) {
	          acc[name] = {};
	        }
	        return acc;
	      }, {});
	    }
	  }, {
	    key: 'setFieldMeta',
	    value: function setFieldMeta(name, meta) {
	      this.fieldsMeta[name] = meta;
	    }
	  }, {
	    key: 'setFieldsAsDirty',
	    value: function setFieldsAsDirty() {
	      var _this2 = this;

	      Object.keys(this.fields).forEach(function (name) {
	        var field = _this2.fields[name];
	        var fieldMeta = _this2.fieldsMeta[name];
	        if (field && fieldMeta && hasRules(fieldMeta.validate)) {
	          _this2.fields[name] = _extends$5({}, field, {
	            dirty: true
	          });
	        }
	      });
	    }
	  }, {
	    key: 'getFieldMeta',
	    value: function getFieldMeta(name) {
	      this.fieldsMeta[name] = this.fieldsMeta[name] || {};
	      return this.fieldsMeta[name];
	    }
	  }, {
	    key: 'getValueFromFields',
	    value: function getValueFromFields(name, fields) {
	      var field = fields[name];
	      if (field && 'value' in field) {
	        return field.value;
	      }
	      var fieldMeta = this.getFieldMeta(name);
	      return fieldMeta && fieldMeta.initialValue;
	    }
	  }, {
	    key: 'getValidFieldsName',
	    value: function getValidFieldsName() {
	      var _this3 = this;

	      var fieldsMeta = this.fieldsMeta;

	      return fieldsMeta ? Object.keys(fieldsMeta).filter(function (name) {
	        return !_this3.getFieldMeta(name).hidden;
	      }) : [];
	    }
	  }, {
	    key: 'getAllFieldsName',
	    value: function getAllFieldsName() {
	      var fieldsMeta = this.fieldsMeta;

	      return fieldsMeta ? Object.keys(fieldsMeta) : [];
	    }
	  }, {
	    key: 'getValidFieldsFullName',
	    value: function getValidFieldsFullName(maybePartialName) {
	      var maybePartialNames = Array.isArray(maybePartialName) ? maybePartialName : [maybePartialName];
	      return this.getValidFieldsName().filter(function (fullName) {
	        return maybePartialNames.some(function (partialName) {
	          return fullName === partialName || startsWith(fullName, partialName) && ['.', '['].indexOf(fullName[partialName.length]) >= 0;
	        });
	      });
	    }
	  }, {
	    key: 'getFieldValuePropValue',
	    value: function getFieldValuePropValue(fieldMeta) {
	      var name = fieldMeta.name,
	          getValueProps = fieldMeta.getValueProps,
	          valuePropName = fieldMeta.valuePropName;

	      var field = this.getField(name);
	      var fieldValue = 'value' in field ? field.value : fieldMeta.initialValue;
	      if (getValueProps) {
	        return getValueProps(fieldValue);
	      }
	      return _defineProperty$1({}, valuePropName, fieldValue);
	    }
	  }, {
	    key: 'getField',
	    value: function getField(name) {
	      return _extends$5({}, this.fields[name], {
	        name: name
	      });
	    }
	  }, {
	    key: 'getNotCollectedFields',
	    value: function getNotCollectedFields() {
	      var _this4 = this;

	      var fieldsName = this.getValidFieldsName();
	      return fieldsName.filter(function (name) {
	        return !_this4.fields[name];
	      }).map(function (name) {
	        return {
	          name: name,
	          dirty: false,
	          value: _this4.getFieldMeta(name).initialValue
	        };
	      }).reduce(function (acc, field) {
	        return set_1(acc, field.name, createFormField(field));
	      }, {});
	    }
	  }, {
	    key: 'getNestedAllFields',
	    value: function getNestedAllFields() {
	      var _this5 = this;

	      return Object.keys(this.fields).reduce(function (acc, name) {
	        return set_1(acc, name, createFormField(_this5.fields[name]));
	      }, this.getNotCollectedFields());
	    }
	  }, {
	    key: 'getFieldMember',
	    value: function getFieldMember(name, member) {
	      return this.getField(name)[member];
	    }
	  }, {
	    key: 'getNestedFields',
	    value: function getNestedFields(names, getter) {
	      var fields = names || this.getValidFieldsName();
	      return fields.reduce(function (acc, f) {
	        return set_1(acc, f, getter(f));
	      }, {});
	    }
	  }, {
	    key: 'getNestedField',
	    value: function getNestedField(name, getter) {
	      var fullNames = this.getValidFieldsFullName(name);
	      if (fullNames.length === 0 || // Not registered
	      fullNames.length === 1 && fullNames[0] === name // Name already is full name.
	      ) {
	          return getter(name);
	        }
	      var isArrayValue = fullNames[0][name.length] === '[';
	      var suffixNameStartIndex = isArrayValue ? name.length : name.length + 1;
	      return fullNames.reduce(function (acc, fullName) {
	        return set_1(acc, fullName.slice(suffixNameStartIndex), getter(fullName));
	      }, isArrayValue ? [] : {});
	    }
	  }, {
	    key: 'isValidNestedFieldName',


	    // @private
	    // BG: `a` and `a.b` cannot be use in the same form
	    value: function isValidNestedFieldName(name) {
	      var names = this.getAllFieldsName();
	      return names.every(function (n) {
	        return !partOf(n, name) && !partOf(name, n);
	      });
	    }
	  }, {
	    key: 'clearField',
	    value: function clearField(name) {
	      delete this.fields[name];
	      delete this.fieldsMeta[name];
	    }
	  }]);

	  return FieldsStore;
	}();

	var _initialiseProps$6 = function _initialiseProps() {
	  var _this6 = this;

	  this.setFieldsInitialValue = function (initialValues) {
	    var flattenedInitialValues = _this6.flattenRegisteredFields(initialValues);
	    var fieldsMeta = _this6.fieldsMeta;
	    Object.keys(flattenedInitialValues).forEach(function (name) {
	      if (fieldsMeta[name]) {
	        _this6.setFieldMeta(name, _extends$5({}, _this6.getFieldMeta(name), {
	          initialValue: flattenedInitialValues[name]
	        }));
	      }
	    });
	  };

	  this.getAllValues = function () {
	    var fieldsMeta = _this6.fieldsMeta,
	        fields = _this6.fields;

	    return Object.keys(fieldsMeta).reduce(function (acc, name) {
	      return set_1(acc, name, _this6.getValueFromFields(name, fields));
	    }, {});
	  };

	  this.getFieldsValue = function (names) {
	    return _this6.getNestedFields(names, _this6.getFieldValue);
	  };

	  this.getFieldValue = function (name) {
	    var fields = _this6.fields;

	    return _this6.getNestedField(name, function (fullName) {
	      return _this6.getValueFromFields(fullName, fields);
	    });
	  };

	  this.getFieldsError = function (names) {
	    return _this6.getNestedFields(names, _this6.getFieldError);
	  };

	  this.getFieldError = function (name) {
	    return _this6.getNestedField(name, function (fullName) {
	      return getErrorStrs(_this6.getFieldMember(fullName, 'errors'));
	    });
	  };

	  this.isFieldValidating = function (name) {
	    return _this6.getFieldMember(name, 'validating');
	  };

	  this.isFieldsValidating = function (ns) {
	    var names = ns || _this6.getValidFieldsName();
	    return names.some(function (n) {
	      return _this6.isFieldValidating(n);
	    });
	  };

	  this.isFieldTouched = function (name) {
	    return _this6.getFieldMember(name, 'touched');
	  };

	  this.isFieldsTouched = function (ns) {
	    var names = ns || _this6.getValidFieldsName();
	    return names.some(function (n) {
	      return _this6.isFieldTouched(n);
	    });
	  };
	};

	function createFieldsStore(fields) {
	  return new FieldsStore(fields);
	}

	var DEFAULT_TRIGGER = 'onChange';

	function createBaseForm() {
	  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var mixins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  var validateMessages = option.validateMessages,
	      onFieldsChange = option.onFieldsChange,
	      onValuesChange = option.onValuesChange,
	      _option$mapProps = option.mapProps,
	      mapProps = _option$mapProps === undefined ? identity$1 : _option$mapProps,
	      mapPropsToFields = option.mapPropsToFields,
	      fieldNameProp = option.fieldNameProp,
	      fieldMetaProp = option.fieldMetaProp,
	      fieldDataProp = option.fieldDataProp,
	      _option$formPropName = option.formPropName,
	      formPropName = _option$formPropName === undefined ? 'form' : _option$formPropName,
	      formName = option.name,
	      withRef = option.withRef;


	  return function decorate(WrappedComponent) {
	    var Form = createReactClass({
	      displayName: 'Form',

	      mixins: mixins,

	      getInitialState: function getInitialState() {
	        var _this = this;

	        var fields = mapPropsToFields && mapPropsToFields(this.props);
	        this.fieldsStore = createFieldsStore(fields || {});

	        this.instances = {};
	        this.cachedBind = {};
	        this.clearedFieldMetaCache = {};

	        this.renderFields = {};
	        this.domFields = {};

	        // HACK: https://github.com/ant-design/ant-design/issues/6406
	        ['getFieldsValue', 'getFieldValue', 'setFieldsInitialValue', 'getFieldsError', 'getFieldError', 'isFieldValidating', 'isFieldsValidating', 'isFieldsTouched', 'isFieldTouched'].forEach(function (key) {
	          _this[key] = function () {
	            var _fieldsStore;

	            if (process.env.NODE_ENV !== 'production') {
	              warning_1$2(false, 'you should not use `ref` on enhanced form, please use `wrappedComponentRef`. ' + 'See: https://github.com/react-component/form#note-use-wrappedcomponentref-instead-of-withref-after-rc-form140');
	            }
	            return (_fieldsStore = _this.fieldsStore)[key].apply(_fieldsStore, arguments);
	          };
	        });

	        return {
	          submitting: false
	        };
	      },
	      componentDidMount: function componentDidMount() {
	        this.cleanUpUselessFields();
	      },
	      componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	        if (mapPropsToFields) {
	          this.fieldsStore.updateFields(mapPropsToFields(nextProps));
	        }
	      },
	      componentDidUpdate: function componentDidUpdate() {
	        this.cleanUpUselessFields();
	      },
	      onCollectCommon: function onCollectCommon(name, action, args) {
	        var fieldMeta = this.fieldsStore.getFieldMeta(name);
	        if (fieldMeta[action]) {
	          fieldMeta[action].apply(fieldMeta, _toConsumableArray(args));
	        } else if (fieldMeta.originalProps && fieldMeta.originalProps[action]) {
	          var _fieldMeta$originalPr;

	          (_fieldMeta$originalPr = fieldMeta.originalProps)[action].apply(_fieldMeta$originalPr, _toConsumableArray(args));
	        }
	        var value = fieldMeta.getValueFromEvent ? fieldMeta.getValueFromEvent.apply(fieldMeta, _toConsumableArray(args)) : getValueFromEvent.apply(undefined, _toConsumableArray(args));
	        if (onValuesChange && value !== this.fieldsStore.getFieldValue(name)) {
	          var valuesAll = this.fieldsStore.getAllValues();
	          var valuesAllSet = {};
	          valuesAll[name] = value;
	          Object.keys(valuesAll).forEach(function (key) {
	            return set_1(valuesAllSet, key, valuesAll[key]);
	          });
	          onValuesChange(_extends$5(_defineProperty$1({}, formPropName, this.getForm()), this.props), set_1({}, name, value), valuesAllSet);
	        }
	        var field = this.fieldsStore.getField(name);
	        return { name: name, field: _extends$5({}, field, { value: value, touched: true }), fieldMeta: fieldMeta };
	      },
	      onCollect: function onCollect(name_, action) {
	        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	          args[_key - 2] = arguments[_key];
	        }

	        var _onCollectCommon = this.onCollectCommon(name_, action, args),
	            name = _onCollectCommon.name,
	            field = _onCollectCommon.field,
	            fieldMeta = _onCollectCommon.fieldMeta;

	        var validate = fieldMeta.validate;


	        this.fieldsStore.setFieldsAsDirty();

	        var newField = _extends$5({}, field, {
	          dirty: hasRules(validate)
	        });
	        this.setFields(_defineProperty$1({}, name, newField));
	      },
	      onCollectValidate: function onCollectValidate(name_, action) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        var _onCollectCommon2 = this.onCollectCommon(name_, action, args),
	            field = _onCollectCommon2.field,
	            fieldMeta = _onCollectCommon2.fieldMeta;

	        var newField = _extends$5({}, field, {
	          dirty: true
	        });

	        this.fieldsStore.setFieldsAsDirty();

	        this.validateFieldsInternal([newField], {
	          action: action,
	          options: {
	            firstFields: !!fieldMeta.validateFirst
	          }
	        });
	      },
	      getCacheBind: function getCacheBind(name, action, fn) {
	        if (!this.cachedBind[name]) {
	          this.cachedBind[name] = {};
	        }
	        var cache = this.cachedBind[name];
	        if (!cache[action] || cache[action].oriFn !== fn) {
	          cache[action] = {
	            fn: fn.bind(this, name, action),
	            oriFn: fn
	          };
	        }
	        return cache[action].fn;
	      },
	      getFieldDecorator: function getFieldDecorator(name, fieldOption) {
	        var _this2 = this;

	        var props = this.getFieldProps(name, fieldOption);
	        return function (fieldElem) {
	          // We should put field in record if it is rendered
	          _this2.renderFields[name] = true;

	          var fieldMeta = _this2.fieldsStore.getFieldMeta(name);
	          var originalProps = fieldElem.props;
	          if (process.env.NODE_ENV !== 'production') {
	            var valuePropName = fieldMeta.valuePropName;
	            warning_1$2(!(valuePropName in originalProps), '`getFieldDecorator` will override `' + valuePropName + '`, ' + ('so please don\'t set `' + valuePropName + '` directly ') + 'and use `setFieldsValue` to set it.');
	            var defaultValuePropName = 'default' + valuePropName[0].toUpperCase() + valuePropName.slice(1);
	            warning_1$2(!(defaultValuePropName in originalProps), '`' + defaultValuePropName + '` is invalid ' + ('for `getFieldDecorator` will set `' + valuePropName + '`,') + ' please use `option.initialValue` instead.');
	          }
	          fieldMeta.originalProps = originalProps;
	          fieldMeta.ref = fieldElem.ref;
	          return React__default.cloneElement(fieldElem, _extends$5({}, props, _this2.fieldsStore.getFieldValuePropValue(fieldMeta)));
	        };
	      },
	      getFieldProps: function getFieldProps(name) {
	        var _this3 = this;

	        var usersFieldOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        if (!name) {
	          throw new Error('Must call `getFieldProps` with valid name string!');
	        }
	        if (process.env.NODE_ENV !== 'production') {
	          warning_1$2(this.fieldsStore.isValidNestedFieldName(name), 'One field name cannot be part of another, e.g. `a` and `a.b`.');
	          warning_1$2(!('exclusive' in usersFieldOption), '`option.exclusive` of `getFieldProps`|`getFieldDecorator` had been remove.');
	        }

	        delete this.clearedFieldMetaCache[name];

	        var fieldOption = _extends$5({
	          name: name,
	          trigger: DEFAULT_TRIGGER,
	          valuePropName: 'value',
	          validate: []
	        }, usersFieldOption);

	        var rules = fieldOption.rules,
	            trigger = fieldOption.trigger,
	            _fieldOption$validate = fieldOption.validateTrigger,
	            validateTrigger = _fieldOption$validate === undefined ? trigger : _fieldOption$validate,
	            validate = fieldOption.validate;


	        var fieldMeta = this.fieldsStore.getFieldMeta(name);
	        if ('initialValue' in fieldOption) {
	          fieldMeta.initialValue = fieldOption.initialValue;
	        }

	        var inputProps = _extends$5({}, this.fieldsStore.getFieldValuePropValue(fieldOption), {
	          ref: this.getCacheBind(name, name + '__ref', this.saveRef)
	        });
	        if (fieldNameProp) {
	          inputProps[fieldNameProp] = formName ? formName + '_' + name : name;
	        }

	        var validateRules = normalizeValidateRules(validate, rules, validateTrigger);
	        var validateTriggers = getValidateTriggers(validateRules);
	        validateTriggers.forEach(function (action) {
	          if (inputProps[action]) return;
	          inputProps[action] = _this3.getCacheBind(name, action, _this3.onCollectValidate);
	        });

	        // make sure that the value will be collect
	        if (trigger && validateTriggers.indexOf(trigger) === -1) {
	          inputProps[trigger] = this.getCacheBind(name, trigger, this.onCollect);
	        }

	        var meta = _extends$5({}, fieldMeta, fieldOption, {
	          validate: validateRules
	        });
	        this.fieldsStore.setFieldMeta(name, meta);
	        if (fieldMetaProp) {
	          inputProps[fieldMetaProp] = meta;
	        }

	        if (fieldDataProp) {
	          inputProps[fieldDataProp] = this.fieldsStore.getField(name);
	        }

	        // This field is rendered, record it
	        this.renderFields[name] = true;

	        return inputProps;
	      },
	      getFieldInstance: function getFieldInstance(name) {
	        return this.instances[name];
	      },
	      getRules: function getRules(fieldMeta, action) {
	        var actionRules = fieldMeta.validate.filter(function (item) {
	          return !action || item.trigger.indexOf(action) >= 0;
	        }).map(function (item) {
	          return item.rules;
	        });
	        return flattenArray(actionRules);
	      },
	      setFields: function setFields(maybeNestedFields, callback) {
	        var _this4 = this;

	        var fields = this.fieldsStore.flattenRegisteredFields(maybeNestedFields);
	        this.fieldsStore.setFields(fields);
	        if (onFieldsChange) {
	          var changedFields = Object.keys(fields).reduce(function (acc, name) {
	            return set_1(acc, name, _this4.fieldsStore.getField(name));
	          }, {});
	          onFieldsChange(_extends$5(_defineProperty$1({}, formPropName, this.getForm()), this.props), changedFields, this.fieldsStore.getNestedAllFields());
	        }
	        this.forceUpdate(callback);
	      },
	      setFieldsValue: function setFieldsValue(changedValues, callback) {
	        var fieldsMeta = this.fieldsStore.fieldsMeta;

	        var values = this.fieldsStore.flattenRegisteredFields(changedValues);
	        var newFields = Object.keys(values).reduce(function (acc, name) {
	          var isRegistered = fieldsMeta[name];
	          if (process.env.NODE_ENV !== 'production') {
	            warning_1$2(isRegistered, 'Cannot use `setFieldsValue` until ' + 'you use `getFieldDecorator` or `getFieldProps` to register it.');
	          }
	          if (isRegistered) {
	            var value = values[name];
	            acc[name] = {
	              value: value
	            };
	          }
	          return acc;
	        }, {});
	        this.setFields(newFields, callback);
	        if (onValuesChange) {
	          var allValues = this.fieldsStore.getAllValues();
	          onValuesChange(_extends$5(_defineProperty$1({}, formPropName, this.getForm()), this.props), changedValues, allValues);
	        }
	      },
	      saveRef: function saveRef(name, _, component) {
	        if (!component) {
	          var _fieldMeta = this.fieldsStore.getFieldMeta(name);
	          if (!_fieldMeta.preserve) {
	            // after destroy, delete data
	            this.clearedFieldMetaCache[name] = {
	              field: this.fieldsStore.getField(name),
	              meta: _fieldMeta
	            };
	            this.clearField(name);
	          }
	          delete this.domFields[name];
	          return;
	        }
	        this.domFields[name] = true;
	        this.recoverClearedField(name);
	        var fieldMeta = this.fieldsStore.getFieldMeta(name);
	        if (fieldMeta) {
	          var ref = fieldMeta.ref;
	          if (ref) {
	            if (typeof ref === 'string') {
	              throw new Error('can not set ref string for ' + name);
	            } else if (typeof ref === 'function') {
	              ref(component);
	            } else if (Object.prototype.hasOwnProperty.call(ref, 'current')) {
	              ref.current = component;
	            }
	          }
	        }
	        this.instances[name] = component;
	      },
	      cleanUpUselessFields: function cleanUpUselessFields() {
	        var _this5 = this;

	        var fieldList = this.fieldsStore.getAllFieldsName();
	        var removedList = fieldList.filter(function (field) {
	          var fieldMeta = _this5.fieldsStore.getFieldMeta(field);
	          return !_this5.renderFields[field] && !_this5.domFields[field] && !fieldMeta.preserve;
	        });
	        if (removedList.length) {
	          removedList.forEach(this.clearField);
	        }
	        this.renderFields = {};
	      },
	      clearField: function clearField(name) {
	        this.fieldsStore.clearField(name);
	        delete this.instances[name];
	        delete this.cachedBind[name];
	      },
	      resetFields: function resetFields(ns) {
	        var _this6 = this;

	        var newFields = this.fieldsStore.resetFields(ns);
	        if (Object.keys(newFields).length > 0) {
	          this.setFields(newFields);
	        }
	        if (ns) {
	          var names = Array.isArray(ns) ? ns : [ns];
	          names.forEach(function (name) {
	            return delete _this6.clearedFieldMetaCache[name];
	          });
	        } else {
	          this.clearedFieldMetaCache = {};
	        }
	      },
	      recoverClearedField: function recoverClearedField(name) {
	        if (this.clearedFieldMetaCache[name]) {
	          this.fieldsStore.setFields(_defineProperty$1({}, name, this.clearedFieldMetaCache[name].field));
	          this.fieldsStore.setFieldMeta(name, this.clearedFieldMetaCache[name].meta);
	          delete this.clearedFieldMetaCache[name];
	        }
	      },
	      validateFieldsInternal: function validateFieldsInternal(fields, _ref, callback) {
	        var _this7 = this;

	        var fieldNames = _ref.fieldNames,
	            action = _ref.action,
	            _ref$options = _ref.options,
	            options = _ref$options === undefined ? {} : _ref$options;

	        var allRules = {};
	        var allValues = {};
	        var allFields = {};
	        var alreadyErrors = {};
	        fields.forEach(function (field) {
	          var name = field.name;
	          if (options.force !== true && field.dirty === false) {
	            if (field.errors) {
	              set_1(alreadyErrors, name, { errors: field.errors });
	            }
	            return;
	          }
	          var fieldMeta = _this7.fieldsStore.getFieldMeta(name);
	          var newField = _extends$5({}, field);
	          newField.errors = undefined;
	          newField.validating = true;
	          newField.dirty = true;
	          allRules[name] = _this7.getRules(fieldMeta, action);
	          allValues[name] = newField.value;
	          allFields[name] = newField;
	        });
	        this.setFields(allFields);
	        // in case normalize
	        Object.keys(allValues).forEach(function (f) {
	          allValues[f] = _this7.fieldsStore.getFieldValue(f);
	        });
	        if (callback && isEmptyObject(allFields)) {
	          callback(isEmptyObject(alreadyErrors) ? null : alreadyErrors, this.fieldsStore.getFieldsValue(fieldNames));
	          return;
	        }
	        var validator = new Schema(allRules);
	        if (validateMessages) {
	          validator.messages(validateMessages);
	        }
	        validator.validate(allValues, options, function (errors) {
	          var errorsGroup = _extends$5({}, alreadyErrors);
	          if (errors && errors.length) {
	            errors.forEach(function (e) {
	              var errorFieldName = e.field;
	              var fieldName = errorFieldName;

	              // Handle using array validation rule.
	              // ref: https://github.com/ant-design/ant-design/issues/14275
	              Object.keys(allRules).some(function (ruleFieldName) {
	                var rules = allRules[ruleFieldName] || [];

	                // Exist if match rule
	                if (ruleFieldName === errorFieldName) {
	                  fieldName = ruleFieldName;
	                  return true;
	                }

	                // Skip if not match array type
	                if (rules.every(function (_ref2) {
	                  var type = _ref2.type;
	                  return type !== 'array';
	                }) && errorFieldName.indexOf(ruleFieldName) !== 0) {
	                  return false;
	                }

	                // Exist if match the field name
	                var restPath = errorFieldName.slice(ruleFieldName.length + 1);
	                if (/\d+/.test(restPath)) {
	                  fieldName = ruleFieldName;
	                  return true;
	                }

	                return false;
	              });

	              var field = get_1(errorsGroup, fieldName);
	              if (typeof field !== 'object' || Array.isArray(field)) {
	                set_1(errorsGroup, fieldName, { errors: [] });
	              }
	              var fieldErrors = get_1(errorsGroup, fieldName.concat('.errors'));
	              fieldErrors.push(e);
	            });
	          }
	          var expired = [];
	          var nowAllFields = {};
	          Object.keys(allRules).forEach(function (name) {
	            var fieldErrors = get_1(errorsGroup, name);
	            var nowField = _this7.fieldsStore.getField(name);
	            // avoid concurrency problems
	            if (!eq_1(nowField.value, allValues[name])) {
	              expired.push({
	                name: name
	              });
	            } else {
	              nowField.errors = fieldErrors && fieldErrors.errors;
	              nowField.value = allValues[name];
	              nowField.validating = false;
	              nowField.dirty = false;
	              nowAllFields[name] = nowField;
	            }
	          });
	          _this7.setFields(nowAllFields);
	          if (callback) {
	            if (expired.length) {
	              expired.forEach(function (_ref3) {
	                var name = _ref3.name;

	                var fieldErrors = [{
	                  message: name + ' need to revalidate',
	                  field: name
	                }];
	                set_1(errorsGroup, name, {
	                  expired: true,
	                  errors: fieldErrors
	                });
	              });
	            }

	            callback(isEmptyObject(errorsGroup) ? null : errorsGroup, _this7.fieldsStore.getFieldsValue(fieldNames));
	          }
	        });
	      },
	      validateFields: function validateFields(ns, opt, cb) {
	        var _this8 = this;

	        var pending = new Promise(function (resolve, reject) {
	          var _getParams = getParams(ns, opt, cb),
	              names = _getParams.names,
	              options = _getParams.options;

	          var _getParams2 = getParams(ns, opt, cb),
	              callback = _getParams2.callback;

	          if (!callback || typeof callback === 'function') {
	            var oldCb = callback;
	            callback = function callback(errors, values) {
	              if (oldCb) {
	                oldCb(errors, values);
	              } else if (errors) {
	                reject({ errors: errors, values: values });
	              } else {
	                resolve(values);
	              }
	            };
	          }
	          var fieldNames = names ? _this8.fieldsStore.getValidFieldsFullName(names) : _this8.fieldsStore.getValidFieldsName();
	          var fields = fieldNames.filter(function (name) {
	            var fieldMeta = _this8.fieldsStore.getFieldMeta(name);
	            return hasRules(fieldMeta.validate);
	          }).map(function (name) {
	            var field = _this8.fieldsStore.getField(name);
	            field.value = _this8.fieldsStore.getFieldValue(name);
	            return field;
	          });
	          if (!fields.length) {
	            callback(null, _this8.fieldsStore.getFieldsValue(fieldNames));
	            return;
	          }
	          if (!('firstFields' in options)) {
	            options.firstFields = fieldNames.filter(function (name) {
	              var fieldMeta = _this8.fieldsStore.getFieldMeta(name);
	              return !!fieldMeta.validateFirst;
	            });
	          }
	          _this8.validateFieldsInternal(fields, {
	            fieldNames: fieldNames,
	            options: options
	          }, callback);
	        });
	        pending['catch'](function (e) {
	          if (console.error && process.env.NODE_ENV !== 'production') {
	            console.error(e);
	          }
	          return e;
	        });
	        return pending;
	      },
	      isSubmitting: function isSubmitting() {
	        if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
	          warning_1$2(false, '`isSubmitting` is deprecated. ' + 'Actually, it\'s more convenient to handle submitting status by yourself.');
	        }
	        return this.state.submitting;
	      },
	      submit: function submit(callback) {
	        var _this9 = this;

	        if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
	          warning_1$2(false, '`submit` is deprecated. ' + 'Actually, it\'s more convenient to handle submitting status by yourself.');
	        }
	        var fn = function fn() {
	          _this9.setState({
	            submitting: false
	          });
	        };
	        this.setState({
	          submitting: true
	        });
	        callback(fn);
	      },
	      render: function render() {
	        var _props = this.props,
	            wrappedComponentRef = _props.wrappedComponentRef,
	            restProps = _objectWithoutProperties(_props, ['wrappedComponentRef']); // eslint-disable-line


	        var formProps = _defineProperty$1({}, formPropName, this.getForm());
	        if (withRef) {
	          if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {
	            warning_1$2(false, '`withRef` is deprecated, please use `wrappedComponentRef` instead. ' + 'See: https://github.com/react-component/form#note-use-wrappedcomponentref-instead-of-withref-after-rc-form140');
	          }
	          formProps.ref = 'wrappedComponent';
	        } else if (wrappedComponentRef) {
	          formProps.ref = wrappedComponentRef;
	        }
	        var props = mapProps.call(this, _extends$5({}, formProps, restProps));
	        return React__default.createElement(WrappedComponent, props);
	      }
	    });

	    return argumentContainer(Form, WrappedComponent);
	  };
	}

	var mixin = {
	  getForm: function getForm() {
	    return {
	      getFieldsValue: this.fieldsStore.getFieldsValue,
	      getFieldValue: this.fieldsStore.getFieldValue,
	      getFieldInstance: this.getFieldInstance,
	      setFieldsValue: this.setFieldsValue,
	      setFields: this.setFields,
	      setFieldsInitialValue: this.fieldsStore.setFieldsInitialValue,
	      getFieldDecorator: this.getFieldDecorator,
	      getFieldProps: this.getFieldProps,
	      getFieldsError: this.fieldsStore.getFieldsError,
	      getFieldError: this.fieldsStore.getFieldError,
	      isFieldValidating: this.fieldsStore.isFieldValidating,
	      isFieldsValidating: this.fieldsStore.isFieldsValidating,
	      isFieldsTouched: this.fieldsStore.isFieldsTouched,
	      isFieldTouched: this.fieldsStore.isFieldTouched,
	      isSubmitting: this.isSubmitting,
	      submit: this.submit,
	      validateFields: this.validateFields,
	      resetFields: this.resetFields
	    };
	  }
	};

	function createForm(options) {
	  return createBaseForm(options, [mixin]);
	}

	var formShape = propTypes.shape({
	  getFieldsValue: propTypes.func,
	  getFieldValue: propTypes.func,
	  getFieldInstance: propTypes.func,
	  setFieldsValue: propTypes.func,
	  setFields: propTypes.func,
	  setFieldsInitialValue: propTypes.func,
	  getFieldDecorator: propTypes.func,
	  getFieldProps: propTypes.func,
	  getFieldsError: propTypes.func,
	  getFieldError: propTypes.func,
	  isFieldValidating: propTypes.func,
	  isFieldsValidating: propTypes.func,
	  isFieldsTouched: propTypes.func,
	  isFieldTouched: propTypes.func,
	  isSubmitting: propTypes.func,
	  submit: propTypes.func,
	  validateFields: propTypes.func,
	  resetFields: propTypes.func
	});

	// export this package's api

	var es = /*#__PURE__*/Object.freeze({
		createFormField: createFormField,
		formShape: formShape,
		createForm: createForm
	});

	var Form_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    prefixCls: _propTypes2["default"].string,
	    onSubmit: _propTypes2["default"].func
	};
	var defaultProps = {
	    prefixCls: 'u-form',
	    onSubmit: function onSubmit() {}
	};

	var Form = function (_Component) {
	    _inherits(Form, _Component);

	    function Form(props) {
	        _classCallCheck(this, Form);

	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }

	    Form.prototype.render = function render() {
	        var _props = this.props,
	            prefixCls = _props.prefixCls,
	            _props$className = _props.className,
	            className = _props$className === undefined ? '' : _props$className,
	            children = _props.children,
	            style = _props.style,
	            onSubmit = _props.onSubmit;

	        var formClassName = (0, _classnames2["default"])(prefixCls, className);
	        return _react2["default"].createElement(
	            'form',
	            { className: prefixCls + ' ' + className, style: style, onSubmit: onSubmit },
	            children
	        );
	    };

	    return Form;
	}(React__default.Component);
	Form.createForm = es.createForm;
	Form.createFormField = es.createFormField;
	Form.propTypes = propTypes$1;
	Form.defaultProps = defaultProps;
	exports["default"] = Form;
	module.exports = exports['default'];
	});

	unwrapExports(Form_1);

	var FormItem_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    prefixCls: _propTypes2["default"].string
	};
	var defaultProps = {
	    prefixCls: 'u-form'
	};

	var FormItem = function (_Component) {
	    _inherits(FormItem, _Component);

	    function FormItem(props) {
	        _classCallCheck(this, FormItem);

	        return _possibleConstructorReturn(this, _Component.call(this, props));
	    }

	    FormItem.prototype.render = function render() {
	        var _props = this.props,
	            children = _props.children,
	            _props$className = _props.className,
	            className = _props$className === undefined ? '' : _props$className,
	            prefixCls = _props.prefixCls,
	            style = _props.style;

	        return _react2["default"].createElement(
	            'div',
	            { className: prefixCls + '-item' + ' ' + className, style: style },
	            children
	        );
	    };

	    return FormItem;
	}(React__default.Component);
	FormItem.propTypes = propTypes$1;
	FormItem.defaultProps = defaultProps;
	exports["default"] = FormItem;
	module.exports = exports['default'];
	});

	unwrapExports(FormItem_1);

	var build$t = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Form2 = _interopRequireDefault(Form_1);



	var _FormItem2 = _interopRequireDefault(FormItem_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_Form2["default"].FormItem = _FormItem2["default"];
	exports["default"] = _Form2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$t);

	var Label_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultProps = {
	  clsPrefix: 'u-label'
	};

	var Label = function (_Component) {
	  _inherits(Label, _Component);

	  function Label() {
	    _classCallCheck(this, Label);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  Label.prototype.render = function render() {
	    var _props = this.props,
	        className = _props.className,
	        children = _props.children,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['className', 'children', 'clsPrefix']);

	    var classNames = (0, _classnames2["default"])(clsPrefix, className);

	    return _react2["default"].createElement(
	      'label',
	      _extends({}, others, {
	        className: classNames
	      }),
	      children
	    );
	  };

	  return Label;
	}(React__default.Component);

	Label.defaultProps = defaultProps;

	exports["default"] = Label;
	module.exports = exports['default'];
	});

	unwrapExports(Label_1);

	var build$u = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Label2 = _interopRequireDefault(Label_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Label2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$u);

	var Col_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string]),

	  /**
	   * xs显示列数
	   */
	  xs: _propTypes2["default"].number,
	  /**
	   * sm显示列数
	   */
	  sm: _propTypes2["default"].number,
	  /**
	   * md显示列数
	   */
	  md: _propTypes2["default"].number,
	  /**
	   * lg显示列数
	   */
	  lg: _propTypes2["default"].number,
	  /**
	   * xs偏移列数
	   */
	  xsOffset: _propTypes2["default"].number,
	  /**
	   * sm偏移列数
	   */
	  smOffset: _propTypes2["default"].number,
	  /**
	   * md偏移列数
	   */
	  mdOffset: _propTypes2["default"].number,
	  /**
	   * lg偏移列数
	   */
	  lgOffset: _propTypes2["default"].number,
	  /**
	   * xs右偏移列数
	   */
	  xsPush: _propTypes2["default"].number,
	  /**
	   * sm右偏移列数
	   */
	  smPush: _propTypes2["default"].number,
	  /**
	   * md右偏移列数
	   */
	  mdPush: _propTypes2["default"].number,
	  /**
	   * lg右偏移列数
	   */
	  lgPush: _propTypes2["default"].number,
	  /**
	   * xs左偏移列数
	   */
	  xsPull: _propTypes2["default"].number,
	  /**
	   * sm左偏移列数
	   */
	  smPull: _propTypes2["default"].number,
	  /**
	   * md左偏移列数
	   */
	  mdPull: _propTypes2["default"].number,
	  /**
	   * lg左偏移列数
	   */
	  lgPull: _propTypes2["default"].number
	};

	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-col'
	};

	var DEVICE_SIZES = ['lg', 'md', 'sm', 'xs'];

	var Col = function (_Component) {
	  _inherits(Col, _Component);

	  function Col() {
	    _classCallCheck(this, Col);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  Col.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        className = _props.className,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['componentClass', 'className', 'clsPrefix']);

	    var tbClass = [];
	    /**
	     * 对传入props做样式转化
	     * @type {[type]}
	     */
	    DEVICE_SIZES.forEach(function (size) {
	      function popProp(propSuffix, modifier) {
	        var propName = '' + size + propSuffix;
	        var propValue = others[propName];

	        if (propValue != undefined && propValue != null) {
	          tbClass.push(clsPrefix + '-' + size + modifier + '-' + propValue);
	        }

	        delete others[propName];
	      }

	      popProp('', '');
	      popProp('Offset', '-offset');
	      popProp('Push', '-push');
	      popProp('Pull', '-pull');
	    });

	    return _react2["default"].createElement(
	      Component,
	      _extends({
	        className: (0, _classnames2["default"])(tbClass, className)
	      }, others),
	      this.props.children
	    );
	  };

	  return Col;
	}(React__default.Component);

	Col.defaultProps = defaultProps;
	Col.propTypes = propTypes$1;

	exports["default"] = Col;
	module.exports = exports['default'];
	});

	unwrapExports(Col_1);

	var Row_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string])
	};

	var defaultProps = {
	  componentClass: 'div',
	  clsPrefix: 'u-row'
	};

	var Row = function (_Component) {
	  _inherits(Row, _Component);

	  function Row() {
	    _classCallCheck(this, Row);

	    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  Row.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        others = _objectWithoutProperties(_props, ['componentClass', 'clsPrefix', 'className']);

	    var bsclass = '' + clsPrefix;

	    return _react2["default"].createElement(
	      Component,
	      _extends({}, others, {
	        className: (0, _classnames2["default"])(bsclass, className)
	      }),
	      this.props.children
	    );
	  };

	  return Row;
	}(React__default.Component);

	Row.propTypes = propTypes$1;
	Row.defaultProps = defaultProps;

	exports["default"] = Row;
	module.exports = exports['default'];
	});

	unwrapExports(Row_1);

	var Layout = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  /**
	   * Adds `container-fluid` class.
	   */
	  fluid: _propTypes2["default"].bool,
	  /**
	   * You can use a custom element for this component
	   */
	  componentClass: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].string])
	};

	var defaultProps = {
	  componentClass: 'div',
	  fluid: false,
	  clsPrefix: 'u-container'
	};

	var Con = function (_React$Component) {
	  _inherits(Con, _React$Component);

	  function Con() {
	    _classCallCheck(this, Con);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Con.prototype.render = function render() {
	    var _tbclass;

	    var _props = this.props,
	        fluid = _props.fluid,
	        Component = _props.componentClass,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        others = _objectWithoutProperties(_props, ['fluid', 'componentClass', 'clsPrefix', 'className']);

	    var tbclass = (_tbclass = {}, _defineProperty(_tbclass, '' + clsPrefix, !fluid), _defineProperty(_tbclass, clsPrefix + '-fluid', fluid), _tbclass);

	    return _react2["default"].createElement(
	      Component,
	      _extends({}, others, {
	        className: (0, _classnames2["default"])(tbclass, className)
	      }),
	      this.props.children
	    );
	  };

	  return Con;
	}(_react2["default"].Component);

	Con.propTypes = propTypes$1;
	Con.defaultProps = defaultProps;

	exports["default"] = Con;
	module.exports = exports['default'];
	});

	unwrapExports(Layout);

	var build$v = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Con = exports.Row = exports.Col = undefined;



	var _Col3 = _interopRequireDefault(Col_1);



	var _Row3 = _interopRequireDefault(Row_1);



	var _Layout2 = _interopRequireDefault(Layout);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Col = _Col3["default"];
	exports.Row = _Row3["default"];
	exports.Con = _Layout2["default"];
	});

	unwrapExports(build$v);
	var build_1$1 = build$v.Con;
	var build_2$1 = build$v.Row;
	var build_3$1 = build$v.Col;

	var classnames$1 = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	var Transition_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _properties2 = _interopRequireDefault(properties);



	var _on2 = _interopRequireDefault(on_1$1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var transitionEndEvent = _properties2["default"].end;

	//设置状态码
	var UNMOUNTED = exports.UNMOUNTED = 0;
	var EXITED = exports.EXITED = 1;
	var ENTERING = exports.ENTERING = 2;
	var ENTERED = exports.ENTERED = 3;
	var EXITING = exports.EXITING = 4;

	var propTypes$1 = {
	  /**
	   * 是否触发动画
	   */
	  "in": _propTypes2["default"].bool,

	  /**
	   * 不显示的时候是否移除组件
	   */
	  unmountOnExit: _propTypes2["default"].bool,

	  /**
	   * 如果设置为默认显示，挂载时显示动画
	   */
	  transitionAppear: _propTypes2["default"].bool,

	  /**
	   * 设置超时时间，防止出现问题，可设置为>=动画时间
	   */
	  timeout: _propTypes2["default"].number,

	  /**
	   * 退出组件时添加的class
	   */
	  exitedClassName: _propTypes2["default"].string,
	  /**
	   * 退出组件中添加的class
	   */
	  exitingClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画后添加的class
	   */
	  enteredClassName: _propTypes2["default"].string,
	  /**
	   * 进入动画时添加的class
	   */
	  enteringClassName: _propTypes2["default"].string,

	  /**
	   * 进入动画开始时的钩子函数
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * 进入动画中的钩子函数
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * 进入动画后的钩子函数
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * 退出动画开始时的钩子函数
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * 退出动画中的钩子函数
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * 退出动画后的钩子函数
	   */
	  onExited: _propTypes2["default"].func
	};

	function noop() {}

	var defaultProps = {
	  "in": false,
	  unmountOnExit: false,
	  transitionAppear: false,
	  timeout: 5000,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};

	/**
	 * 动画组件
	 */

	var Transition = function (_Component) {
	  _inherits(Transition, _Component);

	  function Transition(props, context) {
	    _classCallCheck(this, Transition);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));

	    var initialStatus = void 0;
	    if (props["in"]) {
	      // 在componentdidmount时开始执行动画
	      initialStatus = props.transitionAppear ? EXITED : ENTERED;
	    } else {
	      initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;
	    }
	    _this.state = { status: initialStatus };

	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.prototype.componentDidMount = function componentDidMount() {
	    if (this.props.transitionAppear && this.props["in"]) {
	      this.performEnter(this.props);
	    }
	  };

	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps["in"] && this.props.unmountOnExit) {
	      if (this.state.status === UNMOUNTED) {
	        // 在componentDidUpdate执行动画.
	        this.setState({ status: EXITED });
	      }
	    } else {
	      this._needsUpdate = true;
	    }
	  };

	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    var status = this.state.status;

	    if (this.props.unmountOnExit && status === EXITED) {
	      // 当使用unmountOnExit时，exited为exiting和unmont的过渡状态
	      if (this.props["in"]) {
	        this.performEnter(this.props);
	      } else {
	        this.setState({ status: UNMOUNTED });
	      }

	      return;
	    }

	    // 确保只响应prop变化
	    if (this._needsUpdate) {
	      this._needsUpdate = false;

	      if (this.props["in"]) {
	        if (status === EXITING) {
	          this.performEnter(this.props);
	        } else if (status === EXITED) {
	          this.performEnter(this.props);
	        }
	        // 其他，当我们已经输入或输出
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          this.performExit(this.props);
	        }
	        // 我们已经输入或输出完成
	      }
	    }
	  };

	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  Transition.prototype.performEnter = function performEnter(props) {
	    var _this2 = this;

	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);

	    // 这里接收新props
	    props.onEnter(node);

	    this.safeSetState({ status: ENTERING }, function () {
	      _this2.props.onEntering(node);

	      _this2.onTransitionEnd(node, function () {
	        _this2.safeSetState({ status: ENTERED }, function () {
	          _this2.props.onEntered(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.performExit = function performExit(props) {
	    var _this3 = this;

	    this.cancelNextCallback();
	    var node = _reactDom2["default"].findDOMNode(this);

	    props.onExit(node);

	    this.safeSetState({ status: EXITING }, function () {
	      _this3.props.onExiting(node);

	      _this3.onTransitionEnd(node, function () {
	        _this3.safeSetState({ status: EXITED }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    // 确保在组件销毁后挂起的setState被消除
	    this.setState(nextState, this.setNextCallback(callback));
	  };

	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;

	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, handler) {
	    this.setNextCallback(handler);

	    if (node) {
	      if (transitionEndEvent == undefined) {
	        this.nextCallback();
	      } else {
	        (0, _on2["default"])(node, transitionEndEvent, this.nextCallback);
	      }
	      setTimeout(this.nextCallback, this.props.timeout);
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };

	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _props = this.props,
	        children = _props.children,
	        className = _props.className,
	        childProps = _objectWithoutProperties(_props, ['children', 'className']);

	    Object.keys(Transition.propTypes).forEach(function (key) {
	      return delete childProps[key];
	    });

	    var transitionClassName = void 0;
	    if (status === EXITED) {
	      transitionClassName = this.props.exitedClassName;
	    } else if (status === ENTERING) {
	      transitionClassName = this.props.enteringClassName;
	    } else if (status === ENTERED) {
	      transitionClassName = this.props.enteredClassName;
	    } else if (status === EXITING) {
	      transitionClassName = this.props.exitingClassName;
	    }

	    var child = _react2["default"].Children.only(children);
	    return _react2["default"].cloneElement(child, _extends({}, childProps, {
	      className: (0, _classnames2["default"])(child.props.className, className, transitionClassName)
	    }));
	  };

	  return Transition;
	}(React__default.Component);

	Transition.propTypes = propTypes$1;

	Transition.defaultProps = defaultProps;

	exports["default"] = Transition;
	});

	unwrapExports(Transition_1$1);
	var Transition_2$1 = Transition_1$1.EXITING;
	var Transition_3$1 = Transition_1$1.ENTERED;
	var Transition_4$1 = Transition_1$1.ENTERING;
	var Transition_5$1 = Transition_1$1.EXITED;
	var Transition_6$1 = Transition_1$1.UNMOUNTED;

	var capitalize_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = capitalize;
	function capitalize(string) {
	  return "" + string.charAt(0).toUpperCase() + string.slice(1);
	}
	module.exports = exports["default"];
	});

	unwrapExports(capitalize_1$1);

	var Collapse_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _style2 = _interopRequireDefault(style_1);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Transition2 = _interopRequireDefault(Transition_1$1);



	var _capitalize2 = _interopRequireDefault(capitalize_1$1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var MARGINS = {
	  height: ['marginTop', 'marginBottom'],
	  width: ['marginLeft', 'marginRight']
	};

	// reading a dimension prop will cause the browser to recalculate,
	// which will let our animations work
	function triggerBrowserReflow(node) {
	  node.offsetHeight; // eslint-disable-line no-unused-expressions
	}

	function getDimensionValue(dimension, elem) {
	  var value = elem['offset' + (0, _capitalize2["default"])(dimension)];
	  var margins = MARGINS[dimension];

	  return value + parseInt((0, _style2["default"])(elem, margins[0]), 10) + parseInt((0, _style2["default"])(elem, margins[1]), 10);
	}

	var propTypes$1 = {
	  /**
	   * Show the component; triggers the expand or collapse animation
	   */
	  "in": _propTypes2["default"].bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is collapsed
	   */
	  unmountOnExit: _propTypes2["default"].bool,

	  /**
	   * Run the expand animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _propTypes2["default"].bool,

	  /**
	   * Duration of the collapse animation in milliseconds, to ensure that
	   * finishing callbacks are fired even if the original browser transition end
	   * events are canceled
	   */
	  timeout: _propTypes2["default"].number,

	  /**
	   * Callback fired before the component expands
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to expand
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has expanded
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * Callback fired before the component collapses
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to collapse
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has collapsed
	   */
	  onExited: _propTypes2["default"].func,

	  /**
	   * The dimension used when collapsing, or a function that returns the
	   * dimension
	   *
	   * _Note: Bootstrap only partially supports 'width'!
	   * You will need to supply your own CSS animation for the `.width` CSS class._
	   */
	  dimension: _propTypes2["default"].oneOfType([_propTypes2["default"].oneOf(['height', 'width']), _propTypes2["default"].func]),

	  /**
	   * Function that returns the height or width of the animating DOM node
	   *
	   * Allows for providing some custom logic for how much the Collapse component
	   * should animate in its specified dimension. Called with the current
	   * dimension prop value and the DOM node.
	   */
	  getDimensionValue: _propTypes2["default"].func,

	  /**
	   * ARIA role of collapsible element
	   */
	  role: _propTypes2["default"].string
	};

	var defaultProps = {
	  "in": false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false,

	  dimension: 'height',
	  getDimensionValue: getDimensionValue
	};

	var Collapse = function (_React$Component) {
	  _inherits(Collapse, _React$Component);

	  function Collapse(props, context) {
	    _classCallCheck(this, Collapse);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.handleEnter = _this.handleEnter.bind(_this);
	    _this.handleEntering = _this.handleEntering.bind(_this);
	    _this.handleEntered = _this.handleEntered.bind(_this);
	    _this.handleExit = _this.handleExit.bind(_this);
	    _this.handleExiting = _this.handleExiting.bind(_this);
	    return _this;
	  }

	  /* -- Expanding -- */


	  Collapse.prototype.handleEnter = function handleEnter(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype.handleEntering = function handleEntering(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = this._getScrollDimensionValue(elem, dimension);
	  };

	  Collapse.prototype.handleEntered = function handleEntered(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = null;
	  };

	  /* -- Collapsing -- */


	  Collapse.prototype.handleExit = function handleExit(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = this.props.getDimensionValue(dimension, elem) + 'px';
	    triggerBrowserReflow(elem);
	  };

	  Collapse.prototype.handleExiting = function handleExiting(elem) {
	    var dimension = this._dimension();
	    elem.style[dimension] = '0';
	  };

	  Collapse.prototype._dimension = function _dimension() {
	    return typeof this.props.dimension === 'function' ? this.props.dimension() : this.props.dimension;
	  };

	  // for testing


	  Collapse.prototype._getScrollDimensionValue = function _getScrollDimensionValue(elem, dimension) {
	    return elem['scroll' + (0, _capitalize2["default"])(dimension)] + 'px';
	  };

	  Collapse.prototype.render = function render() {
	    var _props = this.props,
	        onEnter = _props.onEnter,
	        onEntering = _props.onEntering,
	        onEntered = _props.onEntered,
	        onExit = _props.onExit,
	        onExiting = _props.onExiting,
	        className = _props.className,
	        props = _objectWithoutProperties(_props, ['onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'className']);

	    delete props.dimension;
	    delete props.getDimensionValue;

	    var handleEnter = (0, lib$1.createChainedFunction)(this.handleEnter, onEnter);
	    var handleEntering = (0, lib$1.createChainedFunction)(this.handleEntering, onEntering);
	    var handleEntered = (0, lib$1.createChainedFunction)(this.handleEntered, onEntered);
	    var handleExit = (0, lib$1.createChainedFunction)(this.handleExit, onExit);
	    var handleExiting = (0, lib$1.createChainedFunction)(this.handleExiting, onExiting);

	    var classes = {
	      width: this._dimension() === 'width'
	    };

	    return _react2["default"].createElement(_Transition2["default"], _extends({}, props, {
	      'aria-expanded': props.role ? props["in"] : null,
	      className: (0, _classnames2["default"])(className, classes),
	      exitedClassName: 'collapse',
	      exitingClassName: 'collapsing',
	      enteredClassName: 'collapse in',
	      enteringClassName: 'collapsing',
	      onEnter: handleEnter,
	      onEntering: handleEntering,
	      onEntered: handleEntered,
	      onExit: handleExit,
	      onExiting: handleExiting
	    }));
	  };

	  return Collapse;
	}(_react2["default"].Component);

	Collapse.propTypes = propTypes$1;
	Collapse.defaultProps = defaultProps;

	exports["default"] = Collapse;
	module.exports = exports['default'];
	});

	unwrapExports(Collapse_1$1);

	var Fade_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Transition2 = _interopRequireDefault(Transition_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  /**
	   * Show the component; triggers the fade in or fade out animation
	   */
	  "in": _propTypes2["default"].bool,

	  /**
	   * Unmount the component (remove it from the DOM) when it is faded out
	   */
	  unmountOnExit: _propTypes2["default"].bool,

	  /**
	   * Run the fade in animation when the component mounts, if it is initially
	   * shown
	   */
	  transitionAppear: _propTypes2["default"].bool,

	  /**
	   * Duration of the fade animation in milliseconds, to ensure that finishing
	   * callbacks are fired even if the original browser transition end events are
	   * canceled
	   */
	  timeout: _propTypes2["default"].number,

	  /**
	   * Callback fired before the component fades in
	   */
	  onEnter: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade in
	   */
	  onEntering: _propTypes2["default"].func,
	  /**
	   * Callback fired after the has component faded in
	   */
	  onEntered: _propTypes2["default"].func,
	  /**
	   * Callback fired before the component fades out
	   */
	  onExit: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component starts to fade out
	   */
	  onExiting: _propTypes2["default"].func,
	  /**
	   * Callback fired after the component has faded out
	   */
	  onExited: _propTypes2["default"].func
	};

	var defaultProps = {
	  "in": false,
	  timeout: 300,
	  unmountOnExit: false,
	  transitionAppear: false
	};

	var Fade = function (_React$Component) {
	  _inherits(Fade, _React$Component);

	  function Fade() {
	    _classCallCheck(this, Fade);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Fade.prototype.render = function render() {
	    return _react2["default"].createElement(_Transition2["default"], _extends({}, this.props, {
	      className: (0, _classnames2["default"])(this.props.className, 'fade'),
	      enteredClassName: 'in',
	      enteringClassName: 'in'
	    }));
	  };

	  return Fade;
	}(_react2["default"].Component);

	Fade.propTypes = propTypes$1;
	Fade.defaultProps = defaultProps;

	exports["default"] = Fade;
	module.exports = exports['default'];
	});

	unwrapExports(Fade_1$1);

	var build$w = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Fade = exports.Collapse = exports.Transition = undefined;



	var _Transition3 = _interopRequireDefault(Transition_1$1);



	var _Collapse3 = _interopRequireDefault(Collapse_1$1);



	var _Fade3 = _interopRequireDefault(Fade_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Transition = _Transition3["default"];
	exports.Collapse = _Collapse3["default"];
	exports.Fade = _Fade3["default"];
	});

	unwrapExports(build$w);
	var build_1$2 = build$w.Fade;
	var build_2$2 = build$w.Collapse;
	var build_3$2 = build$w.Transition;

	var ChildrenUtils$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.toArrayChildren = toArrayChildren;
	exports.findChildInChildrenByKey = findChildInChildrenByKey;
	exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
	exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
	exports.isSameChildren = isSameChildren;
	exports.mergeChildren = mergeChildren;



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function toArrayChildren(children) {
	  var ret = [];
	  _react2["default"].Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child && child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child && child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findHiddenChildInChildrenByKey(children, key, showProp) {
	  var found = 0;
	  if (children) {
	    children.forEach(function (child) {
	      if (found) {
	        return;
	      }
	      found = child && child.key === key && !child.props[showProp];
	    });
	  }
	  return found;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child && child2) {
	        if (child && !child2 || !child && child2) {
	          same = false;
	        } else if (child.key !== child2.key) {
	          same = false;
	        } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	          same = false;
	        }
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (child && findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (child && nextChildrenPending.hasOwnProperty(child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
	}
	});

	unwrapExports(ChildrenUtils$2);
	var ChildrenUtils_1$2 = ChildrenUtils$2.toArrayChildren;
	var ChildrenUtils_2$2 = ChildrenUtils$2.findChildInChildrenByKey;
	var ChildrenUtils_3$2 = ChildrenUtils$2.findShownChildInChildrenByKey;
	var ChildrenUtils_4$2 = ChildrenUtils$2.findHiddenChildInChildrenByKey;
	var ChildrenUtils_5$2 = ChildrenUtils$2.isSameChildren;
	var ChildrenUtils_6$2 = ChildrenUtils$2.mergeChildren;

	var util_1$7 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var util = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },
	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};
	exports["default"] = util;
	module.exports = exports["default"];
	});

	unwrapExports(util_1$7);

	var AnimateChild_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);





	var _util2 = _interopRequireDefault(util_1$7);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var propTypes$1 = {
	  children: _propTypes2["default"].any
	};

	var AnimateChild = function (_Component) {
	  _inherits(AnimateChild, _Component);

	  function AnimateChild(props) {
	    _classCallCheck(this, AnimateChild);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.transition = _this.transition.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }

	  AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.stop();
	  };

	  AnimateChild.prototype.componentWillEnter = function componentWillEnter(done) {
	    if (_util2["default"].isEnterSupported(this.props)) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  };

	  AnimateChild.prototype.componentWillAppear = function componentWillAppear(done) {
	    if (_util2["default"].isAppearSupported(this.props)) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  };

	  AnimateChild.prototype.componentWillLeave = function componentWillLeave(done) {
	    if (_util2["default"].isLeaveSupported(this.props)) {
	      this.transition('leave', done);
	    } else {
	      // always sync, do not interupt with react component life cycle
	      // update hidden -> animate hidden ->
	      // didUpdate -> animate leave -> unmount (if animate is none)
	      done();
	    }
	  };

	  AnimateChild.prototype.transition = function transition(animationType, finishCallback) {
	    var _this2 = this;

	    var node = _reactDom2["default"].findDOMNode(this);
	    var props = this.props;
	    var transitionName = props.transitionName;
	    var nameIsObj = (typeof transitionName === 'undefined' ? 'undefined' : _typeof(transitionName)) === 'object';
	    this.stop();
	    var end = function end() {
	      _this2.stopper = null;
	      finishCallback();
	    };
	    if ((lib$1.cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	      var name = nameIsObj ? transitionName[animationType] : transitionName + '-' + animationType;
	      var activeName = name + '-active';
	      if (nameIsObj && transitionName[animationType + 'Active']) {
	        activeName = transitionName[animationType + 'Active'];
	      }
	      this.stopper = (0, lib$1.cssAnimation)(node, {
	        name: name,
	        active: activeName
	      }, end);
	    } else {
	      this.stopper = props.animation[animationType](node, end);
	    }
	  };

	  AnimateChild.prototype.stop = function stop() {
	    var stopper = this.stopper;
	    if (stopper) {
	      this.stopper = null;
	      stopper.stop();
	    }
	  };

	  AnimateChild.prototype.render = function render() {
	    return this.props.children;
	  };

	  return AnimateChild;
	}(React__default.Component);

	AnimateChild.propTypes = propTypes$1;

	exports["default"] = AnimateChild;
	module.exports = exports['default'];
	});

	unwrapExports(AnimateChild_1$2);

	var Animate_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _AnimateChild2 = _interopRequireDefault(AnimateChild_1$2);



	var _util2 = _interopRequireDefault(util_1$7);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var defaultKey = 'u_animate_' + Date.now();


	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (_react2["default"].isValidElement(children)) {
	    if (!children.key) {
	      return _react2["default"].cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop() {}

	var propTypes$1 = {
	  component: _propTypes2["default"].any,
	  animation: _propTypes2["default"].object,
	  transitionName: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object]),
	  transitionEnter: _propTypes2["default"].bool,
	  transitionAppear: _propTypes2["default"].bool,
	  exclusive: _propTypes2["default"].bool,
	  transitionLeave: _propTypes2["default"].bool,
	  onEnd: _propTypes2["default"].func,
	  onEnter: _propTypes2["default"].func,
	  onLeave: _propTypes2["default"].func,
	  onAppear: _propTypes2["default"].func,
	  showProp: _propTypes2["default"].string
	};

	var defaultProps = {
	  animation: {},
	  component: 'span',
	  transitionEnter: true,
	  transitionLeave: true,
	  transitionAppear: false,
	  onEnd: noop,
	  onEnter: noop,
	  onLeave: noop,
	  onAppear: noop
	};

	var Animate = function (_Component) {
	  _inherits(Animate, _Component);

	  function Animate(props) {
	    _classCallCheck(this, Animate);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.currentlyAnimatingKeys = {};
	    _this.keysToEnter = [];
	    _this.keysToLeave = [];
	    _this.state = {
	      children: (0, ChildrenUtils$2.toArrayChildren)(getChildrenFromProps(_this.props))
	    };

	    _this.performEnter = _this.performEnter.bind(_this);
	    _this.performAppear = _this.performAppear.bind(_this);
	    _this.handleDoneAdding = _this.handleDoneAdding.bind(_this);
	    _this.performLeave = _this.performLeave.bind(_this);

	    _this.performLeave = _this.performLeave.bind(_this);
	    _this.handleDoneLeaving = _this.handleDoneLeaving.bind(_this);
	    _this.isValidChildByKey = _this.isValidChildByKey.bind(_this);
	    _this.stop = _this.stop.bind(_this);
	    return _this;
	  }

	  Animate.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    this.mounted = true;
	    var showProp = this.props.showProp;
	    var children = this.state.children;
	    if (showProp) {
	      children = children.filter(function (child) {
	        return !!child.props[showProp];
	      });
	    }
	    children.forEach(function (child) {
	      if (child) {
	        _this2.performAppear(child.key);
	      }
	    });
	  };

	  Animate.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  Animate.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this3 = this;

	    this.nextProps = nextProps;
	    var nextChildren = (0, ChildrenUtils$2.toArrayChildren)(getChildrenFromProps(nextProps));
	    var props = this.props;
	    // exclusive needs immediate response
	    if (props.exclusive) {
	      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	        _this3.stop(key);
	      });
	    }
	    var showProp = props.showProp;
	    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	    // last props children if exclusive
	    var currentChildren = props.exclusive ? (0, ChildrenUtils$2.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
	    // in case destroy in showProp mode
	    var newChildren = [];
	    if (showProp) {
	      currentChildren.forEach(function (currentChild) {
	        var nextChild = currentChild && (0, ChildrenUtils$2.findChildInChildrenByKey)(nextChildren, currentChild.key);
	        var newChild = void 0;
	        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	          newChild = _react2["default"].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
	        } else {
	          newChild = nextChild;
	        }
	        if (newChild) {
	          newChildren.push(newChild);
	        }
	      });
	      nextChildren.forEach(function (nextChild) {
	        if (!nextChild || !(0, ChildrenUtils$2.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
	          newChildren.push(nextChild);
	        }
	      });
	    } else {
	      newChildren = (0, ChildrenUtils$2.mergeChildren)(currentChildren, nextChildren);
	    }

	    // need render to avoid update
	    this.setState({
	      children: newChildren
	    });

	    nextChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasPrev = child && (0, ChildrenUtils$2.findChildInChildrenByKey)(currentChildren, key);
	      if (showProp) {
	        var showInNext = child.props[showProp];
	        if (hasPrev) {
	          var showInNow = (0, ChildrenUtils$2.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	          if (!showInNow && showInNext) {
	            _this3.keysToEnter.push(key);
	          }
	        } else if (showInNext) {
	          _this3.keysToEnter.push(key);
	        }
	      } else if (!hasPrev) {
	        _this3.keysToEnter.push(key);
	      }
	    });

	    currentChildren.forEach(function (child) {
	      var key = child && child.key;
	      if (child && currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasNext = child && (0, ChildrenUtils$2.findChildInChildrenByKey)(nextChildren, key);
	      if (showProp) {
	        var showInNow = child.props[showProp];
	        if (hasNext) {
	          var showInNext = (0, ChildrenUtils$2.findShownChildInChildrenByKey)(nextChildren, key, showProp);
	          if (!showInNext && showInNow) {
	            _this3.keysToLeave.push(key);
	          }
	        } else if (showInNow) {
	          _this3.keysToLeave.push(key);
	        }
	      } else if (!hasNext) {
	        _this3.keysToLeave.push(key);
	      }
	    });
	  };

	  Animate.prototype.componentDidUpdate = function componentDidUpdate() {
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(this.performEnter);
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(this.performLeave);
	  };

	  Animate.prototype.performEnter = function performEnter(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));
	    }
	  };

	  Animate.prototype.performAppear = function performAppear(key) {
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));
	    }
	  };

	  Animate.prototype.handleDoneAdding = function handleDoneAdding(key, type) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, ChildrenUtils$2.toArrayChildren)(getChildrenFromProps(props));
	    if (!this.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      this.performLeave(key);
	    } else {
	      if (type === 'appear') {
	        if (_util2["default"].allowAppearCallback(props)) {
	          props.onAppear(key);
	          props.onEnd(key, true);
	        }
	      } else {
	        if (_util2["default"].allowEnterCallback(props)) {
	          props.onEnter(key);
	          props.onEnd(key, true);
	        }
	      }
	    }
	  };

	  Animate.prototype.performLeave = function performLeave(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillLeave(this.handleDoneLeaving.bind(this, key));
	    }
	  };

	  Animate.prototype.handleDoneLeaving = function handleDoneLeaving(key) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, ChildrenUtils$2.toArrayChildren)(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (this.isValidChildByKey(currentChildren, key)) {
	      this.performEnter(key);
	    } else {
	      var end = function end() {
	        if (_util2["default"].allowLeaveCallback(props)) {
	          props.onLeave(key);
	          props.onEnd(key, false);
	        }
	      };
	      /* eslint react/no-is-mounted:0 */
	      if (this.mounted && !(0, ChildrenUtils$2.isSameChildren)(this.state.children, currentChildren, props.showProp)) {
	        this.setState({
	          children: currentChildren
	        }, end);
	      } else {
	        end();
	      }
	    }
	  };

	  Animate.prototype.isValidChildByKey = function isValidChildByKey(currentChildren, key) {
	    var showProp = this.props.showProp;
	    if (showProp) {
	      return (0, ChildrenUtils$2.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	    }
	    return (0, ChildrenUtils$2.findChildInChildrenByKey)(currentChildren, key);
	  };

	  Animate.prototype.stop = function stop(key) {
	    delete this.currentlyAnimatingKeys[key];
	    var component = this.refs[key];
	    if (component) {
	      component.stop();
	    }
	  };

	  Animate.prototype.render = function render() {
	    var props = this.props;
	    this.nextProps = props;
	    var stateChildren = this.state.children;
	    var children = null;
	    if (stateChildren) {
	      children = stateChildren.map(function (child) {
	        if (child === null || child === undefined) {
	          return child;
	        }
	        if (!child.key) {
	          throw new Error('must set key for <rc-animate> children');
	        }
	        return _react2["default"].createElement(
	          _AnimateChild2["default"],
	          {
	            key: child.key,
	            ref: child.key,
	            animation: props.animation,
	            transitionName: props.transitionName,
	            transitionEnter: props.transitionEnter,
	            transitionAppear: props.transitionAppear,
	            transitionLeave: props.transitionLeave
	          },
	          child
	        );
	      });
	    }
	    var Component = props.component;
	    if (Component) {
	      var passedProps = props;
	      if (typeof Component === 'string') {
	        passedProps = {
	          className: props.className,
	          style: props.style
	        };
	      }
	      return _react2["default"].createElement(
	        Component,
	        passedProps,
	        children
	      );
	    }
	    return children[0] || null;
	  };

	  return Animate;
	}(React__default.Component);
	Animate.defaultProps = defaultProps;
	Animate.propTypes = Animate.propTypes;

	exports["default"] = Animate;
	module.exports = exports['default'];
	});

	unwrapExports(Animate_1$2);

	var build$x = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Animate2 = _interopRequireDefault(Animate_1$2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Animate2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$x);

	var Notice_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);



	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  duration: _propTypes2["default"].number,
	  onClose: _propTypes2["default"].func,
	  children: _propTypes2["default"].any,
	  color: _propTypes2["default"].oneOf(['info', 'success', 'danger', 'warning', 'light', 'dark', 'news', 'infolight', 'successlight', 'dangerlight', 'warninglight']),
	  title: _propTypes2["default"].any
	};

	function noop() {}

	var defaultProps = {
	  onEnd: noop,
	  onClose: noop,
	  duration: 4.5,
	  closable: true
	};

	var Notice = function (_React$Component) {
	  _inherits(Notice, _React$Component);

	  function Notice(props) {
	    _classCallCheck(this, Notice);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.clearCloseTimer = _this.clearCloseTimer.bind(_this);
	    _this.close = _this.close.bind(_this);
	    return _this;
	  }

	  Notice.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;

	    if (this.props.duration) {
	      this.closeTimer = setTimeout(function () {
	        _this2.close();
	      }, this.props.duration * 1000);
	    }
	  };

	  Notice.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.clearCloseTimer();
	  };

	  Notice.prototype.clearCloseTimer = function clearCloseTimer() {
	    if (this.closeTimer) {
	      clearTimeout(this.closeTimer);
	      this.closeTimer = null;
	    }
	  };

	  Notice.prototype.close = function close() {
	    this.clearCloseTimer();
	    this.props.onClose();
	  };

	  Notice.prototype.render = function render() {
	    var _classes;

	    var _props = this.props,
	        closable = _props.closable,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        style = _props.style,
	        children = _props.children,
	        color = _props.color,
	        title = _props.title;

	    var componentClass = clsPrefix + '-notice';
	    var classes = (_classes = {}, _defineProperty(_classes, '' + componentClass, 1), _defineProperty(_classes, componentClass + '-closable', closable), _defineProperty(_classes, className, !!className), _classes);
	    if (color) {
	      classes[componentClass + '-' + color] = true;
	    }
	    return _react2["default"].createElement(
	      'div',
	      { className: (0, _classnames2["default"])(classes), style: style, onClick: this.close },
	      _react2["default"].createElement(
	        'div',
	        { className: componentClass + '-content' },
	        title && _react2["default"].createElement(
	          'div',
	          { className: componentClass + '-title' },
	          title
	        ),
	        _react2["default"].createElement(
	          'div',
	          { className: componentClass + '-description' },
	          children
	        )
	      ),
	      closable ? _react2["default"].createElement(
	        'a',
	        { tabIndex: '0', onClick: this.close, className: componentClass + '-close' },
	        _react2["default"].createElement('span', { className: componentClass + '-close-x' })
	      ) : null
	    );
	  };

	  return Notice;
	}(_react2["default"].Component);

	Notice.propTypes = propTypes$1;
	Notice.defaultProps = defaultProps;

	exports["default"] = Notice;
	module.exports = exports['default'];
	});

	unwrapExports(Notice_1);

	var Notification_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);



	var _beeAnimate2 = _interopRequireDefault(build$x);



	var _createChainedFunction2 = _interopRequireDefault(createChainedFunction_1);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument);



	var _addEventListener2 = _interopRequireDefault(addEventListener$1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _Notice2 = _interopRequireDefault(Notice_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var seed = 0;
	var now = Date.now();

	function getUuid() {
	  return 'uNotification_' + now + '_' + seed++;
	}

	var propTypes$1 = {
	  show: _propTypes2["default"].bool,
	  clsPrefix: _propTypes2["default"].string,
	  style: _propTypes2["default"].object,
	  position: _propTypes2["default"].oneOf(['topRight', 'bottomRight', '']),
	  transitionName: _propTypes2["default"].string,
	  keyboard: _propTypes2["default"].bool, // 按esc键是否关闭notice
	  onEscapeKeyUp: _propTypes2["default"].func, // 设置esc键特殊钩子函数
	  animation: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].object])
	};

	var defaultProps = {
	  clsPrefix: 'u-notification',
	  animation: 'fade',
	  keyboard: true,
	  position: 'topRight'
	};

	var Notification = function (_Component) {
	  _inherits(Notification, _Component);

	  function Notification(props) {
	    _classCallCheck(this, Notification);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.handleDocumentKeyUp = function (e) {
	      if (_this.props.keyboard && e.keyCode === 27 && _this.state.notices.length) {
	        _this.setState(function (previousState) {
	          previousState.notices.shift();
	          return {
	            notices: previousState.notices
	          };
	        });
	        if (_this.props.onEscapeKeyUp) {
	          _this.props.onEscapeKeyUp(e);
	        }
	      }
	    };

	    _this.state = {
	      notices: []
	    };
	    _this.add = _this.add.bind(_this);
	    _this.remove = _this.remove.bind(_this);

	    return _this;
	  }

	  Notification.prototype.componentDidMount = function componentDidMount() {
	    // 给document绑定keyup事件
	    var doc = (0, _ownerDocument2["default"])(this);
	    this._onDocumentKeyupListener = (0, _addEventListener2["default"])(doc, 'keyup', this.handleDocumentKeyUp);
	  };

	  Notification.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._onDocumentKeyupListener.remove();
	  };

	  Notification.prototype.getTransitionName = function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.clsPrefix + '-' + props.animation;
	    }
	    return transitionName;
	  };

	  Notification.prototype.add = function add(notice) {
	    var key = notice.key = notice.key || getUuid();
	    this.setState(function (previousState) {
	      var notices = previousState.notices;
	      if (!notices.filter(function (v) {
	        return v.key === key;
	      }).length) {
	        return {
	          notices: notices.concat(notice)
	        };
	      }
	    });
	  };

	  Notification.prototype.remove = function remove(key) {
	    this.setState(function (previousState) {
	      return {
	        notices: previousState.notices.filter(function (notice) {
	          return notice.key !== key;
	        })
	      };
	    });
	  };

	  /**
	   * 处理绑定在document上的keyup事件
	   */


	  Notification.prototype.render = function render() {
	    var _this2 = this,
	        _classes;

	    var _props = this.props,
	        clsPrefix = _props.clsPrefix,
	        className = _props.className,
	        position = _props.position,
	        style = _props.style;

	    var noticeNodes = this.state.notices.map(function (notice) {
	      var onClose = (0, _createChainedFunction2["default"])(_this2.remove.bind(_this2, notice.key), notice.onClose);
	      return _react2["default"].createElement(
	        _Notice2["default"],
	        _extends({
	          clsPrefix: clsPrefix
	        }, notice, {
	          onClose: onClose
	        }),
	        notice.content
	      );
	    });
	    var classes = (_classes = {}, _defineProperty(_classes, clsPrefix, 1), _defineProperty(_classes, className, !!className), _classes);
	    if (position) {
	      classes[clsPrefix + '-' + position] = !!position;
	    }

	    return _react2["default"].createElement(
	      'div',
	      { className: (0, _classnames2["default"])(className, classes), style: style },
	      _react2["default"].createElement(
	        _beeAnimate2["default"],
	        { transitionName: this.getTransitionName() },
	        noticeNodes
	      )
	    );
	  };

	  return Notification;
	}(React__default.Component);

	Notification.propTypes = propTypes$1;
	Notification.defaultProps = defaultProps;

	Notification.newInstance = function newNotificationInstance(properties, callback) {
	  if (typeof callback !== 'function') {
	    console.error('You must introduce callback as the second parameter of Notification.newInstance().');
	    return;
	  }
	  var props = properties || {};
	  var div = document.createElement('div');
	  document.body.appendChild(div);

	  var called = false;
	  function ref(notification) {
	    if (called) {
	      return;
	    }
	    called = true;
	    callback({
	      notice: function notice(noticeProps) {
	        notification.add(noticeProps);
	      },
	      removeNotice: function removeNotice(key) {
	        notification.remove(key);
	      },

	      component: notification,
	      destroy: function destroy() {
	        _reactDom2["default"].unmountComponentAtNode(div);
	        document.body.removeChild(div);
	      }
	    });
	  }
	  _reactDom2["default"].render(_react2["default"].createElement(Notification, _extends({}, props, { ref: ref })), div);
	};

	exports["default"] = Notification;
	module.exports = exports['default'];
	});

	unwrapExports(Notification_1);

	var build$y = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Notification2 = _interopRequireDefault(Notification_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Notification2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$y);

	var Message = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _beeNotification2 = _interopRequireDefault(build$y);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var defaultDuration = 1.5;
	var newDuration = void 0;
	var defaultTop = 0;
	var defaultBottom = 48;
	var bottom = 90;
	var padding = 30;
	var width = 200;
	var messageInstance = void 0;
	var key = 1;
	var clsPrefix = 'u-message';
	var noop = function noop() {};

	var positionObj = {
	    "top": {
	        messageStyle: {
	            width: "100%"
	        },
	        notificationStyle: {
	            top: defaultTop,
	            width: "100%"
	        },
	        transitionName: 'top'
	    },
	    "bottom": {
	        messageStyle: {
	            width: "100%"
	        },
	        notificationStyle: {
	            bottom: defaultBottom,
	            width: "100%"
	        },
	        transitionName: 'bottom'
	    },
	    "topRight": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            top: padding,
	            right: padding,
	            width: width
	        },
	        transitionName: 'right'
	    },
	    "bottomRight": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            bottom: bottom,
	            right: padding,
	            width: width
	        },
	        transitionName: 'right'
	    },
	    "topLeft": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            top: padding,
	            left: padding,
	            width: width
	        },
	        transitionName: 'left'
	    },
	    "bottomLeft": {
	        messageStyle: {
	            width: width
	        },
	        notificationStyle: {
	            bottom: bottom,
	            left: padding,
	            width: width
	        },
	        transitionName: 'left'
	    }
	};

	function getMessageInstance() {
	    var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'top';
	    var callback = arguments[1];
	    var keyboard = arguments[2];
	    var onEscapeKeyUp = arguments[3];

	    if (messageInstance) {
	        callback(messageInstance);
	        return;
	    }
	    switch (position) {
	        case 'top':
	            positionObj[position].notificationStyle.top = defaultTop;
	            break;
	        case 'bottom':
	            positionObj[position].notificationStyle.bottom = defaultBottom;
	            break;
	        case 'bottomRight':
	            positionObj[position].notificationStyle.bottom = bottom;
	            break;
	        case 'bottomLeft':
	            positionObj[position].notificationStyle.bottom = bottom;
	            break;
	        default:
	            break;
	    }
	    if (position !== 'top' && position !== 'bottom') {
	        positionObj[position].messageStyle.width = width;
	    }
	    var style = positionObj[position].notificationStyle;
	    var instanceObj = {
	        clsPrefix: clsPrefix,
	        transitionName: clsPrefix + '-' + positionObj[position].transitionName,
	        style: style, // 覆盖原来的样式
	        position: ''
	    };
	    if (typeof keyboard === 'boolean') {
	        instanceObj.keyboard = keyboard;
	    }
	    if (typeof onEscapeKeyUp === 'function') {
	        instanceObj.onEscapeKeyUp = onEscapeKeyUp;
	    }
	    _beeNotification2["default"].newInstance(instanceObj, function (instance) {
	        messageInstance = instance;
	        callback(instance);
	    });
	}

	function notice(content, duration, type, onClose, position, style, keyboard, onEscapeKeyUp, showIcon) {
	    var iconType = {
	        info: 'uf uf-i-c-2',
	        success: 'uf uf-correct',
	        danger: 'uf uf-close-c',
	        warning: 'uf uf-exc-t',
	        light: 'uf uf-notification',
	        dark: 'uf uf-bubble',
	        news: 'uf uf-bell',
	        infolight: 'uf uf-i-c-2',
	        successlight: 'uf uf-correct',
	        dangerlight: 'uf uf-close-c',
	        warninglight: 'uf uf-exc-t'
	    }[type];

	    var positionStyle = positionObj[position].messageStyle;
	    getMessageInstance(position, function (instance) {
	        instance.notice({
	            key: key,
	            duration: duration,
	            color: type,
	            style: _extends({}, positionStyle, style),
	            content: _react2["default"].createElement(
	                'div',
	                null,
	                showIcon ? _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-notice-description-icon' },
	                    _react2["default"].createElement('i', { className: (0, _classnames2["default"])(iconType) })
	                ) : null,
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + '-notice-description-content' },
	                    content
	                )
	            ),
	            onClose: onClose
	        });
	    }, keyboard, onEscapeKeyUp);
	    return function () {
	        var target = key++;
	        return function () {
	            if (messageInstance) {
	                messageInstance.removeNotice(target);
	            }
	        };
	    }();
	}

	exports["default"] = {
	    create: function create(obj) {
	        if (newDuration) {
	            //如果在config方法里设置了duration
	            obj.duration = newDuration;
	        }
	        var content = obj.content || '';
	        var duration = typeof obj.duration == 'undefined' ? defaultDuration : obj.duration;
	        var color = obj.color || 'dark';
	        var onClose = obj.onClose || noop;
	        var position = obj.position || "top";
	        var style = obj.style || {};
	        var showIcon = obj.showIcon || false;
	        return notice(content, duration, color, onClose, position, style, obj.keyboard, obj.onEscapeKeyUp, showIcon);
	    },
	    config: function config(options) {
	        if (options.top !== undefined) {
	            defaultTop = options.top;
	        }
	        if (options.duration !== undefined) {
	            defaultDuration = options.duration;
	            newDuration = defaultDuration;
	        }
	        if (options.clsPrefix !== undefined) {
	            clsPrefix = options.clsPrefix;
	        }
	        if (options.defaultBottom !== undefined) {
	            defaultBottom = options.defaultBottom;
	        }
	        if (options.bottom !== undefined) {
	            bottom = options.bottom;
	        }
	        if (options.width !== undefined) {
	            width = options.width;
	        }
	    },
	    destroy: function destroy() {
	        if (messageInstance) {
	            messageInstance.destroy();
	            messageInstance = null;
	        }
	    }
	};
	module.exports = exports['default'];
	});

	unwrapExports(Message);

	var build$z = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _Message2 = _interopRequireDefault(Message);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports["default"] = _Message2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$z);

	var toggleSelection = function () {
	  var selection = document.getSelection();
	  if (!selection.rangeCount) {
	    return function () {};
	  }
	  var active = document.activeElement;

	  var ranges = [];
	  for (var i = 0; i < selection.rangeCount; i++) {
	    ranges.push(selection.getRangeAt(i));
	  }

	  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML
	    case 'INPUT':
	    case 'TEXTAREA':
	      active.blur();
	      break;

	    default:
	      active = null;
	      break;
	  }

	  selection.removeAllRanges();
	  return function () {
	    selection.type === 'Caret' &&
	    selection.removeAllRanges();

	    if (!selection.rangeCount) {
	      ranges.forEach(function(range) {
	        selection.addRange(range);
	      });
	    }

	    active &&
	    active.focus();
	  };
	};

	var defaultMessage = "Copy to clipboard: #{key}, Enter";

	function format$1(message) {
	  var copyKey = (/mac os x/i.test(navigator.userAgent) ? "⌘" : "Ctrl") + "+C";
	  return message.replace(/#{\s*key\s*}/g, copyKey);
	}

	function copy(text, options) {
	  var debug,
	    message,
	    reselectPrevious,
	    range,
	    selection,
	    mark,
	    success = false;
	  if (!options) {
	    options = {};
	  }
	  debug = options.debug || false;
	  try {
	    reselectPrevious = toggleSelection();

	    range = document.createRange();
	    selection = document.getSelection();

	    mark = document.createElement("span");
	    mark.textContent = text;
	    // reset user styles for span element
	    mark.style.all = "unset";
	    // prevents scrolling to the end of the page
	    mark.style.position = "fixed";
	    mark.style.top = 0;
	    mark.style.clip = "rect(0, 0, 0, 0)";
	    // used to preserve spaces and line breaks
	    mark.style.whiteSpace = "pre";
	    // do not inherit user-select (it may be `none`)
	    mark.style.webkitUserSelect = "text";
	    mark.style.MozUserSelect = "text";
	    mark.style.msUserSelect = "text";
	    mark.style.userSelect = "text";
	    mark.addEventListener("copy", function(e) {
	      e.stopPropagation();
	      if (options.format) {
	        e.preventDefault();
	        e.clipboardData.clearData();
	        e.clipboardData.setData(options.format, text);
	      }
	    });

	    document.body.appendChild(mark);

	    range.selectNodeContents(mark);
	    selection.addRange(range);

	    var successful = document.execCommand("copy");
	    if (!successful) {
	      throw new Error("copy command was unsuccessful");
	    }
	    success = true;
	  } catch (err) {
	    debug && console.error("unable to copy using execCommand: ", err);
	    debug && console.warn("trying IE specific stuff");
	    try {
	      window.clipboardData.setData(options.format || "text", text);
	      success = true;
	    } catch (err) {
	      debug && console.error("unable to copy using clipboardData: ", err);
	      debug && console.error("falling back to prompt");
	      message = format$1("message" in options ? options.message : defaultMessage);
	      window.prompt(message, text);
	    }
	  } finally {
	    if (selection) {
	      if (typeof selection.removeRange == "function") {
	        selection.removeRange(range);
	      } else {
	        selection.removeAllRanges();
	      }
	    }

	    if (mark) {
	      document.body.removeChild(mark);
	    }
	    reselectPrevious();
	  }

	  return success;
	}

	var copyToClipboard = copy;

	var Panel_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames$1);



	var _react2 = _interopRequireDefault(React__default);





	var _beeMessage2 = _interopRequireDefault(build$z);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _copyToClipboard2 = _interopRequireDefault(copyToClipboard);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  //是否添加折叠
	  collapsible: _propTypes2["default"].bool,
	  onSelect: _propTypes2["default"].func,
	  //头部组件
	  header: _propTypes2["default"].node,
	  headerStyle: _propTypes2["default"].object,
	  id: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
	  headerContent: _propTypes2["default"].bool,
	  //footer组件
	  footer: _propTypes2["default"].node,
	  footerStyle: _propTypes2["default"].object,
	  //默认是否打开
	  defaultExpanded: _propTypes2["default"].bool,
	  //是否打开
	  expanded: _propTypes2["default"].bool,
	  //每个panel的标记
	  eventKey: _propTypes2["default"].any,
	  headerRole: _propTypes2["default"].string,
	  panelRole: _propTypes2["default"].string,
	  //颜色
	  colors: _propTypes2["default"].oneOf(['primary', 'accent', 'success', 'info', 'warning', 'danger', 'default', 'bordered']),

	  // From Collapse.的扩展动画
	  onEnter: _propTypes2["default"].func,
	  onEntering: _propTypes2["default"].func,
	  onEntered: _propTypes2["default"].func,
	  onExit: _propTypes2["default"].func,
	  onExiting: _propTypes2["default"].func,
	  onExited: _propTypes2["default"].func,
	  //是否可复制内容
	  copyable: _propTypes2["default"].bool
	};

	var defaultProps = {
	  defaultExpanded: false,
	  clsPrefix: "u-panel",
	  colors: "default"
	};

	var Panel = function (_React$Component) {
	  _inherits(Panel, _React$Component);

	  function Panel(props, context) {
	    _classCallCheck(this, Panel);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.handleClickTitle = _this.handleClickTitle.bind(_this);

	    _this.state = {
	      expanded: _this.props.defaultExpanded
	    };
	    return _this;
	  }

	  //头部点击事件


	  Panel.prototype.handleClickTitle = function handleClickTitle(e) {
	    // 不让事件进入事件池
	    e.persist();
	    e.selected = true;

	    if (this.props.onSelect) {
	      this.props.onSelect(this.props.eventKey, e);
	    } else {
	      e.preventDefault();
	    }

	    if (e.selected) {
	      this.setState({ expanded: !this.state.expanded });
	    }
	  };

	  //渲染panelheader


	  Panel.prototype.renderHeader = function renderHeader(collapsible, header, id, role, expanded, clsPrefix) {
	    var titleClassName = clsPrefix + '-title';

	    if (!collapsible) {
	      if (!_react2["default"].isValidElement(header)) {
	        return header;
	      }

	      return (0, React__default.cloneElement)(header, {
	        className: (0, _classnames2["default"])(header.props.className, titleClassName)
	      });
	    }

	    if (!_react2["default"].isValidElement(header)) {
	      return _react2["default"].createElement(
	        'h4',
	        { role: 'presentation', className: titleClassName },
	        this.renderAnchor(header, id, role, expanded)
	      );
	    }
	    if (this.props.headerContent) {
	      return (0, React__default.cloneElement)(header, {
	        className: (0, _classnames2["default"])(header.props.className, titleClassName)
	      });
	    }

	    return (0, React__default.cloneElement)(header, {
	      className: (0, _classnames2["default"])(header.props.className, titleClassName),
	      children: this.renderAnchor(header.props.children, id, role, expanded)
	    });
	  };

	  //如果使用链接，渲染为a标签


	  Panel.prototype.renderAnchor = function renderAnchor(header, id, role, expanded) {
	    return _react2["default"].createElement(
	      'a',
	      {
	        role: role,
	        href: id && '#' + id,
	        'aria-controls': id,
	        'aria-expanded': expanded,
	        'aria-selected': expanded,
	        className: expanded ? null : 'collapsed'
	      },
	      header
	    );
	  };

	  //复制代码，弹出提示信息


	  Panel.prototype.copyDemo = function copyDemo(e) {
	    var panelTarget = e.target.parentNode;
	    var clipBoardContent = panelTarget.firstChild.innerText;
	    (0, _copyToClipboard2["default"])(clipBoardContent);
	    _beeMessage2["default"].create({ content: '复制成功！', color: 'success', duration: 2 });
	  };

	  //如果有折叠动画，渲染折叠动画


	  Panel.prototype.renderCollapsibleBody = function renderCollapsibleBody(id, expanded, role, children, clsPrefix, copyable, animationHooks) {
	    return _react2["default"].createElement(
	      build$w.Collapse,
	      _extends({ 'in': expanded }, animationHooks),
	      _react2["default"].createElement(
	        'div',
	        {
	          id: id,
	          role: role,
	          className: clsPrefix + '-collapse',
	          'aria-hidden': !expanded
	        },
	        this.renderBody(children, clsPrefix, copyable)
	      )
	    );
	  };

	  //渲染panelbody


	  Panel.prototype.renderBody = function renderBody(rawChildren, clsPrefix, copyable) {
	    var self = this;
	    var children = [];
	    var bodyChildren = [];

	    var bodyClassName = clsPrefix + '-body';
	    //添加到body的children中
	    function maybeAddBody(self) {
	      if (!bodyChildren.length) {
	        return;
	      }
	      // 给子组件添加key，为了之后触发事件时使用
	      children.push(_react2["default"].createElement(
	        'div',
	        { key: children.length, className: bodyClassName },
	        bodyChildren,
	        copyable && _react2["default"].createElement('i', { className: clsPrefix + '-copy uf uf-files-o', onClick: self.copyDemo })
	      ));
	      bodyChildren = [];
	    }

	    //转换为数组，方便复用
	    _react2["default"].Children.toArray(rawChildren).forEach(function (child) {
	      if (_react2["default"].isValidElement(child) && child.props.fill) {
	        maybeAddBody(self);

	        //将标示fill设置为undefined
	        children.push((0, React__default.cloneElement)(child, { fill: undefined }));

	        return;
	      }
	      bodyChildren.push(child);
	    });

	    maybeAddBody(self);

	    return children;
	  };

	  Panel.prototype.render = function render() {
	    var _props = this.props,
	        collapsible = _props.collapsible,
	        header = _props.header,
	        id = _props.id,
	        footer = _props.footer,
	        propsExpanded = _props.expanded,
	        footerStyle = _props.footerStyle,
	        headerStyle = _props.headerStyle,
	        headerRole = _props.headerRole,
	        panelRole = _props.panelRole,
	        className = _props.className,
	        colors = _props.colors,
	        children = _props.children,
	        onEnter = _props.onEnter,
	        onEntering = _props.onEntering,
	        onEntered = _props.onEntered,
	        clsPrefix = _props.clsPrefix,
	        onExit = _props.onExit,
	        headerContent = _props.headerContent,
	        onExiting = _props.onExiting,
	        onExited = _props.onExited,
	        defaultExpanded = _props.defaultExpanded,
	        eventKey = _props.eventKey,
	        onSelect = _props.onSelect,
	        copyable = _props.copyable,
	        props = _objectWithoutProperties(_props, ['collapsible', 'header', 'id', 'footer', 'expanded', 'footerStyle', 'headerStyle', 'headerRole', 'panelRole', 'className', 'colors', 'children', 'onEnter', 'onEntering', 'onEntered', 'clsPrefix', 'onExit', 'headerContent', 'onExiting', 'onExited', 'defaultExpanded', 'eventKey', 'onSelect', 'copyable']);

	    var expanded = propsExpanded != null ? propsExpanded : this.state.expanded;

	    var classes = {};
	    classes['' + clsPrefix] = true;
	    classes[clsPrefix + '-' + colors] = true;

	    var headerClass = _defineProperty({}, clsPrefix + '-heading', true);
	    return _react2["default"].createElement(
	      'div',
	      _extends({}, props, {
	        className: (0, _classnames2["default"])(className, classes),
	        id: collapsible ? null : id
	      }),
	      header && _react2["default"].createElement(
	        'div',
	        { className: (0, _classnames2["default"])(headerClass), style: headerStyle, onClick: this.handleClickTitle },
	        this.renderHeader(collapsible, header, id, headerRole, expanded, clsPrefix)
	      ),
	      collapsible ? this.renderCollapsibleBody(id, expanded, panelRole, children, clsPrefix, copyable, { onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited }) : this.renderBody(children, clsPrefix, copyable),
	      footer && _react2["default"].createElement(
	        'div',
	        { className: clsPrefix + '-footer', style: footerStyle },
	        footer
	      )
	    );
	  };

	  return Panel;
	}(_react2["default"].Component);

	Panel.propTypes = propTypes$1;
	Panel.defaultProps = defaultProps;

	exports["default"] = Panel;
	module.exports = exports['default'];
	});

	unwrapExports(Panel_1$1);

	var PanelGroup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _classnames2 = _interopRequireDefault(classnames$1);



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	  //是否是手风琴效果
	  accordion: _propTypes2["default"].bool,
	  //激活的项
	  activeKey: _propTypes2["default"].any,
	  //默认的激活的项
	  defaultActiveKey: _propTypes2["default"].any,
	  //选中函数
	  onSelect: _propTypes2["default"].func,
	  role: _propTypes2["default"].string
	};

	var defaultProps = {
	  accordion: false,
	  clsPrefix: 'u-panel-group'
	};

	// TODO: Use uncontrollable.

	var PanelGroup = function (_React$Component) {
	  _inherits(PanelGroup, _React$Component);

	  function PanelGroup(props, context) {
	    _classCallCheck(this, PanelGroup);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.handleSelect = _this.handleSelect.bind(_this);

	    _this.state = {
	      activeKey: props.defaultActiveKey
	    };
	    return _this;
	  }

	  PanelGroup.prototype.handleSelect = function handleSelect(key, e) {
	    e.preventDefault();

	    if (this.props.onSelect) {
	      this.props.onSelect(key, e);
	    }

	    if (this.state.activeKey === key) {
	      key = null;
	    }

	    this.setState({ activeKey: key });
	  };

	  PanelGroup.prototype.render = function render() {
	    var _this2 = this;

	    var _props = this.props,
	        accordion = _props.accordion,
	        propsActiveKey = _props.activeKey,
	        className = _props.className,
	        children = _props.children,
	        defaultActiveKey = _props.defaultActiveKey,
	        onSelect = _props.onSelect,
	        style = _props.style,
	        clsPrefix = _props.clsPrefix,
	        others = _objectWithoutProperties(_props, ['accordion', 'activeKey', 'className', 'children', 'defaultActiveKey', 'onSelect', 'style', 'clsPrefix']);

	    var activeKey = void 0;
	    if (accordion) {
	      activeKey = propsActiveKey != null ? propsActiveKey : this.state.activeKey;
	      others.role = others.role || 'tablist';
	    }

	    var classes = {};
	    classes['' + clsPrefix] = true;

	    return _react2["default"].createElement(
	      'div',
	      _extends({}, others, {
	        className: (0, _classnames2["default"])(className, classes)
	      }),
	      _react2["default"].Children.map(children, function (child) {
	        if (!_react2["default"].isValidElement(child)) {
	          return child;
	        }
	        var childProps = {
	          style: child.props.style
	        };

	        if (accordion) {
	          _extends(childProps, {
	            headerRole: 'tab',
	            panelRole: 'tabpanel',
	            collapsible: true,
	            expanded: child.props.eventKey === activeKey,
	            onSelect: (0, lib$1.createChainedFunction)(_this2.handleSelect, child.props.onSelect)
	          });
	        }

	        return (0, React__default.cloneElement)(child, childProps);
	      })
	    );
	  };

	  return PanelGroup;
	}(_react2["default"].Component);

	PanelGroup.propTypes = propTypes$1;
	PanelGroup.defaultProps = defaultProps;

	exports["default"] = PanelGroup;
	module.exports = exports['default'];
	});

	unwrapExports(PanelGroup_1);

	var build$A = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.PanelGroup = exports.Panel = undefined;



	var _Panel3 = _interopRequireDefault(Panel_1$1);



	var _PanelGroup3 = _interopRequireDefault(PanelGroup_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Panel = _Panel3["default"];
	exports.PanelGroup = _PanelGroup3["default"];
	});

	unwrapExports(build$A);
	var build_1$3 = build$A.PanelGroup;
	var build_2$3 = build$A.Panel;

	var AdvancedContainer_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var AdvancedContainer = function (_React$Component) {
	  _inherits(AdvancedContainer, _React$Component);

	  function AdvancedContainer() {
	    _classCallCheck(this, AdvancedContainer);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  AdvancedContainer.prototype.render = function render() {
	    return this.props.children;
	  };

	  return AdvancedContainer;
	}(_react2["default"].Component);

	AdvancedContainer.show = true;
	exports["default"] = AdvancedContainer;
	module.exports = exports['default'];
	});

	unwrapExports(AdvancedContainer_1);

	var HeadContainer_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(React__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var HeadContainer = function (_React$Component) {
	  _inherits(HeadContainer, _React$Component);

	  function HeadContainer() {
	    _classCallCheck(this, HeadContainer);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  HeadContainer.prototype.render = function render() {
	    var _props = this.props,
	        children = _props.children,
	        clsPrefix = _props.clsPrefix,
	        _className = _props.className;

	    var ht = children ? _react2["default"].createElement(
	      'div',
	      null,
	      children
	    ) : null;
	    return ht;
	  };

	  return HeadContainer;
	}(_react2["default"].Component);

	exports["default"] = HeadContainer;
	module.exports = exports['default'];
	});

	unwrapExports(HeadContainer_1);

	var i18n$2 = {
	    'lang': 'zh-cn',
	    'title': '默认筛选',
	    'resetName': '清空',
	    'searchName': '查询',
	    'down': '展开',
	    'up': '收起',
	    'en-us': {
	        'title': 'screening conditions',
	        'resetName': 'reset',
	        'searchName': 'submit',
	        'down': 'open',
	        'up': 'close'
	    },
	    'zh-tw': {
	        'title': '默認篩選',
	        'resetName': '清空',
	        'searchName': '查詢',
	        'down': '展開',
	        'up': '收起'
	    }
	};

	var tool$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.getComponentLocale = getComponentLocale;
	exports.getLocaleCode = getLocaleCode;
	function getComponentLocale(props, context, componentName, getDefaultLocale) {
	    var locale = {};
	    if (context && context.beeLocale && context.beeLocale[componentName]) {
	        locale = context.beeLocale[componentName];
	    } else {
	        var defaultLocale = getDefaultLocale();

	        locale = defaultLocale["default"] || defaultLocale;
	    }

	    var result = _extends({}, locale, props.locale);
	    if (props.locale) {
	        result.lang = _extends({}, locale.lang, props.locale.lang);
	    } else {
	        result.lang = _extends({}, locale.lang);
	    }

	    return result;
	}

	function getLocaleCode(context) {
	    var localeCode = context.beeLocale && context.beeLocale.lang;
	    // Had use LocaleProvide but didn't set locale
	    if (context.beeLocale && context.beeLocale.exist && !localeCode) {
	        return 'zh-cn';
	    }
	    return localeCode;
	}
	});

	unwrapExports(tool$2);
	var tool_1$2 = tool$2.getComponentLocale;
	var tool_2$2 = tool$2.getLocaleCode;

	var SearchPanel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);





	var _classnames2 = _interopRequireDefault(classnames);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _AdvancedContainer2 = _interopRequireDefault(AdvancedContainer_1);



	var _HeadContainer2 = _interopRequireDefault(HeadContainer_1);



	var _i18n2 = _interopRequireDefault(i18n$2);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

	var propTypes$1 = {
	    defaultExpanded: _propTypes2["default"].bool,
	    expanded: _propTypes2["default"].bool, //是否默认展开，false默认关闭
	    onSearch: _propTypes2["default"].func, //点击查询的回调
	    onReset: _propTypes2["default"].func, //点击重置的回调
	    resetName: _propTypes2["default"].string, //重置的文字
	    searchName: _propTypes2["default"].string, //查询的文字
	    title: _propTypes2["default"].string,
	    onPanelChangeStart: _propTypes2["default"].func, //显示或隐藏开始回调
	    onPanelChangeIng: _propTypes2["default"].func, //显示或隐藏进行中回调
	    onPanelChangeEnd: _propTypes2["default"].func, //显示或隐藏结束回调
	    onChange: _propTypes2["default"].func, //点击显示或隐藏回调
	    showOperation: _propTypes2["default"].bool //是否显示 查询，清空
	    // resident: PropTypes.node //常驻面板内容，不会隐藏
	};

	var defaultProps = {
	    className: "",
	    clsPrefix: 'u-search',
	    defaultExpanded: false,
	    bgColor: "#F7F9FB",
	    showOperation: true
	};

	var SearchPanel = function (_Component) {
	    _inherits(SearchPanel, _Component);

	    function SearchPanel(props) {
	        _classCallCheck(this, SearchPanel);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this.changeExpanded = function () {
	            _this.setState({
	                expanded: !_this.state.expanded
	            });
	        };

	        _this._onChange = function () {
	            var onChange = _this.props.onChange;

	            if ('expanded' in _this.props) {
	                _this.setState({ expanded: _this.props.expanded });
	            } else {
	                _this.setState({ expanded: !_this.state.expanded });
	            }
	            onChange && onChange();
	        };

	        _this.search = function () {
	            var onSearch = _this.props.onSearch;

	            onSearch && onSearch();
	        };

	        _this.reset = function () {
	            var onReset = _this.props.onReset;

	            onReset && onReset();
	        };

	        _this._onPanelChange = function (type, func) {
	            if (func) {
	                var status = "";
	                if (type === 0) {
	                    status = "hide";
	                } else if (type === 1) {
	                    status = 'visible';
	                }
	                func(status);
	            }
	        };

	        _this._onPanelChangeStart = function (type) {
	            var onPanelChangeStart = _this.props.onPanelChangeStart;

	            onPanelChangeStart && _this._onPanelChange(type, onPanelChangeStart);
	        };

	        _this._onPanelChangeIng = function (type) {
	            var onPanelChangeIng = _this.props.onPanelChangeIng;

	            onPanelChangeIng && _this._onPanelChange(type, onPanelChangeIng);
	        };

	        _this._onPanelChangeEnd = function (type) {
	            var onPanelChangeEnd = _this.props.onPanelChangeEnd;

	            onPanelChangeEnd && _this._onPanelChange(type, onPanelChangeEnd);
	        };

	        _this._getChildren = function (element) {
	            if (element.type.name === "HeadContainer" || element.type.prototype === _HeadContainer2["default"].prototype) {
	                // if(element.type.name === "HeadContainer"){
	                _this._HeadContainer = element;
	            } else if (element.type.name === "AdvancedContainer" || element.type.prototype === _AdvancedContainer2["default"].prototype) {
	                // }else if(element.type.name === "AdvancedContainer"){
	                _this._AdvancedContainer = element;
	            }
	        };

	        _this.state = {
	            expanded: props.expanded || props.defaultExpanded
	        };
	        _this._HeadContainer = null;
	        _this._AdvancedContainer = null;
	        return _this;
	    }

	    SearchPanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if ('expanded' in nextProps) {
	            this.setState({ expanded: nextProps.expanded });
	        }
	    };

	    SearchPanel.prototype.render = function render() {
	        var _this2 = this;

	        var local = (0, tool$2.getComponentLocale)(this.props, this.context, 'SearchPanel', function () {
	            return _i18n2["default"];
	        });
	        var _props = this.props,
	            children = _props.children,
	            clsPrefix = _props.clsPrefix,
	            className = _props.className,
	            resetName = _props.resetName,
	            searchName = _props.searchName,
	            title = _props.title,
	            bgColor = _props.bgColor,
	            style = _props.style,
	            showOperation = _props.showOperation;

	        if (!resetName) resetName = local['resetName'];
	        if (!searchName) searchName = local['searchName'];
	        if (!title) title = local['title'];

	        var expanded = this.state.expanded;

	        var _stype = style || {};
	        if (children instanceof Array) {
	            children.forEach(function (element) {
	                _this2._getChildren(element);
	            });
	        } else {
	            this._getChildren(children);
	        }

	        return _react2["default"].createElement(
	            'div',
	            { className: clsPrefix + ' ' + className,
	                style: _extends({ background: bgColor }, _stype) },
	            _react2["default"].createElement(
	                'div',
	                { className: clsPrefix + "-header" },
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + "-header-title" },
	                    _react2["default"].createElement(
	                        'span',
	                        null,
	                        title
	                    )
	                ),
	                _react2["default"].createElement(
	                    'div',
	                    { className: clsPrefix + "-header-oper" },
	                    this._HeadContainer || showOperation && expanded ? _react2["default"].createElement(
	                        'span',
	                        { className: 'header-oper-btn', role: 'button', onClick: this.reset },
	                        resetName
	                    ) : null,
	                    this._HeadContainer || showOperation && expanded ? _react2["default"].createElement(
	                        'span',
	                        { className: 'header-oper-btn primary', role: 'button', onClick: this.search },
	                        searchName
	                    ) : null,
	                    _react2["default"].createElement(
	                        'span',
	                        {
	                            className: 'header-oper-btn',
	                            role: 'button',
	                            onClick: this._onChange
	                        },
	                        expanded ? local['up'] : local['down'],
	                        _react2["default"].createElement('i', { className: (0, _classnames2["default"])({
	                                'uf': true,
	                                'uf-arrow-down': !expanded,
	                                'uf-arrow-up': expanded
	                            }) })
	                    )
	                )
	            ),
	            _react2["default"].createElement(
	                'div',
	                { className: clsPrefix + '-resident' },
	                this._HeadContainer
	            ),
	            _react2["default"].createElement(
	                build$A.Panel,
	                {
	                    collapsible: true,
	                    expanded: this.state.expanded,
	                    onExit: this._onPanelChangeStart.bind(this, 0) //隐藏开始回调
	                    , onEnter: this._onPanelChangeStart.bind(this, 1) //显示开始回调
	                    , onExiting: this._onPanelChangeIng.bind(this, 0) //隐藏进行中回调
	                    , onEntering: this._onPanelChangeIng.bind(this, 1) //显示进行中回调
	                    , onExited: this._onPanelChangeEnd.bind(this, 0) //隐藏完成回调
	                    , onEntered: this._onPanelChangeEnd.bind(this, 1) //显示后回调
	                },
	                this._AdvancedContainer
	            )
	        );
	    };

	    return SearchPanel;
	}(React__default.Component);

	SearchPanel.propTypes = propTypes$1;
	SearchPanel.defaultProps = defaultProps;
	SearchPanel.contextTypes = {
	    beeLocale: _propTypes2["default"].object
	};

	exports["default"] = SearchPanel;
	module.exports = exports['default'];
	});

	unwrapExports(SearchPanel_1);

	var build$B = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _SearchPanel2 = _interopRequireDefault(SearchPanel_1);



	var _AdvancedContainer2 = _interopRequireDefault(AdvancedContainer_1);



	var _HeadContainer2 = _interopRequireDefault(HeadContainer_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	_SearchPanel2["default"].HeadContainer = _HeadContainer2["default"];
	_SearchPanel2["default"].AdvancedContainer = _AdvancedContainer2["default"];

	exports["default"] = _SearchPanel2["default"];
	module.exports = exports['default'];
	});

	unwrapExports(build$B);

	var RefSearchPanel_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.SearchPanelItem = undefined;



	var _assign2 = _interopRequireDefault(assign$1);



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);

	var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _beeForm2 = _interopRequireDefault(build$t);



	var _beeLabel2 = _interopRequireDefault(build$u);





	var _beeSearchPanel2 = _interopRequireDefault(build$B);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : subClass.__proto__ = superClass; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var FormItem = _beeForm2["default"].FormItem;

	var AdvancedContainer = _beeSearchPanel2["default"].AdvancedContainer;
	/**
	 * 部分不能通过this.props.form.resetFields()清空的组件，需要传reset方法，在reset方法中自行清空
	 */
	var propTypes$1 = {
	  searchOpen: _propTypes2["default"].bool, //是否默认展开，false默认关闭
	  title: _propTypes2["default"].string,
	  onSearch: _propTypes2["default"].func,
	  onClear: _propTypes2["default"].func,
	  show: _propTypes2["default"].bool,
	  searchPanelLocale: _propTypes2["default"].object
	};

	var defaultProps = {
	  searchOpen: false,
	  title: "查询与筛选",
	  onSearch: function onSearch() {},
	  onClear: function onClear() {},
	  show: true,
	  searchPanelLocale: {
	    'title': '查询与筛选',
	    'resetName': '重置',
	    'searchName': '查询',
	    'down': '打开',
	    'up': '关闭'
	  }
	};
	var SearchPanelItem = function SearchPanelItem(props) {
	  var form = props.form,
	      others = _objectWithoutProperties(props, ['form']);

	  var getFieldProps = form.getFieldProps;

	  return _react2["default"].createElement(
	    build$v.Col,
	    { md: 5, xs: 12, sm: 12 },
	    _react2["default"].createElement(
	      'div',
	      { className: 'formItemCustomed' },
	      _react2["default"].createElement(
	        _beeLabel2["default"],
	        null,
	        others.text,
	        ':'
	      ),
	      _react2["default"].createElement(
	        'div',
	        { className: 'ref-search-panel-search-item' },
	        _react2["default"].cloneElement(others.children, _extends({}, getFieldProps(others.name, {
	          initialValue: ''
	        })))
	      )
	    )
	  );
	};

	var RefSearchPanel = function (_Component) {
	  _inherits(RefSearchPanel, _Component);

	  function RefSearchPanel(props) {
	    _classCallCheck(this, RefSearchPanel);

	    var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this.onSearchClearClick = function () {
	      var onClear = _this.props.onClear;

	      _this.props.form.resetFields();
	      onClear();
	    };

	    _this.onSearchClick = function () {
	      var onSearch = _this.props.onSearch;

	      _this.props.form.validateFields(function (err, values) {
	        onSearch(values);
	      });
	    };

	    _this.searchPanelExpand = function () {
	      _this.setState({
	        searchPanelExpand: !_this.state.searchPanelExpand
	      });
	    };

	    _this.state = {
	      searchOpen: _this.props.searchOpen,
	      searchPanelExpand: true
	    };
	    return _this;
	  }

	  RefSearchPanel.prototype.render = function render() {
	    var _props = this.props,
	        form = _props.form,
	        title = _props.title,
	        show = _props.show,
	        searchPanelLocale = _props.searchPanelLocale;

	    return _react2["default"].createElement(
	      _beeSearchPanel2["default"],
	      {
	        locale: searchPanelLocale,
	        className: 'ref-search-panel' + (show ? '' : '-hide'),
	        clsPrefix: 'u-search',
	        showIcon: true,
	        onReset: this.onSearchClearClick,
	        onSearch: this.onSearchClick,
	        expanded: this.state.searchPanelExpand,
	        showOperation: true,
	        onChange: this.searchPanelExpand

	      },
	      _react2["default"].createElement(
	        AdvancedContainer,
	        null,
	        _react2["default"].createElement(
	          _beeForm2["default"],
	          null,
	          _react2["default"].createElement(
	            build$v.Row,
	            null,
	            _react2["default"].Children.map(this.props.children, function (item) {
	              return _react2["default"].cloneElement(item, {
	                form: form
	              });
	            })
	          )
	        )
	      )
	    );
	  };

	  return RefSearchPanel;
	}(React__default.Component);

	RefSearchPanel.propTypes = propTypes$1;
	RefSearchPanel.defaultProps = defaultProps;
	exports.SearchPanelItem = SearchPanelItem;
	exports["default"] = _beeForm2["default"].createForm()(RefSearchPanel);
	});

	unwrapExports(RefSearchPanel_1);
	var RefSearchPanel_2 = RefSearchPanel_1.SearchPanelItem;

	var utils$3 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	var refValParse = function refValParse(value) {
	    if (!value) return { refname: '', refpk: '' };

	    try {
	        var valueMap = JSON.parse(value);
	        if (!valueMap.hasOwnProperty('refname') || !valueMap.hasOwnProperty('refpk')) {
	            return { refname: '', refpk: '' };
	        } else {
	            return JSON.parse(value);
	        }
	    } catch (e) {
	        return { refname: '', refpk: '' };
	    }
	};

	exports.refValParse = refValParse;
	});

	unwrapExports(utils$3);
	var utils_1$2 = utils$3.refValParse;

	var RefMultipeTableBaseUI = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);



	var _keys2 = _interopRequireDefault(keys$1);



	var _assign2 = _interopRequireDefault(assign$1);



	var _react2 = _interopRequireDefault(React__default);



	var _shallowequal2 = _interopRequireDefault(shallowequal);



	var _RefCoreError2 = _interopRequireDefault(RefCoreError_1);



	var _RefCoreButton2 = _interopRequireDefault(RefCoreButton_1);



	var _RefCoreTab2 = _interopRequireDefault(RefCoreTab_1);



	var _RefCoreSearch2 = _interopRequireDefault(RefCoreSearch_1);





	var _beeCheckbox2 = _interopRequireDefault(build$5);



	var _beeModal2 = _interopRequireDefault(build$8);



	var _beePagination2 = _interopRequireDefault(build$e);



	var _beeTable2 = _interopRequireDefault(build$s);



	var _multiSelect2 = _interopRequireDefault(multiSelect_1);



	var _beeLoading2 = _interopRequireDefault(build$r);



	var _RefSearchPanel2 = _interopRequireDefault(RefSearchPanel_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : subClass.__proto__ = superClass; }

	var RefMultipleTableBase = function (_Component) {
	  _inherits(RefMultipleTableBase, _Component);

	  //激活页码
	  //总页数
	  //表头数据
	  function RefMultipleTableBase(props) {
	    _classCallCheck(this, RefMultipleTableBase);

	    var _this2 = _possibleConstructorReturn(this, _Component.call(this, props));

	    _this2.columnsData = [];
	    _this2.tableData = [];
	    _this2.pageCount = 1;
	    _this2.pageSize = '10';
	    _this2.currPageIndex = 1;
	    _this2.fliterFormInputs = [];
	    _this2.filterInfo = {};

	    _this2.initComponent = function () {
	      var _this2$props = _this2.props,
	          value = _this2$props.value,
	          _this2$props$matchDat = _this2$props.matchData,
	          matchData = _this2$props$matchDat === undefined ? [] : _this2$props$matchDat,
	          _this2$props$valueFie = _this2$props.valueField,
	          valueField = _this2$props$valueFie === undefined ? "refpk" : _this2$props$valueFie;

	      var valueMap = (0, utils$3.refValParse)(value);
	      if (_this2.checkedArray.length == 0 && valueMap[valueField]) {
	        if (matchData.length > 0) {
	          _this2.checkedMap = {};
	          _this2.checkedArray = matchData.map(function (item) {
	            item.key = item[valueField];
	            item._checked = true;
	            _this2.checkedMap[item.key] = item;
	            return item;
	          });
	          _this2.setState({
	            selectedDataLength: _this2.checkedArray.length,
	            mustRender: Math.random()
	          });
	        }
	      }    };

	    _this2.handleBtnSave = function () {
	      _this2.props.onSave((0, _assign2["default"])([], _this2.checkedArray));
	    };

	    _this2.handleBtnCancel = function () {
	      _this2.props.onCancel();
	    };

	    _this2.onClickBtn = function (type) {
	      switch (type) {
	        case 'save':
	          _this2.handleBtnSave();
	          break;
	        case 'cancel':
	          _this2.handleBtnCancel();
	          break;
	        case 'clear':
	          _this2.checkedArray = [];
	          _this2.checkedMap = {};
	          _this2.setState({
	            selectedDataLength: 0,
	            mustRender: Math.random()
	          });
	          break;
	      }
	    };

	    _this2.onSelectTabItem = function (a, state) {
	      if (state === 'selecting') {
	        // this.pageCount = Math.ceil(this.totalElements / this.pageSize);
	        _this2.setState({
	          tableIsSelecting: true //展示已选择列表
	        });
	      } else {
	        // this.pageCount = 1;
	        _this2.setState({
	          tableIsSelecting: false //不展示已选择列表
	        });
	      }
	    };

	    _this2.putRowKey = function (record, i) {
	      return record.key;
	    };

	    _this2.renderRowClassName = function (recode) {
	      if (_this2.props.multiple) return;
	      return recode._checked ? 'ref-multiple-table-row-selected' : '';
	    };

	    _this2.getSelectedDataFunc = function (checkedArray, recode) {
	      if (!_this2.props.multiple) return;
	      var _this = _this2;
	      var _this2$props$valueFie2 = _this2.props.valueField,
	          valueField = _this2$props$valueFie2 === undefined ? "refpk" : _this2$props$valueFie2;

	      if (recode) {
	        //单条操作
	        if (recode._checked && !_this.checkedMap[recode[valueField]]) {

	          _this.checkedArray.push(recode);
	          _this.checkedMap[recode[valueField]] = recode;
	        } else if (!recode._checked && _this2.checkedMap[recode[valueField]]) {

	          delete _this.checkedMap[recode[valueField]];
	          _this.checkedArray = [];
	          (0, _keys2["default"])(_this.checkedMap).forEach(function (item) {
	            _this.checkedArray.push(_this2.checkedMap[item]);
	          });
	        }
	      } else {
	        //多条操作
	        _this.checkedArray = [];
	        var tableIsSelecting = _this2.state.tableIsSelecting;

	        if (tableIsSelecting) {
	          //选择中...
	          if (checkedArray.length > 0) {
	            //全选操作 
	            //去重操作
	            //直接操作当前页数据
	            _this.props.tableData.forEach(function (item) {
	              if (!_this.checkedMap.hasOwnProperty(item[valueField])) {
	                _this.checkedMap[item[valueField]] = item;
	              }
	            });
	          } else {
	            //全取消操作
	            //去重操作
	            //直接操作当前页数据
	            _this.props.tableData.forEach(function (item) {
	              if (_this.checkedMap.hasOwnProperty(item[valueField])) {
	                delete _this.checkedMap[item[valueField]];
	              }
	            });
	          }
	          //组装已选数据
	          _this.checkedArray = (0, _keys2["default"])(_this.checkedMap).map(function (item) {
	            return _this.checkedMap[item];
	          });
	        } else {
	          //查看已选择
	          if (checkedArray.length <= 0) {
	            //查看时只有取消选择操作，全选操作不会出现这里可考虑取消这个判断
	            _this.checkedMap = {};
	            _this.checkedArray = [];
	          }
	        }
	      }
	      _this.setState({
	        selectedDataLength: checkedArray.length,
	        mustRender: Math.random()
	      });
	    };

	    _this2.onRowDoubleClick = function (record) {
	      if (_this2.props.multiple) return;
	      var _this2$props$valueFie3 = _this2.props.valueField,
	          valueField = _this2$props$valueFie3 === undefined ? "refpk" : _this2$props$valueFie3;

	      record._checked = true;
	      _this2.checkedArray = [record];
	      _this2.checkedMap = {};
	      _this2.checkedMap[record[valueField]] = record;
	      _this2.handleBtnSave();
	    };

	    _this2.onRowClick = function (record) {
	      if (_this2.props.multiple) return;
	      var _this = _this2;
	      var _this$props$valueFiel = _this.props.valueField,
	          valueField = _this$props$valueFiel === undefined ? "refpk" : _this$props$valueFiel;

	      //点击同一行数据时取消选择

	      if (_this.checkedMap.hasOwnProperty(record[valueField])) {
	        _this.checkedArray = [];
	        _this.checkedMap = {};
	        _this.setState({
	          mustRender: Math.random()
	        });
	      } else {
	        var checkedRecord = (0, _assign2["default"])({ _checked: true }, record);
	        _this.checkedArray = [checkedRecord];
	        _this.checkedMap = {};
	        _this.checkedMap[checkedRecord[valueField]] = checkedRecord;
	        _this.setState({
	          mustRender: Math.random()
	        });
	      }
	    };

	    _this2.state = {
	      selectedDataLength: 0, //checkedArray的长度
	      tableIsSelecting: true //tab切换
	    };
	    _this2.checkedArray = [];
	    _this2.checkedMap = {};
	    _this2.TableView = props.multiple ? (0, _multiSelect2["default"])(_beeTable2["default"], _beeCheckbox2["default"]) : _beeTable2["default"];
	    return _this2;
	  } //每页数据数
	  //表格数据


	  RefMultipleTableBase.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
	    // let result  = !shallowequal(nextState, this.state);
	    //使用state是因为mustRender不同必须重新渲染，this中的三种data不一致也必须更新
	    var dataEqual = nextProps.tableData === this.props.tableData && nextProps.columnsData === this.props.columnsData && nextProps.fliterFormInputs === this.props.fliterFormInputs;
	    return !(0, _shallowequal2["default"])(nextProps, this.props) || !(0, _shallowequal2["default"])(nextState, this.state) || !dataEqual || nextProps.showModal !== this.props.showModal;
	  };

	  RefMultipleTableBase.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this3 = this;

	    var strictMode = nextProps.strictMode,
	        _nextProps$valueField = nextProps.valueField,
	        valueField = _nextProps$valueField === undefined ? "refpk" : _nextProps$valueField,
	        _nextProps$matchData = nextProps.matchData,
	        value = nextProps.value;
	    //严格模式下每次打开必须重置数据

	    if (nextProps.showModal && !this.props.showModal) {
	      //正在打开弹窗
	      if (strictMode || !this.columnsData.length || this.currPageIndex !== 1) {
	        //开启严格模式 或 表头信息没有获取到，即初始化失败是必须重置
	        this.initComponent();
	      }
	      // 	//内部缓存已选择值，不通过 state 缓存，表格缓存状态自动实现
	      // 	this.checkedArray = Object.assign(this.checkedArray,  nextProps.checkedArray || []);
	      // 	//内部缓存已选择值，缓存成 Map 便于检索
	      // 	this.checkedMap = {};
	      // 	this.checkedArray.forEach(item=>{
	      //     this.checkedMap[item[valueField]] = item;
	      //   });
	      //   this.setState({selectedDataLength:this.checkedArray.length,tableIsSelecting: true})
	      // }
	      //这里改用matchData，由于第一次运行到这里选中可能从value中取值
	      this.checkedArray = (0, _assign2["default"])([], nextProps.matchData || []);
	      this.checkedMap = {};
	      this.checkedArray.forEach(function (item) {
	        _this3.checkedMap[item[valueField]] = item;
	      });
	      //内部缓存已选择值，缓存成 Map 便于检索
	      this.setState({ selectedDataLength: this.checkedArray.length, tableIsSelecting: true });
	    }
	  };
	  /**start:按钮操作 */

	  /**end:按钮操作 */

	  /** start:表格操作 */
	  /**
	  * 为数据增加 key
	  * @record {object} 该行数据
	  */

	  /**
	  * 为选中行增加背景色，只在单选状态生效
	  * @record {object} 该行数据
	  */

	  /**
	  * 多选状态下表格只能通过选择 checkbox 来选值，同时触发改方法
	  * @function
	  * @param checkedArray  已勾选值，表格中自动去除未勾选值
	  * @param recode  当前操作的行数据
	  */

	  /**
	   * 双击行选择该行数据，只在单选状态生效
	   * @record {object} 该行数据
	   */

	  /**
	   * 单击行选择该行数据，只在单选状态生效
	   * @record {object} 该行数据
	   */


	  /** end:表格操作*/
	  RefMultipleTableBase.prototype.render = function render() {
	    var _this4 = this;

	    var _this = this;
	    var _props = this.props,
	        className = _props.className,
	        _props$miniSearch = _props.miniSearch,
	        miniSearch = _props$miniSearch === undefined ? true : _props$miniSearch,
	        _props$title = _props.title,
	        title = _props$title === undefined ? '' : _props$title,
	        backdrop = _props.backdrop,
	        _props$size = _props.size,
	        size = _props$size === undefined ? 'lg' : _props$size,
	        showModal = _props.showModal,
	        _props$lang = _props.lang,
	        lang = _props$lang === undefined ? 'zh_CN' : _props$lang,
	        valueField = _props.valueField,
	        _props$emptyBut = _props.emptyBut,
	        emptyBut = _props$emptyBut === undefined ? false : _props$emptyBut,
	        buttons = _props.buttons,
	        _props$fliterFormInpu = _props.fliterFormInputs,
	        fliterFormInputs = _props$fliterFormInpu === undefined ? [] : _props$fliterFormInpu,
	        showLoading = _props.showLoading,
	        tableData = _props.tableData,
	        pageCount = _props.pageCount,
	        currPageIndex = _props.currPageIndex,
	        columnsData = _props.columnsData,
	        totalElements = _props.totalElements,
	        _props$theme = _props.theme,
	        theme = _props$theme === undefined ? 'ref-red' : _props$theme,
	        searchPanelLocale = _props.searchPanelLocale;
	    var checkedArray = this.checkedArray,
	        checkedMap = this.checkedMap;
	    var _state = this.state,
	        selectedDataLength = _state.selectedDataLength,
	        tableIsSelecting = _state.tableIsSelecting;

	    var _tableData = tableData.map(function (item) {
	      item._checked = checkedMap.hasOwnProperty(item[valueField]);
	      return item;
	    });
	    checkedArray.forEach(function (item) {
	      item._checked = true;
	    });
	    if (checkedArray.length === 0) {
	      emptyBut = false;
	    }
	    return _react2["default"].createElement(
	      _beeModal2["default"],
	      {
	        show: showModal,
	        className: ' ' + theme + ' ' + className + ' ref-core ref-multiple-table ref-core-modal',
	        backdrop: backdrop,
	        size: size,
	        onHide: this.handleBtnCancel,
	        autoFocus: false
	      },
	      _react2["default"].createElement(
	        _beeModal2["default"].Header,
	        { closeButton: true },
	        _react2["default"].createElement(
	          _beeModal2["default"].Title,
	          null,
	          ' ',
	          title
	        )
	      ),
	      _react2["default"].createElement(
	        _beeModal2["default"].Body,
	        { ref: function ref(_ref) {
	            return _this4.modalRef = _ref;
	          } },
	        _react2["default"].createElement(_beeLoading2["default"], { container: this.modalRef, show: showLoading }),

	        //按字段查询
	        fliterFormInputs.length !== 0 && !miniSearch ? _react2["default"].createElement(
	          _RefSearchPanel2["default"],
	          {
	            show: tableIsSelecting,
	            onSearch: this.props.searchFilterInfo,
	            searchPanelLocale: searchPanelLocale
	          },
	          fliterFormInputs.map(function (item) {
	            return item;
	          })
	        ) : '',
	        _react2["default"].createElement(
	          _RefCoreTab2["default"],
	          {
	            className: 'ref-multiple-table-tab',
	            selectedData: checkedArray,
	            selectedDataLength: selectedDataLength,
	            selecteing: tableIsSelecting,
	            language: lang,
	            onSelectTabItem: _this.onSelectTabItem
	          },
	          _react2["default"].createElement(_RefCoreSearch2["default"], {
	            className: '' + (miniSearch && tableIsSelecting ? '' : 'ref-multiple-table-tab-search-hide'),
	            onSearch: _this.props.miniSearchFunc,
	            onChange: _this.props.miniSearchFunc,
	            language: lang
	          })
	        ),
	        columnsData && columnsData.length ? _react2["default"].createElement(_this.TableView, {
	          bordered: true,
	          // scroll: { x: false, y: true },
	          columns: columnsData,
	          rowClassName: _this.renderRowClassName,
	          data: tableIsSelecting ? _tableData : checkedArray,
	          getSelectedDataFunc: _this.getSelectedDataFunc,
	          onRowDoubleClick: _this.onRowDoubleClick,
	          onRowClick: _this.onRowClick,
	          rowKey: _this.putRowKey
	        }) : _react2["default"].createElement(_RefCoreError2["default"], { show: !Boolean(_tableData.length), language: lang }),
	        tableIsSelecting && _react2["default"].createElement(_beePagination2["default"], {
	          first: true,
	          last: true,
	          prev: true,
	          next: true,
	          showJump: true,
	          boundaryLinks: true,
	          className: pageCount > 1 ? '' : 'ref-multiple-table-pagination-hide',
	          items: pageCount,
	          maxButtons: 5,
	          total: totalElements,
	          activePage: currPageIndex,
	          onDataNumSelect: _this.props.dataNumSelect,
	          onSelect: _this.props.handlePagination,
	          locale: (0, locale.paginationLocale)(lang)
	        })
	      ),
	      _react2["default"].createElement(
	        _beeModal2["default"].Footer,
	        { className: 'ref-core-modal-footer ' },
	        _react2["default"].createElement(_RefCoreButton2["default"], {
	          language: lang,
	          buttons: buttons,
	          emptyBut: emptyBut,
	          onClickBtn: _this.onClickBtn
	        })
	      )
	    );
	  };

	  return RefMultipleTableBase;
	}(React__default.Component);

	exports["default"] = RefMultipleTableBase;
	});

	unwrapExports(RefMultipeTableBaseUI);

	var $JSON$1 = _core.JSON || (_core.JSON = { stringify: JSON.stringify });
	var stringify = function stringify(it) { // eslint-disable-line no-unused-vars
	  return $JSON$1.stringify.apply($JSON$1, arguments);
	};

	var stringify$1 = createCommonjsModule(function (module) {
	module.exports = { "default": stringify, __esModule: true };
	});

	unwrapExports(stringify$1);

	var _anInstance = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

	var _forOf = createCommonjsModule(function (module) {
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
	  var f = _ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
	    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = _iterCall(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;
	});

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)


	var SPECIES = _wks('species');
	var _speciesConstructor = function (O, D) {
	  var C = _anObject(O).constructor;
	  var S;
	  return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);
	};

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	var _invoke = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};

	var process$1 = _global.process;
	var setTask = _global.setImmediate;
	var clearTask = _global.clearImmediate;
	var MessageChannel = _global.MessageChannel;
	var Dispatch = _global.Dispatch;
	var counter = 0;
	var queue$1 = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue$1.hasOwnProperty(id)) {
	    var fn = queue$1[id];
	    delete queue$1[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue$1[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue$1[id];
	  };
	  // Node.js 0.8-
	  if (_cof(process$1) == 'process') {
	    defer = function (id) {
	      process$1.nextTick(_ctx(run, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(_ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = _ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
	    defer = function (id) {
	      _global.postMessage(id + '', '*');
	    };
	    _global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
	    defer = function (id) {
	      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
	        _html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(_ctx(run, id, 1), 0);
	    };
	  }
	}
	var _task = {
	  set: setTask,
	  clear: clearTask
	};

	var macrotask = _task.set;
	var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
	var process$2 = _global.process;
	var Promise$1 = _global.Promise;
	var isNode = _cof(process$2) == 'process';

	var _microtask = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process$2.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process$2.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise$1.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(_global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};

	// 25.4.1.5 NewPromiseCapability(C)


	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = _aFunction(resolve);
	  this.reject = _aFunction(reject);
	}

	var f$7 = function (C) {
	  return new PromiseCapability(C);
	};

	var _newPromiseCapability = {
		f: f$7
	};

	var _perform = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};

	var navigator$1 = _global.navigator;

	var _userAgent = navigator$1 && navigator$1.userAgent || '';

	var _promiseResolve = function (C, x) {
	  _anObject(C);
	  if (_isObject(x) && x.constructor === C) return x;
	  var promiseCapability = _newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var _redefineAll = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else _hide(target, key, src[key]);
	  } return target;
	};

	var SPECIES$1 = _wks('species');

	var _setSpecies = function (KEY) {
	  var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];
	  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};

	var task = _task.set;
	var microtask = _microtask();




	var PROMISE = 'Promise';
	var TypeError$1 = _global.TypeError;
	var process$3 = _global.process;
	var versions = process$3 && process$3.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = _global[PROMISE];
	var isNode$1 = _classof(process$3) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
	var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

	var USE_NATIVE$1 = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode$1 || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && _userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(_global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = _perform(function () {
	        if (isNode$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else if (handler = _global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = _global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(_global, function () {
	    var handler;
	    if (isNode$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else if (handler = _global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE$1) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    _anInstance(this, $Promise, PROMISE, '_h');
	    _aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = _redefineAll($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode$1 ? process$3.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = _ctx($resolve, promise, 1);
	    this.reject = _ctx($reject, promise, 1);
	  };
	  _newPromiseCapability.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, { Promise: $Promise });
	_setToStringTag($Promise, PROMISE);
	_setSpecies(PROMISE);
	Wrapper = _core[PROMISE];

	// statics
	_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	_export(_export.S + _export.F * (_library), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return _promiseResolve(this === Wrapper ? $Promise : this, x);
	  }
	});
	_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = _perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      _forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = _perform(function () {
	      _forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});

	_export(_export.P + _export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = _speciesConstructor(this, _core.Promise || _global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return _promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return _promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });

	// https://github.com/tc39/proposal-promise-try




	_export(_export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = _newPromiseCapability.f(this);
	  var result = _perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });

	var promise = _core.Promise;

	var promise$1 = createCommonjsModule(function (module) {
	module.exports = { "default": promise, __esModule: true };
	});

	unwrapExports(promise$1);

	var fetchJsonp = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	  {
	    factory(exports, module);
	  }
	})(commonjsGlobal, function (exports, module) {

	  var defaultOptions = {
	    timeout: 5000,
	    jsonpCallback: 'callback',
	    jsonpCallbackFunction: null
	  };

	  function generateCallbackFunction() {
	    return 'jsonp_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);
	  }

	  function clearFunction(functionName) {
	    // IE8 throws an exception when you try to delete a property on window
	    // http://stackoverflow.com/a/1824228/751089
	    try {
	      delete window[functionName];
	    } catch (e) {
	      window[functionName] = undefined;
	    }
	  }

	  function removeScript(scriptId) {
	    var script = document.getElementById(scriptId);
	    if (script) {
	      document.getElementsByTagName('head')[0].removeChild(script);
	    }
	  }

	  function fetchJsonp(_url) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    // to avoid param reassign
	    var url = _url;
	    var timeout = options.timeout || defaultOptions.timeout;
	    var jsonpCallback = options.jsonpCallback || defaultOptions.jsonpCallback;

	    var timeoutId = undefined;

	    return new Promise(function (resolve, reject) {
	      var callbackFunction = options.jsonpCallbackFunction || generateCallbackFunction();
	      var scriptId = jsonpCallback + '_' + callbackFunction;

	      window[callbackFunction] = function (response) {
	        resolve({
	          ok: true,
	          // keep consistent with fetch API
	          json: function json() {
	            return Promise.resolve(response);
	          }
	        });

	        if (timeoutId) clearTimeout(timeoutId);

	        removeScript(scriptId);

	        clearFunction(callbackFunction);
	      };

	      // Check if the user set their own params, and if not add a ? to start a list of params
	      url += url.indexOf('?') === -1 ? '?' : '&';

	      var jsonpScript = document.createElement('script');
	      jsonpScript.setAttribute('src', '' + url + jsonpCallback + '=' + callbackFunction);
	      if (options.charset) {
	        jsonpScript.setAttribute('charset', options.charset);
	      }
	      jsonpScript.id = scriptId;
	      document.getElementsByTagName('head')[0].appendChild(jsonpScript);

	      timeoutId = setTimeout(function () {
	        reject(new Error('JSONP request to ' + _url + ' timed out'));

	        clearFunction(callbackFunction);
	        removeScript(scriptId);
	        window[callbackFunction] = function () {
	          clearFunction(callbackFunction);
	        };
	      }, timeout);

	      // Caught if got 404/500
	      jsonpScript.onerror = function () {
	        reject(new Error('JSONP request to ' + _url + ' failed'));

	        clearFunction(callbackFunction);
	        removeScript(scriptId);
	        if (timeoutId) clearTimeout(timeoutId);
	      };
	    });
	  }

	  // export as global function
	  /*
	  let local;
	  if (typeof global !== 'undefined') {
	    local = global;
	  } else if (typeof self !== 'undefined') {
	    local = self;
	  } else {
	    try {
	      local = Function('return this')();
	    } catch (e) {
	      throw new Error('polyfill failed because global object is unavailable in this environment');
	    }
	  }
	  local.fetchJsonp = fetchJsonp;
	  */

	  module.exports = fetchJsonp;
	});
	});

	var request = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _assign2 = _interopRequireDefault(assign$1);



	var _iterator2 = _interopRequireDefault(iterator$1);



	var _symbol2 = _interopRequireDefault(symbol$1);



	var _promise2 = _interopRequireDefault(promise$1);



	var _stringify2 = _interopRequireDefault(stringify$1);



	var _keys2 = _interopRequireDefault(keys$1);

	var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof _symbol2["default"] === "function" && typeof _iterator2["default"] === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2["default"] === "function" && obj.constructor === _symbol2["default"] && obj !== _symbol2["default"].prototype ? "symbol" : typeof obj; };

	exports.post = post;
	exports.get = get;
	exports.fetchJ = fetchJ;



	var _fetchJsonp2 = _interopRequireDefault(fetchJsonp);



	var _axios2 = _interopRequireDefault(axios);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var fetchTools = {
	  params: function params(_params) {
	    try {
	      return (0, _keys2["default"])(_params).map(function (key) {
	        var param = _params[key];
	        switch (typeof param === 'undefined' ? 'undefined' : _typeof(param)) {
	          case 'object':
	            param = escape((0, _stringify2["default"])(param));
	            break;
	          case 'undefined':
	            param = '';
	            break;
	          default:
	            break;
	        }
	        return key + '=' + param;
	      }).join('&');
	    } catch (e) {
	      // console.log('error in urlParams');
	      return '';
	    }
	  },
	  fetch: function (_fetch) {
	    function fetch(_x, _x2) {
	      return _fetch.apply(this, arguments);
	    }

	    fetch.toString = function () {
	      return _fetch.toString();
	    };

	    return fetch;
	  }(function (url, options) {
	    return fetch(url, options).then(function (response) {
	      if (response.ok) {
	        return response.text().then(function (text) {
	          try {
	            return JSON.parse(text);
	          } catch (e) {
	            return _promise2["default"].reject(new Error('接口返回数据无法解析'));
	          }
	        });
	      }
	      return _promise2["default"].reject(new Error('请求失败'));
	    }, function (error) {
	      throw error;
	    });
	  }),
	  options: function options() {
	    var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'get';

	    var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    return _extends({
	      method: method.toUpperCase(),
	      credentials: 'include',
	      cache: 'no-cache',
	      headers: {
	        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
	      }
	    }, _options);
	  }
	};

	function post(url) {
	  var oriParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var fetch = fetchTools.fetch,
	      options = fetchTools.options;

	  try {
	    return fetch(url, options('post', {
	      headers: {
	        'Content-Type': 'application/json;charset=UTF-8'
	      },
	      body: (0, _stringify2["default"])(oriParams)
	    }));
	  } catch (e) {
	    return _promise2["default"].reject(e);
	  }
	}

	function get(url) {
	  var oriParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var params = fetchTools.params,
	      fetch = fetchTools.fetch,
	      options = fetchTools.options;


	  var data = params(oriParams);

	  if (data) {
	    return fetch(url + '?' + data, options());
	  }
	  return fetch(url, options());
	}

	function fetchJ(url) {
	  var oriParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var params = fetchTools.params;


	  var data = params(oriParams);

	  return (0, _fetchJsonp2["default"])(url + '?' + data).then(function (response) {
	    return response.json();
	  }).then(function (json) {
	    console.log('parsed json', json);
	    return json;
	  })["catch"](function (ex) {
	    console.log('parsing failed', ex);
	  });
	}

	exports["default"] = function (url, options) {
	  return (0, _axios2["default"])({
	    method: options.method,
	    url: url,
	    data: options.data,
	    params: options.param
	  })["catch"](function (err) {
	    console.log(err);
	  });
	};

	// var csrfDefense = function(){
	// 	window.x_xsrf_token = "";
	// 	window.random_num = Math.random();
	// 	$.ajaxSetup({
	// 		cache:false,
	// 		beforeSend: function (xhr) {
	// 			xhr.setRequestHeader('x-xsrf-token', x_xsrf_token);//added by yany head名称不能下划线
	// 			xhr.setRequestHeader('random-num', random_num);
	// 			var centerContent='<i class="uf uf-fluffycloudsilhouette u-loader-centerContent"></i>';
	// 			var opt1={
	// 				hasback:true,
	// 				hasDesc:true,//是否含有加载内容描述
	// 				centerContent:centerContent
	// 			};
	// 			u.showLoader(opt1);
	// 		},
	// 		complete: function (xhr, status) {
	// 			setTimeout("u.hideLoader({hasback:true});",200 );
	// 			var inner_x_xsrf_token = xhr.getResponseHeader('x-xsrf-token');//added by yany
	// 			if(inner_x_xsrf_token && inner_x_xsrf_token != ""){
	// 				window.x_xsrf_token = inner_x_xsrf_token;
	// 			}
	// 		}
	// 	});
	// }
	});

	unwrapExports(request);
	var request_1 = request.post;
	var request_2 = request.get;
	var request_3 = request.fetchJ;



	var Icon = /*#__PURE__*/Object.freeze({
		default: undefined
	});

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	// Used for setting prototype methods that IE8 chokes on.
	var DELETE = 'delete';

	// Constants describing the size of trie nodes.
	var SHIFT = 5; // Resulted in best performance after ______?
	var SIZE = 1 << SHIFT;
	var MASK = SIZE - 1;

	// A consistent shared value representing "not set" which equals nothing other
	// than itself, and nothing that could be provided externally.
	var NOT_SET = {};

	// Boolean references, Rough equivalent of `bool &`.
	function MakeRef() {
	  return { value: false };
	}

	function SetRef(ref) {
	  if (ref) {
	    ref.value = true;
	  }
	}

	// A function which returns a value representing an "owner" for transient writes
	// to tries. The return value will only ever equal itself, and will not equal
	// the return of any subsequent call of this function.
	function OwnerID() {}

	function ensureSize(iter) {
	  if (iter.size === undefined) {
	    iter.size = iter.__iterate(returnTrue);
	  }
	  return iter.size;
	}

	function wrapIndex(iter, index) {
	  // This implements "is array index" which the ECMAString spec defines as:
	  //
	  //     A String property name P is an array index if and only if
	  //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	  //     to 2^32−1.
	  //
	  // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	  if (typeof index !== 'number') {
	    var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	    if ('' + uint32Index !== index || uint32Index === 4294967295) {
	      return NaN;
	    }
	    index = uint32Index;
	  }
	  return index < 0 ? ensureSize(iter) + index : index;
	}

	function returnTrue() {
	  return true;
	}

	function wholeSlice(begin, end, size) {
	  return (
	    ((begin === 0 && !isNeg(begin)) ||
	      (size !== undefined && begin <= -size)) &&
	    (end === undefined || (size !== undefined && end >= size))
	  );
	}

	function resolveBegin(begin, size) {
	  return resolveIndex(begin, size, 0);
	}

	function resolveEnd(end, size) {
	  return resolveIndex(end, size, size);
	}

	function resolveIndex(index, size, defaultIndex) {
	  // Sanitize indices using this shorthand for ToInt32(argument)
	  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	  return index === undefined
	    ? defaultIndex
	    : isNeg(index)
	      ? size === Infinity
	        ? size
	        : Math.max(0, size + index) | 0
	      : size === undefined || size === index
	        ? index
	        : Math.min(size, index) | 0;
	}

	function isNeg(value) {
	  // Account for -0 which is negative, but not less than 0.
	  return value < 0 || (value === 0 && 1 / value === -Infinity);
	}

	// Note: value is unchanged to not break immutable-devtools.
	var IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';

	function isCollection(maybeCollection) {
	  return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);
	}

	var IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';

	function isKeyed(maybeKeyed) {
	  return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);
	}

	var IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';

	function isIndexed(maybeIndexed) {
	  return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);
	}

	function isAssociative(maybeAssociative) {
	  return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	}

	var Collection$1 = function Collection(value) {
	  return isCollection(value) ? value : Seq(value);
	};

	var KeyedCollection = /*@__PURE__*/(function (Collection) {
	  function KeyedCollection(value) {
	    return isKeyed(value) ? value : KeyedSeq(value);
	  }

	  if ( Collection ) KeyedCollection.__proto__ = Collection;
	  KeyedCollection.prototype = Object.create( Collection && Collection.prototype );
	  KeyedCollection.prototype.constructor = KeyedCollection;

	  return KeyedCollection;
	}(Collection$1));

	var IndexedCollection = /*@__PURE__*/(function (Collection) {
	  function IndexedCollection(value) {
	    return isIndexed(value) ? value : IndexedSeq(value);
	  }

	  if ( Collection ) IndexedCollection.__proto__ = Collection;
	  IndexedCollection.prototype = Object.create( Collection && Collection.prototype );
	  IndexedCollection.prototype.constructor = IndexedCollection;

	  return IndexedCollection;
	}(Collection$1));

	var SetCollection = /*@__PURE__*/(function (Collection) {
	  function SetCollection(value) {
	    return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);
	  }

	  if ( Collection ) SetCollection.__proto__ = Collection;
	  SetCollection.prototype = Object.create( Collection && Collection.prototype );
	  SetCollection.prototype.constructor = SetCollection;

	  return SetCollection;
	}(Collection$1));

	Collection$1.Keyed = KeyedCollection;
	Collection$1.Indexed = IndexedCollection;
	Collection$1.Set = SetCollection;

	var IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';

	function isSeq(maybeSeq) {
	  return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);
	}

	var IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';

	function isRecord(maybeRecord) {
	  return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);
	}

	function isImmutable(maybeImmutable) {
	  return isCollection(maybeImmutable) || isRecord(maybeImmutable);
	}

	var IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';

	function isOrdered(maybeOrdered) {
	  return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);
	}

	var ITERATE_KEYS = 0;
	var ITERATE_VALUES = 1;
	var ITERATE_ENTRIES = 2;

	var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

	var Iterator = function Iterator(next) {
	  this.next = next;
	};

	Iterator.prototype.toString = function toString () {
	  return '[Iterator]';
	};

	Iterator.KEYS = ITERATE_KEYS;
	Iterator.VALUES = ITERATE_VALUES;
	Iterator.ENTRIES = ITERATE_ENTRIES;

	Iterator.prototype.inspect = Iterator.prototype.toSource = function() {
	  return this.toString();
	};
	Iterator.prototype[ITERATOR_SYMBOL] = function() {
	  return this;
	};

	function iteratorValue(type, k, v, iteratorResult) {
	  var value = type === 0 ? k : type === 1 ? v : [k, v];
	  iteratorResult
	    ? (iteratorResult.value = value)
	    : (iteratorResult = {
	        value: value,
	        done: false,
	      });
	  return iteratorResult;
	}

	function iteratorDone() {
	  return { value: undefined, done: true };
	}

	function hasIterator(maybeIterable) {
	  return !!getIteratorFn(maybeIterable);
	}

	function isIterator(maybeIterator) {
	  return maybeIterator && typeof maybeIterator.next === 'function';
	}

	function getIterator(iterable) {
	  var iteratorFn = getIteratorFn(iterable);
	  return iteratorFn && iteratorFn.call(iterable);
	}

	function getIteratorFn(iterable) {
	  var iteratorFn =
	    iterable &&
	    ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	var hasOwnProperty$7 = Object.prototype.hasOwnProperty;

	function isArrayLike(value) {
	  if (Array.isArray(value) || typeof value === 'string') {
	    return true;
	  }

	  return (
	    value &&
	    typeof value === 'object' &&
	    Number.isInteger(value.length) &&
	    value.length >= 0 &&
	    (value.length === 0
	      ? // Only {length: 0} is considered Array-like.
	        Object.keys(value).length === 1
	      : // An object is only Array-like if it has a property where the last value
	        // in the array-like may be found (which could be undefined).
	        value.hasOwnProperty(value.length - 1))
	  );
	}

	var Seq = /*@__PURE__*/(function (Collection$$1) {
	  function Seq(value) {
	    return value === null || value === undefined
	      ? emptySequence()
	      : isImmutable(value)
	        ? value.toSeq()
	        : seqFromValue(value);
	  }

	  if ( Collection$$1 ) Seq.__proto__ = Collection$$1;
	  Seq.prototype = Object.create( Collection$$1 && Collection$$1.prototype );
	  Seq.prototype.constructor = Seq;

	  Seq.prototype.toSeq = function toSeq () {
	    return this;
	  };

	  Seq.prototype.toString = function toString () {
	    return this.__toString('Seq {', '}');
	  };

	  Seq.prototype.cacheResult = function cacheResult () {
	    if (!this._cache && this.__iterateUncached) {
	      this._cache = this.entrySeq().toArray();
	      this.size = this._cache.length;
	    }
	    return this;
	  };

	  // abstract __iterateUncached(fn, reverse)

	  Seq.prototype.__iterate = function __iterate (fn, reverse) {
	    var cache = this._cache;
	    if (cache) {
	      var size = cache.length;
	      var i = 0;
	      while (i !== size) {
	        var entry = cache[reverse ? size - ++i : i++];
	        if (fn(entry[1], entry[0], this) === false) {
	          break;
	        }
	      }
	      return i;
	    }
	    return this.__iterateUncached(fn, reverse);
	  };

	  // abstract __iteratorUncached(type, reverse)

	  Seq.prototype.__iterator = function __iterator (type, reverse) {
	    var cache = this._cache;
	    if (cache) {
	      var size = cache.length;
	      var i = 0;
	      return new Iterator(function () {
	        if (i === size) {
	          return iteratorDone();
	        }
	        var entry = cache[reverse ? size - ++i : i++];
	        return iteratorValue(type, entry[0], entry[1]);
	      });
	    }
	    return this.__iteratorUncached(type, reverse);
	  };

	  return Seq;
	}(Collection$1));

	var KeyedSeq = /*@__PURE__*/(function (Seq) {
	  function KeyedSeq(value) {
	    return value === null || value === undefined
	      ? emptySequence().toKeyedSeq()
	      : isCollection(value)
	        ? isKeyed(value)
	          ? value.toSeq()
	          : value.fromEntrySeq()
	        : isRecord(value)
	          ? value.toSeq()
	          : keyedSeqFromValue(value);
	  }

	  if ( Seq ) KeyedSeq.__proto__ = Seq;
	  KeyedSeq.prototype = Object.create( Seq && Seq.prototype );
	  KeyedSeq.prototype.constructor = KeyedSeq;

	  KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {
	    return this;
	  };

	  return KeyedSeq;
	}(Seq));

	var IndexedSeq = /*@__PURE__*/(function (Seq) {
	  function IndexedSeq(value) {
	    return value === null || value === undefined
	      ? emptySequence()
	      : isCollection(value)
	        ? isKeyed(value)
	          ? value.entrySeq()
	          : value.toIndexedSeq()
	        : isRecord(value)
	          ? value.toSeq().entrySeq()
	          : indexedSeqFromValue(value);
	  }

	  if ( Seq ) IndexedSeq.__proto__ = Seq;
	  IndexedSeq.prototype = Object.create( Seq && Seq.prototype );
	  IndexedSeq.prototype.constructor = IndexedSeq;

	  IndexedSeq.of = function of (/*...values*/) {
	    return IndexedSeq(arguments);
	  };

	  IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {
	    return this;
	  };

	  IndexedSeq.prototype.toString = function toString () {
	    return this.__toString('Seq [', ']');
	  };

	  return IndexedSeq;
	}(Seq));

	var SetSeq = /*@__PURE__*/(function (Seq) {
	  function SetSeq(value) {
	    return (isCollection(value) && !isAssociative(value)
	      ? value
	      : IndexedSeq(value)
	    ).toSetSeq();
	  }

	  if ( Seq ) SetSeq.__proto__ = Seq;
	  SetSeq.prototype = Object.create( Seq && Seq.prototype );
	  SetSeq.prototype.constructor = SetSeq;

	  SetSeq.of = function of (/*...values*/) {
	    return SetSeq(arguments);
	  };

	  SetSeq.prototype.toSetSeq = function toSetSeq () {
	    return this;
	  };

	  return SetSeq;
	}(Seq));

	Seq.isSeq = isSeq;
	Seq.Keyed = KeyedSeq;
	Seq.Set = SetSeq;
	Seq.Indexed = IndexedSeq;

	Seq.prototype[IS_SEQ_SYMBOL] = true;

	// #pragma Root Sequences

	var ArraySeq = /*@__PURE__*/(function (IndexedSeq) {
	  function ArraySeq(array) {
	    this._array = array;
	    this.size = array.length;
	  }

	  if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;
	  ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
	  ArraySeq.prototype.constructor = ArraySeq;

	  ArraySeq.prototype.get = function get (index, notSetValue) {
	    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	  };

	  ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {
	    var array = this._array;
	    var size = array.length;
	    var i = 0;
	    while (i !== size) {
	      var ii = reverse ? size - ++i : i++;
	      if (fn(array[ii], ii, this) === false) {
	        break;
	      }
	    }
	    return i;
	  };

	  ArraySeq.prototype.__iterator = function __iterator (type, reverse) {
	    var array = this._array;
	    var size = array.length;
	    var i = 0;
	    return new Iterator(function () {
	      if (i === size) {
	        return iteratorDone();
	      }
	      var ii = reverse ? size - ++i : i++;
	      return iteratorValue(type, ii, array[ii]);
	    });
	  };

	  return ArraySeq;
	}(IndexedSeq));

	var ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {
	  function ObjectSeq(object) {
	    var keys = Object.keys(object);
	    this._object = object;
	    this._keys = keys;
	    this.size = keys.length;
	  }

	  if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;
	  ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );
	  ObjectSeq.prototype.constructor = ObjectSeq;

	  ObjectSeq.prototype.get = function get (key, notSetValue) {
	    if (notSetValue !== undefined && !this.has(key)) {
	      return notSetValue;
	    }
	    return this._object[key];
	  };

	  ObjectSeq.prototype.has = function has (key) {
	    return hasOwnProperty$7.call(this._object, key);
	  };

	  ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {
	    var object = this._object;
	    var keys = this._keys;
	    var size = keys.length;
	    var i = 0;
	    while (i !== size) {
	      var key = keys[reverse ? size - ++i : i++];
	      if (fn(object[key], key, this) === false) {
	        break;
	      }
	    }
	    return i;
	  };

	  ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {
	    var object = this._object;
	    var keys = this._keys;
	    var size = keys.length;
	    var i = 0;
	    return new Iterator(function () {
	      if (i === size) {
	        return iteratorDone();
	      }
	      var key = keys[reverse ? size - ++i : i++];
	      return iteratorValue(type, key, object[key]);
	    });
	  };

	  return ObjectSeq;
	}(KeyedSeq));
	ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;

	var CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {
	  function CollectionSeq(collection) {
	    this._collection = collection;
	    this.size = collection.length || collection.size;
	  }

	  if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;
	  CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );
	  CollectionSeq.prototype.constructor = CollectionSeq;

	  CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var collection = this._collection;
	    var iterator = getIterator(collection);
	    var iterations = 0;
	    if (isIterator(iterator)) {
	      var step;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	    }
	    return iterations;
	  };

	  CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var collection = this._collection;
	    var iterator = getIterator(collection);
	    if (!isIterator(iterator)) {
	      return new Iterator(iteratorDone);
	    }
	    var iterations = 0;
	    return new Iterator(function () {
	      var step = iterator.next();
	      return step.done ? step : iteratorValue(type, iterations++, step.value);
	    });
	  };

	  return CollectionSeq;
	}(IndexedSeq));

	// # pragma Helper functions

	var EMPTY_SEQ;

	function emptySequence() {
	  return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	}

	function keyedSeqFromValue(value) {
	  var seq = Array.isArray(value)
	    ? new ArraySeq(value)
	    : hasIterator(value)
	      ? new CollectionSeq(value)
	      : undefined;
	  if (seq) {
	    return seq.fromEntrySeq();
	  }
	  if (typeof value === 'object') {
	    return new ObjectSeq(value);
	  }
	  throw new TypeError(
	    'Expected Array or collection object of [k, v] entries, or keyed object: ' +
	      value
	  );
	}

	function indexedSeqFromValue(value) {
	  var seq = maybeIndexedSeqFromValue(value);
	  if (seq) {
	    return seq;
	  }
	  throw new TypeError(
	    'Expected Array or collection object of values: ' + value
	  );
	}

	function seqFromValue(value) {
	  var seq = maybeIndexedSeqFromValue(value);
	  if (seq) {
	    return seq;
	  }
	  if (typeof value === 'object') {
	    return new ObjectSeq(value);
	  }
	  throw new TypeError(
	    'Expected Array or collection object of values, or keyed object: ' + value
	  );
	}

	function maybeIndexedSeqFromValue(value) {
	  return isArrayLike(value)
	    ? new ArraySeq(value)
	    : hasIterator(value)
	      ? new CollectionSeq(value)
	      : undefined;
	}

	var IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';

	function isMap(maybeMap) {
	  return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);
	}

	function isOrderedMap(maybeOrderedMap) {
	  return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	}

	function isValueObject(maybeValue) {
	  return Boolean(
	    maybeValue &&
	      typeof maybeValue.equals === 'function' &&
	      typeof maybeValue.hashCode === 'function'
	  );
	}

	/**
	 * An extension of the "same-value" algorithm as [described for use by ES6 Map
	 * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	 *
	 * NaN is considered the same as NaN, however -0 and 0 are considered the same
	 * value, which is different from the algorithm described by
	 * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	 *
	 * This is extended further to allow Objects to describe the values they
	 * represent, by way of `valueOf` or `equals` (and `hashCode`).
	 *
	 * Note: because of this extension, the key equality of Immutable.Map and the
	 * value equality of Immutable.Set will differ from ES6 Map and Set.
	 *
	 * ### Defining custom values
	 *
	 * The easiest way to describe the value an object represents is by implementing
	 * `valueOf`. For example, `Date` represents a value by returning a unix
	 * timestamp for `valueOf`:
	 *
	 *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	 *     var date2 = new Date(1234567890000);
	 *     date1.valueOf(); // 1234567890000
	 *     assert( date1 !== date2 );
	 *     assert( Immutable.is( date1, date2 ) );
	 *
	 * Note: overriding `valueOf` may have other implications if you use this object
	 * where JavaScript expects a primitive, such as implicit string coercion.
	 *
	 * For more complex types, especially collections, implementing `valueOf` may
	 * not be performant. An alternative is to implement `equals` and `hashCode`.
	 *
	 * `equals` takes another object, presumably of similar type, and returns true
	 * if it is equal. Equality is symmetrical, so the same result should be
	 * returned if this and the argument are flipped.
	 *
	 *     assert( a.equals(b) === b.equals(a) );
	 *
	 * `hashCode` returns a 32bit integer number representing the object which will
	 * be used to determine how to store the value object in a Map or Set. You must
	 * provide both or neither methods, one must not exist without the other.
	 *
	 * Also, an important relationship between these methods must be upheld: if two
	 * values are equal, they *must* return the same hashCode. If the values are not
	 * equal, they might have the same hashCode; this is called a hash collision,
	 * and while undesirable for performance reasons, it is acceptable.
	 *
	 *     if (a.equals(b)) {
	 *       assert( a.hashCode() === b.hashCode() );
	 *     }
	 *
	 * All Immutable collections are Value Objects: they implement `equals()`
	 * and `hashCode()`.
	 */
	function is$2(valueA, valueB) {
	  if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	    return true;
	  }
	  if (!valueA || !valueB) {
	    return false;
	  }
	  if (
	    typeof valueA.valueOf === 'function' &&
	    typeof valueB.valueOf === 'function'
	  ) {
	    valueA = valueA.valueOf();
	    valueB = valueB.valueOf();
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	  }
	  return !!(
	    isValueObject(valueA) &&
	    isValueObject(valueB) &&
	    valueA.equals(valueB)
	  );
	}

	var imul =
	  typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2
	    ? Math.imul
	    : function imul(a, b) {
	        a |= 0; // int
	        b |= 0; // int
	        var c = a & 0xffff;
	        var d = b & 0xffff;
	        // Shift by 0 fixes the sign on the high part.
	        return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int
	      };

	// v8 has an optimization for storing 31-bit signed numbers.
	// Values which have either 00 or 11 as the high order bits qualify.
	// This function drops the highest order bit in a signed number, maintaining
	// the sign bit.
	function smi(i32) {
	  return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);
	}

	var defaultValueOf = Object.prototype.valueOf;

	function hash(o) {
	  switch (typeof o) {
	    case 'boolean':
	      // The hash values for built-in constants are a 1 value for each 5-byte
	      // shift region expect for the first, which encodes the value. This
	      // reduces the odds of a hash collision for these common values.
	      return o ? 0x42108421 : 0x42108420;
	    case 'number':
	      return hashNumber(o);
	    case 'string':
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN
	        ? cachedHashString(o)
	        : hashString(o);
	    case 'object':
	    case 'function':
	      if (o === null) {
	        return 0x42108422;
	      }
	      if (typeof o.hashCode === 'function') {
	        // Drop any high bits from accidentally long hash codes.
	        return smi(o.hashCode(o));
	      }
	      if (o.valueOf !== defaultValueOf && typeof o.valueOf === 'function') {
	        o = o.valueOf(o);
	      }
	      return hashJSObj(o);
	    case 'undefined':
	      return 0x42108423;
	    default:
	      if (typeof o.toString === 'function') {
	        return hashString(o.toString());
	      }
	      throw new Error('Value type ' + typeof o + ' cannot be hashed.');
	  }
	}

	// Compress arbitrarily large numbers into smi hashes.
	function hashNumber(n) {
	  if (n !== n || n === Infinity) {
	    return 0;
	  }
	  var hash = n | 0;
	  if (hash !== n) {
	    hash ^= n * 0xffffffff;
	  }
	  while (n > 0xffffffff) {
	    n /= 0xffffffff;
	    hash ^= n;
	  }
	  return smi(hash);
	}

	function cachedHashString(string) {
	  var hashed = stringHashCache[string];
	  if (hashed === undefined) {
	    hashed = hashString(string);
	    if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	      STRING_HASH_CACHE_SIZE = 0;
	      stringHashCache = {};
	    }
	    STRING_HASH_CACHE_SIZE++;
	    stringHashCache[string] = hashed;
	  }
	  return hashed;
	}

	// http://jsperf.com/hashing-strings
	function hashString(string) {
	  // This is the hash from JVM
	  // The hash code for a string is computed as
	  // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	  // where s[i] is the ith character of the string and n is the length of
	  // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	  // (exclusive) by dropping high bits.
	  var hashed = 0;
	  for (var ii = 0; ii < string.length; ii++) {
	    hashed = (31 * hashed + string.charCodeAt(ii)) | 0;
	  }
	  return smi(hashed);
	}

	function hashJSObj(obj) {
	  var hashed;
	  if (usingWeakMap) {
	    hashed = weakMap.get(obj);
	    if (hashed !== undefined) {
	      return hashed;
	    }
	  }

	  hashed = obj[UID_HASH_KEY];
	  if (hashed !== undefined) {
	    return hashed;
	  }

	  if (!canDefineProperty) {
	    hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	    if (hashed !== undefined) {
	      return hashed;
	    }

	    hashed = getIENodeHash(obj);
	    if (hashed !== undefined) {
	      return hashed;
	    }
	  }

	  hashed = ++objHashUID;
	  if (objHashUID & 0x40000000) {
	    objHashUID = 0;
	  }

	  if (usingWeakMap) {
	    weakMap.set(obj, hashed);
	  } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	    throw new Error('Non-extensible objects are not allowed as keys.');
	  } else if (canDefineProperty) {
	    Object.defineProperty(obj, UID_HASH_KEY, {
	      enumerable: false,
	      configurable: false,
	      writable: false,
	      value: hashed,
	    });
	  } else if (
	    obj.propertyIsEnumerable !== undefined &&
	    obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable
	  ) {
	    // Since we can't define a non-enumerable property on the object
	    // we'll hijack one of the less-used non-enumerable properties to
	    // save our hash on it. Since this is a function it will not show up in
	    // `JSON.stringify` which is what we want.
	    obj.propertyIsEnumerable = function() {
	      return this.constructor.prototype.propertyIsEnumerable.apply(
	        this,
	        arguments
	      );
	    };
	    obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;
	  } else if (obj.nodeType !== undefined) {
	    // At this point we couldn't get the IE `uniqueID` to use as a hash
	    // and we couldn't use a non-enumerable property to exploit the
	    // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	    // itself.
	    obj[UID_HASH_KEY] = hashed;
	  } else {
	    throw new Error('Unable to set a non-enumerable property on object.');
	  }

	  return hashed;
	}

	// Get references to ES5 object methods.
	var isExtensible = Object.isExtensible;

	// True if Object.defineProperty works as expected. IE8 fails this test.
	var canDefineProperty = (function() {
	  try {
	    Object.defineProperty({}, '@', {});
	    return true;
	  } catch (e) {
	    return false;
	  }
	})();

	// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	// and avoid memory leaks from the IE cloneNode bug.
	function getIENodeHash(node) {
	  if (node && node.nodeType > 0) {
	    switch (node.nodeType) {
	      case 1: // Element
	        return node.uniqueID;
	      case 9: // Document
	        return node.documentElement && node.documentElement.uniqueID;
	    }
	  }
	}

	// If possible, use a WeakMap.
	var usingWeakMap = typeof WeakMap === 'function';
	var weakMap;
	if (usingWeakMap) {
	  weakMap = new WeakMap();
	}

	var objHashUID = 0;

	var UID_HASH_KEY = '__immutablehash__';
	if (typeof Symbol === 'function') {
	  UID_HASH_KEY = Symbol(UID_HASH_KEY);
	}

	var STRING_HASH_CACHE_MIN_STRLEN = 16;
	var STRING_HASH_CACHE_MAX_SIZE = 255;
	var STRING_HASH_CACHE_SIZE = 0;
	var stringHashCache = {};

	var ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq$$1) {
	  function ToKeyedSequence(indexed, useKeys) {
	    this._iter = indexed;
	    this._useKeys = useKeys;
	    this.size = indexed.size;
	  }

	  if ( KeyedSeq$$1 ) ToKeyedSequence.__proto__ = KeyedSeq$$1;
	  ToKeyedSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );
	  ToKeyedSequence.prototype.constructor = ToKeyedSequence;

	  ToKeyedSequence.prototype.get = function get (key, notSetValue) {
	    return this._iter.get(key, notSetValue);
	  };

	  ToKeyedSequence.prototype.has = function has (key) {
	    return this._iter.has(key);
	  };

	  ToKeyedSequence.prototype.valueSeq = function valueSeq () {
	    return this._iter.valueSeq();
	  };

	  ToKeyedSequence.prototype.reverse = function reverse () {
	    var this$1 = this;

	    var reversedSequence = reverseFactory(this, true);
	    if (!this._useKeys) {
	      reversedSequence.valueSeq = function () { return this$1._iter.toSeq().reverse(); };
	    }
	    return reversedSequence;
	  };

	  ToKeyedSequence.prototype.map = function map (mapper, context) {
	    var this$1 = this;

	    var mappedSequence = mapFactory(this, mapper, context);
	    if (!this._useKeys) {
	      mappedSequence.valueSeq = function () { return this$1._iter.toSeq().map(mapper, context); };
	    }
	    return mappedSequence;
	  };

	  ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._iter.__iterate(function (v, k) { return fn(v, k, this$1); }, reverse);
	  };

	  ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {
	    return this._iter.__iterator(type, reverse);
	  };

	  return ToKeyedSequence;
	}(KeyedSeq));
	ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;

	var ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq$$1) {
	  function ToIndexedSequence(iter) {
	    this._iter = iter;
	    this.size = iter.size;
	  }

	  if ( IndexedSeq$$1 ) ToIndexedSequence.__proto__ = IndexedSeq$$1;
	  ToIndexedSequence.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );
	  ToIndexedSequence.prototype.constructor = ToIndexedSequence;

	  ToIndexedSequence.prototype.includes = function includes (value) {
	    return this._iter.includes(value);
	  };

	  ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    var i = 0;
	    reverse && ensureSize(this);
	    return this._iter.__iterate(
	      function (v) { return fn(v, reverse ? this$1.size - ++i : i++, this$1); },
	      reverse
	    );
	  };

	  ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {
	    var this$1 = this;

	    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	    var i = 0;
	    reverse && ensureSize(this);
	    return new Iterator(function () {
	      var step = iterator.next();
	      return step.done
	        ? step
	        : iteratorValue(
	            type,
	            reverse ? this$1.size - ++i : i++,
	            step.value,
	            step
	          );
	    });
	  };

	  return ToIndexedSequence;
	}(IndexedSeq));

	var ToSetSequence = /*@__PURE__*/(function (SetSeq$$1) {
	  function ToSetSequence(iter) {
	    this._iter = iter;
	    this.size = iter.size;
	  }

	  if ( SetSeq$$1 ) ToSetSequence.__proto__ = SetSeq$$1;
	  ToSetSequence.prototype = Object.create( SetSeq$$1 && SetSeq$$1.prototype );
	  ToSetSequence.prototype.constructor = ToSetSequence;

	  ToSetSequence.prototype.has = function has (key) {
	    return this._iter.includes(key);
	  };

	  ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._iter.__iterate(function (v) { return fn(v, v, this$1); }, reverse);
	  };

	  ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {
	    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	    return new Iterator(function () {
	      var step = iterator.next();
	      return step.done
	        ? step
	        : iteratorValue(type, step.value, step.value, step);
	    });
	  };

	  return ToSetSequence;
	}(SetSeq));

	var FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq$$1) {
	  function FromEntriesSequence(entries) {
	    this._iter = entries;
	    this.size = entries.size;
	  }

	  if ( KeyedSeq$$1 ) FromEntriesSequence.__proto__ = KeyedSeq$$1;
	  FromEntriesSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );
	  FromEntriesSequence.prototype.constructor = FromEntriesSequence;

	  FromEntriesSequence.prototype.entrySeq = function entrySeq () {
	    return this._iter.toSeq();
	  };

	  FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._iter.__iterate(function (entry) {
	      // Check if entry exists first so array access doesn't throw for holes
	      // in the parent iteration.
	      if (entry) {
	        validateEntry(entry);
	        var indexedCollection = isCollection(entry);
	        return fn(
	          indexedCollection ? entry.get(1) : entry[1],
	          indexedCollection ? entry.get(0) : entry[0],
	          this$1
	        );
	      }
	    }, reverse);
	  };

	  FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {
	    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	    return new Iterator(function () {
	      while (true) {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedCollection = isCollection(entry);
	          return iteratorValue(
	            type,
	            indexedCollection ? entry.get(0) : entry[0],
	            indexedCollection ? entry.get(1) : entry[1],
	            step
	          );
	        }
	      }
	    });
	  };

	  return FromEntriesSequence;
	}(KeyedSeq));

	ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;

	function flipFactory(collection) {
	  var flipSequence = makeSequence(collection);
	  flipSequence._iter = collection;
	  flipSequence.size = collection.size;
	  flipSequence.flip = function () { return collection; };
	  flipSequence.reverse = function() {
	    var reversedSequence = collection.reverse.apply(this); // super.reverse()
	    reversedSequence.flip = function () { return collection.reverse(); };
	    return reversedSequence;
	  };
	  flipSequence.has = function (key) { return collection.includes(key); };
	  flipSequence.includes = function (key) { return collection.has(key); };
	  flipSequence.cacheResult = cacheResultThrough;
	  flipSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    return collection.__iterate(function (v, k) { return fn(k, v, this$1) !== false; }, reverse);
	  };
	  flipSequence.__iteratorUncached = function(type, reverse) {
	    if (type === ITERATE_ENTRIES) {
	      var iterator = collection.__iterator(type, reverse);
	      return new Iterator(function () {
	        var step = iterator.next();
	        if (!step.done) {
	          var k = step.value[0];
	          step.value[0] = step.value[1];
	          step.value[1] = k;
	        }
	        return step;
	      });
	    }
	    return collection.__iterator(
	      type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	      reverse
	    );
	  };
	  return flipSequence;
	}

	function mapFactory(collection, mapper, context) {
	  var mappedSequence = makeSequence(collection);
	  mappedSequence.size = collection.size;
	  mappedSequence.has = function (key) { return collection.has(key); };
	  mappedSequence.get = function (key, notSetValue) {
	    var v = collection.get(key, NOT_SET);
	    return v === NOT_SET
	      ? notSetValue
	      : mapper.call(context, v, key, collection);
	  };
	  mappedSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    return collection.__iterate(
	      function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1) !== false; },
	      reverse
	    );
	  };
	  mappedSequence.__iteratorUncached = function(type, reverse) {
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    return new Iterator(function () {
	      var step = iterator.next();
	      if (step.done) {
	        return step;
	      }
	      var entry = step.value;
	      var key = entry[0];
	      return iteratorValue(
	        type,
	        key,
	        mapper.call(context, entry[1], key, collection),
	        step
	      );
	    });
	  };
	  return mappedSequence;
	}

	function reverseFactory(collection, useKeys) {
	  var this$1 = this;

	  var reversedSequence = makeSequence(collection);
	  reversedSequence._iter = collection;
	  reversedSequence.size = collection.size;
	  reversedSequence.reverse = function () { return collection; };
	  if (collection.flip) {
	    reversedSequence.flip = function() {
	      var flipSequence = flipFactory(collection);
	      flipSequence.reverse = function () { return collection.flip(); };
	      return flipSequence;
	    };
	  }
	  reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };
	  reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };
	  reversedSequence.includes = function (value) { return collection.includes(value); };
	  reversedSequence.cacheResult = cacheResultThrough;
	  reversedSequence.__iterate = function(fn, reverse) {
	    var this$1 = this;

	    var i = 0;
	    reverse && ensureSize(collection);
	    return collection.__iterate(
	      function (v, k) { return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1); },
	      !reverse
	    );
	  };
	  reversedSequence.__iterator = function (type, reverse) {
	    var i = 0;
	    reverse && ensureSize(collection);
	    var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);
	    return new Iterator(function () {
	      var step = iterator.next();
	      if (step.done) {
	        return step;
	      }
	      var entry = step.value;
	      return iteratorValue(
	        type,
	        useKeys ? entry[0] : reverse ? this$1.size - ++i : i++,
	        entry[1],
	        step
	      );
	    });
	  };
	  return reversedSequence;
	}

	function filterFactory(collection, predicate, context, useKeys) {
	  var filterSequence = makeSequence(collection);
	  if (useKeys) {
	    filterSequence.has = function (key) {
	      var v = collection.get(key, NOT_SET);
	      return v !== NOT_SET && !!predicate.call(context, v, key, collection);
	    };
	    filterSequence.get = function (key, notSetValue) {
	      var v = collection.get(key, NOT_SET);
	      return v !== NOT_SET && predicate.call(context, v, key, collection)
	        ? v
	        : notSetValue;
	    };
	  }
	  filterSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    var iterations = 0;
	    collection.__iterate(function (v, k, c) {
	      if (predicate.call(context, v, k, c)) {
	        iterations++;
	        return fn(v, useKeys ? k : iterations - 1, this$1);
	      }
	    }, reverse);
	    return iterations;
	  };
	  filterSequence.__iteratorUncached = function(type, reverse) {
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    var iterations = 0;
	    return new Iterator(function () {
	      while (true) {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        var value = entry[1];
	        if (predicate.call(context, value, key, collection)) {
	          return iteratorValue(type, useKeys ? key : iterations++, value, step);
	        }
	      }
	    });
	  };
	  return filterSequence;
	}

	function countByFactory(collection, grouper, context) {
	  var groups = Map$2().asMutable();
	  collection.__iterate(function (v, k) {
	    groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });
	  });
	  return groups.asImmutable();
	}

	function groupByFactory(collection, grouper, context) {
	  var isKeyedIter = isKeyed(collection);
	  var groups = (isOrdered(collection) ? OrderedMap() : Map$2()).asMutable();
	  collection.__iterate(function (v, k) {
	    groups.update(
	      grouper.call(context, v, k, collection),
	      function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }
	    );
	  });
	  var coerce = collectionClass(collection);
	  return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();
	}

	function sliceFactory(collection, begin, end, useKeys) {
	  var originalSize = collection.size;

	  if (wholeSlice(begin, end, originalSize)) {
	    return collection;
	  }

	  var resolvedBegin = resolveBegin(begin, originalSize);
	  var resolvedEnd = resolveEnd(end, originalSize);

	  // begin or end will be NaN if they were provided as negative numbers and
	  // this collection's size is unknown. In that case, cache first so there is
	  // a known size and these do not resolve to NaN.
	  if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	    return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);
	  }

	  // Note: resolvedEnd is undefined when the original sequence's length is
	  // unknown and this slice did not supply an end and should contain all
	  // elements after resolvedBegin.
	  // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	  var resolvedSize = resolvedEnd - resolvedBegin;
	  var sliceSize;
	  if (resolvedSize === resolvedSize) {
	    sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	  }

	  var sliceSeq = makeSequence(collection);

	  // If collection.size is undefined, the size of the realized sliceSeq is
	  // unknown at this point unless the number of items to slice is 0
	  sliceSeq.size =
	    sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;

	  if (!useKeys && isSeq(collection) && sliceSize >= 0) {
	    sliceSeq.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return index >= 0 && index < sliceSize
	        ? collection.get(index + resolvedBegin, notSetValue)
	        : notSetValue;
	    };
	  }

	  sliceSeq.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    if (sliceSize === 0) {
	      return 0;
	    }
	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var skipped = 0;
	    var isSkipping = true;
	    var iterations = 0;
	    collection.__iterate(function (v, k) {
	      if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	        iterations++;
	        return (
	          fn(v, useKeys ? k : iterations - 1, this$1) !== false &&
	          iterations !== sliceSize
	        );
	      }
	    });
	    return iterations;
	  };

	  sliceSeq.__iteratorUncached = function(type, reverse) {
	    if (sliceSize !== 0 && reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    // Don't bother instantiating parent iterator if taking 0.
	    if (sliceSize === 0) {
	      return new Iterator(iteratorDone);
	    }
	    var iterator = collection.__iterator(type, reverse);
	    var skipped = 0;
	    var iterations = 0;
	    return new Iterator(function () {
	      while (skipped++ < resolvedBegin) {
	        iterator.next();
	      }
	      if (++iterations > sliceSize) {
	        return iteratorDone();
	      }
	      var step = iterator.next();
	      if (useKeys || type === ITERATE_VALUES || step.done) {
	        return step;
	      }
	      if (type === ITERATE_KEYS) {
	        return iteratorValue(type, iterations - 1, undefined, step);
	      }
	      return iteratorValue(type, iterations - 1, step.value[1], step);
	    });
	  };

	  return sliceSeq;
	}

	function takeWhileFactory(collection, predicate, context) {
	  var takeSequence = makeSequence(collection);
	  takeSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var iterations = 0;
	    collection.__iterate(
	      function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1); }
	    );
	    return iterations;
	  };
	  takeSequence.__iteratorUncached = function(type, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    var iterating = true;
	    return new Iterator(function () {
	      if (!iterating) {
	        return iteratorDone();
	      }
	      var step = iterator.next();
	      if (step.done) {
	        return step;
	      }
	      var entry = step.value;
	      var k = entry[0];
	      var v = entry[1];
	      if (!predicate.call(context, v, k, this$1)) {
	        iterating = false;
	        return iteratorDone();
	      }
	      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
	    });
	  };
	  return takeSequence;
	}

	function skipWhileFactory(collection, predicate, context, useKeys) {
	  var skipSequence = makeSequence(collection);
	  skipSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var isSkipping = true;
	    var iterations = 0;
	    collection.__iterate(function (v, k, c) {
	      if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	        iterations++;
	        return fn(v, useKeys ? k : iterations - 1, this$1);
	      }
	    });
	    return iterations;
	  };
	  skipSequence.__iteratorUncached = function(type, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);
	    var skipping = true;
	    var iterations = 0;
	    return new Iterator(function () {
	      var step;
	      var k;
	      var v;
	      do {
	        step = iterator.next();
	        if (step.done) {
	          if (useKeys || type === ITERATE_VALUES) {
	            return step;
	          }
	          if (type === ITERATE_KEYS) {
	            return iteratorValue(type, iterations++, undefined, step);
	          }
	          return iteratorValue(type, iterations++, step.value[1], step);
	        }
	        var entry = step.value;
	        k = entry[0];
	        v = entry[1];
	        skipping && (skipping = predicate.call(context, v, k, this$1));
	      } while (skipping);
	      return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
	    });
	  };
	  return skipSequence;
	}

	function concatFactory(collection, values) {
	  var isKeyedCollection = isKeyed(collection);
	  var iters = [collection]
	    .concat(values)
	    .map(function (v) {
	      if (!isCollection(v)) {
	        v = isKeyedCollection
	          ? keyedSeqFromValue(v)
	          : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedCollection) {
	        v = KeyedCollection(v);
	      }
	      return v;
	    })
	    .filter(function (v) { return v.size !== 0; });

	  if (iters.length === 0) {
	    return collection;
	  }

	  if (iters.length === 1) {
	    var singleton = iters[0];
	    if (
	      singleton === collection ||
	      (isKeyedCollection && isKeyed(singleton)) ||
	      (isIndexed(collection) && isIndexed(singleton))
	    ) {
	      return singleton;
	    }
	  }

	  var concatSeq = new ArraySeq(iters);
	  if (isKeyedCollection) {
	    concatSeq = concatSeq.toKeyedSeq();
	  } else if (!isIndexed(collection)) {
	    concatSeq = concatSeq.toSetSeq();
	  }
	  concatSeq = concatSeq.flatten(true);
	  concatSeq.size = iters.reduce(function (sum, seq) {
	    if (sum !== undefined) {
	      var size = seq.size;
	      if (size !== undefined) {
	        return sum + size;
	      }
	    }
	  }, 0);
	  return concatSeq;
	}

	function flattenFactory(collection, depth, useKeys) {
	  var flatSequence = makeSequence(collection);
	  flatSequence.__iterateUncached = function(fn, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterate(fn, reverse);
	    }
	    var iterations = 0;
	    var stopped = false;
	    function flatDeep(iter, currentDepth) {
	      iter.__iterate(function (v, k) {
	        if ((!depth || currentDepth < depth) && isCollection(v)) {
	          flatDeep(v, currentDepth + 1);
	        } else {
	          iterations++;
	          if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {
	            stopped = true;
	          }
	        }
	        return !stopped;
	      }, reverse);
	    }
	    flatDeep(collection, 0);
	    return iterations;
	  };
	  flatSequence.__iteratorUncached = function(type, reverse) {
	    if (reverse) {
	      return this.cacheResult().__iterator(type, reverse);
	    }
	    var iterator = collection.__iterator(type, reverse);
	    var stack = [];
	    var iterations = 0;
	    return new Iterator(function () {
	      while (iterator) {
	        var step = iterator.next();
	        if (step.done !== false) {
	          iterator = stack.pop();
	          continue;
	        }
	        var v = step.value;
	        if (type === ITERATE_ENTRIES) {
	          v = v[1];
	        }
	        if ((!depth || stack.length < depth) && isCollection(v)) {
	          stack.push(iterator);
	          iterator = v.__iterator(type, reverse);
	        } else {
	          return useKeys ? step : iteratorValue(type, iterations++, v, step);
	        }
	      }
	      return iteratorDone();
	    });
	  };
	  return flatSequence;
	}

	function flatMapFactory(collection, mapper, context) {
	  var coerce = collectionClass(collection);
	  return collection
	    .toSeq()
	    .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })
	    .flatten(true);
	}

	function interposeFactory(collection, separator) {
	  var interposedSequence = makeSequence(collection);
	  interposedSequence.size = collection.size && collection.size * 2 - 1;
	  interposedSequence.__iterateUncached = function(fn, reverse) {
	    var this$1 = this;

	    var iterations = 0;
	    collection.__iterate(
	      function (v) { return (!iterations || fn(separator, iterations++, this$1) !== false) &&
	        fn(v, iterations++, this$1) !== false; },
	      reverse
	    );
	    return iterations;
	  };
	  interposedSequence.__iteratorUncached = function(type, reverse) {
	    var iterator = collection.__iterator(ITERATE_VALUES, reverse);
	    var iterations = 0;
	    var step;
	    return new Iterator(function () {
	      if (!step || iterations % 2) {
	        step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	      }
	      return iterations % 2
	        ? iteratorValue(type, iterations++, separator)
	        : iteratorValue(type, iterations++, step.value, step);
	    });
	  };
	  return interposedSequence;
	}

	function sortFactory(collection, comparator, mapper) {
	  if (!comparator) {
	    comparator = defaultComparator;
	  }
	  var isKeyedCollection = isKeyed(collection);
	  var index = 0;
	  var entries = collection
	    .toSeq()
	    .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })
	    .valueSeq()
	    .toArray();
	  entries.sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; }).forEach(
	    isKeyedCollection
	      ? function (v, i) {
	          entries[i].length = 2;
	        }
	      : function (v, i) {
	          entries[i] = v[1];
	        }
	  );
	  return isKeyedCollection
	    ? KeyedSeq(entries)
	    : isIndexed(collection)
	      ? IndexedSeq(entries)
	      : SetSeq(entries);
	}

	function maxFactory(collection, comparator, mapper) {
	  if (!comparator) {
	    comparator = defaultComparator;
	  }
	  if (mapper) {
	    var entry = collection
	      .toSeq()
	      .map(function (v, k) { return [v, mapper(v, k, collection)]; })
	      .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });
	    return entry && entry[0];
	  }
	  return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });
	}

	function maxCompare(comparator, a, b) {
	  var comp = comparator(b, a);
	  // b is considered the new max if the comparator declares them equal, but
	  // they are not equal and b is in fact a nullish value.
	  return (
	    (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||
	    comp > 0
	  );
	}

	function zipWithFactory(keyIter, zipper, iters, zipAll) {
	  var zipSequence = makeSequence(keyIter);
	  var sizes = new ArraySeq(iters).map(function (i) { return i.size; });
	  zipSequence.size = zipAll ? sizes.max() : sizes.min();
	  // Note: this a generic base implementation of __iterate in terms of
	  // __iterator which may be more generically useful in the future.
	  zipSequence.__iterate = function(fn, reverse) {
	    /* generic:
	    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	    var step;
	    var iterations = 0;
	    while (!(step = iterator.next()).done) {
	      iterations++;
	      if (fn(step.value[1], step.value[0], this) === false) {
	        break;
	      }
	    }
	    return iterations;
	    */
	    // indexed:
	    var iterator = this.__iterator(ITERATE_VALUES, reverse);
	    var step;
	    var iterations = 0;
	    while (!(step = iterator.next()).done) {
	      if (fn(step.value, iterations++, this) === false) {
	        break;
	      }
	    }
	    return iterations;
	  };
	  zipSequence.__iteratorUncached = function(type, reverse) {
	    var iterators = iters.map(
	      function (i) { return ((i = Collection$1(i)), getIterator(reverse ? i.reverse() : i)); }
	    );
	    var iterations = 0;
	    var isDone = false;
	    return new Iterator(function () {
	      var steps;
	      if (!isDone) {
	        steps = iterators.map(function (i) { return i.next(); });
	        isDone = zipAll ? steps.every(function (s) { return s.done; }) : steps.some(function (s) { return s.done; });
	      }
	      if (isDone) {
	        return iteratorDone();
	      }
	      return iteratorValue(
	        type,
	        iterations++,
	        zipper.apply(null, steps.map(function (s) { return s.value; }))
	      );
	    });
	  };
	  return zipSequence;
	}

	// #pragma Helper Functions

	function reify(iter, seq) {
	  return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);
	}

	function validateEntry(entry) {
	  if (entry !== Object(entry)) {
	    throw new TypeError('Expected [K, V] tuple: ' + entry);
	  }
	}

	function collectionClass(collection) {
	  return isKeyed(collection)
	    ? KeyedCollection
	    : isIndexed(collection)
	      ? IndexedCollection
	      : SetCollection;
	}

	function makeSequence(collection) {
	  return Object.create(
	    (isKeyed(collection)
	      ? KeyedSeq
	      : isIndexed(collection)
	        ? IndexedSeq
	        : SetSeq
	    ).prototype
	  );
	}

	function cacheResultThrough() {
	  if (this._iter.cacheResult) {
	    this._iter.cacheResult();
	    this.size = this._iter.size;
	    return this;
	  }
	  return Seq.prototype.cacheResult.call(this);
	}

	function defaultComparator(a, b) {
	  if (a === undefined && b === undefined) {
	    return 0;
	  }

	  if (a === undefined) {
	    return 1;
	  }

	  if (b === undefined) {
	    return -1;
	  }

	  return a > b ? 1 : a < b ? -1 : 0;
	}

	// http://jsperf.com/copy-array-inline
	function arrCopy(arr, offset) {
	  offset = offset || 0;
	  var len = Math.max(0, arr.length - offset);
	  var newArr = new Array(len);
	  for (var ii = 0; ii < len; ii++) {
	    newArr[ii] = arr[ii + offset];
	  }
	  return newArr;
	}

	function invariant$3(condition, error) {
	  if (!condition) { throw new Error(error); }
	}

	function assertNotInfinite(size) {
	  invariant$3(
	    size !== Infinity,
	    'Cannot perform this action with an infinite size.'
	  );
	}

	function coerceKeyPath(keyPath) {
	  if (isArrayLike(keyPath) && typeof keyPath !== 'string') {
	    return keyPath;
	  }
	  if (isOrdered(keyPath)) {
	    return keyPath.toArray();
	  }
	  throw new TypeError(
	    'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath
	  );
	}

	function isPlainObj(value) {
	  return (
	    value &&
	    (typeof value.constructor !== 'function' ||
	      value.constructor.name === 'Object')
	  );
	}

	/**
	 * Returns true if the value is a potentially-persistent data structure, either
	 * provided by Immutable.js or a plain Array or Object.
	 */
	function isDataStructure(value) {
	  return (
	    typeof value === 'object' &&
	    (isImmutable(value) || Array.isArray(value) || isPlainObj(value))
	  );
	}

	/**
	 * Converts a value to a string, adding quotes if a string was provided.
	 */
	function quoteString(value) {
	  try {
	    return typeof value === 'string' ? JSON.stringify(value) : String(value);
	  } catch (_ignoreError) {
	    return JSON.stringify(value);
	  }
	}

	function has$2(collection, key) {
	  return isImmutable(collection)
	    ? collection.has(key)
	    : isDataStructure(collection) && hasOwnProperty$7.call(collection, key);
	}

	function get$1(collection, key, notSetValue) {
	  return isImmutable(collection)
	    ? collection.get(key, notSetValue)
	    : !has$2(collection, key)
	      ? notSetValue
	      : typeof collection.get === 'function'
	        ? collection.get(key)
	        : collection[key];
	}

	function shallowCopy(from) {
	  if (Array.isArray(from)) {
	    return arrCopy(from);
	  }
	  var to = {};
	  for (var key in from) {
	    if (hasOwnProperty$7.call(from, key)) {
	      to[key] = from[key];
	    }
	  }
	  return to;
	}

	function remove(collection, key) {
	  if (!isDataStructure(collection)) {
	    throw new TypeError(
	      'Cannot update non-data-structure value: ' + collection
	    );
	  }
	  if (isImmutable(collection)) {
	    if (!collection.remove) {
	      throw new TypeError(
	        'Cannot update immutable value without .remove() method: ' + collection
	      );
	    }
	    return collection.remove(key);
	  }
	  if (!hasOwnProperty$7.call(collection, key)) {
	    return collection;
	  }
	  var collectionCopy = shallowCopy(collection);
	  if (Array.isArray(collectionCopy)) {
	    collectionCopy.splice(key, 1);
	  } else {
	    delete collectionCopy[key];
	  }
	  return collectionCopy;
	}

	function set$1(collection, key, value) {
	  if (!isDataStructure(collection)) {
	    throw new TypeError(
	      'Cannot update non-data-structure value: ' + collection
	    );
	  }
	  if (isImmutable(collection)) {
	    if (!collection.set) {
	      throw new TypeError(
	        'Cannot update immutable value without .set() method: ' + collection
	      );
	    }
	    return collection.set(key, value);
	  }
	  if (hasOwnProperty$7.call(collection, key) && value === collection[key]) {
	    return collection;
	  }
	  var collectionCopy = shallowCopy(collection);
	  collectionCopy[key] = value;
	  return collectionCopy;
	}

	function updateIn(collection, keyPath, notSetValue, updater) {
	  if (!updater) {
	    updater = notSetValue;
	    notSetValue = undefined;
	  }
	  var updatedValue = updateInDeeply(
	    isImmutable(collection),
	    collection,
	    coerceKeyPath(keyPath),
	    0,
	    notSetValue,
	    updater
	  );
	  return updatedValue === NOT_SET ? notSetValue : updatedValue;
	}

	function updateInDeeply(
	  inImmutable,
	  existing,
	  keyPath,
	  i,
	  notSetValue,
	  updater
	) {
	  var wasNotSet = existing === NOT_SET;
	  if (i === keyPath.length) {
	    var existingValue = wasNotSet ? notSetValue : existing;
	    var newValue = updater(existingValue);
	    return newValue === existingValue ? existing : newValue;
	  }
	  if (!wasNotSet && !isDataStructure(existing)) {
	    throw new TypeError(
	      'Cannot update within non-data-structure value in path [' +
	        keyPath.slice(0, i).map(quoteString) +
	        ']: ' +
	        existing
	    );
	  }
	  var key = keyPath[i];
	  var nextExisting = wasNotSet ? NOT_SET : get$1(existing, key, NOT_SET);
	  var nextUpdated = updateInDeeply(
	    nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),
	    nextExisting,
	    keyPath,
	    i + 1,
	    notSetValue,
	    updater
	  );
	  return nextUpdated === nextExisting
	    ? existing
	    : nextUpdated === NOT_SET
	      ? remove(existing, key)
	      : set$1(
	          wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,
	          key,
	          nextUpdated
	        );
	}

	function setIn(collection, keyPath, value) {
	  return updateIn(collection, keyPath, NOT_SET, function () { return value; });
	}

	function setIn$1(keyPath, v) {
	  return setIn(this, keyPath, v);
	}

	function removeIn(collection, keyPath) {
	  return updateIn(collection, keyPath, function () { return NOT_SET; });
	}

	function deleteIn(keyPath) {
	  return removeIn(this, keyPath);
	}

	function update$1(collection, key, notSetValue, updater) {
	  return updateIn(collection, [key], notSetValue, updater);
	}

	function update$1$1(key, notSetValue, updater) {
	  return arguments.length === 1
	    ? key(this)
	    : update$1(this, key, notSetValue, updater);
	}

	function updateIn$1(keyPath, notSetValue, updater) {
	  return updateIn(this, keyPath, notSetValue, updater);
	}

	function merge() {
	  var iters = [], len = arguments.length;
	  while ( len-- ) iters[ len ] = arguments[ len ];

	  return mergeIntoKeyedWith(this, iters);
	}

	function mergeWith(merger) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  if (typeof merger !== 'function') {
	    throw new TypeError('Invalid merger function: ' + merger);
	  }
	  return mergeIntoKeyedWith(this, iters, merger);
	}

	function mergeIntoKeyedWith(collection, collections, merger) {
	  var iters = [];
	  for (var ii = 0; ii < collections.length; ii++) {
	    var collection$1 = KeyedCollection(collections[ii]);
	    if (collection$1.size !== 0) {
	      iters.push(collection$1);
	    }
	  }
	  if (iters.length === 0) {
	    return collection;
	  }
	  if (
	    collection.toSeq().size === 0 &&
	    !collection.__ownerID &&
	    iters.length === 1
	  ) {
	    return collection.constructor(iters[0]);
	  }
	  return collection.withMutations(function (collection) {
	    var mergeIntoCollection = merger
	      ? function (value, key) {
	          update$1(
	            collection,
	            key,
	            NOT_SET,
	            function (oldVal) { return (oldVal === NOT_SET ? value : merger(oldVal, value, key)); }
	          );
	        }
	      : function (value, key) {
	          collection.set(key, value);
	        };
	    for (var ii = 0; ii < iters.length; ii++) {
	      iters[ii].forEach(mergeIntoCollection);
	    }
	  });
	}

	function merge$1(collection) {
	  var sources = [], len = arguments.length - 1;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];

	  return mergeWithSources(collection, sources);
	}

	function mergeWith$1(merger, collection) {
	  var sources = [], len = arguments.length - 2;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];

	  return mergeWithSources(collection, sources, merger);
	}

	function mergeDeep(collection) {
	  var sources = [], len = arguments.length - 1;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];

	  return mergeDeepWithSources(collection, sources);
	}

	function mergeDeepWith(merger, collection) {
	  var sources = [], len = arguments.length - 2;
	  while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];

	  return mergeDeepWithSources(collection, sources, merger);
	}

	function mergeDeepWithSources(collection, sources, merger) {
	  return mergeWithSources(collection, sources, deepMergerWith(merger));
	}

	function mergeWithSources(collection, sources, merger) {
	  if (!isDataStructure(collection)) {
	    throw new TypeError(
	      'Cannot merge into non-data-structure value: ' + collection
	    );
	  }
	  if (isImmutable(collection)) {
	    return typeof merger === 'function' && collection.mergeWith
	      ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))
	      : collection.merge
	        ? collection.merge.apply(collection, sources)
	        : collection.concat.apply(collection, sources);
	  }
	  var isArray = Array.isArray(collection);
	  var merged = collection;
	  var Collection$$1 = isArray ? IndexedCollection : KeyedCollection;
	  var mergeItem = isArray
	    ? function (value) {
	        // Copy on write
	        if (merged === collection) {
	          merged = shallowCopy(merged);
	        }
	        merged.push(value);
	      }
	    : function (value, key) {
	        var hasVal = hasOwnProperty$7.call(merged, key);
	        var nextVal =
	          hasVal && merger ? merger(merged[key], value, key) : value;
	        if (!hasVal || nextVal !== merged[key]) {
	          // Copy on write
	          if (merged === collection) {
	            merged = shallowCopy(merged);
	          }
	          merged[key] = nextVal;
	        }
	      };
	  for (var i = 0; i < sources.length; i++) {
	    Collection$$1(sources[i]).forEach(mergeItem);
	  }
	  return merged;
	}

	function deepMergerWith(merger) {
	  function deepMerger(oldValue, newValue, key) {
	    return isDataStructure(oldValue) && isDataStructure(newValue)
	      ? mergeWithSources(oldValue, [newValue], deepMerger)
	      : merger
	        ? merger(oldValue, newValue, key)
	        : newValue;
	  }
	  return deepMerger;
	}

	function mergeDeep$1() {
	  var iters = [], len = arguments.length;
	  while ( len-- ) iters[ len ] = arguments[ len ];

	  return mergeDeepWithSources(this, iters);
	}

	function mergeDeepWith$1(merger) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  return mergeDeepWithSources(this, iters, merger);
	}

	function mergeIn(keyPath) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });
	}

	function mergeDeepIn(keyPath) {
	  var iters = [], len = arguments.length - 1;
	  while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];

	  return updateIn(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }
	  );
	}

	function withMutations(fn) {
	  var mutable = this.asMutable();
	  fn(mutable);
	  return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	}

	function asMutable() {
	  return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	}

	function asImmutable() {
	  return this.__ensureOwner();
	}

	function wasAltered() {
	  return this.__altered;
	}

	var Map$2 = /*@__PURE__*/(function (KeyedCollection$$1) {
	  function Map(value) {
	    return value === null || value === undefined
	      ? emptyMap()
	      : isMap(value) && !isOrdered(value)
	        ? value
	        : emptyMap().withMutations(function (map) {
	            var iter = KeyedCollection$$1(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v, k) { return map.set(k, v); });
	          });
	  }

	  if ( KeyedCollection$$1 ) Map.__proto__ = KeyedCollection$$1;
	  Map.prototype = Object.create( KeyedCollection$$1 && KeyedCollection$$1.prototype );
	  Map.prototype.constructor = Map;

	  Map.of = function of () {
	    var keyValues = [], len = arguments.length;
	    while ( len-- ) keyValues[ len ] = arguments[ len ];

	    return emptyMap().withMutations(function (map) {
	      for (var i = 0; i < keyValues.length; i += 2) {
	        if (i + 1 >= keyValues.length) {
	          throw new Error('Missing value for key: ' + keyValues[i]);
	        }
	        map.set(keyValues[i], keyValues[i + 1]);
	      }
	    });
	  };

	  Map.prototype.toString = function toString () {
	    return this.__toString('Map {', '}');
	  };

	  // @pragma Access

	  Map.prototype.get = function get (k, notSetValue) {
	    return this._root
	      ? this._root.get(0, undefined, k, notSetValue)
	      : notSetValue;
	  };

	  // @pragma Modification

	  Map.prototype.set = function set (k, v) {
	    return updateMap(this, k, v);
	  };

	  Map.prototype.remove = function remove (k) {
	    return updateMap(this, k, NOT_SET);
	  };

	  Map.prototype.deleteAll = function deleteAll (keys) {
	    var collection = Collection$1(keys);

	    if (collection.size === 0) {
	      return this;
	    }

	    return this.withMutations(function (map) {
	      collection.forEach(function (key) { return map.remove(key); });
	    });
	  };

	  Map.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = 0;
	      this._root = null;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return emptyMap();
	  };

	  // @pragma Composition

	  Map.prototype.sort = function sort (comparator) {
	    // Late binding
	    return OrderedMap(sortFactory(this, comparator));
	  };

	  Map.prototype.sortBy = function sortBy (mapper, comparator) {
	    // Late binding
	    return OrderedMap(sortFactory(this, comparator, mapper));
	  };

	  Map.prototype.map = function map (mapper, context) {
	    return this.withMutations(function (map) {
	      map.forEach(function (value, key) {
	        map.set(key, mapper.call(context, value, key, map));
	      });
	    });
	  };

	  // @pragma Mutability

	  Map.prototype.__iterator = function __iterator (type, reverse) {
	    return new MapIterator(this, type, reverse);
	  };

	  Map.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    var iterations = 0;
	    this._root &&
	      this._root.iterate(function (entry) {
	        iterations++;
	        return fn(entry[1], entry[0], this$1);
	      }, reverse);
	    return iterations;
	  };

	  Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyMap();
	      }
	      this.__ownerID = ownerID;
	      this.__altered = false;
	      return this;
	    }
	    return makeMap(this.size, this._root, ownerID, this.__hash);
	  };

	  return Map;
	}(KeyedCollection));

	Map$2.isMap = isMap;

	var MapPrototype = Map$2.prototype;
	MapPrototype[IS_MAP_SYMBOL] = true;
	MapPrototype[DELETE] = MapPrototype.remove;
	MapPrototype.removeAll = MapPrototype.deleteAll;
	MapPrototype.setIn = setIn$1;
	MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;
	MapPrototype.update = update$1$1;
	MapPrototype.updateIn = updateIn$1;
	MapPrototype.merge = MapPrototype.concat = merge;
	MapPrototype.mergeWith = mergeWith;
	MapPrototype.mergeDeep = mergeDeep$1;
	MapPrototype.mergeDeepWith = mergeDeepWith$1;
	MapPrototype.mergeIn = mergeIn;
	MapPrototype.mergeDeepIn = mergeDeepIn;
	MapPrototype.withMutations = withMutations;
	MapPrototype.wasAltered = wasAltered;
	MapPrototype.asImmutable = asImmutable;
	MapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;
	MapPrototype['@@transducer/step'] = function(result, arr) {
	  return result.set(arr[0], arr[1]);
	};
	MapPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	// #pragma Trie Nodes

	var ArrayMapNode = function ArrayMapNode(ownerID, entries) {
	  this.ownerID = ownerID;
	  this.entries = entries;
	};

	ArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  var entries = this.entries;
	  for (var ii = 0, len = entries.length; ii < len; ii++) {
	    if (is$2(key, entries[ii][0])) {
	      return entries[ii][1];
	    }
	  }
	  return notSetValue;
	};

	ArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  var removed = value === NOT_SET;

	  var entries = this.entries;
	  var idx = 0;
	  var len = entries.length;
	  for (; idx < len; idx++) {
	    if (is$2(key, entries[idx][0])) {
	      break;
	    }
	  }
	  var exists = idx < len;

	  if (exists ? entries[idx][1] === value : removed) {
	    return this;
	  }

	  SetRef(didAlter);
	  (removed || !exists) && SetRef(didChangeSize);

	  if (removed && entries.length === 1) {
	    return; // undefined
	  }

	  if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	    return createNodes(ownerID, entries, key, value);
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newEntries = isEditable ? entries : arrCopy(entries);

	  if (exists) {
	    if (removed) {
	      idx === len - 1
	        ? newEntries.pop()
	        : (newEntries[idx] = newEntries.pop());
	    } else {
	      newEntries[idx] = [key, value];
	    }
	  } else {
	    newEntries.push([key, value]);
	  }

	  if (isEditable) {
	    this.entries = newEntries;
	    return this;
	  }

	  return new ArrayMapNode(ownerID, newEntries);
	};

	var BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {
	  this.ownerID = ownerID;
	  this.bitmap = bitmap;
	  this.nodes = nodes;
	};

	BitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
	  var bitmap = this.bitmap;
	  return (bitmap & bit) === 0
	    ? notSetValue
	    : this.nodes[popCount(bitmap & (bit - 1))].get(
	        shift + SHIFT,
	        keyHash,
	        key,
	        notSetValue
	      );
	};

	BitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	  var bit = 1 << keyHashFrag;
	  var bitmap = this.bitmap;
	  var exists = (bitmap & bit) !== 0;

	  if (!exists && value === NOT_SET) {
	    return this;
	  }

	  var idx = popCount(bitmap & (bit - 1));
	  var nodes = this.nodes;
	  var node = exists ? nodes[idx] : undefined;
	  var newNode = updateNode(
	    node,
	    ownerID,
	    shift + SHIFT,
	    keyHash,
	    key,
	    value,
	    didChangeSize,
	    didAlter
	  );

	  if (newNode === node) {
	    return this;
	  }

	  if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	    return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	  }

	  if (
	    exists &&
	    !newNode &&
	    nodes.length === 2 &&
	    isLeafNode(nodes[idx ^ 1])
	  ) {
	    return nodes[idx ^ 1];
	  }

	  if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	    return newNode;
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;
	  var newNodes = exists
	    ? newNode
	      ? setAt(nodes, idx, newNode, isEditable)
	      : spliceOut(nodes, idx, isEditable)
	    : spliceIn(nodes, idx, newNode, isEditable);

	  if (isEditable) {
	    this.bitmap = newBitmap;
	    this.nodes = newNodes;
	    return this;
	  }

	  return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	};

	var HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {
	  this.ownerID = ownerID;
	  this.count = count;
	  this.nodes = nodes;
	};

	HashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	  var node = this.nodes[idx];
	  return node
	    ? node.get(shift + SHIFT, keyHash, key, notSetValue)
	    : notSetValue;
	};

	HashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }
	  var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	  var removed = value === NOT_SET;
	  var nodes = this.nodes;
	  var node = nodes[idx];

	  if (removed && !node) {
	    return this;
	  }

	  var newNode = updateNode(
	    node,
	    ownerID,
	    shift + SHIFT,
	    keyHash,
	    key,
	    value,
	    didChangeSize,
	    didAlter
	  );
	  if (newNode === node) {
	    return this;
	  }

	  var newCount = this.count;
	  if (!node) {
	    newCount++;
	  } else if (!newNode) {
	    newCount--;
	    if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	      return packNodes(ownerID, nodes, newCount, idx);
	    }
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newNodes = setAt(nodes, idx, newNode, isEditable);

	  if (isEditable) {
	    this.count = newCount;
	    this.nodes = newNodes;
	    return this;
	  }

	  return new HashArrayMapNode(ownerID, newCount, newNodes);
	};

	var HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {
	  this.ownerID = ownerID;
	  this.keyHash = keyHash;
	  this.entries = entries;
	};

	HashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  var entries = this.entries;
	  for (var ii = 0, len = entries.length; ii < len; ii++) {
	    if (is$2(key, entries[ii][0])) {
	      return entries[ii][1];
	    }
	  }
	  return notSetValue;
	};

	HashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  if (keyHash === undefined) {
	    keyHash = hash(key);
	  }

	  var removed = value === NOT_SET;

	  if (keyHash !== this.keyHash) {
	    if (removed) {
	      return this;
	    }
	    SetRef(didAlter);
	    SetRef(didChangeSize);
	    return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	  }

	  var entries = this.entries;
	  var idx = 0;
	  var len = entries.length;
	  for (; idx < len; idx++) {
	    if (is$2(key, entries[idx][0])) {
	      break;
	    }
	  }
	  var exists = idx < len;

	  if (exists ? entries[idx][1] === value : removed) {
	    return this;
	  }

	  SetRef(didAlter);
	  (removed || !exists) && SetRef(didChangeSize);

	  if (removed && len === 2) {
	    return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	  }

	  var isEditable = ownerID && ownerID === this.ownerID;
	  var newEntries = isEditable ? entries : arrCopy(entries);

	  if (exists) {
	    if (removed) {
	      idx === len - 1
	        ? newEntries.pop()
	        : (newEntries[idx] = newEntries.pop());
	    } else {
	      newEntries[idx] = [key, value];
	    }
	  } else {
	    newEntries.push([key, value]);
	  }

	  if (isEditable) {
	    this.entries = newEntries;
	    return this;
	  }

	  return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	};

	var ValueNode = function ValueNode(ownerID, keyHash, entry) {
	  this.ownerID = ownerID;
	  this.keyHash = keyHash;
	  this.entry = entry;
	};

	ValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {
	  return is$2(key, this.entry[0]) ? this.entry[1] : notSetValue;
	};

	ValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	  var removed = value === NOT_SET;
	  var keyMatch = is$2(key, this.entry[0]);
	  if (keyMatch ? value === this.entry[1] : removed) {
	    return this;
	  }

	  SetRef(didAlter);

	  if (removed) {
	    SetRef(didChangeSize);
	    return; // undefined
	  }

	  if (keyMatch) {
	    if (ownerID && ownerID === this.ownerID) {
	      this.entry[1] = value;
	      return this;
	    }
	    return new ValueNode(ownerID, this.keyHash, [key, value]);
	  }

	  SetRef(didChangeSize);
	  return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	};

	// #pragma Iterators

	ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function(
	  fn,
	  reverse
	) {
	  var entries = this.entries;
	  for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	    if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	      return false;
	    }
	  }
	};

	BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function(
	  fn,
	  reverse
	) {
	  var nodes = this.nodes;
	  for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	    var node = nodes[reverse ? maxIndex - ii : ii];
	    if (node && node.iterate(fn, reverse) === false) {
	      return false;
	    }
	  }
	};

	// eslint-disable-next-line no-unused-vars
	ValueNode.prototype.iterate = function(fn, reverse) {
	  return fn(this.entry);
	};

	var MapIterator = /*@__PURE__*/(function (Iterator$$1) {
	  function MapIterator(map, type, reverse) {
	    this._type = type;
	    this._reverse = reverse;
	    this._stack = map._root && mapIteratorFrame(map._root);
	  }

	  if ( Iterator$$1 ) MapIterator.__proto__ = Iterator$$1;
	  MapIterator.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );
	  MapIterator.prototype.constructor = MapIterator;

	  MapIterator.prototype.next = function next () {
	    var type = this._type;
	    var stack = this._stack;
	    while (stack) {
	      var node = stack.node;
	      var index = stack.index++;
	      var maxIndex = (void 0);
	      if (node.entry) {
	        if (index === 0) {
	          return mapIteratorValue(type, node.entry);
	        }
	      } else if (node.entries) {
	        maxIndex = node.entries.length - 1;
	        if (index <= maxIndex) {
	          return mapIteratorValue(
	            type,
	            node.entries[this._reverse ? maxIndex - index : index]
	          );
	        }
	      } else {
	        maxIndex = node.nodes.length - 1;
	        if (index <= maxIndex) {
	          var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	          if (subNode) {
	            if (subNode.entry) {
	              return mapIteratorValue(type, subNode.entry);
	            }
	            stack = this._stack = mapIteratorFrame(subNode, stack);
	          }
	          continue;
	        }
	      }
	      stack = this._stack = this._stack.__prev;
	    }
	    return iteratorDone();
	  };

	  return MapIterator;
	}(Iterator));

	function mapIteratorValue(type, entry) {
	  return iteratorValue(type, entry[0], entry[1]);
	}

	function mapIteratorFrame(node, prev) {
	  return {
	    node: node,
	    index: 0,
	    __prev: prev,
	  };
	}

	function makeMap(size, root, ownerID, hash$$1) {
	  var map = Object.create(MapPrototype);
	  map.size = size;
	  map._root = root;
	  map.__ownerID = ownerID;
	  map.__hash = hash$$1;
	  map.__altered = false;
	  return map;
	}

	var EMPTY_MAP;
	function emptyMap() {
	  return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	}

	function updateMap(map, k, v) {
	  var newRoot;
	  var newSize;
	  if (!map._root) {
	    if (v === NOT_SET) {
	      return map;
	    }
	    newSize = 1;
	    newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	  } else {
	    var didChangeSize = MakeRef();
	    var didAlter = MakeRef();
	    newRoot = updateNode(
	      map._root,
	      map.__ownerID,
	      0,
	      undefined,
	      k,
	      v,
	      didChangeSize,
	      didAlter
	    );
	    if (!didAlter.value) {
	      return map;
	    }
	    newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);
	  }
	  if (map.__ownerID) {
	    map.size = newSize;
	    map._root = newRoot;
	    map.__hash = undefined;
	    map.__altered = true;
	    return map;
	  }
	  return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	}

	function updateNode(
	  node,
	  ownerID,
	  shift,
	  keyHash,
	  key,
	  value,
	  didChangeSize,
	  didAlter
	) {
	  if (!node) {
	    if (value === NOT_SET) {
	      return node;
	    }
	    SetRef(didAlter);
	    SetRef(didChangeSize);
	    return new ValueNode(ownerID, keyHash, [key, value]);
	  }
	  return node.update(
	    ownerID,
	    shift,
	    keyHash,
	    key,
	    value,
	    didChangeSize,
	    didAlter
	  );
	}

	function isLeafNode(node) {
	  return (
	    node.constructor === ValueNode || node.constructor === HashCollisionNode
	  );
	}

	function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	  if (node.keyHash === keyHash) {
	    return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	  }

	  var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	  var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	  var newNode;
	  var nodes =
	    idx1 === idx2
	      ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]
	      : ((newNode = new ValueNode(ownerID, keyHash, entry)),
	        idx1 < idx2 ? [node, newNode] : [newNode, node]);

	  return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	}

	function createNodes(ownerID, entries, key, value) {
	  if (!ownerID) {
	    ownerID = new OwnerID();
	  }
	  var node = new ValueNode(ownerID, hash(key), [key, value]);
	  for (var ii = 0; ii < entries.length; ii++) {
	    var entry = entries[ii];
	    node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	  }
	  return node;
	}

	function packNodes(ownerID, nodes, count, excluding) {
	  var bitmap = 0;
	  var packedII = 0;
	  var packedNodes = new Array(count);
	  for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	    var node = nodes[ii];
	    if (node !== undefined && ii !== excluding) {
	      bitmap |= bit;
	      packedNodes[packedII++] = node;
	    }
	  }
	  return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	}

	function expandNodes(ownerID, nodes, bitmap, including, node) {
	  var count = 0;
	  var expandedNodes = new Array(SIZE);
	  for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	    expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	  }
	  expandedNodes[including] = node;
	  return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	}

	function popCount(x) {
	  x -= (x >> 1) & 0x55555555;
	  x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	  x = (x + (x >> 4)) & 0x0f0f0f0f;
	  x += x >> 8;
	  x += x >> 16;
	  return x & 0x7f;
	}

	function setAt(array, idx, val, canEdit) {
	  var newArray = canEdit ? array : arrCopy(array);
	  newArray[idx] = val;
	  return newArray;
	}

	function spliceIn(array, idx, val, canEdit) {
	  var newLen = array.length + 1;
	  if (canEdit && idx + 1 === newLen) {
	    array[idx] = val;
	    return array;
	  }
	  var newArray = new Array(newLen);
	  var after = 0;
	  for (var ii = 0; ii < newLen; ii++) {
	    if (ii === idx) {
	      newArray[ii] = val;
	      after = -1;
	    } else {
	      newArray[ii] = array[ii + after];
	    }
	  }
	  return newArray;
	}

	function spliceOut(array, idx, canEdit) {
	  var newLen = array.length - 1;
	  if (canEdit && idx === newLen) {
	    array.pop();
	    return array;
	  }
	  var newArray = new Array(newLen);
	  var after = 0;
	  for (var ii = 0; ii < newLen; ii++) {
	    if (ii === idx) {
	      after = 1;
	    }
	    newArray[ii] = array[ii + after];
	  }
	  return newArray;
	}

	var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

	var IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';

	function isList(maybeList) {
	  return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);
	}

	var List = /*@__PURE__*/(function (IndexedCollection$$1) {
	  function List(value) {
	    var empty = emptyList();
	    if (value === null || value === undefined) {
	      return empty;
	    }
	    if (isList(value)) {
	      return value;
	    }
	    var iter = IndexedCollection$$1(value);
	    var size = iter.size;
	    if (size === 0) {
	      return empty;
	    }
	    assertNotInfinite(size);
	    if (size > 0 && size < SIZE) {
	      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	    }
	    return empty.withMutations(function (list) {
	      list.setSize(size);
	      iter.forEach(function (v, i) { return list.set(i, v); });
	    });
	  }

	  if ( IndexedCollection$$1 ) List.__proto__ = IndexedCollection$$1;
	  List.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );
	  List.prototype.constructor = List;

	  List.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  List.prototype.toString = function toString () {
	    return this.__toString('List [', ']');
	  };

	  // @pragma Access

	  List.prototype.get = function get (index, notSetValue) {
	    index = wrapIndex(this, index);
	    if (index >= 0 && index < this.size) {
	      index += this._origin;
	      var node = listNodeFor(this, index);
	      return node && node.array[index & MASK];
	    }
	    return notSetValue;
	  };

	  // @pragma Modification

	  List.prototype.set = function set (index, value) {
	    return updateList(this, index, value);
	  };

	  List.prototype.remove = function remove (index) {
	    return !this.has(index)
	      ? this
	      : index === 0
	        ? this.shift()
	        : index === this.size - 1
	          ? this.pop()
	          : this.splice(index, 1);
	  };

	  List.prototype.insert = function insert (index, value) {
	    return this.splice(index, 0, value);
	  };

	  List.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = this._origin = this._capacity = 0;
	      this._level = SHIFT;
	      this._root = this._tail = null;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return emptyList();
	  };

	  List.prototype.push = function push (/*...values*/) {
	    var values = arguments;
	    var oldSize = this.size;
	    return this.withMutations(function (list) {
	      setListBounds(list, 0, oldSize + values.length);
	      for (var ii = 0; ii < values.length; ii++) {
	        list.set(oldSize + ii, values[ii]);
	      }
	    });
	  };

	  List.prototype.pop = function pop () {
	    return setListBounds(this, 0, -1);
	  };

	  List.prototype.unshift = function unshift (/*...values*/) {
	    var values = arguments;
	    return this.withMutations(function (list) {
	      setListBounds(list, -values.length);
	      for (var ii = 0; ii < values.length; ii++) {
	        list.set(ii, values[ii]);
	      }
	    });
	  };

	  List.prototype.shift = function shift () {
	    return setListBounds(this, 1);
	  };

	  // @pragma Composition

	  List.prototype.concat = function concat (/*...collections*/) {
	    var arguments$1 = arguments;

	    var seqs = [];
	    for (var i = 0; i < arguments.length; i++) {
	      var argument = arguments$1[i];
	      var seq = IndexedCollection$$1(
	        typeof argument !== 'string' && hasIterator(argument)
	          ? argument
	          : [argument]
	      );
	      if (seq.size !== 0) {
	        seqs.push(seq);
	      }
	    }
	    if (seqs.length === 0) {
	      return this;
	    }
	    if (this.size === 0 && !this.__ownerID && seqs.length === 1) {
	      return this.constructor(seqs[0]);
	    }
	    return this.withMutations(function (list) {
	      seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });
	    });
	  };

	  List.prototype.setSize = function setSize (size) {
	    return setListBounds(this, 0, size);
	  };

	  List.prototype.map = function map (mapper, context) {
	    var this$1 = this;

	    return this.withMutations(function (list) {
	      for (var i = 0; i < this$1.size; i++) {
	        list.set(i, mapper.call(context, list.get(i), i, list));
	      }
	    });
	  };

	  // @pragma Iteration

	  List.prototype.slice = function slice (begin, end) {
	    var size = this.size;
	    if (wholeSlice(begin, end, size)) {
	      return this;
	    }
	    return setListBounds(
	      this,
	      resolveBegin(begin, size),
	      resolveEnd(end, size)
	    );
	  };

	  List.prototype.__iterator = function __iterator (type, reverse) {
	    var index = reverse ? this.size : 0;
	    var values = iterateList(this, reverse);
	    return new Iterator(function () {
	      var value = values();
	      return value === DONE
	        ? iteratorDone()
	        : iteratorValue(type, reverse ? --index : index++, value);
	    });
	  };

	  List.prototype.__iterate = function __iterate (fn, reverse) {
	    var index = reverse ? this.size : 0;
	    var values = iterateList(this, reverse);
	    var value;
	    while ((value = values()) !== DONE) {
	      if (fn(value, reverse ? --index : index++, this) === false) {
	        break;
	      }
	    }
	    return index;
	  };

	  List.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyList();
	      }
	      this.__ownerID = ownerID;
	      this.__altered = false;
	      return this;
	    }
	    return makeList(
	      this._origin,
	      this._capacity,
	      this._level,
	      this._root,
	      this._tail,
	      ownerID,
	      this.__hash
	    );
	  };

	  return List;
	}(IndexedCollection));

	List.isList = isList;

	var ListPrototype = List.prototype;
	ListPrototype[IS_LIST_SYMBOL] = true;
	ListPrototype[DELETE] = ListPrototype.remove;
	ListPrototype.merge = ListPrototype.concat;
	ListPrototype.setIn = setIn$1;
	ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;
	ListPrototype.update = update$1$1;
	ListPrototype.updateIn = updateIn$1;
	ListPrototype.mergeIn = mergeIn;
	ListPrototype.mergeDeepIn = mergeDeepIn;
	ListPrototype.withMutations = withMutations;
	ListPrototype.wasAltered = wasAltered;
	ListPrototype.asImmutable = asImmutable;
	ListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;
	ListPrototype['@@transducer/step'] = function(result, arr) {
	  return result.push(arr);
	};
	ListPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	var VNode = function VNode(array, ownerID) {
	  this.array = array;
	  this.ownerID = ownerID;
	};

	// TODO: seems like these methods are very similar

	VNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {
	  if (index === level ? 1 << level : this.array.length === 0) {
	    return this;
	  }
	  var originIndex = (index >>> level) & MASK;
	  if (originIndex >= this.array.length) {
	    return new VNode([], ownerID);
	  }
	  var removingFirst = originIndex === 0;
	  var newChild;
	  if (level > 0) {
	    var oldChild = this.array[originIndex];
	    newChild =
	      oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	    if (newChild === oldChild && removingFirst) {
	      return this;
	    }
	  }
	  if (removingFirst && !newChild) {
	    return this;
	  }
	  var editable = editableVNode(this, ownerID);
	  if (!removingFirst) {
	    for (var ii = 0; ii < originIndex; ii++) {
	      editable.array[ii] = undefined;
	    }
	  }
	  if (newChild) {
	    editable.array[originIndex] = newChild;
	  }
	  return editable;
	};

	VNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {
	  if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	    return this;
	  }
	  var sizeIndex = ((index - 1) >>> level) & MASK;
	  if (sizeIndex >= this.array.length) {
	    return this;
	  }

	  var newChild;
	  if (level > 0) {
	    var oldChild = this.array[sizeIndex];
	    newChild =
	      oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	    if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	      return this;
	    }
	  }

	  var editable = editableVNode(this, ownerID);
	  editable.array.splice(sizeIndex + 1);
	  if (newChild) {
	    editable.array[sizeIndex] = newChild;
	  }
	  return editable;
	};

	var DONE = {};

	function iterateList(list, reverse) {
	  var left = list._origin;
	  var right = list._capacity;
	  var tailPos = getTailOffset(right);
	  var tail = list._tail;

	  return iterateNodeOrLeaf(list._root, list._level, 0);

	  function iterateNodeOrLeaf(node, level, offset) {
	    return level === 0
	      ? iterateLeaf(node, offset)
	      : iterateNode(node, level, offset);
	  }

	  function iterateLeaf(node, offset) {
	    var array = offset === tailPos ? tail && tail.array : node && node.array;
	    var from = offset > left ? 0 : left - offset;
	    var to = right - offset;
	    if (to > SIZE) {
	      to = SIZE;
	    }
	    return function () {
	      if (from === to) {
	        return DONE;
	      }
	      var idx = reverse ? --to : from++;
	      return array && array[idx];
	    };
	  }

	  function iterateNode(node, level, offset) {
	    var values;
	    var array = node && node.array;
	    var from = offset > left ? 0 : (left - offset) >> level;
	    var to = ((right - offset) >> level) + 1;
	    if (to > SIZE) {
	      to = SIZE;
	    }
	    return function () {
	      while (true) {
	        if (values) {
	          var value = values();
	          if (value !== DONE) {
	            return value;
	          }
	          values = null;
	        }
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        values = iterateNodeOrLeaf(
	          array && array[idx],
	          level - SHIFT,
	          offset + (idx << level)
	        );
	      }
	    };
	  }
	}

	function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	  var list = Object.create(ListPrototype);
	  list.size = capacity - origin;
	  list._origin = origin;
	  list._capacity = capacity;
	  list._level = level;
	  list._root = root;
	  list._tail = tail;
	  list.__ownerID = ownerID;
	  list.__hash = hash;
	  list.__altered = false;
	  return list;
	}

	var EMPTY_LIST;
	function emptyList() {
	  return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	}

	function updateList(list, index, value) {
	  index = wrapIndex(list, index);

	  if (index !== index) {
	    return list;
	  }

	  if (index >= list.size || index < 0) {
	    return list.withMutations(function (list) {
	      index < 0
	        ? setListBounds(list, index).set(0, value)
	        : setListBounds(list, 0, index + 1).set(index, value);
	    });
	  }

	  index += list._origin;

	  var newTail = list._tail;
	  var newRoot = list._root;
	  var didAlter = MakeRef();
	  if (index >= getTailOffset(list._capacity)) {
	    newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	  } else {
	    newRoot = updateVNode(
	      newRoot,
	      list.__ownerID,
	      list._level,
	      index,
	      value,
	      didAlter
	    );
	  }

	  if (!didAlter.value) {
	    return list;
	  }

	  if (list.__ownerID) {
	    list._root = newRoot;
	    list._tail = newTail;
	    list.__hash = undefined;
	    list.__altered = true;
	    return list;
	  }
	  return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	}

	function updateVNode(node, ownerID, level, index, value, didAlter) {
	  var idx = (index >>> level) & MASK;
	  var nodeHas = node && idx < node.array.length;
	  if (!nodeHas && value === undefined) {
	    return node;
	  }

	  var newNode;

	  if (level > 0) {
	    var lowerNode = node && node.array[idx];
	    var newLowerNode = updateVNode(
	      lowerNode,
	      ownerID,
	      level - SHIFT,
	      index,
	      value,
	      didAlter
	    );
	    if (newLowerNode === lowerNode) {
	      return node;
	    }
	    newNode = editableVNode(node, ownerID);
	    newNode.array[idx] = newLowerNode;
	    return newNode;
	  }

	  if (nodeHas && node.array[idx] === value) {
	    return node;
	  }

	  if (didAlter) {
	    SetRef(didAlter);
	  }

	  newNode = editableVNode(node, ownerID);
	  if (value === undefined && idx === newNode.array.length - 1) {
	    newNode.array.pop();
	  } else {
	    newNode.array[idx] = value;
	  }
	  return newNode;
	}

	function editableVNode(node, ownerID) {
	  if (ownerID && node && ownerID === node.ownerID) {
	    return node;
	  }
	  return new VNode(node ? node.array.slice() : [], ownerID);
	}

	function listNodeFor(list, rawIndex) {
	  if (rawIndex >= getTailOffset(list._capacity)) {
	    return list._tail;
	  }
	  if (rawIndex < 1 << (list._level + SHIFT)) {
	    var node = list._root;
	    var level = list._level;
	    while (node && level > 0) {
	      node = node.array[(rawIndex >>> level) & MASK];
	      level -= SHIFT;
	    }
	    return node;
	  }
	}

	function setListBounds(list, begin, end) {
	  // Sanitize begin & end using this shorthand for ToInt32(argument)
	  // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	  if (begin !== undefined) {
	    begin |= 0;
	  }
	  if (end !== undefined) {
	    end |= 0;
	  }
	  var owner = list.__ownerID || new OwnerID();
	  var oldOrigin = list._origin;
	  var oldCapacity = list._capacity;
	  var newOrigin = oldOrigin + begin;
	  var newCapacity =
	    end === undefined
	      ? oldCapacity
	      : end < 0
	        ? oldCapacity + end
	        : oldOrigin + end;
	  if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	    return list;
	  }

	  // If it's going to end after it starts, it's empty.
	  if (newOrigin >= newCapacity) {
	    return list.clear();
	  }

	  var newLevel = list._level;
	  var newRoot = list._root;

	  // New origin might need creating a higher root.
	  var offsetShift = 0;
	  while (newOrigin + offsetShift < 0) {
	    newRoot = new VNode(
	      newRoot && newRoot.array.length ? [undefined, newRoot] : [],
	      owner
	    );
	    newLevel += SHIFT;
	    offsetShift += 1 << newLevel;
	  }
	  if (offsetShift) {
	    newOrigin += offsetShift;
	    oldOrigin += offsetShift;
	    newCapacity += offsetShift;
	    oldCapacity += offsetShift;
	  }

	  var oldTailOffset = getTailOffset(oldCapacity);
	  var newTailOffset = getTailOffset(newCapacity);

	  // New size might need creating a higher root.
	  while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	    newRoot = new VNode(
	      newRoot && newRoot.array.length ? [newRoot] : [],
	      owner
	    );
	    newLevel += SHIFT;
	  }

	  // Locate or create the new tail.
	  var oldTail = list._tail;
	  var newTail =
	    newTailOffset < oldTailOffset
	      ? listNodeFor(list, newCapacity - 1)
	      : newTailOffset > oldTailOffset
	        ? new VNode([], owner)
	        : oldTail;

	  // Merge Tail into tree.
	  if (
	    oldTail &&
	    newTailOffset > oldTailOffset &&
	    newOrigin < oldCapacity &&
	    oldTail.array.length
	  ) {
	    newRoot = editableVNode(newRoot, owner);
	    var node = newRoot;
	    for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	      var idx = (oldTailOffset >>> level) & MASK;
	      node = node.array[idx] = editableVNode(node.array[idx], owner);
	    }
	    node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	  }

	  // If the size has been reduced, there's a chance the tail needs to be trimmed.
	  if (newCapacity < oldCapacity) {
	    newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	  }

	  // If the new origin is within the tail, then we do not need a root.
	  if (newOrigin >= newTailOffset) {
	    newOrigin -= newTailOffset;
	    newCapacity -= newTailOffset;
	    newLevel = SHIFT;
	    newRoot = null;
	    newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	  } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	    offsetShift = 0;

	    // Identify the new top root node of the subtree of the old root.
	    while (newRoot) {
	      var beginIndex = (newOrigin >>> newLevel) & MASK;
	      if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {
	        break;
	      }
	      if (beginIndex) {
	        offsetShift += (1 << newLevel) * beginIndex;
	      }
	      newLevel -= SHIFT;
	      newRoot = newRoot.array[beginIndex];
	    }

	    // Trim the new sides of the new root.
	    if (newRoot && newOrigin > oldOrigin) {
	      newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	    }
	    if (newRoot && newTailOffset < oldTailOffset) {
	      newRoot = newRoot.removeAfter(
	        owner,
	        newLevel,
	        newTailOffset - offsetShift
	      );
	    }
	    if (offsetShift) {
	      newOrigin -= offsetShift;
	      newCapacity -= offsetShift;
	    }
	  }

	  if (list.__ownerID) {
	    list.size = newCapacity - newOrigin;
	    list._origin = newOrigin;
	    list._capacity = newCapacity;
	    list._level = newLevel;
	    list._root = newRoot;
	    list._tail = newTail;
	    list.__hash = undefined;
	    list.__altered = true;
	    return list;
	  }
	  return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	}

	function getTailOffset(size) {
	  return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;
	}

	var OrderedMap = /*@__PURE__*/(function (Map$$1) {
	  function OrderedMap(value) {
	    return value === null || value === undefined
	      ? emptyOrderedMap()
	      : isOrderedMap(value)
	        ? value
	        : emptyOrderedMap().withMutations(function (map) {
	            var iter = KeyedCollection(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v, k) { return map.set(k, v); });
	          });
	  }

	  if ( Map$$1 ) OrderedMap.__proto__ = Map$$1;
	  OrderedMap.prototype = Object.create( Map$$1 && Map$$1.prototype );
	  OrderedMap.prototype.constructor = OrderedMap;

	  OrderedMap.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  OrderedMap.prototype.toString = function toString () {
	    return this.__toString('OrderedMap {', '}');
	  };

	  // @pragma Access

	  OrderedMap.prototype.get = function get (k, notSetValue) {
	    var index = this._map.get(k);
	    return index !== undefined ? this._list.get(index)[1] : notSetValue;
	  };

	  // @pragma Modification

	  OrderedMap.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = 0;
	      this._map.clear();
	      this._list.clear();
	      return this;
	    }
	    return emptyOrderedMap();
	  };

	  OrderedMap.prototype.set = function set (k, v) {
	    return updateOrderedMap(this, k, v);
	  };

	  OrderedMap.prototype.remove = function remove (k) {
	    return updateOrderedMap(this, k, NOT_SET);
	  };

	  OrderedMap.prototype.wasAltered = function wasAltered () {
	    return this._map.wasAltered() || this._list.wasAltered();
	  };

	  OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._list.__iterate(
	      function (entry) { return entry && fn(entry[1], entry[0], this$1); },
	      reverse
	    );
	  };

	  OrderedMap.prototype.__iterator = function __iterator (type, reverse) {
	    return this._list.fromEntrySeq().__iterator(type, reverse);
	  };

	  OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    var newMap = this._map.__ensureOwner(ownerID);
	    var newList = this._list.__ensureOwner(ownerID);
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyOrderedMap();
	      }
	      this.__ownerID = ownerID;
	      this._map = newMap;
	      this._list = newList;
	      return this;
	    }
	    return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	  };

	  return OrderedMap;
	}(Map$2));

	OrderedMap.isOrderedMap = isOrderedMap;

	OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;
	OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

	function makeOrderedMap(map, list, ownerID, hash) {
	  var omap = Object.create(OrderedMap.prototype);
	  omap.size = map ? map.size : 0;
	  omap._map = map;
	  omap._list = list;
	  omap.__ownerID = ownerID;
	  omap.__hash = hash;
	  return omap;
	}

	var EMPTY_ORDERED_MAP;
	function emptyOrderedMap() {
	  return (
	    EMPTY_ORDERED_MAP ||
	    (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))
	  );
	}

	function updateOrderedMap(omap, k, v) {
	  var map = omap._map;
	  var list = omap._list;
	  var i = map.get(k);
	  var has = i !== undefined;
	  var newMap;
	  var newList;
	  if (v === NOT_SET) {
	    // removed
	    if (!has) {
	      return omap;
	    }
	    if (list.size >= SIZE && list.size >= map.size * 2) {
	      newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });
	      newMap = newList
	        .toKeyedSeq()
	        .map(function (entry) { return entry[0]; })
	        .flip()
	        .toMap();
	      if (omap.__ownerID) {
	        newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	      }
	    } else {
	      newMap = map.remove(k);
	      newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	    }
	  } else if (has) {
	    if (v === list.get(i)[1]) {
	      return omap;
	    }
	    newMap = map;
	    newList = list.set(i, [k, v]);
	  } else {
	    newMap = map.set(k, list.size);
	    newList = list.set(list.size, [k, v]);
	  }
	  if (omap.__ownerID) {
	    omap.size = newMap.size;
	    omap._map = newMap;
	    omap._list = newList;
	    omap.__hash = undefined;
	    return omap;
	  }
	  return makeOrderedMap(newMap, newList);
	}

	var IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';

	function isStack(maybeStack) {
	  return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);
	}

	var Stack = /*@__PURE__*/(function (IndexedCollection$$1) {
	  function Stack(value) {
	    return value === null || value === undefined
	      ? emptyStack()
	      : isStack(value)
	        ? value
	        : emptyStack().pushAll(value);
	  }

	  if ( IndexedCollection$$1 ) Stack.__proto__ = IndexedCollection$$1;
	  Stack.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );
	  Stack.prototype.constructor = Stack;

	  Stack.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  Stack.prototype.toString = function toString () {
	    return this.__toString('Stack [', ']');
	  };

	  // @pragma Access

	  Stack.prototype.get = function get (index, notSetValue) {
	    var head = this._head;
	    index = wrapIndex(this, index);
	    while (head && index--) {
	      head = head.next;
	    }
	    return head ? head.value : notSetValue;
	  };

	  Stack.prototype.peek = function peek () {
	    return this._head && this._head.value;
	  };

	  // @pragma Modification

	  Stack.prototype.push = function push (/*...values*/) {
	    var arguments$1 = arguments;

	    if (arguments.length === 0) {
	      return this;
	    }
	    var newSize = this.size + arguments.length;
	    var head = this._head;
	    for (var ii = arguments.length - 1; ii >= 0; ii--) {
	      head = {
	        value: arguments$1[ii],
	        next: head,
	      };
	    }
	    if (this.__ownerID) {
	      this.size = newSize;
	      this._head = head;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return makeStack(newSize, head);
	  };

	  Stack.prototype.pushAll = function pushAll (iter) {
	    iter = IndexedCollection$$1(iter);
	    if (iter.size === 0) {
	      return this;
	    }
	    if (this.size === 0 && isStack(iter)) {
	      return iter;
	    }
	    assertNotInfinite(iter.size);
	    var newSize = this.size;
	    var head = this._head;
	    iter.__iterate(function (value) {
	      newSize++;
	      head = {
	        value: value,
	        next: head,
	      };
	    }, /* reverse */ true);
	    if (this.__ownerID) {
	      this.size = newSize;
	      this._head = head;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return makeStack(newSize, head);
	  };

	  Stack.prototype.pop = function pop () {
	    return this.slice(1);
	  };

	  Stack.prototype.clear = function clear () {
	    if (this.size === 0) {
	      return this;
	    }
	    if (this.__ownerID) {
	      this.size = 0;
	      this._head = undefined;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return emptyStack();
	  };

	  Stack.prototype.slice = function slice (begin, end) {
	    if (wholeSlice(begin, end, this.size)) {
	      return this;
	    }
	    var resolvedBegin = resolveBegin(begin, this.size);
	    var resolvedEnd = resolveEnd(end, this.size);
	    if (resolvedEnd !== this.size) {
	      // super.slice(begin, end);
	      return IndexedCollection$$1.prototype.slice.call(this, begin, end);
	    }
	    var newSize = this.size - resolvedBegin;
	    var head = this._head;
	    while (resolvedBegin--) {
	      head = head.next;
	    }
	    if (this.__ownerID) {
	      this.size = newSize;
	      this._head = head;
	      this.__hash = undefined;
	      this.__altered = true;
	      return this;
	    }
	    return makeStack(newSize, head);
	  };

	  // @pragma Mutability

	  Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    if (!ownerID) {
	      if (this.size === 0) {
	        return emptyStack();
	      }
	      this.__ownerID = ownerID;
	      this.__altered = false;
	      return this;
	    }
	    return makeStack(this.size, this._head, ownerID, this.__hash);
	  };

	  // @pragma Iteration

	  Stack.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    if (reverse) {
	      return new ArraySeq(this.toArray()).__iterate(
	        function (v, k) { return fn(v, k, this$1); },
	        reverse
	      );
	    }
	    var iterations = 0;
	    var node = this._head;
	    while (node) {
	      if (fn(node.value, iterations++, this) === false) {
	        break;
	      }
	      node = node.next;
	    }
	    return iterations;
	  };

	  Stack.prototype.__iterator = function __iterator (type, reverse) {
	    if (reverse) {
	      return new ArraySeq(this.toArray()).__iterator(type, reverse);
	    }
	    var iterations = 0;
	    var node = this._head;
	    return new Iterator(function () {
	      if (node) {
	        var value = node.value;
	        node = node.next;
	        return iteratorValue(type, iterations++, value);
	      }
	      return iteratorDone();
	    });
	  };

	  return Stack;
	}(IndexedCollection));

	Stack.isStack = isStack;

	var StackPrototype = Stack.prototype;
	StackPrototype[IS_STACK_SYMBOL] = true;
	StackPrototype.shift = StackPrototype.pop;
	StackPrototype.unshift = StackPrototype.push;
	StackPrototype.unshiftAll = StackPrototype.pushAll;
	StackPrototype.withMutations = withMutations;
	StackPrototype.wasAltered = wasAltered;
	StackPrototype.asImmutable = asImmutable;
	StackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;
	StackPrototype['@@transducer/step'] = function(result, arr) {
	  return result.unshift(arr);
	};
	StackPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	function makeStack(size, head, ownerID, hash) {
	  var map = Object.create(StackPrototype);
	  map.size = size;
	  map._head = head;
	  map.__ownerID = ownerID;
	  map.__hash = hash;
	  map.__altered = false;
	  return map;
	}

	var EMPTY_STACK;
	function emptyStack() {
	  return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	}

	var IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';

	function isSet(maybeSet) {
	  return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);
	}

	function isOrderedSet(maybeOrderedSet) {
	  return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	}

	function deepEqual(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (
	    !isCollection(b) ||
	    (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||
	    (a.__hash !== undefined &&
	      b.__hash !== undefined &&
	      a.__hash !== b.__hash) ||
	    isKeyed(a) !== isKeyed(b) ||
	    isIndexed(a) !== isIndexed(b) ||
	    isOrdered(a) !== isOrdered(b)
	  ) {
	    return false;
	  }

	  if (a.size === 0 && b.size === 0) {
	    return true;
	  }

	  var notAssociative = !isAssociative(a);

	  if (isOrdered(a)) {
	    var entries = a.entries();
	    return (
	      b.every(function (v, k) {
	        var entry = entries.next().value;
	        return entry && is$2(entry[1], v) && (notAssociative || is$2(entry[0], k));
	      }) && entries.next().done
	    );
	  }

	  var flipped = false;

	  if (a.size === undefined) {
	    if (b.size === undefined) {
	      if (typeof a.cacheResult === 'function') {
	        a.cacheResult();
	      }
	    } else {
	      flipped = true;
	      var _ = a;
	      a = b;
	      b = _;
	    }
	  }

	  var allEqual = true;
	  var bSize = b.__iterate(function (v, k) {
	    if (
	      notAssociative
	        ? !a.has(v)
	        : flipped
	          ? !is$2(v, a.get(k, NOT_SET))
	          : !is$2(a.get(k, NOT_SET), v)
	    ) {
	      allEqual = false;
	      return false;
	    }
	  });

	  return allEqual && a.size === bSize;
	}

	/**
	 * Contributes additional methods to a constructor
	 */
	function mixin$1(ctor, methods) {
	  var keyCopier = function (key) {
	    ctor.prototype[key] = methods[key];
	  };
	  Object.keys(methods).forEach(keyCopier);
	  Object.getOwnPropertySymbols &&
	    Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	  return ctor;
	}

	function toJS(value) {
	  if (!value || typeof value !== 'object') {
	    return value;
	  }
	  if (!isCollection(value)) {
	    if (!isDataStructure(value)) {
	      return value;
	    }
	    value = Seq(value);
	  }
	  if (isKeyed(value)) {
	    var result$1 = {};
	    value.__iterate(function (v, k) {
	      result$1[k] = toJS(v);
	    });
	    return result$1;
	  }
	  var result = [];
	  value.__iterate(function (v) {
	    result.push(toJS(v));
	  });
	  return result;
	}

	var Set = /*@__PURE__*/(function (SetCollection$$1) {
	  function Set(value) {
	    return value === null || value === undefined
	      ? emptySet()
	      : isSet(value) && !isOrdered(value)
	        ? value
	        : emptySet().withMutations(function (set) {
	            var iter = SetCollection$$1(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v) { return set.add(v); });
	          });
	  }

	  if ( SetCollection$$1 ) Set.__proto__ = SetCollection$$1;
	  Set.prototype = Object.create( SetCollection$$1 && SetCollection$$1.prototype );
	  Set.prototype.constructor = Set;

	  Set.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  Set.fromKeys = function fromKeys (value) {
	    return this(KeyedCollection(value).keySeq());
	  };

	  Set.intersect = function intersect (sets) {
	    sets = Collection$1(sets).toArray();
	    return sets.length
	      ? SetPrototype.intersect.apply(Set(sets.pop()), sets)
	      : emptySet();
	  };

	  Set.union = function union (sets) {
	    sets = Collection$1(sets).toArray();
	    return sets.length
	      ? SetPrototype.union.apply(Set(sets.pop()), sets)
	      : emptySet();
	  };

	  Set.prototype.toString = function toString () {
	    return this.__toString('Set {', '}');
	  };

	  // @pragma Access

	  Set.prototype.has = function has (value) {
	    return this._map.has(value);
	  };

	  // @pragma Modification

	  Set.prototype.add = function add (value) {
	    return updateSet(this, this._map.set(value, value));
	  };

	  Set.prototype.remove = function remove (value) {
	    return updateSet(this, this._map.remove(value));
	  };

	  Set.prototype.clear = function clear () {
	    return updateSet(this, this._map.clear());
	  };

	  // @pragma Composition

	  Set.prototype.map = function map (mapper, context) {
	    var this$1 = this;

	    var removes = [];
	    var adds = [];
	    this.forEach(function (value) {
	      var mapped = mapper.call(context, value, value, this$1);
	      if (mapped !== value) {
	        removes.push(value);
	        adds.push(mapped);
	      }
	    });
	    return this.withMutations(function (set) {
	      removes.forEach(function (value) { return set.remove(value); });
	      adds.forEach(function (value) { return set.add(value); });
	    });
	  };

	  Set.prototype.union = function union () {
	    var iters = [], len = arguments.length;
	    while ( len-- ) iters[ len ] = arguments[ len ];

	    iters = iters.filter(function (x) { return x.size !== 0; });
	    if (iters.length === 0) {
	      return this;
	    }
	    if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	      return this.constructor(iters[0]);
	    }
	    return this.withMutations(function (set) {
	      for (var ii = 0; ii < iters.length; ii++) {
	        SetCollection$$1(iters[ii]).forEach(function (value) { return set.add(value); });
	      }
	    });
	  };

	  Set.prototype.intersect = function intersect () {
	    var iters = [], len = arguments.length;
	    while ( len-- ) iters[ len ] = arguments[ len ];

	    if (iters.length === 0) {
	      return this;
	    }
	    iters = iters.map(function (iter) { return SetCollection$$1(iter); });
	    var toRemove = [];
	    this.forEach(function (value) {
	      if (!iters.every(function (iter) { return iter.includes(value); })) {
	        toRemove.push(value);
	      }
	    });
	    return this.withMutations(function (set) {
	      toRemove.forEach(function (value) {
	        set.remove(value);
	      });
	    });
	  };

	  Set.prototype.subtract = function subtract () {
	    var iters = [], len = arguments.length;
	    while ( len-- ) iters[ len ] = arguments[ len ];

	    if (iters.length === 0) {
	      return this;
	    }
	    iters = iters.map(function (iter) { return SetCollection$$1(iter); });
	    var toRemove = [];
	    this.forEach(function (value) {
	      if (iters.some(function (iter) { return iter.includes(value); })) {
	        toRemove.push(value);
	      }
	    });
	    return this.withMutations(function (set) {
	      toRemove.forEach(function (value) {
	        set.remove(value);
	      });
	    });
	  };

	  Set.prototype.sort = function sort (comparator) {
	    // Late binding
	    return OrderedSet(sortFactory(this, comparator));
	  };

	  Set.prototype.sortBy = function sortBy (mapper, comparator) {
	    // Late binding
	    return OrderedSet(sortFactory(this, comparator, mapper));
	  };

	  Set.prototype.wasAltered = function wasAltered () {
	    return this._map.wasAltered();
	  };

	  Set.prototype.__iterate = function __iterate (fn, reverse) {
	    var this$1 = this;

	    return this._map.__iterate(function (k) { return fn(k, k, this$1); }, reverse);
	  };

	  Set.prototype.__iterator = function __iterator (type, reverse) {
	    return this._map.__iterator(type, reverse);
	  };

	  Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	    if (ownerID === this.__ownerID) {
	      return this;
	    }
	    var newMap = this._map.__ensureOwner(ownerID);
	    if (!ownerID) {
	      if (this.size === 0) {
	        return this.__empty();
	      }
	      this.__ownerID = ownerID;
	      this._map = newMap;
	      return this;
	    }
	    return this.__make(newMap, ownerID);
	  };

	  return Set;
	}(SetCollection));

	Set.isSet = isSet;

	var SetPrototype = Set.prototype;
	SetPrototype[IS_SET_SYMBOL] = true;
	SetPrototype[DELETE] = SetPrototype.remove;
	SetPrototype.merge = SetPrototype.concat = SetPrototype.union;
	SetPrototype.withMutations = withMutations;
	SetPrototype.asImmutable = asImmutable;
	SetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;
	SetPrototype['@@transducer/step'] = function(result, arr) {
	  return result.add(arr);
	};
	SetPrototype['@@transducer/result'] = function(obj) {
	  return obj.asImmutable();
	};

	SetPrototype.__empty = emptySet;
	SetPrototype.__make = makeSet;

	function updateSet(set, newMap) {
	  if (set.__ownerID) {
	    set.size = newMap.size;
	    set._map = newMap;
	    return set;
	  }
	  return newMap === set._map
	    ? set
	    : newMap.size === 0
	      ? set.__empty()
	      : set.__make(newMap);
	}

	function makeSet(map, ownerID) {
	  var set = Object.create(SetPrototype);
	  set.size = map ? map.size : 0;
	  set._map = map;
	  set.__ownerID = ownerID;
	  return set;
	}

	var EMPTY_SET;
	function emptySet() {
	  return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	}

	/**
	 * Returns a lazy seq of nums from start (inclusive) to end
	 * (exclusive), by step, where start defaults to 0, step to 1, and end to
	 * infinity. When start is equal to end, returns empty list.
	 */
	var Range = /*@__PURE__*/(function (IndexedSeq$$1) {
	  function Range(start, end, step) {
	    if (!(this instanceof Range)) {
	      return new Range(start, end, step);
	    }
	    invariant$3(step !== 0, 'Cannot step a Range by 0');
	    start = start || 0;
	    if (end === undefined) {
	      end = Infinity;
	    }
	    step = step === undefined ? 1 : Math.abs(step);
	    if (end < start) {
	      step = -step;
	    }
	    this._start = start;
	    this._end = end;
	    this._step = step;
	    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	    if (this.size === 0) {
	      if (EMPTY_RANGE) {
	        return EMPTY_RANGE;
	      }
	      EMPTY_RANGE = this;
	    }
	  }

	  if ( IndexedSeq$$1 ) Range.__proto__ = IndexedSeq$$1;
	  Range.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );
	  Range.prototype.constructor = Range;

	  Range.prototype.toString = function toString () {
	    if (this.size === 0) {
	      return 'Range []';
	    }
	    return (
	      'Range [ ' +
	      this._start +
	      '...' +
	      this._end +
	      (this._step !== 1 ? ' by ' + this._step : '') +
	      ' ]'
	    );
	  };

	  Range.prototype.get = function get (index, notSetValue) {
	    return this.has(index)
	      ? this._start + wrapIndex(this, index) * this._step
	      : notSetValue;
	  };

	  Range.prototype.includes = function includes (searchValue) {
	    var possibleIndex = (searchValue - this._start) / this._step;
	    return (
	      possibleIndex >= 0 &&
	      possibleIndex < this.size &&
	      possibleIndex === Math.floor(possibleIndex)
	    );
	  };

	  Range.prototype.slice = function slice (begin, end) {
	    if (wholeSlice(begin, end, this.size)) {
	      return this;
	    }
	    begin = resolveBegin(begin, this.size);
	    end = resolveEnd(end, this.size);
	    if (end <= begin) {
	      return new Range(0, 0);
	    }
	    return new Range(
	      this.get(begin, this._end),
	      this.get(end, this._end),
	      this._step
	    );
	  };

	  Range.prototype.indexOf = function indexOf (searchValue) {
	    var offsetValue = searchValue - this._start;
	    if (offsetValue % this._step === 0) {
	      var index = offsetValue / this._step;
	      if (index >= 0 && index < this.size) {
	        return index;
	      }
	    }
	    return -1;
	  };

	  Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {
	    return this.indexOf(searchValue);
	  };

	  Range.prototype.__iterate = function __iterate (fn, reverse) {
	    var size = this.size;
	    var step = this._step;
	    var value = reverse ? this._start + (size - 1) * step : this._start;
	    var i = 0;
	    while (i !== size) {
	      if (fn(value, reverse ? size - ++i : i++, this) === false) {
	        break;
	      }
	      value += reverse ? -step : step;
	    }
	    return i;
	  };

	  Range.prototype.__iterator = function __iterator (type, reverse) {
	    var size = this.size;
	    var step = this._step;
	    var value = reverse ? this._start + (size - 1) * step : this._start;
	    var i = 0;
	    return new Iterator(function () {
	      if (i === size) {
	        return iteratorDone();
	      }
	      var v = value;
	      value += reverse ? -step : step;
	      return iteratorValue(type, reverse ? size - ++i : i++, v);
	    });
	  };

	  Range.prototype.equals = function equals (other) {
	    return other instanceof Range
	      ? this._start === other._start &&
	          this._end === other._end &&
	          this._step === other._step
	      : deepEqual(this, other);
	  };

	  return Range;
	}(IndexedSeq));

	var EMPTY_RANGE;

	function getIn(collection, searchKeyPath, notSetValue) {
	  var keyPath = coerceKeyPath(searchKeyPath);
	  var i = 0;
	  while (i !== keyPath.length) {
	    collection = get$1(collection, keyPath[i++], NOT_SET);
	    if (collection === NOT_SET) {
	      return notSetValue;
	    }
	  }
	  return collection;
	}

	function getIn$1(searchKeyPath, notSetValue) {
	  return getIn(this, searchKeyPath, notSetValue);
	}

	function hasIn(collection, keyPath) {
	  return getIn(collection, keyPath, NOT_SET) !== NOT_SET;
	}

	function hasIn$1(searchKeyPath) {
	  return hasIn(this, searchKeyPath);
	}

	function toObject$1() {
	  assertNotInfinite(this.size);
	  var object = {};
	  this.__iterate(function (v, k) {
	    object[k] = v;
	  });
	  return object;
	}

	// Note: all of these methods are deprecated.
	Collection$1.isIterable = isCollection;
	Collection$1.isKeyed = isKeyed;
	Collection$1.isIndexed = isIndexed;
	Collection$1.isAssociative = isAssociative;
	Collection$1.isOrdered = isOrdered;

	Collection$1.Iterator = Iterator;

	mixin$1(Collection$1, {
	  // ### Conversion to other types

	  toArray: function toArray() {
	    assertNotInfinite(this.size);
	    var array = new Array(this.size || 0);
	    var useTuples = isKeyed(this);
	    var i = 0;
	    this.__iterate(function (v, k) {
	      // Keyed collections produce an array of tuples.
	      array[i++] = useTuples ? [k, v] : v;
	    });
	    return array;
	  },

	  toIndexedSeq: function toIndexedSeq() {
	    return new ToIndexedSequence(this);
	  },

	  toJS: function toJS$1() {
	    return toJS(this);
	  },

	  toKeyedSeq: function toKeyedSeq() {
	    return new ToKeyedSequence(this, true);
	  },

	  toMap: function toMap() {
	    // Use Late Binding here to solve the circular dependency.
	    return Map$2(this.toKeyedSeq());
	  },

	  toObject: toObject$1,

	  toOrderedMap: function toOrderedMap() {
	    // Use Late Binding here to solve the circular dependency.
	    return OrderedMap(this.toKeyedSeq());
	  },

	  toOrderedSet: function toOrderedSet() {
	    // Use Late Binding here to solve the circular dependency.
	    return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	  },

	  toSet: function toSet() {
	    // Use Late Binding here to solve the circular dependency.
	    return Set(isKeyed(this) ? this.valueSeq() : this);
	  },

	  toSetSeq: function toSetSeq() {
	    return new ToSetSequence(this);
	  },

	  toSeq: function toSeq() {
	    return isIndexed(this)
	      ? this.toIndexedSeq()
	      : isKeyed(this)
	        ? this.toKeyedSeq()
	        : this.toSetSeq();
	  },

	  toStack: function toStack() {
	    // Use Late Binding here to solve the circular dependency.
	    return Stack(isKeyed(this) ? this.valueSeq() : this);
	  },

	  toList: function toList() {
	    // Use Late Binding here to solve the circular dependency.
	    return List(isKeyed(this) ? this.valueSeq() : this);
	  },

	  // ### Common JavaScript methods and properties

	  toString: function toString() {
	    return '[Collection]';
	  },

	  __toString: function __toString(head, tail) {
	    if (this.size === 0) {
	      return head + tail;
	    }
	    return (
	      head +
	      ' ' +
	      this.toSeq()
	        .map(this.__toStringMapper)
	        .join(', ') +
	      ' ' +
	      tail
	    );
	  },

	  // ### ES6 Collection methods (ES6 Array and Map)

	  concat: function concat() {
	    var values = [], len = arguments.length;
	    while ( len-- ) values[ len ] = arguments[ len ];

	    return reify(this, concatFactory(this, values));
	  },

	  includes: function includes(searchValue) {
	    return this.some(function (value) { return is$2(value, searchValue); });
	  },

	  entries: function entries() {
	    return this.__iterator(ITERATE_ENTRIES);
	  },

	  every: function every(predicate, context) {
	    assertNotInfinite(this.size);
	    var returnValue = true;
	    this.__iterate(function (v, k, c) {
	      if (!predicate.call(context, v, k, c)) {
	        returnValue = false;
	        return false;
	      }
	    });
	    return returnValue;
	  },

	  filter: function filter(predicate, context) {
	    return reify(this, filterFactory(this, predicate, context, true));
	  },

	  find: function find(predicate, context, notSetValue) {
	    var entry = this.findEntry(predicate, context);
	    return entry ? entry[1] : notSetValue;
	  },

	  forEach: function forEach(sideEffect, context) {
	    assertNotInfinite(this.size);
	    return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	  },

	  join: function join(separator) {
	    assertNotInfinite(this.size);
	    separator = separator !== undefined ? '' + separator : ',';
	    var joined = '';
	    var isFirst = true;
	    this.__iterate(function (v) {
	      isFirst ? (isFirst = false) : (joined += separator);
	      joined += v !== null && v !== undefined ? v.toString() : '';
	    });
	    return joined;
	  },

	  keys: function keys() {
	    return this.__iterator(ITERATE_KEYS);
	  },

	  map: function map(mapper, context) {
	    return reify(this, mapFactory(this, mapper, context));
	  },

	  reduce: function reduce$1(reducer, initialReduction, context) {
	    return reduce(
	      this,
	      reducer,
	      initialReduction,
	      context,
	      arguments.length < 2,
	      false
	    );
	  },

	  reduceRight: function reduceRight(reducer, initialReduction, context) {
	    return reduce(
	      this,
	      reducer,
	      initialReduction,
	      context,
	      arguments.length < 2,
	      true
	    );
	  },

	  reverse: function reverse() {
	    return reify(this, reverseFactory(this, true));
	  },

	  slice: function slice(begin, end) {
	    return reify(this, sliceFactory(this, begin, end, true));
	  },

	  some: function some(predicate, context) {
	    return !this.every(not(predicate), context);
	  },

	  sort: function sort(comparator) {
	    return reify(this, sortFactory(this, comparator));
	  },

	  values: function values() {
	    return this.__iterator(ITERATE_VALUES);
	  },

	  // ### More sequential methods

	  butLast: function butLast() {
	    return this.slice(0, -1);
	  },

	  isEmpty: function isEmpty() {
	    return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });
	  },

	  count: function count(predicate, context) {
	    return ensureSize(
	      predicate ? this.toSeq().filter(predicate, context) : this
	    );
	  },

	  countBy: function countBy(grouper, context) {
	    return countByFactory(this, grouper, context);
	  },

	  equals: function equals(other) {
	    return deepEqual(this, other);
	  },

	  entrySeq: function entrySeq() {
	    var collection = this;
	    if (collection._cache) {
	      // We cache as an entries array, so we can just return the cache!
	      return new ArraySeq(collection._cache);
	    }
	    var entriesSequence = collection
	      .toSeq()
	      .map(entryMapper)
	      .toIndexedSeq();
	    entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };
	    return entriesSequence;
	  },

	  filterNot: function filterNot(predicate, context) {
	    return this.filter(not(predicate), context);
	  },

	  findEntry: function findEntry(predicate, context, notSetValue) {
	    var found = notSetValue;
	    this.__iterate(function (v, k, c) {
	      if (predicate.call(context, v, k, c)) {
	        found = [k, v];
	        return false;
	      }
	    });
	    return found;
	  },

	  findKey: function findKey(predicate, context) {
	    var entry = this.findEntry(predicate, context);
	    return entry && entry[0];
	  },

	  findLast: function findLast(predicate, context, notSetValue) {
	    return this.toKeyedSeq()
	      .reverse()
	      .find(predicate, context, notSetValue);
	  },

	  findLastEntry: function findLastEntry(predicate, context, notSetValue) {
	    return this.toKeyedSeq()
	      .reverse()
	      .findEntry(predicate, context, notSetValue);
	  },

	  findLastKey: function findLastKey(predicate, context) {
	    return this.toKeyedSeq()
	      .reverse()
	      .findKey(predicate, context);
	  },

	  first: function first(notSetValue) {
	    return this.find(returnTrue, null, notSetValue);
	  },

	  flatMap: function flatMap(mapper, context) {
	    return reify(this, flatMapFactory(this, mapper, context));
	  },

	  flatten: function flatten(depth) {
	    return reify(this, flattenFactory(this, depth, true));
	  },

	  fromEntrySeq: function fromEntrySeq() {
	    return new FromEntriesSequence(this);
	  },

	  get: function get(searchKey, notSetValue) {
	    return this.find(function (_, key) { return is$2(key, searchKey); }, undefined, notSetValue);
	  },

	  getIn: getIn$1,

	  groupBy: function groupBy(grouper, context) {
	    return groupByFactory(this, grouper, context);
	  },

	  has: function has(searchKey) {
	    return this.get(searchKey, NOT_SET) !== NOT_SET;
	  },

	  hasIn: hasIn$1,

	  isSubset: function isSubset(iter) {
	    iter = typeof iter.includes === 'function' ? iter : Collection$1(iter);
	    return this.every(function (value) { return iter.includes(value); });
	  },

	  isSuperset: function isSuperset(iter) {
	    iter = typeof iter.isSubset === 'function' ? iter : Collection$1(iter);
	    return iter.isSubset(this);
	  },

	  keyOf: function keyOf(searchValue) {
	    return this.findKey(function (value) { return is$2(value, searchValue); });
	  },

	  keySeq: function keySeq() {
	    return this.toSeq()
	      .map(keyMapper)
	      .toIndexedSeq();
	  },

	  last: function last(notSetValue) {
	    return this.toSeq()
	      .reverse()
	      .first(notSetValue);
	  },

	  lastKeyOf: function lastKeyOf(searchValue) {
	    return this.toKeyedSeq()
	      .reverse()
	      .keyOf(searchValue);
	  },

	  max: function max(comparator) {
	    return maxFactory(this, comparator);
	  },

	  maxBy: function maxBy(mapper, comparator) {
	    return maxFactory(this, comparator, mapper);
	  },

	  min: function min(comparator) {
	    return maxFactory(
	      this,
	      comparator ? neg(comparator) : defaultNegComparator
	    );
	  },

	  minBy: function minBy(mapper, comparator) {
	    return maxFactory(
	      this,
	      comparator ? neg(comparator) : defaultNegComparator,
	      mapper
	    );
	  },

	  rest: function rest() {
	    return this.slice(1);
	  },

	  skip: function skip(amount) {
	    return amount === 0 ? this : this.slice(Math.max(0, amount));
	  },

	  skipLast: function skipLast(amount) {
	    return amount === 0 ? this : this.slice(0, -Math.max(0, amount));
	  },

	  skipWhile: function skipWhile(predicate, context) {
	    return reify(this, skipWhileFactory(this, predicate, context, true));
	  },

	  skipUntil: function skipUntil(predicate, context) {
	    return this.skipWhile(not(predicate), context);
	  },

	  sortBy: function sortBy(mapper, comparator) {
	    return reify(this, sortFactory(this, comparator, mapper));
	  },

	  take: function take(amount) {
	    return this.slice(0, Math.max(0, amount));
	  },

	  takeLast: function takeLast(amount) {
	    return this.slice(-Math.max(0, amount));
	  },

	  takeWhile: function takeWhile(predicate, context) {
	    return reify(this, takeWhileFactory(this, predicate, context));
	  },

	  takeUntil: function takeUntil(predicate, context) {
	    return this.takeWhile(not(predicate), context);
	  },

	  update: function update(fn) {
	    return fn(this);
	  },

	  valueSeq: function valueSeq() {
	    return this.toIndexedSeq();
	  },

	  // ### Hashable Object

	  hashCode: function hashCode() {
	    return this.__hash || (this.__hash = hashCollection(this));
	  },

	  // ### Internal

	  // abstract __iterate(fn, reverse)

	  // abstract __iterator(type, reverse)
	});

	var CollectionPrototype = Collection$1.prototype;
	CollectionPrototype[IS_COLLECTION_SYMBOL] = true;
	CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;
	CollectionPrototype.toJSON = CollectionPrototype.toArray;
	CollectionPrototype.__toStringMapper = quoteString;
	CollectionPrototype.inspect = CollectionPrototype.toSource = function() {
	  return this.toString();
	};
	CollectionPrototype.chain = CollectionPrototype.flatMap;
	CollectionPrototype.contains = CollectionPrototype.includes;

	mixin$1(KeyedCollection, {
	  // ### More sequential methods

	  flip: function flip() {
	    return reify(this, flipFactory(this));
	  },

	  mapEntries: function mapEntries(mapper, context) {
	    var this$1 = this;

	    var iterations = 0;
	    return reify(
	      this,
	      this.toSeq()
	        .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1); })
	        .fromEntrySeq()
	    );
	  },

	  mapKeys: function mapKeys(mapper, context) {
	    var this$1 = this;

	    return reify(
	      this,
	      this.toSeq()
	        .flip()
	        .map(function (k, v) { return mapper.call(context, k, v, this$1); })
	        .flip()
	    );
	  },
	});

	var KeyedCollectionPrototype = KeyedCollection.prototype;
	KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;
	KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;
	KeyedCollectionPrototype.toJSON = toObject$1;
	KeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };

	mixin$1(IndexedCollection, {
	  // ### Conversion to other types

	  toKeyedSeq: function toKeyedSeq() {
	    return new ToKeyedSequence(this, false);
	  },

	  // ### ES6 Collection methods (ES6 Array and Map)

	  filter: function filter(predicate, context) {
	    return reify(this, filterFactory(this, predicate, context, false));
	  },

	  findIndex: function findIndex(predicate, context) {
	    var entry = this.findEntry(predicate, context);
	    return entry ? entry[0] : -1;
	  },

	  indexOf: function indexOf(searchValue) {
	    var key = this.keyOf(searchValue);
	    return key === undefined ? -1 : key;
	  },

	  lastIndexOf: function lastIndexOf(searchValue) {
	    var key = this.lastKeyOf(searchValue);
	    return key === undefined ? -1 : key;
	  },

	  reverse: function reverse() {
	    return reify(this, reverseFactory(this, false));
	  },

	  slice: function slice(begin, end) {
	    return reify(this, sliceFactory(this, begin, end, false));
	  },

	  splice: function splice(index, removeNum /*, ...values*/) {
	    var numArgs = arguments.length;
	    removeNum = Math.max(removeNum || 0, 0);
	    if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	      return this;
	    }
	    // If index is negative, it should resolve relative to the size of the
	    // collection. However size may be expensive to compute if not cached, so
	    // only call count() if the number is in fact negative.
	    index = resolveBegin(index, index < 0 ? this.count() : this.size);
	    var spliced = this.slice(0, index);
	    return reify(
	      this,
	      numArgs === 1
	        ? spliced
	        : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	    );
	  },

	  // ### More collection methods

	  findLastIndex: function findLastIndex(predicate, context) {
	    var entry = this.findLastEntry(predicate, context);
	    return entry ? entry[0] : -1;
	  },

	  first: function first(notSetValue) {
	    return this.get(0, notSetValue);
	  },

	  flatten: function flatten(depth) {
	    return reify(this, flattenFactory(this, depth, false));
	  },

	  get: function get(index, notSetValue) {
	    index = wrapIndex(this, index);
	    return index < 0 ||
	      (this.size === Infinity || (this.size !== undefined && index > this.size))
	      ? notSetValue
	      : this.find(function (_, key) { return key === index; }, undefined, notSetValue);
	  },

	  has: function has(index) {
	    index = wrapIndex(this, index);
	    return (
	      index >= 0 &&
	      (this.size !== undefined
	        ? this.size === Infinity || index < this.size
	        : this.indexOf(index) !== -1)
	    );
	  },

	  interpose: function interpose(separator) {
	    return reify(this, interposeFactory(this, separator));
	  },

	  interleave: function interleave(/*...collections*/) {
	    var collections = [this].concat(arrCopy(arguments));
	    var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);
	    var interleaved = zipped.flatten(true);
	    if (zipped.size) {
	      interleaved.size = zipped.size * collections.length;
	    }
	    return reify(this, interleaved);
	  },

	  keySeq: function keySeq() {
	    return Range(0, this.size);
	  },

	  last: function last(notSetValue) {
	    return this.get(-1, notSetValue);
	  },

	  skipWhile: function skipWhile(predicate, context) {
	    return reify(this, skipWhileFactory(this, predicate, context, false));
	  },

	  zip: function zip(/*, ...collections */) {
	    var collections = [this].concat(arrCopy(arguments));
	    return reify(this, zipWithFactory(this, defaultZipper, collections));
	  },

	  zipAll: function zipAll(/*, ...collections */) {
	    var collections = [this].concat(arrCopy(arguments));
	    return reify(this, zipWithFactory(this, defaultZipper, collections, true));
	  },

	  zipWith: function zipWith(zipper /*, ...collections */) {
	    var collections = arrCopy(arguments);
	    collections[0] = this;
	    return reify(this, zipWithFactory(this, zipper, collections));
	  },
	});

	var IndexedCollectionPrototype = IndexedCollection.prototype;
	IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;
	IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;

	mixin$1(SetCollection, {
	  // ### ES6 Collection methods (ES6 Array and Map)

	  get: function get(value, notSetValue) {
	    return this.has(value) ? value : notSetValue;
	  },

	  includes: function includes(value) {
	    return this.has(value);
	  },

	  // ### More sequential methods

	  keySeq: function keySeq() {
	    return this.valueSeq();
	  },
	});

	SetCollection.prototype.has = CollectionPrototype.includes;
	SetCollection.prototype.contains = SetCollection.prototype.includes;

	// Mixin subclasses

	mixin$1(KeyedSeq, KeyedCollection.prototype);
	mixin$1(IndexedSeq, IndexedCollection.prototype);
	mixin$1(SetSeq, SetCollection.prototype);

	// #pragma Helper functions

	function reduce(collection, reducer, reduction, context, useFirst, reverse) {
	  assertNotInfinite(collection.size);
	  collection.__iterate(function (v, k, c) {
	    if (useFirst) {
	      useFirst = false;
	      reduction = v;
	    } else {
	      reduction = reducer.call(context, reduction, v, k, c);
	    }
	  }, reverse);
	  return reduction;
	}

	function keyMapper(v, k) {
	  return k;
	}

	function entryMapper(v, k) {
	  return [k, v];
	}

	function not(predicate) {
	  return function() {
	    return !predicate.apply(this, arguments);
	  };
	}

	function neg(predicate) {
	  return function() {
	    return -predicate.apply(this, arguments);
	  };
	}

	function defaultZipper() {
	  return arrCopy(arguments);
	}

	function defaultNegComparator(a, b) {
	  return a < b ? 1 : a > b ? -1 : 0;
	}

	function hashCollection(collection) {
	  if (collection.size === Infinity) {
	    return 0;
	  }
	  var ordered = isOrdered(collection);
	  var keyed = isKeyed(collection);
	  var h = ordered ? 1 : 0;
	  var size = collection.__iterate(
	    keyed
	      ? ordered
	        ? function (v, k) {
	            h = (31 * h + hashMerge(hash(v), hash(k))) | 0;
	          }
	        : function (v, k) {
	            h = (h + hashMerge(hash(v), hash(k))) | 0;
	          }
	      : ordered
	        ? function (v) {
	            h = (31 * h + hash(v)) | 0;
	          }
	        : function (v) {
	            h = (h + hash(v)) | 0;
	          }
	  );
	  return murmurHashOfSize(size, h);
	}

	function murmurHashOfSize(size, h) {
	  h = imul(h, 0xcc9e2d51);
	  h = imul((h << 15) | (h >>> -15), 0x1b873593);
	  h = imul((h << 13) | (h >>> -13), 5);
	  h = ((h + 0xe6546b64) | 0) ^ size;
	  h = imul(h ^ (h >>> 16), 0x85ebca6b);
	  h = imul(h ^ (h >>> 13), 0xc2b2ae35);
	  h = smi(h ^ (h >>> 16));
	  return h;
	}

	function hashMerge(a, b) {
	  return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int
	}

	var OrderedSet = /*@__PURE__*/(function (Set$$1) {
	  function OrderedSet(value) {
	    return value === null || value === undefined
	      ? emptyOrderedSet()
	      : isOrderedSet(value)
	        ? value
	        : emptyOrderedSet().withMutations(function (set) {
	            var iter = SetCollection(value);
	            assertNotInfinite(iter.size);
	            iter.forEach(function (v) { return set.add(v); });
	          });
	  }

	  if ( Set$$1 ) OrderedSet.__proto__ = Set$$1;
	  OrderedSet.prototype = Object.create( Set$$1 && Set$$1.prototype );
	  OrderedSet.prototype.constructor = OrderedSet;

	  OrderedSet.of = function of (/*...values*/) {
	    return this(arguments);
	  };

	  OrderedSet.fromKeys = function fromKeys (value) {
	    return this(KeyedCollection(value).keySeq());
	  };

	  OrderedSet.prototype.toString = function toString () {
	    return this.__toString('OrderedSet {', '}');
	  };

	  return OrderedSet;
	}(Set));

	OrderedSet.isOrderedSet = isOrderedSet;

	var OrderedSetPrototype = OrderedSet.prototype;
	OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;
	OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;
	OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;

	OrderedSetPrototype.__empty = emptyOrderedSet;
	OrderedSetPrototype.__make = makeOrderedSet;

	function makeOrderedSet(map, ownerID) {
	  var set = Object.create(OrderedSetPrototype);
	  set.size = map ? map.size : 0;
	  set._map = map;
	  set.__ownerID = ownerID;
	  return set;
	}

	var EMPTY_ORDERED_SET;
	function emptyOrderedSet() {
	  return (
	    EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))
	  );
	}

	var Record = function Record(defaultValues, name) {
	  var hasInitialized;

	  var RecordType = function Record(values) {
	    var this$1 = this;

	    if (values instanceof RecordType) {
	      return values;
	    }
	    if (!(this instanceof RecordType)) {
	      return new RecordType(values);
	    }
	    if (!hasInitialized) {
	      hasInitialized = true;
	      var keys = Object.keys(defaultValues);
	      var indices = (RecordTypePrototype._indices = {});
	      // Deprecated: left to attempt not to break any external code which
	      // relies on a ._name property existing on record instances.
	      // Use Record.getDescriptiveName() instead
	      RecordTypePrototype._name = name;
	      RecordTypePrototype._keys = keys;
	      RecordTypePrototype._defaultValues = defaultValues;
	      for (var i = 0; i < keys.length; i++) {
	        var propName = keys[i];
	        indices[propName] = i;
	        if (RecordTypePrototype[propName]) {
	          /* eslint-disable no-console */
	          typeof console === 'object' &&
	            console.warn &&
	            console.warn(
	              'Cannot define ' +
	                recordName(this) +
	                ' with property "' +
	                propName +
	                '" since that property name is part of the Record API.'
	            );
	          /* eslint-enable no-console */
	        } else {
	          setProp(RecordTypePrototype, propName);
	        }
	      }
	    }
	    this.__ownerID = undefined;
	    this._values = List().withMutations(function (l) {
	      l.setSize(this$1._keys.length);
	      KeyedCollection(values).forEach(function (v, k) {
	        l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);
	      });
	    });
	  };

	  var RecordTypePrototype = (RecordType.prototype = Object.create(
	    RecordPrototype
	  ));
	  RecordTypePrototype.constructor = RecordType;

	  if (name) {
	    RecordType.displayName = name;
	  }

	  return RecordType;
	};

	Record.prototype.toString = function toString () {
	  var str = recordName(this) + ' { ';
	  var keys = this._keys;
	  var k;
	  for (var i = 0, l = keys.length; i !== l; i++) {
	    k = keys[i];
	    str += (i ? ', ' : '') + k + ': ' + quoteString(this.get(k));
	  }
	  return str + ' }';
	};

	Record.prototype.equals = function equals (other) {
	  return (
	    this === other ||
	    (other &&
	      this._keys === other._keys &&
	      recordSeq(this).equals(recordSeq(other)))
	  );
	};

	Record.prototype.hashCode = function hashCode () {
	  return recordSeq(this).hashCode();
	};

	// @pragma Access

	Record.prototype.has = function has (k) {
	  return this._indices.hasOwnProperty(k);
	};

	Record.prototype.get = function get (k, notSetValue) {
	  if (!this.has(k)) {
	    return notSetValue;
	  }
	  var index = this._indices[k];
	  var value = this._values.get(index);
	  return value === undefined ? this._defaultValues[k] : value;
	};

	// @pragma Modification

	Record.prototype.set = function set (k, v) {
	  if (this.has(k)) {
	    var newValues = this._values.set(
	      this._indices[k],
	      v === this._defaultValues[k] ? undefined : v
	    );
	    if (newValues !== this._values && !this.__ownerID) {
	      return makeRecord(this, newValues);
	    }
	  }
	  return this;
	};

	Record.prototype.remove = function remove (k) {
	  return this.set(k);
	};

	Record.prototype.clear = function clear () {
	  var newValues = this._values.clear().setSize(this._keys.length);
	  return this.__ownerID ? this : makeRecord(this, newValues);
	};

	Record.prototype.wasAltered = function wasAltered () {
	  return this._values.wasAltered();
	};

	Record.prototype.toSeq = function toSeq () {
	  return recordSeq(this);
	};

	Record.prototype.toJS = function toJS$1 () {
	  return toJS(this);
	};

	Record.prototype.entries = function entries () {
	  return this.__iterator(ITERATE_ENTRIES);
	};

	Record.prototype.__iterator = function __iterator (type, reverse) {
	  return recordSeq(this).__iterator(type, reverse);
	};

	Record.prototype.__iterate = function __iterate (fn, reverse) {
	  return recordSeq(this).__iterate(fn, reverse);
	};

	Record.prototype.__ensureOwner = function __ensureOwner (ownerID) {
	  if (ownerID === this.__ownerID) {
	    return this;
	  }
	  var newValues = this._values.__ensureOwner(ownerID);
	  if (!ownerID) {
	    this.__ownerID = ownerID;
	    this._values = newValues;
	    return this;
	  }
	  return makeRecord(this, newValues, ownerID);
	};

	Record.isRecord = isRecord;
	Record.getDescriptiveName = recordName;
	var RecordPrototype = Record.prototype;
	RecordPrototype[IS_RECORD_SYMBOL] = true;
	RecordPrototype[DELETE] = RecordPrototype.remove;
	RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;
	RecordPrototype.getIn = getIn$1;
	RecordPrototype.hasIn = CollectionPrototype.hasIn;
	RecordPrototype.merge = merge;
	RecordPrototype.mergeWith = mergeWith;
	RecordPrototype.mergeIn = mergeIn;
	RecordPrototype.mergeDeep = mergeDeep$1;
	RecordPrototype.mergeDeepWith = mergeDeepWith$1;
	RecordPrototype.mergeDeepIn = mergeDeepIn;
	RecordPrototype.setIn = setIn$1;
	RecordPrototype.update = update$1$1;
	RecordPrototype.updateIn = updateIn$1;
	RecordPrototype.withMutations = withMutations;
	RecordPrototype.asMutable = asMutable;
	RecordPrototype.asImmutable = asImmutable;
	RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;
	RecordPrototype.toJSON = RecordPrototype.toObject =
	  CollectionPrototype.toObject;
	RecordPrototype.inspect = RecordPrototype.toSource = function() {
	  return this.toString();
	};

	function makeRecord(likeRecord, values, ownerID) {
	  var record = Object.create(Object.getPrototypeOf(likeRecord));
	  record._values = values;
	  record.__ownerID = ownerID;
	  return record;
	}

	function recordName(record) {
	  return record.constructor.displayName || record.constructor.name || 'Record';
	}

	function recordSeq(record) {
	  return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));
	}

	function setProp(prototype, name) {
	  try {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant$3(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      },
	    });
	  } catch (error) {
	    // Object.defineProperty failed. Probably IE8.
	  }
	}

	/**
	 * Returns a lazy Seq of `value` repeated `times` times. When `times` is
	 * undefined, returns an infinite sequence of `value`.
	 */
	var Repeat = /*@__PURE__*/(function (IndexedSeq$$1) {
	  function Repeat(value, times) {
	    if (!(this instanceof Repeat)) {
	      return new Repeat(value, times);
	    }
	    this._value = value;
	    this.size = times === undefined ? Infinity : Math.max(0, times);
	    if (this.size === 0) {
	      if (EMPTY_REPEAT) {
	        return EMPTY_REPEAT;
	      }
	      EMPTY_REPEAT = this;
	    }
	  }

	  if ( IndexedSeq$$1 ) Repeat.__proto__ = IndexedSeq$$1;
	  Repeat.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );
	  Repeat.prototype.constructor = Repeat;

	  Repeat.prototype.toString = function toString () {
	    if (this.size === 0) {
	      return 'Repeat []';
	    }
	    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	  };

	  Repeat.prototype.get = function get (index, notSetValue) {
	    return this.has(index) ? this._value : notSetValue;
	  };

	  Repeat.prototype.includes = function includes (searchValue) {
	    return is$2(this._value, searchValue);
	  };

	  Repeat.prototype.slice = function slice (begin, end) {
	    var size = this.size;
	    return wholeSlice(begin, end, size)
	      ? this
	      : new Repeat(
	          this._value,
	          resolveEnd(end, size) - resolveBegin(begin, size)
	        );
	  };

	  Repeat.prototype.reverse = function reverse () {
	    return this;
	  };

	  Repeat.prototype.indexOf = function indexOf (searchValue) {
	    if (is$2(this._value, searchValue)) {
	      return 0;
	    }
	    return -1;
	  };

	  Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {
	    if (is$2(this._value, searchValue)) {
	      return this.size;
	    }
	    return -1;
	  };

	  Repeat.prototype.__iterate = function __iterate (fn, reverse) {
	    var size = this.size;
	    var i = 0;
	    while (i !== size) {
	      if (fn(this._value, reverse ? size - ++i : i++, this) === false) {
	        break;
	      }
	    }
	    return i;
	  };

	  Repeat.prototype.__iterator = function __iterator (type, reverse) {
	    var this$1 = this;

	    var size = this.size;
	    var i = 0;
	    return new Iterator(
	      function () { return i === size
	          ? iteratorDone()
	          : iteratorValue(type, reverse ? size - ++i : i++, this$1._value); }
	    );
	  };

	  Repeat.prototype.equals = function equals (other) {
	    return other instanceof Repeat
	      ? is$2(this._value, other._value)
	      : deepEqual(other);
	  };

	  return Repeat;
	}(IndexedSeq));

	var EMPTY_REPEAT;

	function fromJS(value, converter) {
	  return fromJSWith(
	    [],
	    converter || defaultConverter,
	    value,
	    '',
	    converter && converter.length > 2 ? [] : undefined,
	    { '': value }
	  );
	}

	function fromJSWith(stack, converter, value, key, keyPath, parentValue) {
	  var toSeq = Array.isArray(value)
	    ? IndexedSeq
	    : isPlainObj(value)
	      ? KeyedSeq
	      : null;
	  if (toSeq) {
	    if (~stack.indexOf(value)) {
	      throw new TypeError('Cannot convert circular structure to Immutable');
	    }
	    stack.push(value);
	    keyPath && key !== '' && keyPath.push(key);
	    var converted = converter.call(
	      parentValue,
	      key,
	      toSeq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }
	      ),
	      keyPath && keyPath.slice()
	    );
	    stack.pop();
	    keyPath && keyPath.pop();
	    return converted;
	  }
	  return value;
	}

	function defaultConverter(k, v) {
	  return isKeyed(v) ? v.toMap() : v.toList();
	}

	var version = "4.0.0-rc.11";

	var Immutable = {
	  version: version,

	  Collection: Collection$1,
	  // Note: Iterable is deprecated
	  Iterable: Collection$1,

	  Seq: Seq,
	  Map: Map$2,
	  OrderedMap: OrderedMap,
	  List: List,
	  Stack: Stack,
	  Set: Set,
	  OrderedSet: OrderedSet,

	  Record: Record,
	  Range: Range,
	  Repeat: Repeat,

	  is: is$2,
	  fromJS: fromJS,
	  hash: hash,

	  isImmutable: isImmutable,
	  isCollection: isCollection,
	  isKeyed: isKeyed,
	  isIndexed: isIndexed,
	  isAssociative: isAssociative,
	  isOrdered: isOrdered,
	  isValueObject: isValueObject,
	  isSeq: isSeq,
	  isList: isList,
	  isMap: isMap,
	  isOrderedMap: isOrderedMap,
	  isStack: isStack,
	  isSet: isSet,
	  isOrderedSet: isOrderedSet,
	  isRecord: isRecord,

	  get: get$1,
	  getIn: getIn,
	  has: has$2,
	  hasIn: hasIn,
	  merge: merge$1,
	  mergeDeep: mergeDeep,
	  mergeWith: mergeWith$1,
	  mergeDeepWith: mergeDeepWith,
	  remove: remove,
	  removeIn: removeIn,
	  set: set$1,
	  setIn: setIn,
	  update: update$1,
	  updateIn: updateIn,
	};



	var refcorewithinput = /*#__PURE__*/Object.freeze({
		default: undefined
	});

	var _arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = _toObject(this);
	  var length = _toLength(O.length);
	  var aLen = arguments.length;
	  var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
	  var end = aLen > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


	_export(_export.P, 'Array', { fill: _arrayFill });

	var fill = _core.Array.fill;

	var fill$1 = createCommonjsModule(function (module) {
	module.exports = { "default": fill, __esModule: true };
	});

	unwrapExports(fill$1);

	/**
	 * @this {Promise}
	 */
	function finallyConstructor(callback) {
	  var constructor = this.constructor;
	  return this.then(
	    function(value) {
	      return constructor.resolve(callback()).then(function() {
	        return value;
	      });
	    },
	    function(reason) {
	      return constructor.resolve(callback()).then(function() {
	        return constructor.reject(reason);
	      });
	    }
	  );
	}

	// Store setTimeout reference so promise-polyfill will be unaffected by
	// other code modifying setTimeout (like sinon.useFakeTimers())
	var setTimeoutFunc = setTimeout;

	function noop$6() {}

	// Polyfill for Function.prototype.bind
	function bind(fn, thisArg) {
	  return function() {
	    fn.apply(thisArg, arguments);
	  };
	}

	/**
	 * @constructor
	 * @param {Function} fn
	 */
	function Promise$2(fn) {
	  if (!(this instanceof Promise$2))
	    throw new TypeError('Promises must be constructed via new');
	  if (typeof fn !== 'function') throw new TypeError('not a function');
	  /** @type {!number} */
	  this._state = 0;
	  /** @type {!boolean} */
	  this._handled = false;
	  /** @type {Promise|undefined} */
	  this._value = undefined;
	  /** @type {!Array<!Function>} */
	  this._deferreds = [];

	  doResolve(fn, this);
	}

	function handle(self, deferred) {
	  while (self._state === 3) {
	    self = self._value;
	  }
	  if (self._state === 0) {
	    self._deferreds.push(deferred);
	    return;
	  }
	  self._handled = true;
	  Promise$2._immediateFn(function() {
	    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
	      return;
	    }
	    var ret;
	    try {
	      ret = cb(self._value);
	    } catch (e) {
	      reject(deferred.promise, e);
	      return;
	    }
	    resolve(deferred.promise, ret);
	  });
	}

	function resolve(self, newValue) {
	  try {
	    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	    if (newValue === self)
	      throw new TypeError('A promise cannot be resolved with itself.');
	    if (
	      newValue &&
	      (typeof newValue === 'object' || typeof newValue === 'function')
	    ) {
	      var then = newValue.then;
	      if (newValue instanceof Promise$2) {
	        self._state = 3;
	        self._value = newValue;
	        finale(self);
	        return;
	      } else if (typeof then === 'function') {
	        doResolve(bind(then, newValue), self);
	        return;
	      }
	    }
	    self._state = 1;
	    self._value = newValue;
	    finale(self);
	  } catch (e) {
	    reject(self, e);
	  }
	}

	function reject(self, newValue) {
	  self._state = 2;
	  self._value = newValue;
	  finale(self);
	}

	function finale(self) {
	  if (self._state === 2 && self._deferreds.length === 0) {
	    Promise$2._immediateFn(function() {
	      if (!self._handled) {
	        Promise$2._unhandledRejectionFn(self._value);
	      }
	    });
	  }

	  for (var i = 0, len = self._deferreds.length; i < len; i++) {
	    handle(self, self._deferreds[i]);
	  }
	  self._deferreds = null;
	}

	/**
	 * @constructor
	 */
	function Handler(onFulfilled, onRejected, promise) {
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}

	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, self) {
	  var done = false;
	  try {
	    fn(
	      function(value) {
	        if (done) return;
	        done = true;
	        resolve(self, value);
	      },
	      function(reason) {
	        if (done) return;
	        done = true;
	        reject(self, reason);
	      }
	    );
	  } catch (ex) {
	    if (done) return;
	    done = true;
	    reject(self, ex);
	  }
	}

	Promise$2.prototype['catch'] = function(onRejected) {
	  return this.then(null, onRejected);
	};

	Promise$2.prototype.then = function(onFulfilled, onRejected) {
	  // @ts-ignore
	  var prom = new this.constructor(noop$6);

	  handle(this, new Handler(onFulfilled, onRejected, prom));
	  return prom;
	};

	Promise$2.prototype['finally'] = finallyConstructor;

	Promise$2.all = function(arr) {
	  return new Promise$2(function(resolve, reject) {
	    if (!arr || typeof arr.length === 'undefined')
	      throw new TypeError('Promise.all accepts an array');
	    var args = Array.prototype.slice.call(arr);
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;

	    function res(i, val) {
	      try {
	        if (val && (typeof val === 'object' || typeof val === 'function')) {
	          var then = val.then;
	          if (typeof then === 'function') {
	            then.call(
	              val,
	              function(val) {
	                res(i, val);
	              },
	              reject
	            );
	            return;
	          }
	        }
	        args[i] = val;
	        if (--remaining === 0) {
	          resolve(args);
	        }
	      } catch (ex) {
	        reject(ex);
	      }
	    }

	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};

	Promise$2.resolve = function(value) {
	  if (value && typeof value === 'object' && value.constructor === Promise$2) {
	    return value;
	  }

	  return new Promise$2(function(resolve) {
	    resolve(value);
	  });
	};

	Promise$2.reject = function(value) {
	  return new Promise$2(function(resolve, reject) {
	    reject(value);
	  });
	};

	Promise$2.race = function(values) {
	  return new Promise$2(function(resolve, reject) {
	    for (var i = 0, len = values.length; i < len; i++) {
	      values[i].then(resolve, reject);
	    }
	  });
	};

	// Use polyfill for setImmediate for performance gains
	Promise$2._immediateFn =
	  (typeof setImmediate === 'function' &&
	    function(fn) {
	      setImmediate(fn);
	    }) ||
	  function(fn) {
	    setTimeoutFunc(fn, 0);
	  };

	Promise$2._unhandledRejectionFn = function _unhandledRejectionFn(err) {
	  if (typeof console !== 'undefined' && console) {
	    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
	  }
	};

	(function () {
	  if (Array.prototype.fill) return;

	  var fill = function (value) {
	    // Steps 1-2.
	    if (this == null) {
	      throw new TypeError("this is null or not defined");
	    }

	    var O = Object(this);

	    // Steps 3-5.
	    var len = O.length >>> 0;

	    // Steps 6-7.
	    var start = arguments[1];
	    var relativeStart = start >> 0;

	    // Step 8.
	    var k = relativeStart < 0 ?
	      Math.max(len + relativeStart, 0) :
	      Math.min(relativeStart, len);

	    // Steps 9-10.
	    var end = arguments[2];
	    var relativeEnd = end === undefined ?
	      len : end >> 0;

	    // Step 11.
	    var last = relativeEnd < 0 ?
	      Math.max(len + relativeEnd, 0) :
	      Math.min(relativeEnd, len);

	    // Step 12.
	    while (k < last) {
	      O[k] = value;
	      k++;
	    }

	    // Step 13.
	    return O;
	  };

	  if (Object.defineProperty) {
	    try {
	      Object.defineProperty(Array.prototype, 'fill', {
	        value: fill,
	        configurable: true,
	        enumerable: false,
	        writable: true
	      });
	    } catch(e) {}
	  }

	  if (!Array.prototype.fill) {
	    Array.prototype.fill = fill;
	  }
	})(undefined);

	var array_prototype_fill = /*#__PURE__*/Object.freeze({

	});

	var support = {
	  searchParams: 'URLSearchParams' in self,
	  iterable: 'Symbol' in self && 'iterator' in Symbol,
	  blob:
	    'FileReader' in self &&
	    'Blob' in self &&
	    (function() {
	      try {
	        new Blob();
	        return true
	      } catch (e) {
	        return false
	      }
	    })(),
	  formData: 'FormData' in self,
	  arrayBuffer: 'ArrayBuffer' in self
	};

	function isDataView(obj) {
	  return obj && DataView.prototype.isPrototypeOf(obj)
	}

	if (support.arrayBuffer) {
	  var viewClasses = [
	    '[object Int8Array]',
	    '[object Uint8Array]',
	    '[object Uint8ClampedArray]',
	    '[object Int16Array]',
	    '[object Uint16Array]',
	    '[object Int32Array]',
	    '[object Uint32Array]',
	    '[object Float32Array]',
	    '[object Float64Array]'
	  ];

	  var isArrayBufferView =
	    ArrayBuffer.isView ||
	    function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    };
	}

	function normalizeName(name) {
	  if (typeof name !== 'string') {
	    name = String(name);
	  }
	  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
	    throw new TypeError('Invalid character in header field name')
	  }
	  return name.toLowerCase()
	}

	function normalizeValue(value) {
	  if (typeof value !== 'string') {
	    value = String(value);
	  }
	  return value
	}

	// Build a destructive iterator for the value list
	function iteratorFor(items) {
	  var iterator = {
	    next: function() {
	      var value = items.shift();
	      return {done: value === undefined, value: value}
	    }
	  };

	  if (support.iterable) {
	    iterator[Symbol.iterator] = function() {
	      return iterator
	    };
	  }

	  return iterator
	}

	function Headers(headers) {
	  this.map = {};

	  if (headers instanceof Headers) {
	    headers.forEach(function(value, name) {
	      this.append(name, value);
	    }, this);
	  } else if (Array.isArray(headers)) {
	    headers.forEach(function(header) {
	      this.append(header[0], header[1]);
	    }, this);
	  } else if (headers) {
	    Object.getOwnPropertyNames(headers).forEach(function(name) {
	      this.append(name, headers[name]);
	    }, this);
	  }
	}

	Headers.prototype.append = function(name, value) {
	  name = normalizeName(name);
	  value = normalizeValue(value);
	  var oldValue = this.map[name];
	  this.map[name] = oldValue ? oldValue + ', ' + value : value;
	};

	Headers.prototype['delete'] = function(name) {
	  delete this.map[normalizeName(name)];
	};

	Headers.prototype.get = function(name) {
	  name = normalizeName(name);
	  return this.has(name) ? this.map[name] : null
	};

	Headers.prototype.has = function(name) {
	  return this.map.hasOwnProperty(normalizeName(name))
	};

	Headers.prototype.set = function(name, value) {
	  this.map[normalizeName(name)] = normalizeValue(value);
	};

	Headers.prototype.forEach = function(callback, thisArg) {
	  for (var name in this.map) {
	    if (this.map.hasOwnProperty(name)) {
	      callback.call(thisArg, this.map[name], name, this);
	    }
	  }
	};

	Headers.prototype.keys = function() {
	  var items = [];
	  this.forEach(function(value, name) {
	    items.push(name);
	  });
	  return iteratorFor(items)
	};

	Headers.prototype.values = function() {
	  var items = [];
	  this.forEach(function(value) {
	    items.push(value);
	  });
	  return iteratorFor(items)
	};

	Headers.prototype.entries = function() {
	  var items = [];
	  this.forEach(function(value, name) {
	    items.push([name, value]);
	  });
	  return iteratorFor(items)
	};

	if (support.iterable) {
	  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	}

	function consumed(body) {
	  if (body.bodyUsed) {
	    return Promise.reject(new TypeError('Already read'))
	  }
	  body.bodyUsed = true;
	}

	function fileReaderReady(reader) {
	  return new Promise(function(resolve, reject) {
	    reader.onload = function() {
	      resolve(reader.result);
	    };
	    reader.onerror = function() {
	      reject(reader.error);
	    };
	  })
	}

	function readBlobAsArrayBuffer(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  reader.readAsArrayBuffer(blob);
	  return promise
	}

	function readBlobAsText(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  reader.readAsText(blob);
	  return promise
	}

	function readArrayBufferAsText(buf) {
	  var view = new Uint8Array(buf);
	  var chars = new Array(view.length);

	  for (var i = 0; i < view.length; i++) {
	    chars[i] = String.fromCharCode(view[i]);
	  }
	  return chars.join('')
	}

	function bufferClone(buf) {
	  if (buf.slice) {
	    return buf.slice(0)
	  } else {
	    var view = new Uint8Array(buf.byteLength);
	    view.set(new Uint8Array(buf));
	    return view.buffer
	  }
	}

	function Body() {
	  this.bodyUsed = false;

	  this._initBody = function(body) {
	    this._bodyInit = body;
	    if (!body) {
	      this._bodyText = '';
	    } else if (typeof body === 'string') {
	      this._bodyText = body;
	    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	      this._bodyBlob = body;
	    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	      this._bodyFormData = body;
	    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	      this._bodyText = body.toString();
	    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	      this._bodyArrayBuffer = bufferClone(body.buffer);
	      // IE 10-11 can't handle a DataView body.
	      this._bodyInit = new Blob([this._bodyArrayBuffer]);
	    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	      this._bodyArrayBuffer = bufferClone(body);
	    } else {
	      this._bodyText = body = Object.prototype.toString.call(body);
	    }

	    if (!this.headers.get('content-type')) {
	      if (typeof body === 'string') {
	        this.headers.set('content-type', 'text/plain;charset=UTF-8');
	      } else if (this._bodyBlob && this._bodyBlob.type) {
	        this.headers.set('content-type', this._bodyBlob.type);
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	      }
	    }
	  };

	  if (support.blob) {
	    this.blob = function() {
	      var rejected = consumed(this);
	      if (rejected) {
	        return rejected
	      }

	      if (this._bodyBlob) {
	        return Promise.resolve(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as blob')
	      } else {
	        return Promise.resolve(new Blob([this._bodyText]))
	      }
	    };

	    this.arrayBuffer = function() {
	      if (this._bodyArrayBuffer) {
	        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	      } else {
	        return this.blob().then(readBlobAsArrayBuffer)
	      }
	    };
	  }

	  this.text = function() {
	    var rejected = consumed(this);
	    if (rejected) {
	      return rejected
	    }

	    if (this._bodyBlob) {
	      return readBlobAsText(this._bodyBlob)
	    } else if (this._bodyArrayBuffer) {
	      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	    } else if (this._bodyFormData) {
	      throw new Error('could not read FormData body as text')
	    } else {
	      return Promise.resolve(this._bodyText)
	    }
	  };

	  if (support.formData) {
	    this.formData = function() {
	      return this.text().then(decode)
	    };
	  }

	  this.json = function() {
	    return this.text().then(JSON.parse)
	  };

	  return this
	}

	// HTTP methods whose capitalization should be normalized
	var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

	function normalizeMethod(method) {
	  var upcased = method.toUpperCase();
	  return methods.indexOf(upcased) > -1 ? upcased : method
	}

	function Request(input, options) {
	  options = options || {};
	  var body = options.body;

	  if (input instanceof Request) {
	    if (input.bodyUsed) {
	      throw new TypeError('Already read')
	    }
	    this.url = input.url;
	    this.credentials = input.credentials;
	    if (!options.headers) {
	      this.headers = new Headers(input.headers);
	    }
	    this.method = input.method;
	    this.mode = input.mode;
	    this.signal = input.signal;
	    if (!body && input._bodyInit != null) {
	      body = input._bodyInit;
	      input.bodyUsed = true;
	    }
	  } else {
	    this.url = String(input);
	  }

	  this.credentials = options.credentials || this.credentials || 'same-origin';
	  if (options.headers || !this.headers) {
	    this.headers = new Headers(options.headers);
	  }
	  this.method = normalizeMethod(options.method || this.method || 'GET');
	  this.mode = options.mode || this.mode || null;
	  this.signal = options.signal || this.signal;
	  this.referrer = null;

	  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	    throw new TypeError('Body not allowed for GET or HEAD requests')
	  }
	  this._initBody(body);
	}

	Request.prototype.clone = function() {
	  return new Request(this, {body: this._bodyInit})
	};

	function decode(body) {
	  var form = new FormData();
	  body
	    .trim()
	    .split('&')
	    .forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=');
	        var name = split.shift().replace(/\+/g, ' ');
	        var value = split.join('=').replace(/\+/g, ' ');
	        form.append(decodeURIComponent(name), decodeURIComponent(value));
	      }
	    });
	  return form
	}

	function parseHeaders(rawHeaders) {
	  var headers = new Headers();
	  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	  // https://tools.ietf.org/html/rfc7230#section-3.2
	  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
	  preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
	    var parts = line.split(':');
	    var key = parts.shift().trim();
	    if (key) {
	      var value = parts.join(':').trim();
	      headers.append(key, value);
	    }
	  });
	  return headers
	}

	Body.call(Request.prototype);

	function Response(bodyInit, options) {
	  if (!options) {
	    options = {};
	  }

	  this.type = 'default';
	  this.status = options.status === undefined ? 200 : options.status;
	  this.ok = this.status >= 200 && this.status < 300;
	  this.statusText = 'statusText' in options ? options.statusText : 'OK';
	  this.headers = new Headers(options.headers);
	  this.url = options.url || '';
	  this._initBody(bodyInit);
	}

	Body.call(Response.prototype);

	Response.prototype.clone = function() {
	  return new Response(this._bodyInit, {
	    status: this.status,
	    statusText: this.statusText,
	    headers: new Headers(this.headers),
	    url: this.url
	  })
	};

	Response.error = function() {
	  var response = new Response(null, {status: 0, statusText: ''});
	  response.type = 'error';
	  return response
	};

	var redirectStatuses = [301, 302, 303, 307, 308];

	Response.redirect = function(url, status) {
	  if (redirectStatuses.indexOf(status) === -1) {
	    throw new RangeError('Invalid status code')
	  }

	  return new Response(null, {status: status, headers: {location: url}})
	};

	var DOMException = self.DOMException;
	try {
	  new DOMException();
	} catch (err) {
	  DOMException = function(message, name) {
	    this.message = message;
	    this.name = name;
	    var error = Error(message);
	    this.stack = error.stack;
	  };
	  DOMException.prototype = Object.create(Error.prototype);
	  DOMException.prototype.constructor = DOMException;
	}

	function fetch$1(input, init) {
	  return new Promise(function(resolve, reject) {
	    var request = new Request(input, init);

	    if (request.signal && request.signal.aborted) {
	      return reject(new DOMException('Aborted', 'AbortError'))
	    }

	    var xhr = new XMLHttpRequest();

	    function abortXhr() {
	      xhr.abort();
	    }

	    xhr.onload = function() {
	      var options = {
	        status: xhr.status,
	        statusText: xhr.statusText,
	        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	      };
	      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	      var body = 'response' in xhr ? xhr.response : xhr.responseText;
	      resolve(new Response(body, options));
	    };

	    xhr.onerror = function() {
	      reject(new TypeError('Network request failed'));
	    };

	    xhr.ontimeout = function() {
	      reject(new TypeError('Network request failed'));
	    };

	    xhr.onabort = function() {
	      reject(new DOMException('Aborted', 'AbortError'));
	    };

	    xhr.open(request.method, request.url, true);

	    if (request.credentials === 'include') {
	      xhr.withCredentials = true;
	    } else if (request.credentials === 'omit') {
	      xhr.withCredentials = false;
	    }

	    if ('responseType' in xhr && support.blob) {
	      xhr.responseType = 'blob';
	    }

	    request.headers.forEach(function(value, name) {
	      xhr.setRequestHeader(name, value);
	    });

	    if (request.signal) {
	      request.signal.addEventListener('abort', abortXhr);

	      xhr.onreadystatechange = function() {
	        // DONE (success or failure)
	        if (xhr.readyState === 4) {
	          request.signal.removeEventListener('abort', abortXhr);
	        }
	      };
	    }

	    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	  })
	}

	fetch$1.polyfill = true;

	if (!self.fetch) {
	  self.fetch = fetch$1;
	  self.Headers = Headers;
	  self.Request = Request;
	  self.Response = Response;
	}

	var polyfill_shim = createCommonjsModule(function (module) {



	var _iterator2 = _interopRequireDefault(iterator$1);



	var _symbol2 = _interopRequireDefault(symbol$1);



	var _fill2 = _interopRequireDefault(fill$1);



	var _assign2 = _interopRequireDefault(assign$1);

	var _typeof = typeof _symbol2["default"] === "function" && typeof _iterator2["default"] === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2["default"] === "function" && obj.constructor === _symbol2["default"] && obj !== _symbol2["default"].prototype ? "symbol" : typeof obj; };



	var _objectAssign2 = _interopRequireDefault(objectAssign);



	var _promisePolyfill2 = _interopRequireDefault(Promise$2);



	var _arrayPrototype2 = _interopRequireDefault(array_prototype_fill);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	if (typeof _assign2["default"] === 'undefined' || _assign2["default"] === "undefined") {
	    Object.assign = _objectAssign2["default"];
	}
	if (typeof window.Promise === 'undefined') {
	    window.Promise = _promisePolyfill2["default"];
	}
	if (typeof _fill2["default"] === 'undefined') {
	    Array.fill = _arrayPrototype2["default"];
	}

	/**
	 * var template1="我是{0}，今年{1}了";
	  var template2="我是{name}，今年{age}了";
	  var result1=template1.format("loogn",22);
	  var result2=template2.format({name:"loogn",age:22});
	 */
	String.prototype.format = function (args) {
	    var result = this;
	    if (arguments.length > 0) {
	        if (arguments.length == 1 && (typeof args === 'undefined' ? 'undefined' : _typeof(args)) == "object") {
	            for (var key in args) {
	                if (args[key] != undefined) {
	                    var reg = new RegExp("({" + key + "})", "g");
	                    result = result.replace(reg, args[key]);
	                }
	            }
	        } else {
	            for (var i = 0; i < arguments.length; i++) {
	                if (arguments[i] != undefined) {
	                    //var reg = new RegExp("({[" + i + "]})", "g");//这个在索引大于9时会有问题，谢谢何以笙箫的指出
	                    var reg = new RegExp("({)" + i + "(})", "g");
	                    result = result.replace(reg, arguments[i]);
	                }
	            }
	        }
	    }
	    return result;
	};
	});

	unwrapExports(polyfill_shim);

	getCjsExportFromNamespace(Icon);

	getCjsExportFromNamespace(refcorewithinput);

	var RefCoreWithInput_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
		value: true
	});



	var _defineProperty2 = _interopRequireDefault(defineProperty$1);



	var _getOwnPropertyDescriptor2 = _interopRequireDefault(getOwnPropertyDescriptor$1);



	var _getOwnPropertyNames2 = _interopRequireDefault(getOwnPropertyNames$1);



	var _assign2 = _interopRequireDefault(assign$1);



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);



	var _stringify2 = _interopRequireDefault(stringify$1);

	var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _beeInputGroup2 = _interopRequireDefault(build$4);



	var _beeFormControl2 = _interopRequireDefault(build$2);













	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = (0, _getOwnPropertyNames2["default"])(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = (0, _getOwnPropertyDescriptor2["default"])(defaults, key); if (value && value.configurable && obj[key] === undefined) { (0, _defineProperty2["default"])(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : _defaults(subClass, superClass); }

	var refValParse = function refValParse(value) {
		if (!value) return { refname: '', refpk: '' };

		try {
			var valueMap = JSON.parse(value);
			if (!valueMap.hasOwnProperty('refname') || !valueMap.hasOwnProperty('refpk')) {
				return { refname: '', refpk: '' };
			} else {
				return valueMap;
			}
		} catch (e) {
			return { refname: '', refpk: '' };
		}
	};

	var propTypes$1 = {
		matchUrl: _propTypes2["default"].string,
		param: _propTypes2["default"].object,
		style: _propTypes2["default"].object,
		// displayField: PropTypes.string,//显示内容的键
		valueField: _propTypes2["default"].string, //真实 value 的键
		filterUrl: _propTypes2["default"].string,
		value: _propTypes2["default"].string,
		wrapClassName: _propTypes2["default"].string,
		canClickGoOn: _propTypes2["default"].func,
		canInputGoOn: _propTypes2["default"].func,
		filterData: _propTypes2["default"].array,
		filterUrlFunc: _propTypes2["default"].func
	};

	var defaultProps = {
		className: '',
		backdrop: true,
		style: {
			width: 200
		},
		param: {
			refCode: 'test_common' //test_common||test_grid||test_tree||test_treeTable
		},
		onCancel: function onCancel(p) {},
		onSave: function onSave(sels) {},
		value: '',
		// displayField: 'refname',//显示内容的键
		valueField: 'refpk', //真实 value 的键
		//将 filterRefUrl 改为 mactchUrl
		matchUrl: '',
		filterUrl: '',
		wrapClassName: '',
		canClickGoOn: function canClickGoOn() {
			return true;
		},
		canInputGoOn: function canInputGoOn() {
			return true;
		},
		filterData: [],
		filterUrlFunc: function filterUrlFunc(value) {}
	};

	var FilterItem = function FilterItem(props) {
		return _react2["default"].createElement(
			'li',
			{
				className: 'ref-filter-item',
				onClick: function onClick(e) {
					if (e.target.dataset.type !== 'filteritem') {
						e.target.dataset.type = 'filteritem';
					}
				},
				'data-value': props.value,
				'data-type': 'filteritem'

			},
			props.text
		);
	};

	var getFilterData = function getFilterData(data, valueField, displayField) {
		var filterItems = [],
		    filterDataMap = {};
		data.forEach(function (item) {
			var values = item[valueField];
			//displayField 存在两种形态，通过字符匹配和函数匹配来获得展示的字段
			var names = '';
			if (typeof displayField === 'function') {
				names = displayField(item);
			} else {
				names = displayField.format(item);
			}
			filterItems.push(_react2["default"].createElement(FilterItem, { key: values, text: names, value: values }));
			filterDataMap[values] = item;
		});
		return { filterItems: filterItems, filterDataMap: filterDataMap };
	};

	var RefCoreWithInput = function (_Component) {
		_inherits(RefCoreWithInput, _Component);

		function RefCoreWithInput(props) {
			_classCallCheck(this, RefCoreWithInput);

			var _this = _possibleConstructorReturn(this, _Component.call(this, props));

			_this.handleChange = function (values, record) {
				var _this$props = _this.props,
				    onChange = _this$props.onChange,
				    value = _this$props.value;

				if (values === value) return;
				if (onChange) {
					onChange(values, record);
				}
			};

			_this.onCancelModal = function (p) {

				_this.setState({
					isClick: false,
					showModal: false
				});
				_this.props.onCancel(p, _this.refDom);
			};

			_this.onSaveModal = function (result) {
				var _this$props2 = _this.props,
				    _this$props2$displayF = _this$props2.displayField,
				    displayField = _this$props2$displayF === undefined ? '{refname}' : _this$props2$displayF,
				    valueField = _this$props2.valueField,
				    onSave = _this$props2.onSave;

				var values = result.map(function (item) {
					return item[valueField];
				}).join(',');
				var names = result.map(function (item) {
					if (typeof displayField === 'function') {
						return displayField(item);
					} else {
						return displayField.format(item);
					}
				}).join(';');

				_this.setState({
					checkedArray: result,
					savedData: values,
					savedShow: names,
					isClick: false,
					showModal: false
				}, function () {
					onSave(result, names, _this.refDom);
					_this.handleChange((0, _stringify2["default"])({
						refname: names,
						refpk: values
					}), result);
				});
			};

			_this.handleClick = function () {
				var isClick = _this.state.isClick;

				if (_this.props.disabled || isClick) {
					return;
				}
				if (!_this.props.canClickGoOn()) return;
				_this.setState({
					isClick: true,
					showModal: true
				});
			};

			_this.onClickFilterItem = function (e) {
				e.stopPropagation();
				var _e$target$dataset = e.target.dataset,
				    dataset = _e$target$dataset === undefined ? {} : _e$target$dataset;

				if (dataset.type !== 'filteritem') {
					return;
				}
				var filterDataMap = _this.state.filterDataMap;
				var _this$props3 = _this.props,
				    _this$props3$displayF = _this$props3.displayField,
				    displayField = _this$props3$displayF === undefined ? "{refname}" : _this$props3$displayF,
				    valueField = _this$props3.valueField,
				    onSave = _this$props3.onSave;

				var filterDataItem = filterDataMap[dataset.value];
				var savedData = filterDataItem[valueField];
				//displayField 存在两种形态，通过字符匹配和函数匹配来获得展示的字段
				var savedShow = '';
				if (typeof displayField === 'function') {
					savedShow = displayField(filterDataItem);
				} else {
					savedShow = displayField.format(filterDataItem);
				}
				_this.setState({
					savedData: savedData, savedShow: savedShow,
					filtering: false,
					checkedArray: [filterDataMap[dataset.value]]
				}, function () {

					_this.handleChange((0, _stringify2["default"])({
						refname: savedShow,
						refpk: dataset.value
					}));
					onSave([filterDataItem]);
				});
			};

			_this.onFilter = function (content) {
				var _this$props4 = _this.props,
				    filterUrl = _this$props4.filterUrl,
				    param = _this$props4.param,
				    valueField = _this$props4.valueField,
				    _this$props4$displayF = _this$props4.displayField,
				    displayField = _this$props4$displayF === undefined ? "{refname}" : _this$props4$displayF;
				//20190417这里修改逻辑，如果filterUrl存在，使用下面逻辑，否则回调然后用户传数据进来

				if (!filterUrl) {
					_this.props.filterUrlFunc(content);
					return false;
				}
				if (!content) return;
				(0, request.get)(filterUrl, _extends({}, param, {
					refCode: param.refCode,
					content: content
				})).then(function (response) {
					var data = response.data;

					var _getFilterData = getFilterData(data, valueField, displayField),
					    filterItems = _getFilterData.filterItems,
					    filterDataMap = _getFilterData.filterDataMap;

					_this.setState({
						filterItems: filterItems,
						filterDataMap: filterDataMap
					});
				});
			};

			_this.onChangeFormControl = function (value) {
				if (!_this.props.canInputGoOn(value)) return;
				_this.setState({
					filterText: value,
					filtering: true
				});
				_this.onFilter(value);
			};

			_this.onBlurFormControl = function () {
				_this.setState({
					filterText: '',
					filtering: Boolean(_this.selectFilter)
				});
			};

			_this.onFocusFormControl = function () {};

			_this.onFilterMouseEnter = function () {
				_this.selectFilter = true;
			};

			_this.onFilterMouseLeave = function () {
				_this.selectFilter = false;
			};

			_this.onMatchInitValue = function (checkedArray) {
				_this.setState({ checkedArray: checkedArray });
			};

			var valueMap = refValParse(props.value) || {};
			_this.state = {
				checkedArray: [],
				savedData: '',
				savedShow: valueMap.refname,
				filterText: '',
				filterItems: [],
				filterData: props.filterUrl ? [] : props.filterData || [],
				filterDataMap: {},
				filtering: false,
				showModal: false
			};
			_this.childrenComponent = _this.props.children;
			return _this;
		}

		RefCoreWithInput.prototype.componentDidMount = function componentDidMount() {}
		// this.setValues();
		// this.initComponent(this.props)

		// shouldComponentUpdate(nextProps, nextState){
		// 	return true;
		// }
		;

		RefCoreWithInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
			var _this2 = this;

			var _props = this.props,
			    valueField = _props.valueField,
			    _props$displayField = _props.displayField,
			    displayField = _props$displayField === undefined ? "{refname}" : _props$displayField,
			    filterUrl = _props.filterUrl;

			if (nextProps.value !== this.props.value) {
				var valueMap = refValParse(nextProps.value) || {};
				// let { valueField } = this.props;
				var checkedArray = this.state.checkedArray;

				var diffValue = checkedArray.some(function (item) {
					return !Boolean(~valueMap.refpk.indexOf(item[valueField]));
				});
				if (!(0, Immutable.is)(this.state.filterData, nextProps.filterData) && !filterUrl) {
					var _getFilterData2 = getFilterData(nextProps.filterData, valueField, displayField),
					    filterItems = _getFilterData2.filterItems,
					    filterDataMap = _getFilterData2.filterDataMap;

					this.setState({
						filterItems: filterItems,
						filterDataMap: filterDataMap,
						filterData: nextProps.filterData,
						checkedArray: diffValue ? [] : checkedArray,
						savedShow: valueMap.refname
					}, function () {
						_this2.handleChange(nextProps.value);
					});
				} else {
					this.setState({
						checkedArray: diffValue ? [] : checkedArray,
						savedShow: valueMap.refname
					}, function () {
						_this2.handleChange(nextProps.value);
					});
				}
			} else {
				//filterUrl不存在，只传入filterData
				if (!(0, Immutable.is)(this.state.filterData, nextProps.filterData) && !filterUrl) {
					var _getFilterData3 = getFilterData(nextProps.filterData, valueField, displayField),
					    _filterItems = _getFilterData3.filterItems,
					    _filterDataMap = _getFilterData3.filterDataMap;

					this.setState({
						filterItems: _filterItems,
						filterDataMap: _filterDataMap,
						filterData: nextProps.filterData
					});
				}
				return false;
			}
			return true;
		};
		// componentWillReceiveProps(nextProp) {
		// 	if (nextProp.value !== this.props.value) {
		// 		this.initComponent(nextProp);
		// 	}
		// }

		/**
	  * 点击打开参照弹出层时，做字段校验。
	  */

		/**
	  * 控制模糊匹配时选择匹配项文本框失去焦点后 blur 先于 click 触发造成的选择未生效问题
	  */


		RefCoreWithInput.prototype.render = function render() {
			var _state = this.state,
			    savedShow = _state.savedShow,
			    savedData = _state.savedData,
			    filterItems = _state.filterItems,
			    filtering = _state.filtering,
			    filterText = _state.filterText,
			    checkedArray = _state.checkedArray,
			    showModal = _state.showModal;
			var _props2 = this.props,
			    displayField = _props2.displayField,
			    valueField = _props2.valueField,
			    form = _props2.form,
			    rules = _props2.rules,
			    className = _props2.className,
			    wrapClassName = _props2.wrapClassName,
			    disabled = _props2.disabled,
			    style = _props2.style,
			    placeholder = _props2.placeholder;

			var childrenProps = _extends(_extends({}, this.props), {
				showModal: showModal,
				checkedArray: checkedArray,
				onCancel: this.onCancelModal,
				onSave: this.onSaveModal,
				onMatchInitValue: this.onMatchInitValue
			});
			delete childrenProps.children;
			return _react2["default"].createElement(
				'div',
				{ className: 'ref-input-wrap ' + wrapClassName,
					style: _extends({}, style)
				},
				_react2["default"].createElement(
					_beeInputGroup2["default"],
					{ simple: true,
						style: {
							width: '100%'
						} },
					_react2["default"].createElement(_beeFormControl2["default"], _extends({
						disabled: disabled,
						type: 'text',
						style: {
							width: '100%'
						}
					}, savedShow ? { readOnly: "readonly" } : '', {
						placeholder: placeholder,
						value: filtering ? filterText : savedShow,
						onFocus: this.onFocusFormControl,
						onChange: this.onChangeFormControl,
						onBlur: this.onBlurFormControl
					})),
					_react2["default"].createElement(
						_beeInputGroup2["default"].Button,
						{ shape: 'border', onClick: this.handleClick },
						_react2["default"].createElement(
							'span',
							{ className: 'uf uf-navmenu ' + (disabled ? 'ref-input-wrap-display' : '') },
							' '
						)
					)
				),
				_react2["default"].cloneElement(this.childrenComponent, childrenProps),
				_react2["default"].createElement(
					'div',
					{ className: 'ref-input-wrap-filter-panel', style: { display: filtering ? '' : 'none', width: style.width || 200 } },
					_react2["default"].createElement(
						'ul',
						{
							onClick: this.onClickFilterItem,
							onMouseEnter: this.onFilterMouseEnter,
							onMouseLeave: this.onFilterMouseLeave
						},
						filterItems.length ? filterItems.map(function (item) {
							return item;
						}) : _react2["default"].createElement(
							'li',
							{ className: 'ref-filter-empty' },
							'\u6CA1\u6709\u5339\u914D\u5230\u6570\u636E'
						)
					)
				)
			);
		};

		return RefCoreWithInput;
	}(React__default.Component);

	RefCoreWithInput.propTypes = propTypes$1;
	RefCoreWithInput.defaultProps = defaultProps;
	exports["default"] = RefCoreWithInput;
	module.exports = exports['default'];
	});

	unwrapExports(RefCoreWithInput_1);

	var createApi = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.createRefInput = exports.createRefModal = undefined;



	var _defineProperty2 = _interopRequireDefault(defineProperty$1);



	var _getOwnPropertyDescriptor2 = _interopRequireDefault(getOwnPropertyDescriptor$1);



	var _getOwnPropertyNames2 = _interopRequireDefault(getOwnPropertyNames$1);



	var _assign2 = _interopRequireDefault(assign$1);



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);

	var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _reactDom2 = _interopRequireDefault(ReactDOM__default);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _defaults(obj, defaults) { var keys = (0, _getOwnPropertyNames2["default"])(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = (0, _getOwnPropertyDescriptor2["default"])(defaults, key); if (value && value.configurable && obj[key] === undefined) { (0, _defineProperty2["default"])(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : _defaults(subClass, superClass); }

	//监听者模式对象
	function Listenter() {
	    this.events = {};
	    this.on = function (type, handler) {
	        if (typeof this.events[type] == "undefined") {
	            this.events[type] = [];
	        }
	        this.events[type].push(handler);
	    };
	    this.fire = function (event) {
	        if (this.events[event] instanceof Array) {
	            var events = this.events[event];
	            for (var i = 0, len = events.length; i < len; i++) {
	                events[i](event);
	            }
	        }
	    };
	    return this;
	}

	//监听队列
	var Queue = {};

	//用于监听触发时间的 ReactJS 容器

	var Container = function (_Component) {
	    _inherits(Container, _Component);

	    function Container(props) {
	        _classCallCheck(this, Container);

	        var _this2 = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this2.onCancelModal = function (p) {
	            var onCancel = _this2.props.onCancel;

	            _this2.setState({
	                showModal: false
	            });
	            if (onCancel) {
	                onCancel();
	            }
	        };

	        _this2.onSaveModal = function (record) {
	            var onSave = _this2.props.onSave;

	            _this2.setState({
	                checkedArray: record,
	                showModal: false
	            });
	            if (onSave) {
	                onSave(record);
	            }
	        };

	        _this2.state = props;
	        return _this2;
	    }

	    Container.prototype.componentDidMount = function componentDidMount() {
	        var _this3 = this;

	        var _this = this;
	        var listener = Queue[this.props.eventId].listener;

	        if (!listener) {
	            listener = Queue[this.props.eventId] = new Listenter();
	        }
	        listener.on("show", function () {
	            _this.setState({
	                showModal: true
	            });
	        });
	        listener.on("hide", function () {
	            _this.setState({
	                showModal: false
	            }, function () {
	                var onCancel = _this3.props.onCancel;

	                if (onCancel) {
	                    onCancel();
	                }
	            });
	        });
	    };

	    Container.prototype.render = function render() {
	        var children = this.props.children;

	        return _react2["default"].cloneElement(children, _extends({}, this.state, {
	            onSave: this.onSaveModal,
	            onCancel: this.onCancelModal
	        }));
	    };

	    return Container;
	}(React__default.Component);

	function createRefInput(selector, component, props) {
	    var dom = document.getElementById(selector);
	    var destory = function destory() {
	        try {
	            dom.parentNode.removeChild(dom);
	        } catch (e) {
	            console.log(e);
	        }
	    };

	    _reactDom2["default"].render(_react2["default"].cloneElement(component, _extends({}, props)), dom);
	    return {
	        destory: destory,
	        dom: dom
	    };
	}
	function createRefModal(_ref, callback) {
	    var component = _ref.component,
	        props = _objectWithoutProperties(_ref, ['component']);

	    var modalContainer = document.createElement('div');
	    document.body.appendChild(modalContainer);
	    //随机生成队列ID
	    var eventId = 'listener-' + Math.random();

	    Queue[eventId] = new Listenter();
	    var param = {
	        show: function show() {
	            if (!Queue[eventId]) {
	                return false;
	            } else {
	                Queue[eventId].fire('show');
	                return true;
	            }
	        },
	        hide: function hide() {
	            if (!Queue[eventId]) {
	                return false;
	            } else {
	                Queue[eventId].fire('hide');
	                return true;
	            }
	        },
	        destory: function destory() {
	            if (!Queue[eventId]) {
	                return false;
	            } else {
	                delete Queue[eventId];
	                return true;
	            }
	        }
	    };
	    _reactDom2["default"].render(_react2["default"].createElement(
	        Container,
	        _extends({}, props, {

	            eventId: eventId
	        }),
	        _react2["default"].cloneElement(component)
	    ), modalContainer, function () {
	        if (typeof callback === 'function') {
	            callback(param);
	        }
	    });
	    return param;
	}

	exports.createRefModal = createRefModal;
	exports.createRefInput = createRefInput;
	});

	unwrapExports(createApi);
	var createApi_1 = createApi.createRefInput;
	var createApi_2 = createApi.createRefModal;

	var RefCoreGlobal_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _defineProperty2 = _interopRequireDefault(defineProperty$1);



	var _getOwnPropertyDescriptor2 = _interopRequireDefault(getOwnPropertyDescriptor$1);



	var _getOwnPropertyNames2 = _interopRequireDefault(getOwnPropertyNames$1);



	var _assign2 = _interopRequireDefault(assign$1);



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);

	var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _defaults(obj, defaults) { var keys = (0, _getOwnPropertyNames2["default"])(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = (0, _getOwnPropertyDescriptor2["default"])(defaults, key); if (value && value.configurable && obj[key] === undefined) { (0, _defineProperty2["default"])(obj, key, value); } } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : _defaults(subClass, superClass); }

	var RefCoreGlobal = function (_Component) {
	    _inherits(RefCoreGlobal, _Component);

	    function RefCoreGlobal(props) {
	        _classCallCheck(this, RefCoreGlobal);

	        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

	        _this.state = {
	            // checkedArray: props.checkedArray,
	        };
	        return _this;
	    }

	    RefCoreGlobal.prototype.componentDidMount = function componentDidMount() {
	        // var self = this;
	        // var { refType , checkedArray } = this.props;
	        // var tempCheckedArray = checkedArray;
	        // if(this.props.onBeforeAjax){
	        //     this.props.onBeforeAjax('begin')
	        // }
	        // //对checkedArray作判断
	        // function ajaxWrap(val){
	        //     var value = {};
	        //     var url = option.refModelUrl.totalDataUrl
	        //     fetchJ(url,{
	        //         ...option.param,
	        //         pk_val:val,
	        //     })
	        //     // .then( (response) => { return JSON.parse(response); })
	        //     .then( ({ data }) => {
	        //         var checkedArray = data.filter(({refpk})=>{
	        //             return tempCheckedArray.indexOf(refpk)>-1
	        //         })
	        //         checkedArray = checkedArray.map((v,k)=>{
	        //             v.key = v.refpk;
	        //             return v
	        //         })
	        //         self.setState({
	        //             checkedArray,
	        //         })
	        //         // return checkedArray;
	        //     })
	        //     .catch(()=>{
	        //         self.setState({
	        //             checkedArray:[]
	        //         })
	        //     })
	        // }
	        // if(!checkedArray || checkedArray==[] || checkedArray.length === 0 ){
	        //     checkedArray = [];
	        // }else{
	        //     if(typeof(checkedArray[0]) === 'object'){
	        //         //todo nothing
	        //     }else{
	        //         ajaxWrap(checkedArray);
	        //     }
	        // }
	    };

	    RefCoreGlobal.prototype.render = function render() {
	        // var { checkedArray } = this.state;
	        return _react2["default"].createElement(
	            'div',
	            null,
	            _react2["default"].cloneElement(this.props.children, _extends({}, this.props))
	        );
	    };

	    return RefCoreGlobal;
	}(React__default.Component);

	exports["default"] = RefCoreGlobal;
	module.exports = exports['default'];
	});

	unwrapExports(RefCoreGlobal_1);



	var refcore = /*#__PURE__*/Object.freeze({
		default: undefined
	});

	getCjsExportFromNamespace(refcore);

	var lib$3 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.SearchPanelItem = exports.RefSearchPanel = exports.createRefMultipleTableModal = exports.createRefMultipleTable = exports.RefMultipleTable = exports.RefMultipleTableWithInput = undefined;



	var _assign2 = _interopRequireDefault(assign$1);



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);

	var _extends = _assign2["default"] || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _react2 = _interopRequireDefault(React__default);



	var _RefMultipeTableBaseUI2 = _interopRequireDefault(RefMultipeTableBaseUI);



	var _RefSearchPanel2 = _interopRequireDefault(RefSearchPanel_1);



	var _RefCoreWithInput2 = _interopRequireDefault(RefCoreWithInput_1);





	var _RefCoreGlobal2 = _interopRequireDefault(RefCoreGlobal_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = (0, _create2["default"])(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) _setPrototypeOf2["default"] ? (0, _setPrototypeOf2["default"])(subClass, superClass) : subClass.__proto__ = superClass; }

	// import './index.less' //webpack打包需要放开
	function RefMultipleTable(props) {
	    return _react2["default"].createElement(
	        _RefCoreGlobal2["default"],
	        props,
	        _react2["default"].createElement(_RefMultipeTableBaseUI2["default"], null)
	    );
	}
	function createRefMultipleTable(selector, props, callback) {
	    return (0, createApi.createRefInput)(selector, _react2["default"].createElement(RefMultipleTableWithInput, null), props, function (param) {
	        if (typeof callback === 'function') {
	            callback(param);
	        }
	    });
	}
	function createRefMultipleTableModal(props, callback) {
	    return (0, createApi.createRefModal)(_extends({
	        component: _react2["default"].createElement(RefMultipleTable, null)
	    }, props), function (param) {
	        if (typeof callback === 'function') {
	            callback(param);
	        }
	    });
	}

	var RefMultipleTableWithInput = function (_Component) {
	    _inherits(RefMultipleTableWithInput, _Component);

	    function RefMultipleTableWithInput() {
	        _classCallCheck(this, RefMultipleTableWithInput);

	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	    }

	    RefMultipleTableWithInput.prototype.render = function render() {
	        return _react2["default"].createElement(
	            _RefCoreWithInput2["default"],
	            this.props,
	            _react2["default"].createElement(RefMultipleTable, null)
	        );
	    };

	    return RefMultipleTableWithInput;
	}(React__default.Component);

	exports["default"] = _RefMultipeTableBaseUI2["default"];
	exports.RefMultipleTableWithInput = RefMultipleTableWithInput;
	exports.RefMultipleTable = RefMultipleTable;
	exports.createRefMultipleTable = createRefMultipleTable;
	exports.createRefMultipleTableModal = createRefMultipleTableModal;
	exports.RefSearchPanel = _RefSearchPanel2["default"];
	exports.SearchPanelItem = RefSearchPanel_1.SearchPanelItem;
	});

	unwrapExports(lib$3);
	var lib_1$1 = lib$3.SearchPanelItem;
	var lib_2$1 = lib$3.RefSearchPanel;
	var lib_3$1 = lib$3.createRefMultipleTableModal;
	var lib_4$1 = lib$3.createRefMultipleTable;
	var lib_5$1 = lib$3.RefMultipleTable;
	var lib_6$1 = lib$3.RefMultipleTableWithInput;

	var request$1 = (function (url, options) {
	  var params = Object.assign({}, options.param, {
	    r: Math.random()
	  });
	  return axios({
	    method: options.method,
	    url: url,
	    data: options.data,
	    headers: {
	      'X-Requested-With': 'XMLHttpRequest'
	    },
	    params: params // timeout: 20000

	  }).catch(function (err) {
	    console.log(err);
	    var res = err.response;

	    if (res) {
	      var status = res.status,
	          msg = res.data.msg;

	      switch (status) {
	        case 401:
	          console.log("RBAC鉴权失败!" + msg);
	          return Promise.resolve(res);

	        case 306:
	          window.top.location.href = '/wbalone/pages/login/login.html';
	          break;

	        default:
	      }
	    } // setTimeout(() => {
	    //     if (err.message == 'Network Error' || err.response == undefined) {
	    //         window.top.location.href = '/wbalone/pages/login/login.html';
	    //     }
	    // }, 3000);

	  });
	});

	var _dec, _class$1, _temp;
	var dataType = "grid";
	var TableRender = (_dec = miniStore.connect(function (state) {
	  return {
	    form: state.form
	  };
	}), _dec(_class$1 = (_temp =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(TableRender, _Component);

	  function TableRender(props) {
	    var _this2;

	    _this2 = _Component.call(this, props) || this;

	    _this2.onSave = function (item) {
	      console.log("save", item);
	    };

	    _this2.onCancel = function () {};

	    _this2.initComponent = function () {
	      var _this = assertThisInitialized(_this2);

	      var param = _this.param,
	          valueField = _this.valueField,
	          displayField = _this.displayField,
	          value = _this.value;
	      param.page = {
	        pageSize: 10,
	        pageIndex: 1
	      };
	      var requestList = [_this.getTableHeader(), _this.getTableData(param)];
	      var valueMap = refValParse(value, valueField, displayField);

	      if (_this.checkedArray.length == 0 && valueMap[valueField]) {
	        requestList.push(new Promise(function (resolve, reject) {
	          resolve({
	            data: []
	          });
	        }));
	      }

	      Promise.all(requestList).then(function (_ref) {
	        var columnsData = _ref[0],
	            bodyData = _ref[1],
	            matchData = _ref[2];

	        // 请求完表体数据回调
	        if (_this.onAfterAjax) {
	          _this.onAfterAjax(bodyData);
	        }

	        if (matchData) {
	          var _matchData$data = matchData.data,
	              data = _matchData$data === void 0 ? [] : _matchData$data;
	          _this.checkedMap = {};
	          _this.checkedArray = data.map(function (item) {
	            item.key = item[valueField];
	            item._checked = true;
	            _this.checkedMap[item.key] = item;
	            return item;
	          }); // if (Object.prototype.toString.call(onMatchInitValue) === '[object Function]') {
	          //     onMatchInitValue(data);
	          // }

	          _this.setState({
	            selectedDataLength: _this2.checkedArray.length,
	            mustRender: Math.random()
	          });
	        }

	        _this.launchTableHeader(columnsData);

	        _this.launchTableData(bodyData);

	        _this.setState({
	          showLoading: false
	        });
	      }).catch(function (e) {
	        _this.launchTableHeader({});

	        _this.launchTableData({});

	        _this.setState({
	          showLoading: false
	        });

	        console.error(e);
	      });
	    };

	    _this2.convertMetaTableData = function () {
	      var _assertThisInitialize = assertThisInitialized(_this2),
	          view = _assertThisInitialize.view;

	      var strFieldCode = [],
	          strFieldName = [],
	          tpl = {};
	      view.containers[0].controls.forEach(function (item) {
	        strFieldCode.push(item.cFieldName);
	        strFieldName.push(item.cCaption);
	      });
	      tpl["rootName"] = view.cTemplateTitle;
	      tpl["refName"] = view.cTemplateTitle;
	      tpl["defaultFieldCount"] = strFieldCode.length;
	      tpl["strFieldCode"] = strFieldCode;
	      tpl["strFieldName"] = strFieldName;
	      return tpl;
	    };

	    _this2.getTableHeader = function () {
	      return new Promise(function (resolve, reject) {
	        resolve(_this2.convertMetaTableData());
	      });
	    };

	    _this2.getTableData = function (params) {
	      return request$1(_this2.tableBodyUrl, {
	        method: "post",
	        data: params
	      });
	    };

	    _this2.launchTableHeader = function (data) {
	      if (!data) return;
	      var multiple = _this2.props.multiple;
	      var keyList = data.strFieldCode || [];
	      var titleList = data.strFieldName || [];
	      var valueField = _this2.valueField;
	      _this2.fliterFormInputs = [];
	      var colunmsList = keyList.map(function (item, index) {
	        _this2.fliterFormInputs.push(React__default.createElement(lib_1$1, {
	          key: item,
	          name: item,
	          text: titleList[index]
	        }, React__default.createElement(tinperBee.FormControl, null)));

	        return {
	          key: item,
	          dataIndex: item,
	          title: titleList[index]
	        };
	      });

	      if (colunmsList.length === 0) {
	        colunmsList = [{
	          title: "未传递表头数据",
	          dataIndex: "nodata",
	          key: "nodata"
	        }];
	      } else if (!multiple) {
	        //单选时用对号符号标记当前行选中
	        colunmsList.unshift({
	          title: " ",
	          dataIndex: "a",
	          key: "a",
	          width: 45,
	          render: function render(text, record, index) {
	            return React__default.createElement(tinperBee.Radio.RadioGroup, {
	              className: "in-table",
	              name: record[valueField],
	              selectedValue: record._checked ? record[valueField] : null
	            }, React__default.createElement(tinperBee.Radio, {
	              value: record[valueField]
	            }));
	          }
	        });
	      }

	      _this2.columnsData = colunmsList;
	    };

	    _this2.launchTableData = function (response) {
	      if (!response) return;
	      var valueField = _this2.props.valueField; // valueField = 'id';
	      // let { data = [], page = {} } = response;

	      var data = response.data.data;
	      var tableData = data && data.recordList ? data.recordList : [];
	      tableData.map(function (record, k) {
	        record.key = record[valueField];
	        return record;
	      });
	      _this2.tableData = tableData;
	      _this2.pageCount = data.pageCount || 0;
	      _this2.currPageIndex = data.pageIndex || 0;
	      _this2.totalElements = data.recordCount || 0;
	    };

	    _this2.loadTableData = function (param) {
	      _this2.setState({
	        showLoading: true
	      });

	      var _this = assertThisInitialized(_this2);

	      _this2.getTableData(param).then(function (response) {
	        _this.launchTableData(response);

	        _this.setState({
	          showLoading: false
	        });
	      }).catch(function () {
	        _this.launchTableData({});

	        _this.setState({
	          showLoading: false
	        });
	      });
	    };

	    _this2.searchFilterInfo = function (filterInfo) {
	      var _this = assertThisInitialized(_this2);

	      var _assertThisInitialize2 = assertThisInitialized(_this2),
	          tableBodyUrl = _assertThisInitialize2.tableBodyUrl,
	          param = _assertThisInitialize2.param;

	      _this2.filterInfo = filterInfo;

	      _this2.setState({
	        showLoading: true
	      }, function () {
	        var pageSize = _this.pageSize;
	        var paramWithFilter = Object.assign({}, param, {
	          page: {
	            pageIndex: 0,
	            pageSize: pageSize
	          },
	          likeValue: filterInfo
	        });

	        _this.loadTableData(paramWithFilter);
	      });
	    };

	    _this2.handlePagination = function (index) {
	      var _assertThisInitialize3 = assertThisInitialized(_this2),
	          filterInfo = _assertThisInitialize3.filterInfo;

	      var param = _this2.props.param;
	      Object.keys(filterInfo).forEach(function (key) {
	        if (!filterInfo[key]) {
	          delete filterInfo[key];
	        }
	      });
	      param.page = {
	        pageSize: _this2.pageSize,
	        pageIndex: index - 1
	      };

	      if (Object.keys(filterInfo) > 0) {
	        param.content = JSON.stringify(filterInfo);
	      }

	      _this2.loadTableData(param);
	    };

	    _this2.dataNumSelect = function (index, pageSize) {
	      var _assertThisInitialize4 = assertThisInitialized(_this2),
	          filterInfo = _assertThisInitialize4.filterInfo;

	      var param = _this2.props.param;
	      Object.keys(filterInfo).forEach(function (key) {
	        if (!filterInfo[key]) {
	          delete filterInfo[key];
	        }
	      });
	      param.page = {
	        pageSize: pageSize,
	        pageIndex: _this2.currPageIndex - 1
	      };

	      if (Object.keys(filterInfo) > 0) {
	        param.content = JSON.stringify(filterInfo);
	      }

	      _this2.pageSize = pageSize;

	      _this2.loadTableData(param);
	    };

	    _this2.state = {
	      showLoading: true,
	      selectedDataLength: 0,
	      mustRender: 0
	    };
	    var store = _this2.props.store;
	    var _store$getState$meta = store.getState().meta,
	        viewApplication = _store$getState$meta.viewApplication,
	        refEntity = _store$getState$meta.refEntity;
	    _this2.valueField = refEntity.cEntityKeyFld; //参照真实值

	    _this2.displayField = refEntity.cEntityNameFld; //参照显示值

	    _this2.param = getQueryParam(dataType, refEntity, viewApplication); //数据查询参数

	    _this2.view = viewApplication.view;
	    _this2.tableBodyUrl = '/uniform/' + (refEntity.svcKey ? refEntity.svcKey + '/ref/getRefData' : 'bill/ref/getRefData'); //表体请求url

	    _this2.columnsData = []; //表头数据

	    _this2.tableData = []; //表格数据

	    _this2.pageCount = 1; //总页数

	    _this2.pageSize = "10"; //每页数据数

	    _this2.currPageIndex = 1; //激活页码

	    _this2.fliterFormInputs = [];
	    _this2.filterInfo = {};
	    _this2.checkedArray = [];
	    _this2.checkedMap = {};
	    _this2.inited = false;
	    _this2.value = ''; //默认值，初始化input框值后续加上

	    return _this2;
	  }

	  var _proto = TableRender.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.initComponent();
	  };

	  _proto.render = function render() {
	    var store = this.props.store;
	    var _store$getState$meta2 = store.getState().meta,
	        viewApplication = _store$getState$meta2.viewApplication,
	        refEntity = _store$getState$meta2.refEntity;
	    var _this$props$form = this.props.form,
	        getFieldError = _this$props$form.getFieldError,
	        getFieldProps = _this$props$form.getFieldProps;
	    var cBillName = viewApplication.cBillName,
	        view = viewApplication.view; // let { extendField = "{}" } = refEntity;
	    // extendField = JSON.parse(extendField);

	    var valueField = this.valueField,
	        displayField = this.displayField;
	    var showLoading = this.state.showLoading;
	    var columnsData = this.columnsData,
	        tableData = this.tableData,
	        pageCount = this.pageCount,
	        pageSize = this.pageSize,
	        currPageIndex = this.currPageIndex,
	        fliterFormInputs = this.fliterFormInputs,
	        filterInfo = this.filterInfo;
	    var dataNumSelect = this.dataNumSelect,
	        handlePagination = this.handlePagination,
	        searchFilterInfo = this.searchFilterInfo;
	    var props = {
	      // placeholder: extendField.placeholder,
	      title: cBillName,
	      backdrop: true,
	      disabled: false,
	      multiple: refEntity.bMultiSel,
	      strictMode: true,
	      miniSearch: true,
	      displayField: displayField,
	      valueField: valueField,
	      showLoading: showLoading,
	      columnsData: columnsData,
	      tableData: tableData,
	      pageCount: pageCount,
	      pageSize: pageSize,
	      currPageIndex: currPageIndex,
	      fliterFormInputs: fliterFormInputs,
	      filterInfo: filterInfo,
	      dataNumSelect: dataNumSelect,
	      handlePagination: handlePagination,
	      miniSearchFunc: searchFilterInfo,
	      emptyBut: true //清空按钮是否展示

	    };
	    console.log(props);
	    return React__default.createElement("div", null, React__default.createElement(lib_6$1, _extends_1({}, props, {
	      onSave: this.onSave,
	      onCancel: this.onCancel
	    }, getFieldProps(valueField, {
	      initialValue: "{" + displayField + ":\"\"," + valueField + ":\"\"}",
	      rules: [{
	        message: "请选择参照",
	        pattern: /[^{refname:"",refpk:""}]/
	      }]
	    }))), React__default.createElement("span", {
	      className: "error"
	    }, getFieldError(valueField)));
	  };

	  return TableRender;
	}(React.Component), _temp)) || _class$1);

	var _dec$1, _class$2, _temp$1;

	var RefRender = (_dec$1 = miniStore.connect(), _dec$1(_class$2 = (_temp$1 =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(RefRender, _Component);

	  function RefRender() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

	    _this.renderComp = function () {
	      var store = _this.props.store;
	      var refEntity = store.getState().meta.refEntity;
	      console.log('refEntity.cTpltype=======', refEntity.cTpltype); // 判断 refEntity 需要的参照模板类型

	      switch (refEntity.cTpltype) {
	        case 'Table':
	          // 简单表格
	          return React__default.createElement(TableRender, null);
	        // case 'Tree':
	        //     return <TreeRender />

	        default:
	          return React__default.createElement("div", null, "\u53C2\u7167\u6E32\u67D3\u7C7B\u578B\u9519\u8BEF");
	      }
	    };

	    return _this;
	  }

	  var _proto = RefRender.prototype;

	  _proto.render = function render() {
	    return React__default.createElement("div", null, this.renderComp());
	  };

	  return RefRender;
	}(React.Component), _temp$1)) || _class$2);

	var UITemplateRender =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(UITemplateRender, _Component);

	  function UITemplateRender(props) {
	    return _Component.call(this, props) || this;
	  }

	  var _proto = UITemplateRender.prototype;

	  _proto.render = function render() {
	    var _this$props = this.props,
	        viewApplication = _this$props.viewApplication,
	        viewmodel = _this$props.viewmodel;
	    console.log(viewApplication);
	    console.log(viewmodel);
	    return React__default.createElement("div", null, "UITemplateRender");
	  };

	  return UITemplateRender;
	}(React.Component);

	var _dec$2, _class$3, _temp$2;
	var RenderEngine = (_dec$2 = miniStore.connect(), _dec$2(_class$3 = (_temp$2 =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(RenderEngine, _Component);

	  function RenderEngine(props) {
	    var _this;

	    _this = _Component.call(this, props) || this;

	    _this.renderComp = function () {
	      // 拿到 store 获得指定的元数据
	      var store = _this.props.store;
	      var refEntity = store.getState().meta.refEntity;
	      console.log('render-engine store : ', store.getState()); // 逻辑说明：
	      // 1、如果有 refEntity，则根据多端协议渲染出不同的参照组件
	      // 2、如果无 refEntity，则该协议描述的为普通的UI模板，按正常流程进行渲染

	      if (Object.keys(refEntity).length) {
	        return React__default.createElement(RefRender, null);
	      } else {
	        return React__default.createElement(UITemplateRender, null);
	      }
	    };

	    return _this;
	  }

	  var _proto = RenderEngine.prototype;

	  _proto.render = function render() {
	    return React__default.createElement("div", null, this.renderComp());
	  };

	  return RenderEngine;
	}(React.Component), _temp$2)) || _class$3);

	function store (props) {
	  return miniStore.create(_extends_1({}, props, {
	    count: 0
	  }));
	}

	var MTLComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(MTLComponent, _Component);

	  function MTLComponent(props) {
	    var _this;

	    _this = _Component.call(this, props) || this;
	    _this.meta = {};

	    _this.handleDynamicView = function (url) {
	      if (url) _this.getMetaDataByCustomURL(url); // 该逻辑暂时无用，用于考虑后续的兼容性。
	      else _this.getMetaDataByBrowserURL();
	    };

	    _this.getMetaDataByBrowserURL =
	    /*#__PURE__*/
	    asyncToGenerator(
	    /*#__PURE__*/
	    regenerator.mark(function _callee() {
	      var pathnameArr, _billtype, _billno, _ref2, data;

	      return regenerator.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              pathnameArr = window.location.pathname.split('/');

	              if (pathnameArr[1] == 'meta') {
	                _billtype = pathnameArr[2];
	                _billno = pathnameArr[3];
	              }

	              _context.next = 4;
	              return getMeta("/meta?billtype=" + billtype + "&billno=" + billno);

	            case 4:
	              _ref2 = _context.sent;
	              data = _ref2.data;

	            case 6:
	            case "end":
	              return _context.stop();
	          }
	        }
	      }, _callee);
	    }));

	    _this.getMetaDataByCustomURL =
	    /*#__PURE__*/
	    function () {
	      var _ref3 = asyncToGenerator(
	      /*#__PURE__*/
	      regenerator.mark(function _callee2(url) {
	        var _this$props, serviceCode, refCode, _ref4, data, isNeedRender;

	        return regenerator.wrap(function _callee2$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                _this$props = _this.props, serviceCode = _this$props.serviceCode, refCode = _this$props.refCode;
	                url += "?serviceCode=" + serviceCode + "&refCode=" + refCode;
	                _context2.next = 4;
	                return getMeta(url);

	              case 4:
	                _ref4 = _context2.sent;
	                data = _ref4.data;
	                isNeedRender = _this.state.isNeedRender;

	                if (data.code == 200) {
	                  _this.isRefer(data.data);

	                  _this.setState({
	                    isNeedRender: !isNeedRender
	                  });
	                }

	              case 8:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee2);
	      }));

	      return function (_x) {
	        return _ref3.apply(this, arguments);
	      };
	    }();

	    _this.isRefer = function (data) {
	      if (data.refEntity) {
	        var refEntity = data.refEntity,
	            _data$gridMeta = data.gridMeta,
	            gridMeta = _data$gridMeta === void 0 ? {} : _data$gridMeta;
	        _this.meta = {
	          viewmodel: gridMeta.viewmodel,
	          viewApplication: gridMeta.viewApplication,
	          refEntity: refEntity
	        };
	      } else {
	        var viewmodel = data.viewmodel,
	            viewApplication = data.viewApplication;
	        _this.meta = {
	          viewmodel: viewmodel,
	          viewApplication: viewApplication,
	          refEntity: {}
	        };
	      }

	      _this.setState({
	        isLoading: false
	      });
	    };

	    _this.state = {
	      isNeedRender: false,
	      isLoading: true
	    };
	    return _this;
	  }

	  var _proto = MTLComponent.prototype;

	  _proto.componentWillMount = function componentWillMount() {
	    var url = this.props.url || '';
	    this.handleDynamicView(url);
	  }
	  /**
	   * 处理数据协议请求：
	   * 1、如果初始化SDK的时候主动传了数据协议的URL进来，则进行下一步的操作；
	   * 2、如果初始化的时候没有传入URL，而是根据访问URL的规则拼接动态请求来获取数据。
	   * 浏览器URL示例："/meta/:billtype/:billno"
	   */
	  ;

	  _proto.render = function render() {
	    var isLoading = this.state.isLoading;
	    var _this$props2 = this.props,
	        form = _this$props2.form,
	        dataUrl = _this$props2.dataUrl,
	        refCode = _this$props2.refCode,
	        serviceCode = _this$props2.serviceCode,
	        cItemName = _this$props2.cItemName;

	    if (isLoading) {
	      return React__default.createElement("p", null, "\u6570\u636E\u8BF7\u6C42\u4E2D...");
	    } else {
	      return React__default.createElement(miniStore.Provider, {
	        store: store({
	          meta: this.meta,
	          form: form,
	          dataUrl: dataUrl,
	          refCode: refCode,
	          serviceCode: serviceCode,
	          cItemName: cItemName
	        })
	      }, React__default.createElement(RenderEngine, null));
	    }
	  };

	  return MTLComponent;
	}(React.Component);

	var MTLCore = {
	  MTLComponent: MTLComponent // MTLModel,

	};
	window.MTLCore = MTLCore;

	exports.MTLComponent = MTLComponent;
	exports.default = MTLCore;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
